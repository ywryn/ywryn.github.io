<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Perrin Numbers</title>
      <link href="/2023/07/30/Perrin-Numbers/"/>
      <url>/2023/07/30/Perrin-Numbers/</url>
      
        <content type="html"><![CDATA[<h1 id="Perrin-numbers"><a href="#Perrin-numbers" class="headerlink" title="Perrin numbers"></a>Perrin numbers</h1><p>佩林数（Perrin numbers）是一个整数数列，以P(n)表示，其中 n 为非负整数。佩林数列的定义如下：</p><p>P(0) = 3<br>P(1) = 0<br>P(2) = 2</p><p>对于 n ≥ 3 的情况，佩林数列的每一项都由以下递推公式获得：</p><p>P(n) = P(n-2) + P(n-3)，其中 n ≥ 3</p><p>因此，佩林数列开始为：3、0、2、3、2、5、5、7、10、12、17、…</p><p>佩林数由法国数学家Alfred J. Perrin于1899年引入的，以他的名字命名。这个数列在组合数学和计算机科学中有一些应用。</p><p>佩林数列的前几项为：3、0、2、3、2、5、5、7、10、12、17、…，以此类推。</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">n    = <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>,  <span class="number">9</span>,  <span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">13</span>, <span class="number">14</span></span><br><span class="line">P(n) = <span class="number">3</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">10</span>, <span class="number">12</span>, <span class="number">17</span>, <span class="number">22</span>, <span class="number">29</span>, <span class="number">39</span>, <span class="number">51</span></span><br><span class="line">div? = n, n, y, y, n, y, n, y, n,  n,  n,  y,  n,  y,  n</span><br></pre></td></tr></table></figure><p>佩林数具有很多特殊的性质，观察上面这三行列表，第一行是数列n，第二行则是按照数列n对应的佩林数数列，第三行是P(n)能否整除n，我们观察发现2, 3, 5, 7, 11, 13对应的佩林数和n数列能够正好整除，而这恰好就是0-14范围内的素数列表</p><p>经过继续计算不能看出， P(n) 可被 n 整除的n值似乎都是素数，因此，我们可以提出猜想：</p><blockquote><p>令 S 为所有数字 n 的集合，使得 P(n) 可被 n 整除。 S 是所有素数的集合吗？</p></blockquote><p>结果表明</p><ul><li>对于所有素数 n，P(n) 都能被 n 整除。</li><li>对于P(n) 可被n 整除的任何数字n，我们将其称为“佩林伪素数”（Perrin pseudo-prime）。</li><li>所有素数都是佩林伪素数，但所有佩林伪素数是否都是素数呢</li></ul><p>为了找到这个猜想的反例，我们想要编写一个程序，输出从 1 到 10 亿的所有 佩林伪素数</p><p>如果直接去计算这个范围内的佩林数，很快就会超过计算机可以计算的证书范围，所以我们要考虑如何简化计算过程。</p><p>在这个计算过程中，我们真正关心的不是佩林数大小，而是佩林数能否被n整除，换言之，我们关心 (P(n) mod n) 是否等于 0。</p><p>因此，我们使用 $P(n,m)$ 来表示 (P(n) mod m) ，我们可以使用以下公式来计算 $P(n, m)$</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">P(<span class="number">0</span>, m) = <span class="number">3</span> mod m</span><br><span class="line">P(<span class="number">1</span>, m) = <span class="number">0</span></span><br><span class="line">P(<span class="number">2</span>, m) = <span class="number">2</span> mod m</span><br><span class="line">P(n, m) = (P(n − <span class="number">2</span>, m) + P(n − <span class="number">3</span>, m)) mod m</span><br></pre></td></tr></table></figure><p>现在我们可以只计算 $P(n, n)$ 。请注意，当且仅当 $P(n, n) = 0$ 时，P(n) 才能被 n 整除</p><h1 id="暴力破解（Brute-force）"><a href="#暴力破解（Brute-force）" class="headerlink" title="暴力破解（Brute-force）"></a>暴力破解（Brute-force）</h1><p>第一个想法是采用上面的公式，并直接使用递归算法来实现它们。实现这个方法很简单，用它来检查 n 的小值。 P(n) mod n 的值可以总结在一个表中，该表表明，对于较小的 n 值，没有合数 n 能整除 P(n)。问题是当 n 开始变大时，这个（第一个）程序需要很长时间才能运行。为什么？</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">PerrinNumber&lt;-<span class="keyword">function</span>(n)&#123;</span><br><span class="line">  p0=<span class="number">3</span></span><br><span class="line">  p1=<span class="number">0</span></span><br><span class="line">  p2=<span class="number">2</span></span><br><span class="line">  <span class="keyword">if</span>(n==<span class="number">0</span>)&#123;</span><br><span class="line">    <span class="built_in">return</span>(p0)</span><br><span class="line">  &#125;<span class="keyword">else</span> <span class="keyword">if</span> (n==<span class="number">1</span>)&#123;</span><br><span class="line">    <span class="built_in">return</span>(p1)</span><br><span class="line">  &#125;<span class="keyword">else</span> <span class="keyword">if</span>(n==<span class="number">2</span>)&#123;</span><br><span class="line">    <span class="built_in">return</span>(p2)</span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="built_in">return</span>(PerrinNumber(n-<span class="number">2</span>)+PerrinNumber(n-<span class="number">3</span>))</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">BruteForce&lt;-<span class="keyword">function</span>(n)&#123;</span><br><span class="line">  <span class="keyword">if</span>(n==<span class="number">0</span>||n==<span class="number">1</span>)&#123;</span><br><span class="line">    <span class="built_in">return</span>(<span class="literal">FALSE</span>)</span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="built_in">return</span>(PerrinNumber(n)%%n ==<span class="number">0</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i <span class="keyword">in</span> <span class="built_in">c</span>(<span class="number">0</span>:<span class="number">14</span>))&#123;</span><br><span class="line">  print(paste(<span class="string">&quot;n=&quot;</span>,<span class="built_in">as.character</span>(i),<span class="string">&quot; p(n)=&quot;</span>,<span class="built_in">as.character</span>(PerrinNumber(i)),<span class="string">&quot; res=&quot;</span>,BruteForce(i)))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用system.time()函数计算函数执行时间</span></span><br><span class="line">execution_time &lt;- system.time(BruteForce(<span class="number">10</span>))</span><br></pre></td></tr></table></figure><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="comment"># 使用system.time()函数计算函数执行时间</span></span><br><span class="line">&gt; system.time(BruteForce(<span class="number">10</span>))</span><br><span class="line">用户 系统 流逝 </span><br><span class="line">   <span class="number">0</span>    <span class="number">0</span>    <span class="number">0</span> </span><br><span class="line">&gt; <span class="comment"># 使用system.time()函数计算函数执行时间</span></span><br><span class="line">&gt; system.time(BruteForce(<span class="number">20</span>))</span><br><span class="line">用户 系统 流逝 </span><br><span class="line">   <span class="number">0</span>    <span class="number">0</span>    <span class="number">0</span> </span><br><span class="line">&gt; <span class="comment"># 使用system.time()函数计算函数执行时间</span></span><br><span class="line">&gt; system.time(BruteForce(<span class="number">30</span>))</span><br><span class="line">用户 系统 流逝 </span><br><span class="line"><span class="number">0.02</span> <span class="number">0.00</span> <span class="number">0.02</span> </span><br><span class="line">&gt; <span class="comment"># 使用system.time()函数计算函数执行时间</span></span><br><span class="line">&gt; system.time(BruteForce(<span class="number">40</span>))</span><br><span class="line">用户 系统 流逝 </span><br><span class="line"><span class="number">0.07</span> <span class="number">0.00</span> <span class="number">0.06</span> </span><br><span class="line">&gt; <span class="comment"># 使用system.time()函数计算函数执行时间</span></span><br><span class="line">&gt; system.time(BruteForce(<span class="number">50</span>))</span><br><span class="line">用户 系统 流逝 </span><br><span class="line"><span class="number">1.06</span> <span class="number">0.00</span> <span class="number">1.06</span> </span><br><span class="line">&gt; <span class="comment"># 使用system.time()函数计算函数执行时间</span></span><br><span class="line">&gt; system.time(BruteForce(<span class="number">55</span>))</span><br><span class="line">用户 系统 流逝 </span><br><span class="line"><span class="number">4.51</span> <span class="number">0.00</span> <span class="number">4.51</span> </span><br><span class="line">&gt; <span class="comment"># 使用system.time()函数计算函数执行时间</span></span><br><span class="line">&gt; system.time(BruteForce(<span class="number">60</span>))</span><br><span class="line"> 用户  系统  流逝 </span><br><span class="line"><span class="number">17.96</span>  <span class="number">0.00</span> <span class="number">17.97</span></span><br></pre></td></tr></table></figure><p>上文是通过R语言实现的暴力破解佩林数方法，可以看到算法的时间成本增长非常快，我们想通过这种算法计算较大的佩林数是不现实的。实际上，我们可以验证暴力破解方法的运行时间是以指数形式增长的（通过归纳假设法）</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 前三项由于都是固定值，只需要常数时间就可以返回结果</span></span><br><span class="line"><span class="built_in">T</span> (k) = <span class="number">1</span>, <span class="keyword">for</span> k &lt; <span class="number">3</span></span><br><span class="line"><span class="comment"># n项需要递归调用前n-2和n-3项</span></span><br><span class="line"><span class="built_in">T</span> (n) = <span class="built_in">T</span> (n − <span class="number">2</span>) + <span class="built_in">T</span> (n − <span class="number">3</span>) + <span class="built_in">c</span>, <span class="keyword">for</span> n &gt; <span class="number">2</span></span><br></pre></td></tr></table></figure><p><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20230801230310.jpg"></p><h1 id="动态规划（Dynamic-Programming）"><a href="#动态规划（Dynamic-Programming）" class="headerlink" title="动态规划（Dynamic Programming）"></a>动态规划（Dynamic Programming）</h1><p>为什么暴力破解最后的执行速度这么慢？在了解其运算过程后我们意识到该算法一遍又一遍地重复其工作。特别是，为了计算 P(n)，算法递归计算 P(n − 2) 和 P(n − 3)，这两个递归调用进一步递归调用来计算 P(n − 4)、P(n − 5) 、P(n − 5) 和 P(n − 6)。不难发现P(n − 5) 计算了两次。对于这个特定问题，我们唯一需要知道值 P(k) 的时候是在计算 P(k + 2) 和 P(k + 3) 时。因此，如果我们按升序计算值，记住序列中的最后 3 个值，我们可以轻松计算佩林数</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">PerrinNumber&lt;-<span class="keyword">function</span>(n)&#123;</span><br><span class="line">  p0=<span class="number">3</span></span><br><span class="line">  p1=<span class="number">0</span></span><br><span class="line">  p2=<span class="number">2</span></span><br><span class="line">  res=<span class="number">0</span></span><br><span class="line">  <span class="keyword">if</span>(n==<span class="number">0</span>)&#123;</span><br><span class="line">    <span class="built_in">return</span>(p0)</span><br><span class="line">  &#125;<span class="keyword">else</span> <span class="keyword">if</span> (n==<span class="number">1</span>)&#123;</span><br><span class="line">    <span class="built_in">return</span>(p1)</span><br><span class="line">  &#125;<span class="keyword">else</span> <span class="keyword">if</span>(n==<span class="number">2</span>)&#123;</span><br><span class="line">    <span class="built_in">return</span>(p2)</span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    top=<span class="built_in">c</span>(<span class="number">3</span>,<span class="number">0</span>,<span class="number">2</span>)</span><br><span class="line">    <span class="keyword">for</span>(i <span class="keyword">in</span> <span class="built_in">c</span>(<span class="number">3</span>:n))&#123;</span><br><span class="line">      res=top[<span class="number">2</span>]+top[<span class="number">1</span>]</span><br><span class="line">      top=<span class="built_in">c</span>(top[<span class="number">2</span>],top[<span class="number">3</span>],res)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">return</span>(res)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">DynamicProgramming&lt;-<span class="keyword">function</span>(n)&#123;</span><br><span class="line">  <span class="keyword">if</span>(n==<span class="number">0</span>||n==<span class="number">1</span>)&#123;</span><br><span class="line">    <span class="built_in">return</span>(<span class="literal">FALSE</span>)</span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="built_in">return</span>(PerrinNumber(n)%%n ==<span class="number">0</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i <span class="keyword">in</span> <span class="built_in">c</span>(<span class="number">0</span>:<span class="number">14</span>))&#123;</span><br><span class="line">  print(paste(<span class="string">&quot;n=&quot;</span>,<span class="built_in">as.character</span>(i),<span class="string">&quot; p(n)=&quot;</span>,<span class="built_in">as.character</span>(PerrinNumber(i)),<span class="string">&quot; res=&quot;</span>,DynamicProgramming(i)))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用system.time()函数计算函数执行时间</span></span><br><span class="line">system.time(BruteForce(<span class="number">1000000</span>))</span><br></pre></td></tr></table></figure><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="comment"># 使用system.time()函数计算函数执行时间</span></span><br><span class="line">&gt; system.time(BruteForce(<span class="number">10000</span>))</span><br><span class="line">用户 系统 流逝 </span><br><span class="line">   <span class="number">0</span>    <span class="number">0</span>    <span class="number">0</span> </span><br><span class="line">&gt; <span class="comment"># 使用system.time()函数计算函数执行时间</span></span><br><span class="line">&gt; system.time(BruteForce(<span class="number">100000</span>))</span><br><span class="line">用户 系统 流逝 </span><br><span class="line"><span class="number">0.05</span> <span class="number">0.00</span> <span class="number">0.04</span> </span><br><span class="line">&gt; <span class="comment"># 使用system.time()函数计算函数执行时间</span></span><br><span class="line">&gt; system.time(BruteForce(<span class="number">1000000</span>))</span><br><span class="line">用户 系统 流逝 </span><br><span class="line"><span class="number">0.51</span> <span class="number">0.00</span> <span class="number">0.51</span> </span><br></pre></td></tr></table></figure><p>可以看到算法的运行时间降低的非常快，算法已经从指数级降低为了线性时间算法！</p><h1 id="快速求幂算法（Fast-Exponentiation-Algorithm）"><a href="#快速求幂算法（Fast-Exponentiation-Algorithm）" class="headerlink" title="快速求幂算法（Fast Exponentiation Algorithm）"></a>快速求幂算法（Fast Exponentiation Algorithm）</h1><p>线性时间复杂度是否就是目前的极限呢，看起来要计算第n项我们必须要知道第n-2项，以此类推还需要知道第n-4项等等，线性时间看起来已经是最优的了，但实际上我们可以在O(logn)时间内实现计算过程，这需要采用分而治之的思想</p><p>回想如何将矩阵乘以向量，我们看到对于任何值 n ≥ 3，我们可以写出以下线性代数方程，它表示最后一个算法的一次迭代</p><p>$$<br>\begin{pmatrix}<br>0 &amp; 1 &amp; 1 \<br>1 &amp; 0 &amp; 0 \<br>0 &amp; 1 &amp; 0 \<br>\end{pmatrix}<br>*<br>\begin{pmatrix}<br>P(n-1) \<br>P(n-2) \<br>P(n-3) \<br>\end{pmatrix}<br>=<br>\begin{pmatrix}<br>P(n) \<br>P(n-1) \<br>P(n-2) \<br>\end{pmatrix}<br>$$</p><p>回想一下，对于 n ≥ 3，我们定义 P(n) = P(n − 2) + P(n − 3)</p><p>整个表达式可以乘以同一个矩阵，以获得包含 P(n + 1)、P(n) 和 P(n − 1) 的向量。扩展这个论点，如果 M 代表上面表达式中的矩阵，V 代表初始值的向量： (2, 0, 3)T ，那么我们将矩阵 M 的 (n − 2) 次方与初始值相乘得到：</p><p>$$<br>M^{n-2}*V=<br>\begin{pmatrix}<br>P(n) \<br>P(n-1) \<br>P(n-2) \<br>\end{pmatrix}<br>$$</p><p>所以现在，为了计算第 n 个 Perrin 数，我们只需要将 3 × 3 矩阵求幂</p><p>而在求幂的计算过程中，我们也可以进行简化，例如我们要求偶数次幂$M^{16}$，其本质上就是求$(((M^2)^2)^2)^2$，这样我们就把需要进行n次的计算过程简化为了logn，对于奇数次幂，其处理也非常简单，我们只需要利用递归的方式对其进行归纳</p><p><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20230801234145.jpg"></p><p>很容易证明 FastExp(a,n) 最多执行 $2\log_2 n$ 次递归调用。假设指数整数 n ≥ 0。因此需要 O(log n) 次乘法来计算</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">FastExp&lt;-<span class="keyword">function</span>(a,n)&#123;</span><br><span class="line">  <span class="keyword">if</span> (n == <span class="number">0</span>)&#123;<span class="built_in">return</span>(<span class="number">1</span>)&#125;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (n == <span class="number">1</span>)&#123;<span class="built_in">return</span>(a)&#125;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (n %% <span class="number">2</span> == <span class="number">0</span>)&#123;</span><br><span class="line">    t &lt;- FastExp(a,n/<span class="number">2</span>)</span><br><span class="line">    <span class="built_in">return</span>(t %*% t)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="built_in">return</span>(a %*% FastExp(a,(n - <span class="number">1</span>)))</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">n=<span class="number">14</span></span><br><span class="line">(FastExp(a,n-<span class="number">2</span>) %*% v)[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">PerrinNumber&lt;-<span class="keyword">function</span>(n)&#123;</span><br><span class="line">  p0=<span class="number">3</span></span><br><span class="line">  p1=<span class="number">0</span></span><br><span class="line">  p2=<span class="number">2</span></span><br><span class="line">  res=<span class="number">0</span></span><br><span class="line">  a &lt;- matrix(<span class="built_in">c</span>(<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>), nrow = <span class="number">3</span>, ncol = <span class="number">3</span>)</span><br><span class="line">  v= matrix(<span class="built_in">c</span>(<span class="number">2</span>,<span class="number">0</span>,<span class="number">3</span>), nrow = <span class="number">3</span>, ncol = <span class="number">1</span>)</span><br><span class="line">  <span class="keyword">if</span>(n==<span class="number">0</span>)&#123;</span><br><span class="line">    <span class="built_in">return</span>(p0)</span><br><span class="line">  &#125;<span class="keyword">else</span> <span class="keyword">if</span> (n==<span class="number">1</span>)&#123;</span><br><span class="line">    <span class="built_in">return</span>(p1)</span><br><span class="line">  &#125;<span class="keyword">else</span> <span class="keyword">if</span>(n==<span class="number">2</span>)&#123;</span><br><span class="line">    <span class="built_in">return</span>(p2)</span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="built_in">return</span>((FastExp(a,n-<span class="number">2</span>) %*% v)[<span class="number">1</span>])</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ThirdTry&lt;-<span class="keyword">function</span>(n)&#123;</span><br><span class="line">  <span class="keyword">if</span>(n==<span class="number">0</span>||n==<span class="number">1</span>)&#123;</span><br><span class="line">    <span class="built_in">return</span>(<span class="literal">FALSE</span>)</span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="built_in">return</span>(PerrinNumber(n)%%n ==<span class="number">0</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i <span class="keyword">in</span> <span class="built_in">c</span>(<span class="number">0</span>:<span class="number">14</span>))&#123;</span><br><span class="line">  print(paste(<span class="string">&quot;n=&quot;</span>,<span class="built_in">as.character</span>(i),<span class="string">&quot; p(n)=&quot;</span>,<span class="built_in">as.character</span>(PerrinNumber(i)),<span class="string">&quot; res=&quot;</span>,ThirdTry(i)))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用system.time()函数计算函数执行时间</span></span><br><span class="line">system.time(ThirdTry(<span class="number">100000000000000000000</span>))</span><br></pre></td></tr></table></figure><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="comment"># 使用system.time()函数计算函数执行时间</span></span><br><span class="line">&gt; system.time(ThirdTry(<span class="number">1000000000000000000</span>))</span><br><span class="line">用户 系统 流逝 </span><br><span class="line">   <span class="number">0</span>    <span class="number">0</span>    <span class="number">0</span> </span><br><span class="line">&gt; <span class="comment"># 使用system.time()函数计算函数执行时间</span></span><br><span class="line">&gt; system.time(ThirdTry(<span class="number">100000000000000000000</span>))</span><br><span class="line">用户 系统 流逝 </span><br><span class="line">   <span class="number">0</span>    <span class="number">0</span>    <span class="number">0</span> </span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> UOA </category>
          
          <category> COMPSCI 320 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Access Control</title>
      <link href="/2023/07/29/Access-Control/"/>
      <url>/2023/07/29/Access-Control/</url>
      
        <content type="html"><![CDATA[<h1 id="FOCUS-OF-THIS-LECTURE"><a href="#FOCUS-OF-THIS-LECTURE" class="headerlink" title="FOCUS OF THIS LECTURE"></a>FOCUS OF THIS LECTURE</h1><ul><li>Identify access control requirements</li><li>Know access control elements</li><li>Understand access control systems</li></ul><h1 id="授权（AUTHORISATION）"><a href="#授权（AUTHORISATION）" class="headerlink" title="授权（AUTHORISATION）"></a>授权（AUTHORISATION）</h1><p>向系统实体授予权利或权限以提供对特定资源的访问的过程，也称访问控制（Access Control）</p><h2 id="访问控制要求（ACCESS-CONTROL-REQUIREMENTS）"><a href="#访问控制要求（ACCESS-CONTROL-REQUIREMENTS）" class="headerlink" title="访问控制要求（ACCESS CONTROL REQUIREMENTS）"></a>访问控制要求（ACCESS CONTROL REQUIREMENTS）</h2><ul><li>可靠的输入（Reliable inputs）<ul><li>经过身份认证的实体，例如使用UPI或密码登录</li><li>真实的资料，例如学生或教职工成员</li></ul></li><li>最小特权（Least privilege）<ul><li> 最小特权原则表示授予完成某项工作的最低访问权限集，例如，访问单个课程与所有课程</li></ul></li><li>管理职责（Administrative duties）<ul><li>只有特殊实体才能管理访问权限，例如，管理员授予、撤销或更新访问权限</li></ul></li></ul><h2 id="访问控制组件（AC-ELEMENTS）"><a href="#访问控制组件（AC-ELEMENTS）" class="headerlink" title="访问控制组件（AC ELEMENTS）"></a>访问控制组件（AC ELEMENTS）</h2><ul><li>主体（Subject）<ul><li>可以访问对象的实体，它可以是用户也可以是用户授权的进程</li></ul></li><li>对象（Object）<ul><li>需要被保护的实体，例如文件、目录或其他资源</li></ul></li><li>访问权限（Access right）<ul><li>一个访问权限r ∈ R 描述了一个主体s ∈ S 如何访问对象o ∈ O </li><li>例如：读、写、执行、删除、创建、搜索等</li></ul></li></ul><h2 id="访问控制系统（AC-SYSTEM）"><a href="#访问控制系统（AC-SYSTEM）" class="headerlink" title="访问控制系统（AC SYSTEM）"></a>访问控制系统（AC SYSTEM）</h2><ul><li>访问控制方法（AC Function）f(s, o, r)<ul><li>它查找（s, o）组合的访问权限 r </li><li>如果匹配成功，则允许访问，否则不允许访问</li></ul></li><li>安全管理员（Security administrator）<ul><li>管理访问权限的实体</li></ul></li><li>审计员（Auditor）<ul><li>检查整个授权系统的实体</li></ul></li></ul><p><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20230730135723.jpg"></p><h2 id="访问控制模型（AC-MODELS）"><a href="#访问控制模型（AC-MODELS）" class="headerlink" title="访问控制模型（AC MODELS）"></a>访问控制模型（AC MODELS）</h2><h3 id="自主访问控制-Discretionary-Access-Control-DAC"><a href="#自主访问控制-Discretionary-Access-Control-DAC" class="headerlink" title="自主访问控制 Discretionary Access Control (DAC)"></a>自主访问控制 Discretionary Access Control (DAC)</h3><p>用户可以自主保护自己拥有的内容</p><ul><li>所有者可以授予主体访问权限</li><li>根据请求者的身份授予访问权限</li><li>这些机制足以满足诚实用户的要求</li><li>容易受到特洛伊木马的攻击</li><li>DAC 用于操作系统<ul><li>例如，Linux 文件权限: rwxr-x–x</li></ul></li></ul><p>访问控制矩阵</p><p><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20230730140543.jpg"></p><h3 id="基于角色的访问控制-ROLE-BASED-ACCESS-CONTROL-RBAC"><a href="#基于角色的访问控制-ROLE-BASED-ACCESS-CONTROL-RBAC" class="headerlink" title="基于角色的访问控制 ROLE-BASED ACCESS CONTROL (RBAC)"></a>基于角色的访问控制 ROLE-BASED ACCESS CONTROL (RBAC)</h3><p>RBAC 将角色映射到访问权限</p><ul><li>支持复杂的访问控制</li><li>减少管理错误</li><li>易于管理<ul><li>将用户移入和移出角色</li><li>将权限移入和移出角色</li><li>非常灵活</li></ul></li><li>最小特权<ul><li>根据需要限制访问</li><li>通过约束进行职责分离</li></ul></li></ul><p>RBAC模型构成</p><ul><li>用户User<ul><li>通常是人类</li><li>用户被分配角色：用户分配（UA）</li></ul></li><li>权限Permissions<ul><li>批准访问某些对象的模式</li><li>权限代表可以对对象执行哪些操作</li></ul></li><li>角色Roles<ul><li>职务</li><li>角色分配权限：权限分配（PA）</li></ul></li><li>分配Assignments<ul><li>用户角色和角色权限</li></ul></li><li>会话Session<ul><li>用户到角色的映射</li><li>会话是用户和已分配角色的激活子集之间的映射</li></ul></li><li>约束Constraints<ul><li>会话、分配和角色</li></ul></li></ul><p><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20230730142000.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> UOA </category>
          
          <category> COMPSCI 316 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络安全 </tag>
            
            <tag> 计算机安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Password</title>
      <link href="/2023/07/25/Password/"/>
      <url>/2023/07/25/Password/</url>
      
        <content type="html"><![CDATA[<h1 id="FOCUS-OF-THIS-LECTURE"><a href="#FOCUS-OF-THIS-LECTURE" class="headerlink" title="FOCUS OF THIS LECTURE"></a>FOCUS OF THIS LECTURE</h1><ul><li>Understand identification and authentication</li><li> Learn how passwords are protected</li></ul><h1 id="身份识别和认证"><a href="#身份识别和认证" class="headerlink" title="身份识别和认证"></a>身份识别和认证</h1><h2 id="身份识别（IDENTIFICATION）"><a href="#身份识别（IDENTIFICATION）" class="headerlink" title="身份识别（IDENTIFICATION）"></a>身份识别（IDENTIFICATION）</h2><p>系统实体提供其声明的身份的过程，例如UPI（统一支付接口）</p><h2 id="认证（Authentication）"><a href="#认证（Authentication）" class="headerlink" title="认证（Authentication）"></a>认证（Authentication）</h2><p><strong>验证</strong>系统实体声明的身份的过程，例如PIN码或秘密</p><h1 id="密码漏洞（PASSWORD-VULNERABILITIES）"><a href="#密码漏洞（PASSWORD-VULNERABILITIES）" class="headerlink" title="密码漏洞（PASSWORD VULNERABILITIES）"></a>密码漏洞（PASSWORD VULNERABILITIES）</h1><h2 id="Offline-dictionary-attack-离线字典攻击"><a href="#Offline-dictionary-attack-离线字典攻击" class="headerlink" title="Offline dictionary attack 离线字典攻击"></a>Offline dictionary attack 离线字典攻击</h2><p>离线字典攻击就是攻击者获取到口令文件（字典），有了离线字典文件后,针对口令文件攻击者直接查表，一旦哈希值匹配成功了，那么就可以得到口令明文。</p><p>应对策略：</p><ul><li>防止未经授权访问密码文件</li><li>识别入侵的入侵检测措施</li><li>快速重新发布密码</li></ul><h2 id="Specific-account-attack-特定账户攻击"><a href="#Specific-account-attack-特定账户攻击" class="headerlink" title="Specific account attack 特定账户攻击"></a>Specific account attack 特定账户攻击</h2><p>攻击者针对某些特定账户进行攻击，不断猜测并提交密码直到成功</p><p>应对策略：</p><ul><li>尝试失败一定次数后锁定机制</li><li>另一种方法是逐渐延迟每次后续尝试</li></ul><h2 id="Popular-password-attack-流行密码攻击"><a href="#Popular-password-attack-流行密码攻击" class="headerlink" title="Popular password attack 流行密码攻击"></a>Popular password attack 流行密码攻击</h2><p>用户倾向于选择容易记住的密码（例如：“123456”），这使得密码很容易被猜出，攻击者可以针对各种用户 ID 尝试常用密码</p><p>应对策略：</p><ul><li>实施复杂的密码策略</li><li>扫描 IP 地址和客户端 cookie 以获取提交模式</li><li>入侵检测</li></ul><h2 id="Password-guessing-against-single-user-针对单个用户的密码猜测"><a href="#Password-guessing-against-single-user-针对单个用户的密码猜测" class="headerlink" title="Password guessing against single user 针对单个用户的密码猜测"></a>Password guessing against single user 针对单个用户的密码猜测</h2><p>了解单个用户的相关信息，了解系统密码策略，使用两者来猜测密码</p><p>应对策略：</p><ul><li>教育用户</li><li>执行复杂的密码策略</li></ul><h2 id="Workstation-hijacking-工作站劫持"><a href="#Workstation-hijacking-工作站劫持" class="headerlink" title="Workstation hijacking 工作站劫持"></a>Workstation hijacking 工作站劫持</h2><p>攻击者等待，直到登录的工作站无人值守</p><p>应对策略：</p><ul><li>一段时间不活动后注销</li><li>入侵检测方案可用于检测用户行为的变化</li></ul><h2 id="Exploiting-user-mistakes-利用用户错误"><a href="#Exploiting-user-mistakes-利用用户错误" class="headerlink" title="Exploiting user mistakes 利用用户错误"></a>Exploiting user mistakes 利用用户错误</h2><p>用户可能会使用系统分配的密码，根本问题是这些密码可能很难记住，攻击者可以使用社会工程技巧来诱骗用户泄露密码，其次，许多系统附带了管理员的默认密码</p><p>应对策略：</p><ul><li>更改默认密码</li><li>教育用户</li></ul><h2 id="Exploiting-same-password-use-利用相同的密码复用"><a href="#Exploiting-same-password-use-利用相同的密码复用" class="headerlink" title="Exploiting same password use 利用相同的密码复用"></a>Exploiting same password use 利用相同的密码复用</h2><p>用户可能在不同的服务选择使用相同的密码，攻击者可以从一个来源获知密码，他们可以尝试在用户可能使用的其他服务中使用相同的密码进行攻击</p><p>应对策略：</p><ul><li>选择不同的密码</li><li>教育用户</li></ul><h2 id="Electronic-monitoring-电子监控"><a href="#Electronic-monitoring-电子监控" class="headerlink" title="Electronic monitoring 电子监控"></a>Electronic monitoring 电子监控</h2><p>以明文形式传递密码，攻击者很容易窃听并获取密码</p><p>应对策略：</p><ul><li>切勿以明文形式发送密码</li><li>密码安全传输的技术解决方案</li></ul><h1 id="加盐的密码加载过程（LOADING-PASSWORD-SALT-WITH-HASH）"><a href="#加盐的密码加载过程（LOADING-PASSWORD-SALT-WITH-HASH）" class="headerlink" title="加盐的密码加载过程（LOADING PASSWORD: SALT WITH HASH）"></a>加盐的密码加载过程（LOADING PASSWORD: SALT WITH HASH）</h1><p>为了缓解某些密码漏洞，可以使用盐，盐可以是随机数，盐会增加攻击者的工作量</p><p><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20230725211849.jpg"></p><p>注册时，服务器可以存储 </p><ul><li>UserID </li><li>Salt</li><li>加盐密码的哈希值</li></ul><h1 id="加盐的密码验证过程（VERIFYING-PASSWORD-SALT-WITH-HASH）"><a href="#加盐的密码验证过程（VERIFYING-PASSWORD-SALT-WITH-HASH）" class="headerlink" title="加盐的密码验证过程（VERIFYING PASSWORD: SALT WITH HASH）"></a>加盐的密码验证过程（VERIFYING PASSWORD: SALT WITH HASH）</h1><p>用户提供用户 ID 和密码，查找相应的盐和哈希，根据检索到的盐和输入的密码重新计算哈希，如果结果匹配，则接受密码</p><p><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20230725212215.jpg"></p><h1 id="随机盐的好处"><a href="#随机盐的好处" class="headerlink" title="随机盐的好处"></a>随机盐的好处</h1><ul><li>很难猜测一个用户是否为多个服务选择相同的密码</li><li>很难猜测多个用户是否为单个服务（或多个）选择相同的密码</li><li>使离线字典攻击变得困难</li></ul><p>攻击者可以使用彩虹表来预先计算带有加盐哈希值的字典</p><ul><li>解决方案是使用大盐</li></ul><h1 id="多重身份验证-MULTI-FACTOR-AUTHENTICATION"><a href="#多重身份验证-MULTI-FACTOR-AUTHENTICATION" class="headerlink" title="多重身份验证 MULTI-FACTOR AUTHENTICATION"></a>多重身份验证 MULTI-FACTOR AUTHENTICATION</h1><p>不同的身份验证因素或方式 </p><p>Different factors or means of authentication</p><ul><li>Something you know<ul><li>E.g., PIN or password</li></ul></li><li>Something you have (token)<ul><li>E.g., smartcard</li></ul></li><li>Something you are (static biometrics)<ul><li>E.g., fingerprint</li></ul></li><li>Something you do (dynamic biometrics)<ul><li>E.g., voice pattern or behaviour analysis</li></ul></li></ul><p>使用两个或多个因素来启用双因素或多因素身份验证</p><h1 id="对策（COUNTERMEASURES）总结"><a href="#对策（COUNTERMEASURES）总结" class="headerlink" title="对策（COUNTERMEASURES）总结"></a>对策（COUNTERMEASURES）总结</h1><ul><li>Educate users</li><li>Use multi-factor authentication</li><li>Better notifications to users for password reset</li><li>Phone call and reply by voice in case of</li><li>password reset</li></ul>]]></content>
      
      
      <categories>
          
          <category> UOA </category>
          
          <category> COMPSCI 316 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络安全 </tag>
            
            <tag> 计算机安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GDPR</title>
      <link href="/2023/07/22/GDPR/"/>
      <url>/2023/07/22/GDPR/</url>
      
        <content type="html"><![CDATA[<h1 id="DPD"><a href="#DPD" class="headerlink" title="DPD"></a>DPD</h1><p>“Data Protection Directive”，欧盟隐私和人权法的组成部分，DPD 负责个人数据的保护和处理，它<strong>不保护</strong>欧盟以外的欧盟公民的个人数据</p><h1 id="GDPR"><a href="#GDPR" class="headerlink" title="GDPR"></a>GDPR</h1><p>GDPR (General Data Protection Regulation) 是欧盟关于数据保护的法规，它协调了整个欧盟的数据隐私法，保护并增强了欧盟公民的数据隐私，重塑了欧盟处理数据隐私的方式。</p><h2 id="为什么选择GDPR"><a href="#为什么选择GDPR" class="headerlink" title="为什么选择GDPR"></a>为什么选择GDPR</h2><ul><li>GDPR 取代了 DPD</li><li>GDPR 依法保护欧盟境外欧盟公民的个人数据</li><li>GDPR 扩展了个人数据的定义<ul><li>照片、音频、视频、金融交易、社交媒体帖子等。</li><li>设备标识符（IP 地址、IMEI 号码）</li><li>浏览记录</li><li>遗传信息</li></ul></li></ul><h2 id="数据Data"><a href="#数据Data" class="headerlink" title="数据Data"></a>数据Data</h2><ul><li>Personal data：与已识别或可识别人员相关的任何信息，例如电子邮件ID</li><li>De-identified data：去识别化数据，没有任何个人标识的个人数据（Personal data），例如匿名帖子</li><li>Anonymised data：匿名数据，没有任何个人标识的个人数据，无法进行重新识别，例如首次购房者的平均年龄</li></ul><h2 id="常用术语"><a href="#常用术语" class="headerlink" title="常用术语"></a>常用术语</h2><h3 id="Data-subject-数据主体"><a href="#Data-subject-数据主体" class="headerlink" title="Data subject 数据主体"></a>Data subject 数据主体</h3><p>数据主体是指其个人数据被收集、持有或处理的任何人，例如学生或教职工</p><h3 id="Data-controller-数据控制者"><a href="#Data-controller-数据控制者" class="headerlink" title="Data controller 数据控制者"></a>Data controller 数据控制者</h3><p>确定个人数据处理的目的和方式的实体，例如大学或企业</p><h3 id="Data-processor-数据处理器"><a href="#Data-processor-数据处理器" class="headerlink" title="Data processor 数据处理器"></a>Data processor 数据处理器</h3><p>代表数据控制者处理个人数据的实体，例如Google(gmail)</p><h2 id="GDPR原则"><a href="#GDPR原则" class="headerlink" title="GDPR原则"></a>GDPR原则</h2><ul><li>合法、公平、透明<ul><li>规定所收集的数据必须合法、公正、透明地处理</li></ul></li><li>目的限制<ul><li>规定不得以客户未知的方式使用客户数据</li></ul></li><li>数据最小化<ul><li>规定仅必须为特定功能收集该功能严格要求的数据</li></ul></li><li>准确性<ul><li>规定从客户收集的数据必须正确存储并定期更新</li></ul></li><li>保密性和完整性<ul><li>保密性规定，只有获得必要授权的人才能检索客户的数据。</li><li>完整性规定检索到的客户数据只能由被授权进行此类更改的人员更改</li></ul></li><li>问责机制<ul><li>一项附加原则，问责制原则要求您对您处理个人数据的行为以及如何遵守其他原则负责。</li></ul></li></ul><h2 id="GDPR主要变化"><a href="#GDPR主要变化" class="headerlink" title="GDPR主要变化"></a>GDPR主要变化</h2><ul><li>扩大领土范围<ul><li>Also known as <strong>extraterritorial applicability</strong>，也被称为域外适用</li><li>GDPR 适用于所有处理欧盟数据主体个人数据的公司</li><li>GDPR 适用于数据控制者和数据处理者</li></ul></li><li>处罚机制（Penalties）<ul><li>违反 GDPR 的组织可能会被罚款</li></ul></li><li>授权许可机制（Consent）<ul><li>同意请求必须以易于理解且易于获取的形式提出</li><li>必须使用清晰易懂的语言获得同意</li><li>撤回同意必须很容易</li></ul></li><li>数据主体权利<ul><li>违规通知</li><li>访问权</li><li>被遗忘权</li><li>数据可移植</li><li>隐私设计</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> UOA </category>
          
          <category> COMPSCI 316 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络安全 </tag>
            
            <tag> 计算机安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>稳定匹配问题</title>
      <link href="/2023/07/21/%E7%A8%B3%E5%AE%9A%E5%8C%B9%E9%85%8D%E9%97%AE%E9%A2%98/"/>
      <url>/2023/07/21/%E7%A8%B3%E5%AE%9A%E5%8C%B9%E9%85%8D%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p><a href="https://zhuanlan.zhihu.com/p/225925804">参考：经典算法问题——稳定匹配（Stable Matching）</a></p><h1 id="Gale-Shapley-Algorithms"><a href="#Gale-Shapley-Algorithms" class="headerlink" title="Gale-Shapley Algorithms"></a>Gale-Shapley Algorithms</h1><p>简称“GS 算法”，也称为延迟接受算法。是 Gale 和 Shapley 为了寻找一个稳定匹配而设计出的市场机制。运行时间在算法输入的大小上是线性的。根据其使用方式，它可以找到对匹配一侧的参与者或另一侧的参与者最佳的解决方案。</p><p>问题描述<br>给出一个 $n$ 个男性的集合 $M$，和 $n$ 个女性的集合 $W$，其中：</p><ul><li>每位男性根据对所有女性的心仪程度从高至低进行排名；</li><li>每位女性根据对所有男性的心仪程度从高至低进行排名。</li></ul><p>根据以上条件，我们需要找到一个“稳定匹配”。</p><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><h3 id="匹配-Matching"><a href="#匹配-Matching" class="headerlink" title="匹配 Matching"></a>匹配 Matching</h3><p>匹配 $S$ 是一个包含有序数对 $m-w$ 的集合，其中 $m \in M$ 且$w \in W$，其中：</p><ul><li>每个男性最多出现在一个数对中；</li><li>每个女性最多出现在一个数对中。</li></ul><h3 id="完美匹配-Perfect-matching"><a href="#完美匹配-Perfect-matching" class="headerlink" title="完美匹配 Perfect matching"></a>完美匹配 Perfect matching</h3><p>如果 $\left| S \right|=\left| M \right|=\left| W \right|=n$ 则匹配$S$是完美匹配，也就是说，<strong>男女数量相等</strong>且都有<strong>唯一匹配</strong>的对象。</p><h3 id="不稳定因素-Unstable-pair"><a href="#不稳定因素-Unstable-pair" class="headerlink" title="不稳定因素 Unstable pair"></a>不稳定因素 Unstable pair</h3><p>给出一个完美匹配 $S$，如果其中存在一个男性$m$和一个女性$w$同时满足下列条件：</p><ul><li>不在匹配$S$中；</li><li>$m$比起他当前配偶，更喜欢$w$;</li><li>$w$比起她当前配偶，更喜欢$m$。</li></ul><p>则称男性$m$和女性$w$是不稳定的，也就是说，$(m,w)$是不稳定因素。</p><h3 id="稳定匹配-Stable-matching"><a href="#稳定匹配-Stable-matching" class="headerlink" title="稳定匹配 Stable matching"></a>稳定匹配 Stable matching</h3><p>一个不存在<strong>不稳定因素</strong>的完美匹配。</p><h1 id="Gale-Shapley-算法"><a href="#Gale-Shapley-算法" class="headerlink" title="Gale-Shapley 算法"></a>Gale-Shapley 算法</h1><p>一个直观的，确保能找到一个稳定匹配的算法</p><p><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/v2-0875a5c538f6363cb38d3b4407b39a5e_r.jpg"></p><h2 id="算法策略"><a href="#算法策略" class="headerlink" title="算法策略"></a>算法策略</h2><ul><li>男性策略：单身的男性会主动出击，根据喜好降序向所有女性求婚，直到有配偶为止；</li><li>女性策略：被动等待男性求婚，如果女性仍处于单身，则直接接受；有配偶的情况下被更心仪的男性求婚，则会抛弃原来的，接受更好的。</li></ul><h2 id="算法特征"><a href="#算法特征" class="headerlink" title="算法特征"></a>算法特征</h2><p>G-S算法具有：有穷性、完美性、稳定性、男性最佳分配、女性最劣分配等特征</p><ul><li>有穷性：算法最多在$n^2$次 while 迭代后一定会结束。</li><li>完美性：算法中所有男性和女性都匹配完毕。</li><li>稳定性：算法产生的匹配中，不会有不稳定因素</li><li>男性最佳分配 Man-optimal Assignment：GS 算法中每个男性都能分配到最佳的正当配偶，所以 GS 算法得到的分配一定是男性最佳分配。<ul><li>正当配偶 Valid Partner：如果存在一个稳定匹配中男性和女性匹配在一起，则称女性是男性的正当配偶。</li></ul></li><li>女性最劣分配：GS 算法中女性一定分配到的是最差的正当配偶。</li></ul><h2 id="算法实现"><a href="#算法实现" class="headerlink" title="算法实现"></a>算法实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Gender.Man;</span><br><span class="line"><span class="keyword">import</span> Gender.Woman;</span><br><span class="line"><span class="keyword">import</span> edu.princeton.cs.algs4.In;</span><br><span class="line"><span class="keyword">import</span> edu.princeton.cs.algs4.StdOut;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 盖尔沙普利算法的实现</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GaleShapley</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Man[] ManGroup;</span><br><span class="line">    <span class="keyword">public</span> Woman[] WomanGroup;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">GaleShapley</span><span class="params">(In in1,In in2)</span></span>&#123;</span><br><span class="line">        CreateManGroup(in1);</span><br><span class="line">        CreateWomanGroup(in2);</span><br><span class="line">        InsertManFavor();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">CreateManGroup</span><span class="params">(In in)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> numMan=in.readInt();</span><br><span class="line">        <span class="keyword">int</span> numWoman=in.readInt();</span><br><span class="line">        ManGroup=<span class="keyword">new</span> Man[numMan];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;numMan;i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> manName=in.readInt();</span><br><span class="line">            Man man=<span class="keyword">new</span> Man((<span class="keyword">char</span>) manName,numWoman);</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;numWoman;j++)&#123;</span><br><span class="line">                <span class="keyword">int</span> Num=in.readInt()-<span class="number">1</span>;</span><br><span class="line">                man.favorNum[j]=Num;</span><br><span class="line">            &#125;</span><br><span class="line">            ManGroup[i]=man;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">CreateWomanGroup</span><span class="params">(In in)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> numMan=in.readInt();</span><br><span class="line">        <span class="keyword">int</span> numWoman=in.readInt();</span><br><span class="line">        WomanGroup=<span class="keyword">new</span> Woman[numWoman];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;numWoman;i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> womanName=in.readInt();</span><br><span class="line">            Man[] men=<span class="keyword">new</span> Man[numMan];</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;numMan;j++)&#123;</span><br><span class="line">                <span class="keyword">int</span> favorNum=in.readInt()-<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">if</span> (favorNum&lt;<span class="number">0</span>) <span class="keyword">continue</span>;</span><br><span class="line">                Man favorMan=ManGroup[favorNum];</span><br><span class="line">                men[j]=favorMan;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            WomanGroup[i]=<span class="keyword">new</span> Woman((<span class="keyword">char</span>)womanName,men);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">InsertManFavor</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(Man man:ManGroup)&#123;</span><br><span class="line">            man.EntryQueue(WomanGroup);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        GaleShapley GS=<span class="keyword">new</span> GaleShapley(<span class="keyword">new</span> In(args[<span class="number">0</span>]),<span class="keyword">new</span> In(args[<span class="number">1</span>]));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//初始化num=1</span></span><br><span class="line">        <span class="keyword">int</span> num=<span class="number">1</span>;</span><br><span class="line">        <span class="comment">//开始循环进行邀请</span></span><br><span class="line">        <span class="keyword">while</span>(num!=<span class="number">0</span>)&#123;</span><br><span class="line">            StdOut.printf(<span class="string">&quot;-------------------------------------------&quot;</span> +</span><br><span class="line">                    <span class="string">&quot;\n开始一轮邀请&quot;</span> +</span><br><span class="line">                    <span class="string">&quot;\n-------------------------------------------\n&quot;</span>);</span><br><span class="line">            num=<span class="number">0</span>;  <span class="comment">//将num设为0</span></span><br><span class="line">            <span class="comment">//男方进行一轮邀请</span></span><br><span class="line">            <span class="keyword">for</span>(Man man:GS.ManGroup)&#123;</span><br><span class="line">                num+=man.Invitation();  <span class="comment">//不断将返回值加入num</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//num仍然等于0说明一整轮都没有成功“发出”邀请</span></span><br><span class="line">            <span class="comment">//注意是发出邀请，只要女方成功接收到邀请就返回1（不需要女方一定同意邀请），否则返回0.</span></span><br><span class="line">            <span class="comment">//说明所有男性要么已经有暂时配对成功的对象，要么已经出局</span></span><br><span class="line">            <span class="comment">//这种情况就可以结束循环，打印结果了</span></span><br><span class="line">        &#125;</span><br><span class="line">        StdOut.println(<span class="string">&quot;\n最终结果\n&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span>(Man man:GS.ManGroup)&#123;</span><br><span class="line">            StdOut.printf(<span class="string">&quot;man:%c --&gt; woman:%c\n&quot;</span>,man.name(),man.GirlName());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> UOA </category>
          
          <category> COMPSCI 320 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>COMPSCI 316: Lectrue 3</title>
      <link href="/2023/07/18/COMPSCI316-Lectrue3/"/>
      <url>/2023/07/18/COMPSCI316-Lectrue3/</url>
      
        <content type="html"><![CDATA[<h1 id="Lectrue-3"><a href="#Lectrue-3" class="headerlink" title="Lectrue 3"></a>Lectrue 3</h1><ul><li>Understand computer security</li><li>Understand human aspect of security</li><li>Understand network security</li><li>Next, we can build on these three to understand cyber security</li></ul><h1 id="OSI-安全架构"><a href="#OSI-安全架构" class="headerlink" title="OSI 安全架构"></a>OSI 安全架构</h1><p>OSI 安全架构分为三大类，即安全攻击、安全机制和安全服务。</p><p><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20230720025356.jpg"></p><h2 id="安全攻击（Security-attack）"><a href="#安全攻击（Security-attack）" class="headerlink" title="安全攻击（Security attack）"></a>安全攻击（Security attack）</h2><p>安全攻击是指个人或实体企图获得未经授权的访问以破坏或损害系统、网络或设备的安全性。</p><ul><li>被动攻击（Passive attack）：试图从系统中学习或利用信息，但不影响系统资源。<ul><li>窃听（Release of message content / disclosure）：攻击者在两方不知情的情况下拦截和收听他们之间的通信。</li><li>流量分析（Traffic analysis）：攻击者分析网络流量模式和元数据以收集有关系统、网络或设备的信息。入侵者无法读取消息，只能了解加密的模式和长度。可以使用多种技术执行流量分析，例如网络流量分析或协议分析。</li></ul></li><li>主动攻击（Active attack）：试图改变系统资源或影响其运行。<ul><li>伪装（Masquerade）：攻击者伪装成真实的发件人以获得对系统的未授权访问。这种类型的攻击可能涉及攻击者使用窃取或伪造的凭据，或者以其他方式操纵身份验证或授权控制。</li><li>重放（Replay）：攻击者通过被动通道拦截传输的消息，然后恶意或欺诈地重放或延迟它。</li><li>消息修改（Message modification）：攻击者修改传输的消息并使接收方收到的最终消息看起来不安全或无意义。</li><li>拒绝服务攻击（Denial of Service, DoS）：攻击者向系统、网络或设备发送大量流量，以试图使其不堪重负并使其对合法用户不可用。</li></ul></li></ul><h2 id="安全服务（Security-service）"><a href="#安全服务（Security-service）" class="headerlink" title="安全服务（Security service）"></a>安全服务（Security service）</h2><p>安全服务是指可用于维护组织安全的不同服务。它们有助于防止任何潜在的安全风险。安全服务分为6类：</p><ul><li>身份验证（Authentication）：验证用户或设备身份以授予或拒绝对系统或设备的访问权限的过程。</li><li>访问控制（Access control）或授权（authorisation）：使用策略和过程来确定允许谁访问系统内的特定资源。</li><li>机密性（Confidentiality）：保护信息不被访问或泄露给未授权方。</li><li>数据完整性（Data integrity）：使用技术来确保数据在传输或存储期间未被篡改或以任何方式更改。</li><li>不可否认性（Non-repudiation）：使用技术来创建消息来源和传输的可验证记录，防止发件人否认他们发送了消息。</li><li>可行性（Availability）：保证系统可以按需使用和访问</li></ul><p><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20230720031629.jpg"></p><h2 id="安全机制（Security-mechanisms）"><a href="#安全机制（Security-mechanisms）" class="headerlink" title="安全机制（Security mechanisms）"></a>安全机制（Security mechanisms）</h2><p>为识别任何安全漏洞或对组织的攻击而构建的机制称为安全机制。</p><ul><li>加密（Encryption）：使用算法将数据转换为只能由具有适当解密密钥的人读取的形式。</li><li>数字签名（Digital signature）：使用密码技术为数字文档或消息创建唯一的、可验证的标识符，可用于确保文档或消息的真实性和完整性。</li><li>访问控制机制（Access control mechanism）：用于保证访问权的技术</li><li>公证（Notarisation）：使用可信任的一方来确保数据交换的安全</li><li>密码（Password）：授权方已知的秘密短语或单词</li></ul><p><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20230720033351.jpg"></p><h1 id="Network-Security-amp-Cyber-Security"><a href="#Network-Security-amp-Cyber-Security" class="headerlink" title="Network Security &amp; Cyber Security"></a>Network Security &amp; Cyber Security</h1><p><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/resize,w_670.png"></p><h2 id="Network-Security"><a href="#Network-Security" class="headerlink" title="Network Security"></a>Network Security</h2><blockquote><p>Network Security is the process of taking physical and software preventative measures to protect the underlying networking infrastructure from unauthorized access, misuse, malfunction, modification, destruction, or improper disclosure, thereby creating a secure platform for computers, users and programs to perform their permitted critical functions within a secure environment</p></blockquote><h2 id="Cyber-Security"><a href="#Cyber-Security" class="headerlink" title="Cyber Security"></a>Cyber Security</h2><blockquote><p>Cyber security is the collection of tools, policies, security concepts, security safeguards, guidelines, risk management approaches, actions, training, best practices, assurance and technologies that can be used to protect the cyber environment and organization and user’s assets</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> UOA </category>
          
          <category> COMPSCI 316 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络安全 </tag>
            
            <tag> 计算机安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1-计算机安全概述</title>
      <link href="/2023/06/03/1-%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E6%A6%82%E8%BF%B0/"/>
      <url>/2023/06/03/1-%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E6%A6%82%E8%BF%B0/</url>
      
        <content type="html"><![CDATA[<p>参考书目：Computer Security: Principles and Practice, Fourth Edition, by William Stallings and Lawrie Brown. Pearson Higher Ed USA. ISBN 1292220635.</p><h1 id="计算机安全的概念"><a href="#计算机安全的概念" class="headerlink" title="计算机安全的概念"></a>计算机安全的概念</h1><h2 id="计算机安全（computer-security）的定义"><a href="#计算机安全（computer-security）的定义" class="headerlink" title="计算机安全（computer security）的定义"></a>计算机安全（computer security）的定义</h2><p>保证信息系统资产的<strong>机密性、完整性以及可用性</strong>的措施和控制方法，其中资产包括硬件、软件、固件、以及要处理、存储和通信的信息</p><p>机密性、完整性和可用性一起被并称为 CIA 三元组</p><h3 id="机密性（confidentiality）"><a href="#机密性（confidentiality）" class="headerlink" title="机密性（confidentiality）"></a>机密性（confidentiality）</h3><p>保持对信息访问和披露的限制，包括对个人隐私和专有信息保护的措施。机密性缺失是指非授权的信息披露</p><p>换言之机密性是指个人对资产的访问与披露具有控制能力，在未经许可或授权的情况下，他人无法访问相关数据。在现实中的实例就包括高校学生的教务系统，学生可以在登陆后查阅到个人的考试成绩等隐私信息，而他人在未经许可的情况下无法访问或知晓相关数据。</p><p>机密性包含两个相关概念：</p><ul><li>数据机密性：确保隐私或机密信息不被非授权的个人利用，或被泄露给非授权的个人</li><li>隐私性：确保个人能够控制或影响与自身相关的信息的收集和存储，也能够控制这些信息可以由谁披露或向谁披露</li></ul><h3 id="完整性（integrity）"><a href="#完整性（integrity）" class="headerlink" title="完整性（integrity）"></a>完整性（integrity）</h3><p>防范不正当的信息修改和破坏，包括保证信息的抵抗赖性和真实性。完整性缺失是指非授权的信息修改或破坏。</p><p>和机密性不同，完整性主要强调个人对资产的修改具有控制能力，他人在未经许可的情况下，无法修改或破坏相关数据。在现实中的实例就包括医院的过敏史信息数据库，医生可以在系统中增加修改或删除病人的相关病史，而他人不可以在未经授权的情况下修改或破坏病史，否则会造成严重的后果。</p><p>完整性包含两个相关概念：</p><ul><li>数据完整性：确保信息和程序只能在指定的和得到授权的情况下才能够改变</li><li>系统完整性：确保系统在未受损的方式下执行预期的功能，避免对系统进行有意或无意的非授权操作</li></ul><h3 id="可用性（availability）"><a href="#可用性（availability）" class="headerlink" title="可用性（availability）"></a>可用性（availability）</h3><p>确保系统能够及时响应，并且不能拒绝<strong>授权用户</strong>的服务请求。可用性缺失是指对信息或信息系统的访问和使用的破坏。</p><p>简言之，可用性就是指<strong>授权用户</strong>在任何情况下都应该能够访问系统并且获得服务。在现实中的实例就包括在线交易系统，如果交易系统可用性被破坏，授权用户无法通过系统进行资金交易，则会影响用户的交易热情，造成严重后果。</p><h1 id="威胁、攻击和资产"><a href="#威胁、攻击和资产" class="headerlink" title="威胁、攻击和资产"></a>威胁、攻击和资产</h1><p>在这里首先说明几个重要术语的概念：</p><ul><li>威胁（threat）：任何可能通过<strong>未经授权</strong>的访问、销毁、披露、修改信息以及拒绝服务而对组织运营、组织资产、个人、其他组织或国家产生不利影响的情况或事件</li><li>攻击（attack）：任何类型的恶意活动，试图收集、破坏、拒绝、降级或者破坏信息系统资源或信息本身</li><li>资产（Asset）：也叫系统资源（system resource），主要包括硬件、软件、数据、通信设施和网络</li><li>脆弱性（Vulnerability）：可能被威胁源利用或触发的信息系统、系统安全程序、内部控制或实现中的弱点</li></ul><p>与系统资源的各种安全脆弱性相对应的是利用这些安全脆弱性产生的<strong>威胁</strong>。威胁表示对资产的潜在安全危害。<strong>攻击</strong>是被实施的威胁如果成功，将会导致不期望的安全侵害或威胁的后果。执行攻击的主体被称为攻击者或者<strong>威胁主体</strong>。</p><p>可以将攻击划分为两类：</p><ul><li>主动攻击（Active attack）：试图改变系统资源或影响其运行。<ul><li>主动攻击包含对数据流进行篡改或伪造数据流，其可以划分为四类：重放、冒充、篡改和拒绝服务</li></ul></li><li>被动攻击（Passive attack）：试图从系统中学习或利用信息，但不影响系统资源。<ul><li>被动攻击的本质是是窃听或监视数据传输。攻击者的目标是获取传输的数据信息。被动狗估计的两种形式是消息内容泄露和流量分析</li></ul></li></ul><p>按照攻击的发起位置也可以将攻击分为以下两类：</p><ul><li>内部攻击（Inside attack）：由安全边界内部的实体（“内部人”）发起的攻击。在内部人是指已被授权访问系统资源，但以未经授权方许可的方式使用资源的内部实体。</li><li>外部攻击（Outside attack）：由系统安全边界外部的非授权用户或非法使用者（“外部人”）发起的攻击。</li></ul><h2 id="威胁与攻击"><a href="#威胁与攻击" class="headerlink" title="威胁与攻击"></a>威胁与攻击</h2><table><thead><tr><th>威胁后果（威胁）</th><th>威胁动作（攻击）</th></tr></thead><tbody><tr><td><strong>非授权泄露</strong><br/>实体未经授权而获得对数据访问的情况或事件</td><td>暴露：敏感数据被直接泄露给非授权实体<br/>截获：非授权实体直接访问在授权的源和目的地之间传输的敏感数据<br/>推理：非授权实体通过基于特征的推理或通信产品间接访问敏感数据<br/>入侵：非授权实体通过躲避系统安全保护措施来获得对敏感数据的访问</td></tr><tr><td><strong>欺骗</strong><br/>导致授权实体接收虚假数据并相信其正确性的情况或事件</td><td>冒充：非授权实体通过佯装成授权实体来访问系统或执行恶意行为<br/>伪造：以虚假数据欺骗授权实体<br/>抵赖：一个实体通过虚伪地否认对行为的责任而欺骗另一个实体</td></tr><tr><td><strong>破坏</strong><br/>中断或阻止系统服务和功能正确运行的情况或事件</td><td>失能：通过禁用系统组件来阻止或中断系统运行<br/>损坏：通过对系统功能或数据的不利修改来对系统运行进行非期望的改变<br/>阻碍：通过阻止系统运行来中断系统服务交付的威胁活动</td></tr><tr><td><strong>篡夺</strong><br/>导致系统服务或功能被非授权实体控制的情况或事件</td><td>盗用：实体对系统资源采取非授权的逻辑或物理控制<br/>误用：导致系统组件执行对系统有害的功能或服务</td></tr></tbody></table><h2 id="威胁与资产"><a href="#威胁与资产" class="headerlink" title="威胁与资产"></a>威胁与资产</h2><table><thead><tr><th>-</th><th>可用性</th><th>机密性</th><th>完整性</th></tr></thead><tbody><tr><td>硬件</td><td>设备被盗用或禁用，因而拒绝提供服务</td><td>未加密的 USB 设备被盗</td><td></td></tr><tr><td>软件</td><td>程序被删除，拒绝用户访问</td><td>软件的非授权拷贝</td><td>正在运行的程序被修改，使其在执行过程中失败或执行非预期任务</td></tr><tr><td>数据</td><td>文件被删除，拒绝用户访问</td><td>非授权读取数据</td><td>修改已有文件或伪造新文件</td></tr><tr><td>通信线路和网络</td><td>消息被破坏或删除。通信线路或网络不可用</td><td>消息被读取。消息被读取。消息的流量模式被观察到</td><td>消息被修改、延迟、重新排序或复制。伪造虚假消息</td></tr></tbody></table><h1 id="基本安全设计原则"><a href="#基本安全设计原则" class="headerlink" title="基本安全设计原则"></a>基本安全设计原则</h1><ul><li>经济机制（economy of mechanism）原则：安全机制的设计应当尽可能简单、短小</li><li>安全缺省设置（fail-safe default）原则：指访问控制应当基于许可而不是排除。简言之就是只有许可的操作被允许，任何不被许可或未提及的操作都视为不被允许</li><li>绝对中介（complete mediation）原则：指每一次访问都应当依据访问控制机制进行检查</li><li>开放式设计（open design）原则：指安全机制的设计应当开放而非保密</li><li>特权分离（separation of privilege）原则：细分特权，分配给多个主体，确保个体无法单独控制关键职能或系统</li><li>最小特权（least privilege）原则：每个进程和系统用户都应当使用完成某项任务必需的最少特权集进行操作</li><li>最小公用机制（least common mechanism）原则：指在设计时应当最小化不同用户共享的功能，以提高彼此的安全性。</li><li>心理可接受性（psychological acceptability）原则：指安全机制不应该过度干涉用户的工作，并且要满足用户授权访问的要求</li></ul><h1 id="攻击面和攻击树"><a href="#攻击面和攻击树" class="headerlink" title="攻击面和攻击树"></a>攻击面和攻击树</h1><p>攻击面和攻击树主要用来对威胁进行评估和分类</p><h2 id="攻击面"><a href="#攻击面" class="headerlink" title="攻击面"></a>攻击面</h2><p>攻击面由系统中可到达的和可被利用的脆弱点构成，主要分为以下三种：</p><ul><li>网络攻击面：企业网、广域网或者因特网中的脆弱点，包括网络协议中的脆弱点<ul><li>例如利用这些脆弱点进行拒绝服务攻击、通信线路破坏和各种不同形式的入侵攻击</li></ul></li><li>软件攻击面：在应用程序、实用程序或操作系统代码中的漏洞，尤其是指 Web 服务器软件的漏洞</li><li>人为攻击面：指员工或者外部人员引起的脆弱点（社会工程学）</li></ul><p>攻击面分析是评估系统威胁的规模和严重性的有用技术。对这些脆弱点及逆行系统的分析可使开发者知道哪些安全机制是必需的。一旦定义了攻击面，设计人员就可能找到减少攻击面的方法，从而使敌手入侵更加困难。</p><p><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/d6348556d3274eb9a1d167293b7c4e57.png"></p><h2 id="攻击树"><a href="#攻击树" class="headerlink" title="攻击树"></a>攻击树</h2><p>攻击树是一个分支型、层次化的<strong>数据结构</strong>,表示了一系列潜在技术，这些技术可以利用安全漏洞进行攻击。</p><p>作为攻击目标的安全事件是这棵树的根节点，攻击者可以迭代、递增达到目标的途径就是这棵树的分支和子节点，每一个子节点都定义了一个子目标，每一个子目标都可能有一系列进一步的子目标。从根节点沿着路径向外延伸的最终的节点，即叶子节点，代表了发起一个攻击的不同方式。</p><p><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/IMG_2079(20230716-090631).JPG"></p><h1 id="计算机安全策略"><a href="#计算机安全策略" class="headerlink" title="计算机安全策略"></a>计算机安全策略</h1><ul><li>对策：对付攻击所采取的手段<ul><li>能够成功防止特定类型的攻击</li><li>防止不可能时，检测攻击，并从攻击造成的后果中恢复</li></ul></li><li>风险：执行对策后，可能存在参与的脆弱性，被威胁代理利用<ul><li>资产所有者通过制定其他约束来实现风险最小化</li></ul></li></ul><p>计算机安全技术措施</p><ul><li>访问控制：设置权限</li><li>识别与认证：认证协议</li><li>系统和通信保护：加密</li><li>系统和信息完整性：密码工具</li></ul>]]></content>
      
      
      <categories>
          
          <category> UOA </category>
          
          <category> COMPSCI 316 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络安全 </tag>
            
            <tag> 计算机安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>集乐-统一多媒体文件资源管理器</title>
      <link href="/2023/05/27/%E9%9B%86%E4%B9%90-%E7%BB%9F%E4%B8%80%E5%A4%9A%E5%AA%92%E4%BD%93%E6%96%87%E4%BB%B6%E8%B5%84%E6%BA%90%E7%AE%A1%E7%90%86%E5%99%A8/"/>
      <url>/2023/05/27/%E9%9B%86%E4%B9%90-%E7%BB%9F%E4%B8%80%E5%A4%9A%E5%AA%92%E4%BD%93%E6%96%87%E4%BB%B6%E8%B5%84%E6%BA%90%E7%AE%A1%E7%90%86%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<p>项目地址：<a href="https://github.com/Ywrby/JiLe">https://github.com/Ywrby/JiLe</a></p><h1 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h1><p>随着互联网的发展与短视频等流媒体展示分享方式的普及，如何同时进行多种多媒体文件资源的管理与分类逐渐成为困扰人们进行文件管理的主要问题。本项目为解决上述问题，设计了一款多媒体集成管理器，采用前后端分离的方式，使用 Electron 和 Vue.js 作为前端框架，Springboot 作为后端框架。项目主要模块分为电子书管理模块，图片管理模块以及影视资源管理模块。项目基本功能主要有：文件元数据编辑，文件标签操作，文件夹同步，高级文件搜索，本地文件操作，瀑布流展示，文件分享，应用内预览，页面自动截图，拟物播放器等。最后对系统进行了综合测试与结果分析，结果表明：项目交互性良好，兼容性高，实现了目标功能。具有实际应用意义。</p><h1 id="系统详细设计"><a href="#系统详细设计" class="headerlink" title="系统详细设计"></a>系统详细设计</h1><p>通过对项目整体进行可行性分析与需求分析，项目设计的基本方向和功能内容相对明确，项目以普通用户为设计视角，详细介绍对应功能与界面的设计和实现。</p><h2 id="系统总体架构设计"><a href="#系统总体架构设计" class="headerlink" title="系统总体架构设计"></a>系统总体架构设计</h2><p>项目总体架构设计采用前后端分离的设计模式，前端使用 Electron 和 Vue.js 作为前端开发框架，同时使用 Node.js 中的 Axios 作为网络通信库与后端通过 Http 请求进行数据通信和功能通信。后端使用 Spring boot 作为开发框架，利用 MyBatis 与 MySQL 数据库进行数据传输。</p><p><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/20230526223546.png"></p><h2 id="系统数据库设计"><a href="#系统数据库设计" class="headerlink" title="系统数据库设计"></a>系统数据库设计</h2><p>项目内共使用 14 张数据表，表间关系通过外键相连接，下图为项目 E-R 图</p><p><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/20230526223732.png"></p><h3 id="数据库表设计"><a href="#数据库表设计" class="headerlink" title="数据库表设计"></a>数据库表设计</h3><p>数据表主要分为三大类，与影视资源相关数据表（vc_info,video_info,video_tag 等）与电子书资源相关数据表（ec_info,ebook_info,ebook_tag,ebook_author 等），与图片资源相关数据表（ic_info,image_info,image_tag 等）。下面以相对全面的影视资源数据表为例介绍项目建表原则。</p><center><p>表 4.1 影视合集数据表</p></center><table><thead><tr><th>字段</th><th>数据类型</th><th>说明</th></tr></thead><tbody><tr><td>ID(主键)</td><td>INT</td><td>影视合集数据表主键，唯一标识符，自增</td></tr><tr><td>VC_NAME</td><td>VARCHAR</td><td>影视合集名称</td></tr><tr><td>VC_PATH</td><td>VARCHAR</td><td>影视合集所在文件夹路径</td></tr><tr><td>VC_DESC</td><td>VARCHAR</td><td>影视合集简介</td></tr><tr><td>VC_COVER</td><td>VARCHAR</td><td>影视合集封面（缓存）</td></tr></tbody></table><center><p>表4.2 视频资源数据表</p></center><table><thead><tr><th>字段</th><th>数据类型</th><th>说明</th></tr></thead><tbody><tr><td>VC_ID</td><td>INT</td><td>视频资源所属影视合集 ID，外键</td></tr><tr><td>videoID</td><td>INT</td><td>视频资源主键，视频资源唯一标识符，自增</td></tr><tr><td>videoName</td><td>VARCHAR</td><td>视频资源名称，即用于辨识也用于标识路径</td></tr><tr><td>videoCover</td><td>VARCHAR</td><td>视频资源封面（缓存）</td></tr><tr><td>videoScore</td><td>TINYINT</td><td>0-5 数字，用于表示用户对视频的评分</td></tr><tr><td>Followed</td><td>TINYINT</td><td>0 或 1 数字，用于表示用户是否关注该视频</td></tr><tr><td>Intro</td><td>VARCHAR</td><td>视频资源简介</td></tr><tr><td>releaseDate</td><td>DATETIME</td><td>视频资源发布日期</td></tr><tr><td>url</td><td>VARCHAR</td><td>视频资源相关网址链接</td></tr></tbody></table><h2 id="项目前端界面功能设计"><a href="#项目前端界面功能设计" class="headerlink" title="项目前端界面功能设计"></a>项目前端界面功能设计</h2><p>整个项目中，界面展示部分作为用户最直接接触以及感知的部分，对用户的第一使用体验以及软件综合感受起着决定性作用。在界面设计过程中应严格以用户使用体验为第一要义，同时保证软件使用过程中的功能完善以及呈现效果等方面。</p><h3 id="综合展示模块界面设计"><a href="#综合展示模块界面设计" class="headerlink" title="综合展示模块界面设计"></a>综合展示模块界面设计</h3><p>综合展示模块负责统计并展示不同类型资源合集相关情况以及进行随机的相关资源推荐，主要分为书库综合展示，图集综合展示以及影集综合展示部分。该模块是用户在进入软件后首先要体验到的部分，也是最高层面上管理整个多媒体资源集成管理器系统内文件的模块。</p><p>该部分流程主要为用户进入系统后点击进入指定类型文件综合管理模块内部，展示界面分别对随机推荐的相关类型文件进行展示，同时对该类型下所有合集内容进行展示，展示内容包括合集名称，合集封面以及合集基本简介等。</p><p>用户右键点击指定合集卡片，弹出扩展操作选项，主要分为打开书库详情界面，编辑书库元数据，删除指定书库，在文件夹内按路径打开指定书库。</p><p><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/20230526224421.png"></p><p>在该过程中文件夹默认打开指定合集路径涉及到对系统进行直接操作，其主要操作流程见下图。</p><p><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/20230526224452.png"></p><h3 id="书库展示界面设计"><a href="#书库展示界面设计" class="headerlink" title="书库展示界面设计"></a>书库展示界面设计</h3><p>在设计书库展示界面时，应考虑到用户的实际体验，一方面要兼顾图书信息的全面展示，另一方面应尽可能简化用户操作降低用户学习成本。综上，主要应综合保证以下内容：</p><ol><li>界面布局：应该采用简洁明了的布局方式，使得用户可以快速浏览和选择电子书，可以使用网格布局、列表布局等方式来展示电子书。</li><li>电子书信息：应该展示电子书的基本信息，如书名、作者、出版社、出版时间、简介等，方便用户了解电子书的基本情况。</li><li>封面展示：应该展示电子书的封面图片，以吸引用户的眼球，同时方便用户快速识别电子书。</li><li>排序和筛选：应该提供排序和筛选功能，方便用户按照自己的需求进行电子书的选择和浏览。</li><li>评分和评论：应该提供用户评分和评论的功能，方便用户了解其他用户的评价和意见，同时也可以为其他用户提供参考。</li><li>搜索功能：应该提供搜索功能，方便用户快速查找自己需要的电子书，提高用户的使用效率。</li><li>标签功能，每个资源身上可以打上一系列“标签”, 以表明这个资源的属性, 对其进行分类。“标签”具有层次性, 是资源类别的一个体现[5]。<br>总的来说，一个好的电子书合集界面应该简洁明了、易于使用、能够满足用户的需求，并且提供优秀的用户体验。</li></ol><p><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/20230526224553.png"></p><p>在进行高级搜索过程中，主要流程是在搜索界面首先进行搜索类型的类型选择，确定是按照书名，作者，出版商还是其他内容进行搜索。确定好搜索类型后，进行搜索内容的输入，前端在接收到搜索内容后对搜索内容进行切分，随后将相关数据传输到后端进行模糊查询，前端向后端发送请求过程中需要调用 Node.js 下的 Axios 库进行网络通信，Axios 是一款易用、简洁且高效的 http 库，是一个可以用在浏览器和 Node.js 中的异步通信框架，其主要作用就是实现 Ajax 异步通信，由于 Vue 只关注视图层内容，使用 Axios 更为便捷。使用 Axios 控制网络通信过程具有以下特点：（1）从浏览器中创建 XMLHttpRequests，（2）从 node.js 创建 http 请求，（3）支持 Promise API（在 JS 中进行链式编程），（4）拦截请求和相应，（5）转换请求数据和响应数据，（6）取消请求，（7）自动转换 JSON 数据，（8）客户端支持防御 XSRF。整个高级搜索流程如下图所示</p><p><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/20230526224615.png"></p><h3 id="图集展示界面"><a href="#图集展示界面" class="headerlink" title="图集展示界面"></a>图集展示界面</h3><p>图集展示界面需要同时对用户的大量图片进行展示，以瀑布流形式进行整个内容的展示相对更加合理，在该过程中需要注意到：</p><ol><li>图片尺寸和比例：瀑布流展示图片的界面中，图片的尺寸和比例是非常重要的。应该确保每一张图片都能够清晰地展示，同时不影响用户体验。</li><li>瀑布流布局：瀑布流布局的设计应该考虑到用户的浏览习惯，让用户能够轻松浏览大量图片，同时不会感到拥挤或混乱。布局应该简洁明了，突出重点。</li><li>加载速度和响应速度：瀑布流展示图片需要大量的图片数据，因此加载速度和响应速度非常重要。应该采用高效的代码和缓存机制，确保界面能够快速加载和响应用户的操作。</li><li>用户交互：瀑布流展示图片的界面中，用户交互是非常重要的。应该设计简单、直观的交互方式，让用户能够快速地浏览、筛选和返回上一页/页码等操作。</li><li>颜色和字体：颜色和字体的设计应该考虑到整个界面的协调性和可读性。应该采用明亮、清晰的颜色和字体，确保用户能够轻松识别信息和进行操作。</li><li>可访问性：瀑布流展示图片的界面应该考虑到可访问性，确保所有功能和信息都能够方便地访问和使用。应该采用易于理解和使用的导航和搜索功能，同时考虑到视力和听力有障碍的用户使用。</li></ol><p><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/20230526224721.png"></p><p>在实现瀑布流的过程中，步骤主要分为：</p><ol><li>初始化数据：首先需要从后端或缓存中获取瀑布流所需的图片数据，并将其存储在本地或缓存中。</li><li>设置瀑布流容器：创建瀑布流容器，通常使用 HTML 元素，例如<code>&lt;div&gt;</code>或<code>&lt;canvas&gt;</code>。</li><li>设置瀑布流布局：根据所需的瀑布流布局，例如流式布局或分块布局，使用 CSS 设置瀑布流容器的样式。</li><li>加载图片：使用 JavaScript 异步加载图片，并将其添加到瀑布流容器中。可以使用 HTML5 的<code>&lt;img&gt;</code>标签或 Canvas 元素加载图片。</li><li>设置瀑布流事件：设置事件监听器，例如点击事件或滚动事件，以便用户可以与瀑布流交互，对瀑布流布局大小进行调整。</li><li>更新瀑布流：当图片数据更新或用户交互时，需要更新瀑布流的布局和样式。</li><li>缓存图片：由于需要同时加载大量图片，提前对图片进行缓存可以大大减少系统加载实践，提高用户使用体验。</li><li>优化性能：为了提高瀑布流的性能和用户体验，可以使用图片懒加载等设计，避免过多图片同时加载造成系统崩溃。</li></ol><p>在进行主色调分析过程中，需要从后端进行图片的加载以及主色调分析，具体流程如下图所示。</p><p><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/20230526224839.png"></p><h3 id="影集展示界面"><a href="#影集展示界面" class="headerlink" title="影集展示界面"></a>影集展示界面</h3><p>在设计影视资源展示界面的过程中，首先应该注意的是如何设计一个用户友好的交互界面，让用户可以轻松地浏览、搜索、播放视频。在交互设计中，需要考虑用户的使用习惯、心理需求等因素，以提高用户体验。综合用户日常使用视频网站的行为习惯与可能性，将影视资源的展示界面向主流视频媒体网站设计是一个相对正确可行的方向。</p><p>一方面，以封面图作为每个视频资源展示的核心内容，占据展示界面的主要位置，另一方面，完善的功能栏在下方作为辅助工具，帮助用户在使用过程中可以便捷的对指定视频资源进行高效的控制编辑等操作。</p><p><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/20230526224913.png"></p><p>封面作为视频资源的重要展示因素，可以很大程度上说明视频的主要内容，部分视频网站采用用户上传封面的形式进行封面展示，这种方式能够准确的由用户控制封面展示内容但相对繁琐，本地系统一般会随机生成视频封面，十分便捷却容易出现封面混乱等问题，项目设计过程中支持用户自行上传或是随机生成封面，最大程度上满足用户核心需求，而随机生成封面的过程中涉及到对视频核心数据的获取与随机帧数的生成，大致流程如图所示。</p><p><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/20230526224937.png"></p><p>除此以外，对于影视资源而言最重要的就是如何在应用内进行信息和流媒体内容的展示和播放，普通形式的播放器无论从使用便利性角度还是趣味性角度而言都相对薄弱，所以在设计播放器形式过程中项目引入拟物设计的形式，拟物设计可以让用户更好地理解和使用网页。它模拟了现实世界中的物品和操作方式，让用户更容易上手，从而提高用户满意度。同时拟物设计可以让网页看起来更加真实，用户可以更自然地操作和感知网页的内容和功能。这种设计方式能够提高用户的体验和忠诚度吗。另外拟物设计可以让用户感觉更受信任，因为它模拟了现实世界中的操作方式。这种设计方式可以增加用户的信任感。</p><p>综上所述，项目对播放器进行了拟物设计。以 Nintendo Switch（任天堂公司生产的掌上游戏机）为原型，进行视频播放器的设计。</p><p><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/20230526225011.png"></p><h2 id="项目后端功能设计"><a href="#项目后端功能设计" class="headerlink" title="项目后端功能设计"></a>项目后端功能设计</h2><p>项目后端使用 SpringBoot 作为后端开发框架，使用 MyBatis 作为持久层开发框架，严格遵守 MVC 三层结构的设计过程。控制器层作为应用程序中用于处理用户输入和控制应用程序流程的部分，负责接收用户输入，调用模型层进行数据处理，并将处理结果传递给视图层进行显示。视图层作为应用程序中用于呈现用户界面的部分，负责将模型层中的数据呈现给用户。模型层则是应用程序中用于处理业务逻辑和数据处理的部分，负责处理数据的存储、检索、更新等操作。<br>在开发过程中，后端主要处理业务逻辑以及实际功能实现，并对外提供接口供前端调用。</p><p>这个过程中就包括，设计数据库结构和建立数据表，根据业务需求，设计并建立相应的数据表，用于存储多媒体资源的相关信息，例如视频、图片、电子书的名称、路径、大小、上传时间等。实现数据访问层，利用 Mybatis 框架实现数据访问层以进行对数据库的相关操作，包括定义数据访问接口和实现数据访问接口，用于对数据库进行增删改查等操作。实现业务逻辑层，在控制器层和数据访问层之间实现业务逻辑层，用于处理业务逻辑，例如主色调分析、分页处理等。实现控制器层，使用 Springboot 框架实现控制器层，处理前端的请求，调用业务逻辑层和数据访问层，返回处理结果给前端。编写测试用例：编写测试用例，对后端代码进行单元测试和集成测试，确保代码的正确性和可靠性。</p><p><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/20230527060848.png"></p><h1 id="系统具体实现"><a href="#系统具体实现" class="headerlink" title="系统具体实现"></a>系统具体实现</h1><h2 id="全部书库展示界面"><a href="#全部书库展示界面" class="headerlink" title="全部书库展示界面"></a>全部书库展示界面</h2><p>在设计全部书库的展示界面时，一方面要重视界面的美观与简洁，另一方面也要保证用户的功能体验充足且高效，所以全部书库界面设计从第一视角分为两个主要部分。</p><p>界面上方为随机推荐部分，会从数据库随机读取指定数目的电子书数据，以其封面生成走马灯，用户可以通过点击走马灯上的图片使用默认方式打开电子书文件。</p><p>界面下部分为各个书库展示界面，每个展示卡片左半部分为书库封面，右半部分则为书库的名称与简介，单击书库卡片则会跳转对应书库界面，右键则会弹出响应补充功能按钮：打开书库，编辑书库，删除书库，以及打开书库所在文件夹。</p><p><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/20230527060944.png"></p><p><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/20230527060956.png"></p><h2 id="书库展示界面"><a href="#书库展示界面" class="headerlink" title="书库展示界面"></a>书库展示界面</h2><p>界面最上方展示功能栏，功能栏第一项为上传书籍按钮，点击后调用系统文件管理器进行电子书文件选择并上传，第二项为刷新与同步按钮，点击后对本地电子书库进行数据同步，并刷新数据库，第三项为多功能搜索栏，用户可以根据指定搜索条件进行书籍的搜索。</p><p>功能栏下方为电子书展示与选择界面，用户可以查看所有电子书基本信息（书名，作者，出版商，评分，语言，出版日期，书号，页数，类型，标签等），并且可以根据指定栏目进行数据的排序展示。</p><p><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/20230527061023.png"></p><p>界面右部分为电子书详细信息展示界面，最上方展示电子书封面，右键电子书封面部分，弹出补充功能栏，主要有默认方式打开，书籍元数据编辑，移除书籍，文件夹打开以及豆瓣搜索指定书籍。封面下方展示书籍详细信息，最下方为对应功能按钮：编辑元数据信息，默认方式打开电子书以及移除电子书。</p><p>拖拽上传是一种非常简单的文件上传方式，不需要进行复杂的选择或点击操作，只需要在文件管理器中拖拽文件或文件夹到上传窗口即可。这种方式能够节省用户的时间，提高上传效率。支持多文件上传，用户可以将多个文件或文件夹拖拽到上传窗口中，然后一次性上传它们。这种方式能够帮助用户快速上传大量文件，节省时间和精力。项目重新实现了全局拖拽上传方式，具体核心代码见附录 1-核心代码 1：拖拽上传图书（前端）。</p><p><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/20230527061053.png"></p><h2 id="书籍元数据编辑界面"><a href="#书籍元数据编辑界面" class="headerlink" title="书籍元数据编辑界面"></a>书籍元数据编辑界面</h2><p>编辑书籍元数据界面，在用户点击功能键后弹出，界面左半部分以展示封面图为主，最上方展示封面图，图片下方是切换封面图按钮，点击后调出系统文件选择器进行图片选择并缓存后设置为封面，最下方是切换收藏状态按钮。界面右部分是编辑书籍元数据表单，按照书籍内数据特性分配表单选项情况。</p><p><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/20230527061118.png"></p><h2 id="全部图集界面"><a href="#全部图集界面" class="headerlink" title="全部图集界面"></a>全部图集界面</h2><p>全部图集界面基本与全部书库界面保持一致，上方从数据库随机选择进行随机图片资源推荐，下方以栅栏式进行书库卡片的设计，自适应界面大小变化，其余功能键也与全部书库界面基本保持一致。</p><p><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/20230527061147.png"></p><p><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/20230527061156.png"></p><h2 id="图集展示界面-1"><a href="#图集展示界面-1" class="headerlink" title="图集展示界面"></a>图集展示界面</h2><p>图集展示界面采用瀑布流式布局进行展示，一方面瀑布流布局可以使页面看起来更加美观，具有视觉冲击力。图片、文字、视频等元素可以根据不同的尺寸、比例进行排列，使得整个页面呈现出错落有致的感觉，给人以美感。另一方面瀑布流布局可以让用户轻松地快速浏览大量内容，不需要像传统布局方式一样翻页或者滚动到底部查看更多内容，用户可以浏览更多的内容，提高了用户的使用体验。同时，瀑布流布局可以节约页面空间，因为它可以让网页上的元素紧凑地排列，使得页面可以呈现更多内容，同时使得页面不显得过于拥挤。最重要的是瀑布流布局可以适应不同屏幕尺寸，因为它可以根据屏幕宽度自动调整元素的排列方式，从而使得页面可以在不同的设备上呈现出最佳的布局效果。</p><p>项目中重写了整个瀑布流的实现逻辑，保证了完整实现后的瀑布流更加适应桌面化应用开发与使用，同时为瀑布流增加了除自适应宽度外的手动调节栅栏宽度大小功能，用户可以通过功能键或者快捷键（CTRL+鼠标滚轮上滑/下滑）进行页面中瀑布流栅栏宽度的自定义。</p><p>界面上方为图集展示界面分页部分与功能区，主要包括返回按钮与瀑布流宽度调节按钮以及同步功能键和文件上传功能键。</p><p><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/20230527061241.png"></p><h2 id="图集元数据编辑界面"><a href="#图集元数据编辑界面" class="headerlink" title="图集元数据编辑界面"></a>图集元数据编辑界面</h2><p>在图集展示界面单击图片会展开图片资源展示与编辑界面栏，界面最上方是图片资源预览缓存图，图片下方展示图片的五个主色调色块，单击或右键可以选择复制色块的 RGB 值或 16 进制值。随后的是收藏状态切换栏，之后是图片信息编辑栏，支持用户编辑图片的相关网址链接，图片基本信息或简介，以及图片的标签内容。最下方是图片基本信息内容，会调用系统指令分析图片的分辨率，类型以及创建日期等基本信息。</p><p><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/20230527061307.png"></p><h2 id="图片详情界面"><a href="#图片详情界面" class="headerlink" title="图片详情界面"></a>图片详情界面</h2><p>点击图片下方链接或者右键进入详情，即可进入图片详情界面，页面分为左右两个卡片界面，左半部分卡片主要进行图片内容的展示，点击缓存图片可以唤起预览窗口，在应用内预览图片情况，下方进行图片主色调分析，将图片的五个主色调以色块的形式进行展示。最下方对应两个主要功能键，页面截图和文件夹内打开。</p><p>页面右半部分则是功能键与基本信息展示卡片，最上方三个按钮分别支持用户将图片分享至 QQ 空间与微信或是复制文件路径，下方展示了图片的评分，相关链接，图片信息备注，标签，创建日期以及分辨率和图片类型等基本信息。最后一部分则是默认方式打开图片以及收藏状态切换按钮。</p><p>为了方便用户在使用过程中将软件内图片或使用情况分享给其他用户，项目重写了页面截图功能方法</p><p><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/20230527061346.png"></p><h2 id="全部影集界面"><a href="#全部影集界面" class="headerlink" title="全部影集界面"></a>全部影集界面</h2><p>全部影集界面设计方案与前面两部分（全部书库，全部图集）异曲同工，上半部分进行影视的随机推荐，点击后唤起默认视频播放器进行播放。页面下半部分以栅栏式进行书库卡片的设计，自适应界面大小变化，其余功能键也与全部书库界面基本保持一致。</p><p><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/20230527061418.png"></p><h2 id="影集展示界面-1"><a href="#影集展示界面-1" class="headerlink" title="影集展示界面"></a>影集展示界面</h2><p>影集展示界面主要参考主流视频网站设计方式，以分立格式对视频资源进行管理，上方提供视频上传功能按钮以及本地文件同步功能。</p><p>下方逐个展示视频资源，展示栏大小同样使用栅栏式设计，随页面大小变化进行动态变化，每个视频展示栏上方展示封面，封面支持自动生成或主动上传，下方展示视频评分，名称以及功能键栏，用户可以通过功能栏，修改视频基本信息，默认方式打开，文件夹内打开或是删除指定视频。</p><p><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/20230527061449.png"></p><h2 id="视频元数据编辑界面"><a href="#视频元数据编辑界面" class="headerlink" title="视频元数据编辑界面"></a>视频元数据编辑界面</h2><p>编辑视频基本信息界面，左半部分为视频封面以及收藏状态修改按钮，用户可以通过在此处修改视频封面，右半部分为视频基本信息编辑表单，按照每个栏目相关属性对表单进行优化，方便用户快捷修改，提高用户使用体验。</p><p><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/20230527061527.png"></p><p><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/20230527061537.png"></p><h2 id="视频详情展示界面"><a href="#视频详情展示界面" class="headerlink" title="视频详情展示界面"></a>视频详情展示界面</h2><p>影视详情界面，最上方展示视频名称，下方以标签形式展示视频相关 tag，随后是视频基本信息卡片，分栏形式展示视频的简介，导演，编剧，演员等相关人员，上映日期，相应链接，以及帧长，时长，声道等细节信息，最下方是默认播放按钮以及收藏状态切换栏。</p><p><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/20230527061606.png"></p><p>最下方重写了原生视频播放器，对视频播放器进行拟物设计，并实现相应功能键。实现了对视频的播放/暂停切换，音量调节，进度调节，页面截图，视频搜做，静音，重置播放器，全屏切换，返回等功能。</p><p><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/20230527061624.png"></p>]]></content>
      
      
      <categories>
          
          <category> 项目开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Electron </tag>
            
            <tag> Java </tag>
            
            <tag> JavaWeb </tag>
            
            <tag> Vue </tag>
            
            <tag> 集乐 </tag>
            
            <tag> 开发记录 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>集乐-统一多媒体文件资源管理器-开发记录</title>
      <link href="/2022/10/04/%E9%9B%86%E4%B9%90-%E7%BB%9F%E4%B8%80%E5%A4%9A%E5%AA%92%E4%BD%93%E6%96%87%E4%BB%B6%E8%B5%84%E6%BA%90%E7%AE%A1%E7%90%86%E5%99%A8-%E5%BC%80%E5%8F%91%E8%AE%B0%E5%BD%95/"/>
      <url>/2022/10/04/%E9%9B%86%E4%B9%90-%E7%BB%9F%E4%B8%80%E5%A4%9A%E5%AA%92%E4%BD%93%E6%96%87%E4%BB%B6%E8%B5%84%E6%BA%90%E7%AE%A1%E7%90%86%E5%99%A8-%E5%BC%80%E5%8F%91%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<h1 id="开发初衷"><a href="#开发初衷" class="headerlink" title="开发初衷"></a>开发初衷</h1><p>市面上常见的多媒体资源管理器并不少见，比如很有名的本地电子书管理工具-Calibre，图片管理工具-Eagle，以及音频爱好者喜爱的foobar2000。它们在各自的领域内都完美解决了诸多痛点，但人的需求是在不断变化的，互联网的环境也是在不断发生改变的。</p><p>作为一名仓鼠党，很多时候面对资源的收集与整理都会手足无措，起初多媒体文件数量相对较少的情况下，可以采用较为随意的管理方式对文件进行管理，但随着文件资源数量的增加，如果没有或缺乏一个合理的文件管理方式就会导致文件之间关系混乱，渐渐地，自己也会疲于维护与管理。而避免这种问题的方式就是通过文件管理工具对我们收集的资源或文件进行统一管理。</p><p>理想的情况是我们在软件使用初期定义我们的行为习惯，后续我们只需要将所有文件统一化的保存，工具就会帮我们进行统一的管理。这种管理方式在Calibre中就有所体现，我们在初次使用过程中定义电子书的保存地址，同时定义我们的元数据链接，后续我们在保存电子书的过程中就可以自动帮我们利用元数据链接（豆瓣，亚马逊等）获取电子书基本信息，从而进行统一管理。</p><p>而现有的多媒体文件资源管理器应用虽然数量众多，但有些在功能性上有所欠缺，有些在兼容性上出现问题，无法真正确保对大部分资源的统一管理。所以才有了开发针对于个人的统一多媒体文件资源管理器的想法。</p><h1 id="功能分析"><a href="#功能分析" class="headerlink" title="功能分析"></a>功能分析</h1><p><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/%E6%9C%AA%E5%91%BD%E5%90%8D%E7%99%BD%E6%9D%BFdhuahdshahdsa22.jpg" alt="暂定合集类型"></p><h1 id="开发过程记录"><a href="#开发过程记录" class="headerlink" title="开发过程记录"></a>开发过程记录</h1><h2 id="图片的瀑布流展示实现"><a href="#图片的瀑布流展示实现" class="headerlink" title="图片的瀑布流展示实现"></a>图片的瀑布流展示实现</h2><p>瀑布流实现的主要思路是：</p><ol><li>确定所有图片的固定宽度</li><li>实时监听-获取窗口当前宽度</li><li>根据图片固定宽度和窗口宽度确定每行排列的图片数量</li><li>依次获取图片信息，准备开始进行瀑布流渲染</li><li>根据图片原尺寸信息以及固定宽度进行图片的缩放并保存缩放后的图片长度</li><li>第一行图片只需要按照顺序依次渲染图片</li><li>从第二行开始，根据之前保存的缩放图片长度确定当前最短列，在该位置渲染图片，直到整个渲染过程结束</li></ol><p>瀑布流扩展功能：</p><ol><li>通过功能键（CTRL+鼠标滚轮滑动）实现图片的放大缩小（主要在于调整图片的固定宽度计算图片新长度以及重新实现渲染图片过程）</li><li>懒加载，在滑动到图片位置前不加载图片以节省系统开销</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">el-scrollbar</span> <span class="attr">v-if</span>=<span class="string">&quot;targetVal == contentArr.length&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;enlargeImage&quot;</span>&gt;</span>enlargeImage<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;decreaseImage&quot;</span>&gt;</span>decreaseImage<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;getContentArr&quot;</span>&gt;</span>getContentArr<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;position: relative&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-for</span>=<span class="string">&quot;(column, index) in columns&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;index&quot;</span> <span class="attr">class</span>=<span class="string">&quot;column&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-for</span>=<span class="string">&quot;(item, i) in column.columnArr&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;i&quot;</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span> <span class="attr">:style</span>=<span class="string">&quot;&#123; width: itemWidth + &#x27;px&#x27; &#125;&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">el-image</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">              <span class="attr">:src</span>=<span class="string">&quot;item.src&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">              <span class="attr">fit</span>=<span class="string">&quot;cover&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">              <span class="attr">:style</span>=<span class="string">&quot;&#123; height: item.height + &#x27;px&#x27;, width: itemWidth + &#x27;px&#x27; &#125;&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">              <span class="attr">class</span>=<span class="string">&quot;image&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">              <span class="attr">lazy</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">            /&gt;</span></span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">el-scrollbar</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="attr">props</span>: &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="comment">//从父组件获取图集信息</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="attr">contentArr</span>: &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="attr">type</span>: <span class="built_in">Object</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="attr">required</span>: <span class="literal">true</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="attr">itemWidth</span>: <span class="number">220</span>, <span class="comment">//默认图片框宽度</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="attr">targetVal</span>: <span class="number">0</span>, <span class="comment">//标志值，用来记录已读取图片信息数目，待全部读取完成后显示瀑布流</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="attr">columns</span>: [],</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="attr">arrIndex</span>: []</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="comment">// pageSize: 25,</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="comment">// startPage: 1,</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="comment">// pageNum: 1</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="attr">watch</span>: &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="comment">//监听标志值变化，直到所有图片长度成功获取</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="attr">targetVal</span>: &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="function"><span class="title">handler</span>(<span class="params">newValue, oldValue</span>)</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="keyword">if</span> (newValue == <span class="built_in">this</span>.contentArr.length) &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">          <span class="built_in">this</span>.initPage()</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="attr">immediate</span>: <span class="literal">true</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="function"><span class="title">created</span>(<span class="params"></span>)</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="built_in">this</span>.getImgHeight()</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="function"><span class="title">mounted</span>(<span class="params"></span>)</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="comment">// this.initPage()</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="comment">//监听键盘与鼠标（CTRL+鼠标滚轮）实现瀑布流图片缩放</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="built_in">this</span>.keyDownAndScroll()</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="attr">methods</span>: &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="comment">//初始化页面</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="function"><span class="title">initPage</span>(<span class="params"></span>)</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="comment">//调用初始化方法</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="built_in">this</span>.init()</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="comment">//在页面大小出现变化时重新加载瀑布流</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="built_in">window</span>.onresize = <span class="function">() =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="built_in">this</span>.init()</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="comment">//获取当前列下最短长度位置（用来确定下一张图片插入位置）</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="function"><span class="title">getMinHeight</span>(<span class="params">arr</span>)</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="keyword">let</span> a = []</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        a.push(<span class="built_in">parseInt</span>(arr[i].height) + <span class="built_in">parseInt</span>(arr[i].top))</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="keyword">return</span> <span class="built_in">Math</span>.min.apply(<span class="literal">null</span>, a)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="comment">//获取指定长度位置后，进一步获取该位置索引值以确定图片插入位置</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="function"><span class="title">getMinIndex</span>(<span class="params">val</span>)</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="built_in">this</span>.columns.length; i++) &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="keyword">let</span> height = <span class="built_in">this</span>.columns[i].columnArr[<span class="built_in">this</span>.columns[i].columnArr.length - <span class="number">1</span>].height</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="keyword">let</span> top = <span class="built_in">this</span>.columns[i].columnArr[<span class="built_in">this</span>.columns[i].columnArr.length - <span class="number">1</span>].top</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="keyword">if</span> (<span class="built_in">parseInt</span>(height) + <span class="built_in">parseInt</span>(top) == val) &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">          <span class="built_in">this</span>.arrIndex.push(i)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="comment">//异步获取图像宽高等基本信息</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="keyword">async</span> <span class="function"><span class="title">getImgHeight</span>(<span class="params"></span>)</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="comment">//在异步方法下的this与JS全局中的this意义不同，</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="comment">//所以在方法开始时重新定义全局this变量用来获得全局数据</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="keyword">let</span> sel = <span class="built_in">this</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="comment">//遍历contentArr（从父组件获取并传递过来）</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="built_in">this</span>.contentArr.length; i++) &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="built_in">console</span>.log(i)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="keyword">let</span> img = <span class="keyword">new</span> Image() <span class="comment">//初始化图像对象</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="comment">//获取指定图像（在请求路径后加入随机数保证强制刷新请求）</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        img.src = <span class="built_in">this</span>.contentArr[i].src + <span class="string">&#x27;?&#x27;</span> + <span class="built_in">Date</span>.parse(<span class="keyword">new</span> <span class="built_in">Date</span>())</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="comment">//利用promise异步构造获取图像宽高等基本信息</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="keyword">var</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">reslove</span>) =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">          img.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="keyword">let</span> scale = sel.itemWidth / img.width <span class="comment">//通过固定宽度计算长度缩放比例</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="keyword">let</span> width = img.width</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="keyword">var</span> height = <span class="built_in">Math</span>.floor(scale * img.height) <span class="comment">//对原长度进行缩放（height是真实展示在页面上的长度）</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="keyword">let</span> trueHeight = img.height <span class="comment">//同时保存图片的实际长度（文件真实长度，用来方便后续在同步方法中刷新展示长度）</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="comment">//将展示长度与真实长度作为返回值传递出去</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="keyword">let</span> data = &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">              <span class="attr">height</span>: height,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">              <span class="attr">trueHeight</span>: trueHeight,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">              <span class="attr">width</span>: width</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            reslove(data)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">          &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        &#125;)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="keyword">await</span> promise</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="comment">//等待异步方法执行完成后，对图片列表数据进行刷新</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        promise.then(<span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">          <span class="built_in">console</span>.log(data)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">          sel.contentArr[i].height = data.height</span></span></span><br><span class="line"><span class="javascript"><span class="xml">          sel.contentArr[i].trueHeight = data.trueHeight</span></span></span><br><span class="line"><span class="javascript"><span class="xml">          sel.contentArr[i].width = data.width</span></span></span><br><span class="line"><span class="javascript"><span class="xml">          sel.targetVal++</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        &#125;)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="comment">//测试方法，打印contentArr</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="function"><span class="title">getContentArr</span>(<span class="params"></span>)</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="built_in">console</span>.log(<span class="built_in">this</span>.contentArr)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="comment">//刷新图片高度</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="function"><span class="title">refreshImageHeight</span>(<span class="params"></span>)</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="comment">//刷新图片高度（用于在页面中通过CTRL+鼠标滚轮或滑动条动态调整图片宽度后进行图片高度的刷新）</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="comment">//由于在页面初始化中执行的getImgHeight方法已经获取到了图片的真实高度，</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="comment">//所以在此处就只需要重新计算宽度修改过之后的长度缩放比例以及新的高度（避免了在刷新页面过程中使用异步方法）</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="built_in">this</span>.contentArr.length; i++) &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="comment">//计算缩放比例</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="keyword">let</span> scale = <span class="built_in">this</span>.itemWidth / <span class="built_in">this</span>.contentArr[i].width</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="keyword">let</span> trueHeight = <span class="built_in">this</span>.contentArr[i].trueHeight</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="keyword">let</span> height = <span class="built_in">Math</span>.floor(scale * trueHeight) <span class="comment">//对原长度进行缩放（height是真实展示在页面上的长度）</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="comment">//更新刷新后的新高度</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="built_in">this</span>.contentArr[i].height = height</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="comment">// console.log(this.contentArr[i])</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">      &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="comment">//初始化（重载）页面瀑布流</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="function"><span class="title">init</span>(<span class="params"></span>)</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="built_in">this</span>.columns = []</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="keyword">let</span> contentLen = <span class="built_in">this</span>.contentArr.length</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="comment">// let contentLen = this.pageSize</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="comment">// 根据可视区域的宽度判断需要几列</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="keyword">let</span> cWidth = <span class="built_in">document</span>.documentElement.clientWidth || <span class="built_in">document</span>.body.clientWidth</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="comment">// 假设图片宽度为240px</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="keyword">let</span> cLen = <span class="built_in">Math</span>.floor(cWidth / (<span class="built_in">this</span>.itemWidth + <span class="number">20</span>) - <span class="number">1</span>)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="built_in">console</span>.log(cLen)</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="comment">// 初始化每一列的第一行元素</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; cLen; i++) &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="built_in">this</span>.contentArr[i].top = <span class="number">0</span> <span class="comment">//预设距离顶部值为0</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="built_in">this</span>.columns.push(&#123; <span class="attr">columnArr</span>: [<span class="built_in">this</span>.contentArr[i]] &#125;)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="comment">// 对剩余元素的判断，应该放到哪一列</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="keyword">for</span> (<span class="keyword">var</span> index = cLen; index &lt; contentLen; index++) &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="built_in">this</span>.arrIndex = []</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="keyword">let</span> arr = [] <span class="comment">//找到高度最小的一列，可能有多个</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="keyword">let</span> minHeight = <span class="number">0</span> <span class="comment">//高度最小的一列的高度</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="keyword">let</span> pushIndex = <span class="number">0</span> <span class="comment">//高度最小的一列所在位置的索引</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="built_in">this</span>.columns.length; i++) &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">          arr.push(&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="attr">height</span>: <span class="built_in">this</span>.columns[i].columnArr[<span class="built_in">this</span>.columns[i].columnArr.length - <span class="number">1</span>].height,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="attr">top</span>: <span class="built_in">this</span>.columns[i].columnArr[<span class="built_in">this</span>.columns[i].columnArr.length - <span class="number">1</span>].top</span></span></span><br><span class="line"><span class="javascript"><span class="xml">          &#125;)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        minHeight = <span class="built_in">this</span>.getMinHeight(arr)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="built_in">this</span>.getMinIndex(minHeight)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="keyword">if</span> (<span class="built_in">this</span>.arrIndex.length &gt; <span class="number">0</span>) &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">          pushIndex = <span class="built_in">Math</span>.min.apply(<span class="literal">null</span>, <span class="built_in">this</span>.arrIndex) <span class="comment">//出现高度一样的，去索引最小的</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="built_in">this</span>.contentArr[index].top = minHeight + <span class="number">20</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="built_in">this</span>.columns[pushIndex].columnArr.push(<span class="built_in">this</span>.contentArr[index])</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="comment">//图像放大（宽度加10）</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="function"><span class="title">enlargeImage</span>(<span class="params"></span>)</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="built_in">this</span>.itemWidth += <span class="number">10</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="built_in">this</span>.refreshImageHeight()</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="built_in">this</span>.init()</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="comment">//图片缩小（宽度减10）</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="function"><span class="title">decreaseImage</span>(<span class="params"></span>)</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="built_in">this</span>.itemWidth -= <span class="number">10</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="built_in">this</span>.refreshImageHeight()</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="built_in">this</span>.init()</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="comment">// 监听键盘和鼠标滚轮组合</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="function"><span class="title">keyDownAndScroll</span>(<span class="params"></span>)</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="keyword">let</span> ctrlDown = <span class="literal">false</span> <span class="comment">//ctrl按键按压情况</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">      ;(<span class="built_in">document</span>.onkeydown = <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="comment">//事件对象兼容</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="keyword">let</span> e1 = e || event || <span class="built_in">window</span>.event || <span class="built_in">arguments</span>.callee.caller.arguments[<span class="number">0</span>]</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="comment">//按下CTRL键下后记录当前情况</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="keyword">if</span> (e1.keyCode === <span class="number">17</span>) ctrlDown = <span class="literal">true</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">      &#125;),</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        (<span class="built_in">document</span>.onkeyup = <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">          <span class="keyword">let</span> e1 = e || event || <span class="built_in">window</span>.event || <span class="built_in">arguments</span>.callee.caller.arguments[<span class="number">0</span>]</span></span></span><br><span class="line"><span class="javascript"><span class="xml">          <span class="comment">//松开后修改CTRL键按压情况</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">          <span class="keyword">if</span> (e1.keyCode === <span class="number">17</span>) ctrlDown = <span class="literal">false</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        &#125;),</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="comment">//监听鼠标滚轮情况</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="built_in">document</span>.addEventListener(</span></span></span><br><span class="line"><span class="javascript"><span class="xml">          <span class="string">&#x27;mousewheel&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">          <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="comment">// e.preventDefault()</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="keyword">let</span> e1 = e || event || <span class="built_in">window</span>.event || <span class="built_in">arguments</span>.callee.caller.arguments[<span class="number">0</span>]</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="comment">//判断CTRL键是否被按下</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="keyword">if</span> (ctrlDown) &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">              <span class="keyword">if</span> (e1.wheelDeltaY &gt; <span class="number">0</span>) &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                <span class="comment">// 放大</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">                <span class="built_in">console</span>.log(<span class="string">&#x27;放大&#x27;</span>)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                <span class="built_in">this</span>.enlargeImage()</span></span></span><br><span class="line"><span class="javascript"><span class="xml">              &#125; <span class="keyword">else</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                <span class="comment">// 缩小</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">                <span class="built_in">console</span>.log(<span class="string">&#x27;缩小&#x27;</span>)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                <span class="built_in">this</span>.decreaseImage()</span></span></span><br><span class="line"><span class="javascript"><span class="xml">              &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">          &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">          <span class="literal">false</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        )</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h1 id="开发进度"><a href="#开发进度" class="headerlink" title="开发进度"></a>开发进度</h1><table><thead><tr><th>日期</th><th>完成内容</th><th>待处理</th></tr></thead><tbody><tr><td>2022/1/26</td><td>框架搭建，文件夹选择器，IndexedDB测试用例</td><td>文件夹内文件预览，打开</td></tr><tr><td>2022/1/27</td><td>文件内文件预览，文件打开以及所在文件夹打开</td><td>文件信息编辑（加tag，改名，移除等）</td></tr><tr><td>2022/1/27-2</td><td>窗体最小宽度调整，图片预览部分功能按键设置</td><td></td></tr><tr><td>2022/1/28</td><td>在card下打开所在文件夹，删除该文件，编辑文件名等功能，以及打分模块示例</td><td></td></tr><tr><td>2022/1/30</td><td>视频封面选择测试，图片压缩功能测试</td><td></td></tr><tr><td>2022/2/3</td><td>右键菜单，视频封面图选择与删除</td><td>压缩文件第一张图片预览</td></tr><tr><td>2022/2/4</td><td>压缩文件读取与选择性解压，设置压缩文件封面</td><td>高级选择表单</td></tr><tr><td>2022/2/4-2</td><td>本地文件分页</td><td></td></tr><tr><td>2022/4/6</td><td>本地重新部署</td><td>调用python执行功能性文件，页面设计</td></tr><tr><td>2022/7/7</td><td>全局变量文件Global.vue测试</td><td></td></tr><tr><td>2022/7/8</td><td>引入NaiveUI</td><td></td></tr><tr><td>2022/7/9</td><td>完成全局路径基本配置,配置electron builder进行前端打包，解决打包后iconfont显示问题，后端基本部署完成，H2数据库引入完成，测试基本使用功能正常，由后端监听启动前端部分测试成功</td><td>资源管理方式定义，资源信息存储方式，后端打包方式，H2数据库可视化部分测试</td></tr><tr><td>2022/7/10</td><td>添加图集功能测试，前后端连接，H2数据库构建，图集录入功能实现</td><td>图集展示功能</td></tr><tr><td>2022/7/23</td><td>图集选择栏</td><td>图集展示功能</td></tr><tr><td>2022/7/25</td><td>瀑布流图片展示功能demo完成</td><td>进一步优化瀑布流展示</td></tr><tr><td>2022/7/26</td><td>瀑布流优化，还有进一步优化空间</td><td>creted,mounted选择</td></tr><tr><td>2022/7/27</td><td>瀑布流功能暂定版（修正数据加载跳闪，数据多次重加载）</td><td>图像信息表单主动填入，图像多种展示方式</td></tr><tr><td>2022/7/28</td><td>瀑布流下拉无线刷新初版</td><td></td></tr><tr><td>2022/8/26</td><td>瀑布流图片放大缩小功能实现，同时监听鼠标滚轮和CTRL按键后进行放大缩小实现</td><td>功能继续测试与整合</td></tr><tr><td>2022/8/28</td><td>实现后端自动获取视频缩略图功能，实现前端获取后端生成的视频缩略图功能</td><td>缩略图保存位置以及数据统一</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 项目开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Electron </tag>
            
            <tag> Java </tag>
            
            <tag> JavaWeb </tag>
            
            <tag> Vue </tag>
            
            <tag> 集乐 </tag>
            
            <tag> 开发记录 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IndexedDB浏览器数据库基本概念</title>
      <link href="/2022/01/24/IndexedDB%E6%B5%8F%E8%A7%88%E5%99%A8%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/"/>
      <url>/2022/01/24/IndexedDB%E6%B5%8F%E8%A7%88%E5%99%A8%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/</url>
      
        <content type="html"><![CDATA[<p>参考文档：<a href="https://www.cnblogs.com/chenjun1/p/11644866.html">https://www.cnblogs.com/chenjun1/p/11644866.html</a></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;scroll-y&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;mb-2&quot;</span>&gt;</span>IndexDbDemo.vue<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;addData()&quot;</span>&gt;</span>增加数据<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;updateData()&quot;</span>&gt;</span>编辑数据<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;deleteData()&quot;</span>&gt;</span>删除数据<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;findData()&quot;</span>&gt;</span>查找数据<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;mt-2&quot;</span>&gt;</span>显示的数据<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123; personData &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="comment">//参考文档：https://www.cnblogs.com/chenjun1/p/11644866.html</span></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> &#123; reactive, toRefs &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span><br><span class="line"><span class="javascript"><span class="comment">// 创建数据库</span></span></span><br><span class="line"><span class="javascript"><span class="comment">// 第一个参数为数据库名称，第二个数据库为版本号，返回一个IDBOpenDBRequest对象用于操作数据库。</span></span></span><br><span class="line"><span class="javascript"><span class="comment">// 对于open()的第一个参数数据库名，open()会先去查找本地是否已有这个数据库，如果有则直接将这个数据库返回，如果没有，则先创建这个数据库，再返回。对于第二个参数版本号，则是一个可选参数，如果不传，默认为1，但是如果传入必须是一个整数</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">const</span> request = indexedDB.open(<span class="string">&#x27;myDatabase&#x27;</span>)</span></span><br><span class="line"><span class="javascript"><span class="keyword">let</span> db</span></span><br><span class="line"><span class="javascript">request.onsuccess = <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">  db = request.result</span></span><br><span class="line"><span class="javascript">  <span class="built_in">console</span>.log(<span class="string">&#x27;数据库打开成功&#x27;</span>)</span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript">request.onerror = <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">  <span class="built_in">console</span>.log(<span class="string">&#x27;数据库打开报错&#x27;</span>)</span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript"><span class="comment">//数据库升级事件</span></span></span><br><span class="line"><span class="javascript">request.onupgradeneeded = <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">  db = event.target.result</span></span><br><span class="line"><span class="javascript">  <span class="keyword">let</span> objectStore</span></span><br><span class="line"><span class="javascript">  <span class="comment">//新增一张叫做person的表格，主键是id,是否存在，如果不存在再新建</span></span></span><br><span class="line"><span class="javascript">  <span class="keyword">if</span> (!db.objectStoreNames.contains(<span class="string">&#x27;person&#x27;</span>)) &#123;</span></span><br><span class="line"><span class="javascript">    objectStore = db.createObjectStore(<span class="string">&#x27;person&#x27;</span>, &#123; <span class="attr">keyPath</span>: <span class="string">&#x27;id&#x27;</span> &#125;)</span></span><br><span class="line"><span class="javascript">    objectStore.createIndex(<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;name&#x27;</span>, &#123; <span class="attr">unique</span>: <span class="literal">false</span> &#125;)</span></span><br><span class="line"><span class="javascript">    objectStore.createIndex(<span class="string">&#x27;email&#x27;</span>, <span class="string">&#x27;email&#x27;</span>, &#123; <span class="attr">unique</span>: <span class="literal">true</span> &#125;)</span></span><br><span class="line"><span class="javascript">  &#125;</span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript"><span class="keyword">const</span> addData = <span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">let</span> request = db</span></span><br><span class="line"><span class="javascript">    .transaction([<span class="string">&#x27;person&#x27;</span>], <span class="string">&#x27;readwrite&#x27;</span>)</span></span><br><span class="line"><span class="javascript">    .objectStore(<span class="string">&#x27;person&#x27;</span>)</span></span><br><span class="line"><span class="javascript">    .add(&#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">name</span>: <span class="string">&#x27;张三&#x27;</span>, <span class="attr">age</span>: <span class="number">24</span>, <span class="attr">email</span>: <span class="string">&#x27;zhangsan@example.com&#x27;</span> &#125;)</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">  request.onsuccess = <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(<span class="string">&#x27;数据写入成功&#x27;</span>)</span></span><br><span class="line"><span class="javascript">  &#125;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">  request.onerror = <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(<span class="string">&#x27;数据写入失败&#x27;</span>)</span></span><br><span class="line"><span class="javascript">  &#125;</span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="keyword">let</span> state = reactive(&#123;</span></span><br><span class="line"><span class="javascript">  <span class="attr">personData</span>: &#123;&#125;</span></span><br><span class="line"><span class="javascript">&#125;)</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="keyword">const</span> &#123; personData &#125; = toRefs(state)</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="keyword">const</span> findData = <span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">let</span> transaction = db.transaction([<span class="string">&#x27;person&#x27;</span>])</span></span><br><span class="line"><span class="javascript">  <span class="keyword">let</span> objectStore = transaction.objectStore(<span class="string">&#x27;person&#x27;</span>)</span></span><br><span class="line"><span class="javascript">  <span class="keyword">let</span> request = objectStore.get(<span class="number">1</span>)</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">  request.onerror = <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(<span class="string">&#x27;事务失败&#x27;</span>)</span></span><br><span class="line"><span class="javascript">  &#125;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">  request.onsuccess = <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">if</span> (request.result) &#123;</span></span><br><span class="line"><span class="javascript">      state.personData = request.result</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(<span class="string">&#x27;Name: &#x27;</span> + request.result.name)</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(<span class="string">&#x27;Age: &#x27;</span> + request.result.age)</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(<span class="string">&#x27;Email: &#x27;</span> + request.result.email)</span></span><br><span class="line"><span class="javascript">    &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(<span class="string">&#x27;未获得数据记录&#x27;</span>)</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript">  &#125;</span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="keyword">const</span> updateData = <span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">let</span> request = db</span></span><br><span class="line"><span class="javascript">    .transaction([<span class="string">&#x27;person&#x27;</span>], <span class="string">&#x27;readwrite&#x27;</span>)</span></span><br><span class="line"><span class="javascript">    .objectStore(<span class="string">&#x27;person&#x27;</span>)</span></span><br><span class="line"><span class="javascript">    .put(&#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">name</span>: <span class="string">&#x27;李四&#x27;</span>, <span class="attr">age</span>: <span class="number">35</span>, <span class="attr">email</span>: <span class="string">&#x27;lisi@example.com&#x27;</span> &#125;)</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">  request.onsuccess = <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(<span class="string">&#x27;数据更新成功&#x27;</span>)</span></span><br><span class="line"><span class="javascript">  &#125;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">  request.onerror = <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(<span class="string">&#x27;数据更新失败&#x27;</span>)</span></span><br><span class="line"><span class="javascript">  &#125;</span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript"><span class="keyword">const</span> deleteData = <span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">let</span> request = db.transaction([<span class="string">&#x27;person&#x27;</span>], <span class="string">&#x27;readwrite&#x27;</span>).objectStore(<span class="string">&#x27;person&#x27;</span>).delete(<span class="number">1</span>)</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">  request.onsuccess = <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(<span class="string">&#x27;数据删除成功&#x27;</span>)</span></span><br><span class="line"><span class="javascript">  &#125;</span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span> <span class="attr">lang</span>=<span class="string">&quot;scss&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>我的博客即将同步至腾讯云开发者社区，邀请大家一同入驻：<a href="https://cloud.tencent.com/developer/support-plan?invite_code=tnjsrr6rwrrk">https://cloud.tencent.com/developer/support-plan?invite_code=tnjsrr6rwrrk</a></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> 前端框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> IndexedDB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>25-两级页表</title>
      <link href="/2021/12/29/25-%E4%B8%A4%E7%BA%A7%E9%A1%B5%E8%A1%A8/"/>
      <url>/2021/12/29/25-%E4%B8%A4%E7%BA%A7%E9%A1%B5%E8%A1%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="两级页表"><a href="#两级页表" class="headerlink" title="两级页表"></a>两级页表</h1><h2 id="单级页表的问题"><a href="#单级页表的问题" class="headerlink" title="单级页表的问题"></a>单级页表的问题</h2><p>某计算机系统按字节寻址，支持32位的逻辑地址，采用分页存储管理，页面大小为4KB，页表项长度为4B。</p><p>4KB = $2^{12}B$，因此页内地址要用12位表示，剩余20位表示页号。<br>因此，该系统中用户进程最多有220页。相应的，一个进程的页表中，最多会有220 = 1M = 1,048,576个页表项，所以一个页表最大需要220*4B=$2^{22}B$，共需要$2^{22}/2^{12}=2^{10}$个页框存储该页表。</p><p>根据页号查询页表的方法：K号页对应的页表项存放位置=页表始址＋K*4要在所有的页表项都连续存放的基础上才能用这种方法找到页表项</p><p>需要专门给进程分配$2^{10}=1024$个连续的页框来存放它的页表</p><p>同时根据局部性原理可知，很多时候，进程在一段时间内只需要访问某几个页面就可以正常运行了。因此没有必要让整个页表都常驻内存。</p><h3 id="问题一-页表必须连续存放，因此当页表很大时，需要占用很多个连续的页框。"><a href="#问题一-页表必须连续存放，因此当页表很大时，需要占用很多个连续的页框。" class="headerlink" title="问题一:页表必须连续存放，因此当页表很大时，需要占用很多个连续的页框。"></a>问题一:页表必须连续存放，因此当页表很大时，需要占用很多个连续的页框。</h3><p>解决方法：我们在解决“进程在内存中必须连续存储问题”时将进程地址空间分页，并为其建立一张页表，记录各页面的存放位置。同样的思路也可用于解决“页表必须连续存放”的问题，把必须连续存放的页表再分页</p><p>可将长长的页表进行分组，使每个内存块刚好可以放入一个分组（比如上个例子中，页面大小4KB,每个页表项4B，每个页面可存放1K个页表项，因此每1K个连续的页表项为一组，每组刚好占一个内存块，再讲各组离散地放到各个内存块中）</p><p>另外，要为离散分配的页表再建立一张页表，称为页目录表，或称外层页表，或称顶层页表</p><p><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20211229185116.png"></p><p><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20211229185307.png"></p><p><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20211229185457.png"></p><h3 id="问题二-没有必要让整个页表常驻内存，因为进程在一段时间内可能只需要访问某几个特定的页面。"><a href="#问题二-没有必要让整个页表常驻内存，因为进程在一段时间内可能只需要访问某几个特定的页面。" class="headerlink" title="问题二:没有必要让整个页表常驻内存，因为进程在一段时间内可能只需要访问某几个特定的页面。"></a>问题二:没有必要让整个页表常驻内存，因为进程在一段时间内可能只需要访问某几个特定的页面。</h3><p><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20211229185602.png"></p><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><p><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20211229185810.png"></p>]]></content>
      
      
      <categories>
          
          <category> 计算机基础 </category>
          
          <category> 操作系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 操作系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>24-基本分页存储管理</title>
      <link href="/2021/12/28/24-%E5%9F%BA%E6%9C%AC%E5%88%86%E9%A1%B5%E5%AD%98%E5%82%A8%E7%AE%A1%E7%90%86/"/>
      <url>/2021/12/28/24-%E5%9F%BA%E6%9C%AC%E5%88%86%E9%A1%B5%E5%AD%98%E5%82%A8%E7%AE%A1%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h1 id="非连续分配管理方式-基本分页存储管理"><a href="#非连续分配管理方式-基本分页存储管理" class="headerlink" title="非连续分配管理方式-基本分页存储管理"></a>非连续分配管理方式-基本分页存储管理</h1><p>从之前文章介绍的两种连续分配管理方式中我们可以看到：</p><ul><li>固定分区分配：缺乏灵活性，会产生大量的内部碎片，内存利用率很低</li><li>动态分区分配：会产生大量外部碎片，虽然可以用紧凑技术处理，但时间成本会增加</li></ul><p>考虑到连续分配方式的缺陷，人们考虑到如果可以将一个进程分散然后分别装入到不相邻分区中就可以更加高效利用内存，基于这一思想，产生了“非连续分配方式”也成为离散分配方式</p><h2 id="把“固定分区分配”改造为“非连续分配”"><a href="#把“固定分区分配”改造为“非连续分配”" class="headerlink" title="把“固定分区分配”改造为“非连续分配”"></a>把“固定分区分配”改造为“非连续分配”</h2><p>假设进程A大小为23MB，但是每个分区大小只有10MB，如果进程只能占用一个分区，那显然放不下。</p><blockquote><p>解决思路:如果允许进程占用多个分区，那么可以把进程拆分成10MB+10MB+3MB三个部分，再把这三个部分分别放到三个分区中(这些分区不要求连续）…</p></blockquote><p>进程A的最后一个部分是3MB，放入分区后会产生7MB的内部碎片。<br>如果每个分区大小为2MB，那么进程A可以拆分成11*2MB +1MB共12个部分，只有最后一部分1MB占不满分区，会产生1MB的内部碎片。<br>显然，如果把分区大小设置的更小一些，内部碎片会更小，内存利用率会更高。</p><p>上面这种思想就是“基本分页存储管理”的思想――把内存分为一个个相等的小分区,再按照分区大小把进程拆分成一个个小部分</p><h2 id="分页存储管理的基本概念"><a href="#分页存储管理的基本概念" class="headerlink" title="分页存储管理的基本概念"></a>分页存储管理的基本概念</h2><p>将内存空间分为一个个大小相等的分区（比如:每个分区4KB），每个分区就是一个“页框”，或称“页帧”、“内存块”、“物理块”。每个页框有一个编号，即“页框号”(或者“内存块号”、“页帧号”、“物理块号”)页框号从0开始。</p><p>将用户进程的地址空间也分为与页框大小相等的一个个区域，称为“页”或“页面”。每个页面也有一个编号，即“页号”，页号也是从0开始。（注:进程的最后一个页面可能没有一个页框那么大。因此，页框不能太大，否则可能产生过大的内部碎片）</p><p>操作系统以页框为单位为各个进程分配内存空间。进程的每个页面分别放入一个页框中。也就是说，进程的页面与内存的页框有一一对应的关系。</p><p>各个页面不必连续存放，也不必按先后顺序来，可以放到不相邻的各个页框中。</p><p><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20211227202745.png"></p><h3 id="实现地址转换"><a href="#实现地址转换" class="headerlink" title="实现地址转换"></a>实现地址转换</h3><p><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20211227203210.png"></p><p><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20211227203335.png"></p><p><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20211227203543.png"></p><p>结论:如果每个页面大小为2^K B，用二进制数表示逻辑地址，则末尾K位即为页内偏移量，其余部分就是页号。因此，如果让每个页面的大小为2的整数幂，计算机就可以很方便地得出一个逻辑地址对应的页号和页内偏移量。</p><p>分页存储管理的逻辑地址结构如下所示:</p><p><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20211227204258.png"></p><p>地址结构包含两个部分:前一部分为页号，后一部分为页内偏移量w。在上图所示的例子中，地址长度为32位，其中0<del>11位为“页内偏移量”，或称“页内地址”，12</del>31位为“页号”。</p><ul><li>如果有K位表示“页内偏移量”，则说明该系统中一个页面的大小是2^K个内存单元</li><li>如果有M位表示“页号”，则说明在该系统中，一个进程最多允许有2^M个页面</li></ul><p>要如何知道该页号对应在内存中的起始地址</p><p><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20211227204930.png"></p><p><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20211227205435.png"></p><h2 id="基本地址变换机构"><a href="#基本地址变换机构" class="headerlink" title="基本地址变换机构"></a>基本地址变换机构</h2><p>（基本地址变换机构是用于实现逻辑地址到物理地址转换的一组硬件机构）</p><p>基本地址变换机构可以借助进程的页表将逻辑地址转换为物理地址。</p><p>通常会在系统中设置一个页表寄存器（PTR），存放页表在内存中的起始地址F和页表长度M。进程未执行时，页表的始址和页表长度放在进程控制块（PCB）中，当进程被调度时，操作系统内核会把它们放到页表寄存器中。</p><p><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20211229164109.png"></p><p>设页面大小为L，逻辑地址A到物理地址E的变换过程如下：</p><ol><li>计算页号Р和页内偏移量W（如果用十进制数手算，则P=A/L，W=A%L;但是在计算机实际运行时，逻辑地址结构是固定不变的，因此计算机硬件可以更快地得到二进制表示的页号、页内偏移量）</li><li>比较页号P和页表长度M，若P&gt;=M，则产生越界中断，否则继续执行。（注意:页号是从O开始的，而页表长度至少是1，因此 P=M时也会越界）</li><li>页表中页号P对应的页表项地址=页表起始地址F+页号P<em>页表项长度，取出该页表项内容b，即为内存块号。（注意区分页表项长度、页表长度、页面大小的区别。页表长度指的是这个页表中总共有几个页表项，即总共有几个页;页表项长度指的是每个页表项占多大的存储空间;页面大小指的是一个页面占多大的存储空间）<br>④计算E= b</em>L+W，用得到的物理地址E去访问内存。（如果内存块号、页面偏移量是用二进制表示的,那么把二者拼接起来就是最终的物理地址了）</li></ol><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>例:若页面大小L为1K字节，页号2对应的内存块号b=8，将逻辑地址A=2500转换为物理地址E。</p><blockquote><p>等价描述:某系统按字节寻址，逻辑地址结构中，页内偏移量占10位，页号2对应的内存块号b=8，将逻辑地址A=2500转换为物理地址E。</p></blockquote><ol><li>计算页号、页内偏移量<ul><li>页号P=A/L = 2500/1024 =2</li><li>页内偏移量W=A%L= 2500%1024= 452</li></ul></li><li>根据题中条件可知，页号2没有越界，其存放的内存块号b=8</li><li>物理地址E=b*L+W=8*1024+425=8644</li></ol><p>在分页存储管理（页式管理）的系统中，只要确定了每个页面的大小，逻辑地址结构就确定了。因此，页式管理中地址是一维的。即，只要给出一个逻辑地址，系统就可以自动地算出页号、页内偏移量两个部分，并不需要显式地告诉系统这个逻辑地址中，页内偏移量占多少位。</p><h2 id="具有快表的地址变换机构"><a href="#具有快表的地址变换机构" class="headerlink" title="具有快表的地址变换机构"></a>具有快表的地址变换机构</h2><h3 id="局部性原理"><a href="#局部性原理" class="headerlink" title="局部性原理"></a>局部性原理</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> i=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">100</span>];</span><br><span class="line"><span class="keyword">while</span>(i&lt;<span class="number">100</span>)&#123;</span><br><span class="line">    a[i]=i;</span><br><span class="line">    i++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20211229175757.png"></p><p>以上面这段代码为例，10号内存块中存放了程序执行涉及到的相关指令，23号代码块中存放了程序定义的变量，在程序执行过程中，显而易见会频繁的访问到10号和23号代码块</p><p>在此基础上，我们引申出来时间与空间的局部性</p><ul><li>时间局部性：如果执行了程序中的某条指令，那么不久后这条指令很有可能再次执行;如果某个数据被访问过，不久之后该数据很可能再次被访问。(因为程序中存在大量的循环)<ul><li>以上面代码为例，我们定义了变量i，那么我们极有可能在之后频繁的调用变量i（在上文的while循环中不断执行累加操作）</li></ul></li><li>空间局部性：一旦程序访问了某个存储单元，在不久之后，其附近的存储单元也很有可能被访问。(因为很多数据在内存中都是连续存放的)<ul><li>以上面的代码为例，我们创建了长度为100的数组a，并且为数组第一位赋值为0，那么我们接下来既有可能回去访问它的第二位第三位（在上文中按顺序为数组循环赋值）</li></ul></li></ul><p>上问介绍的基本地址变换机构中，每次要访问一个逻辑地址，都需要查询内存中的页表。由于局部性原理，可能连续很多次查到的都是同一个页表项。既然如此，人们就考虑利用这个特性减少访问页表的次数</p><h3 id="快表概念"><a href="#快表概念" class="headerlink" title="快表概念"></a>快表概念</h3><p>快表，又称联想寄存器（TLB），是一种访问速度比内存快很多的高速缓冲存储器，用来存放当前访问的若干页表项，以加速地址变换的过程。与此对应，内存中的页表常称为慢表。</p><p>快表执行过程<br><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20211229180721.png"></p><h3 id="引入快表后，地址变换的过程"><a href="#引入快表后，地址变换的过程" class="headerlink" title="引入快表后，地址变换的过程"></a>引入快表后，地址变换的过程</h3><ol><li>CPU给出逻辑地址，由某个硬件算得页号、页内偏移量，将页号与快表中的所有页号进行比较。</li><li>如果找到匹配的页号，说明要访问的页表项在快表中有副本，则直接从中取出该页对应的内存块号，再将内存块号与页内偏移量拼接形成物理地址，最后，访问该物理地址对应的内存单元。因此，若快表命中，则访问某个逻辑地址仅需一次访存即可。</li><li>如果没有找到匹配的页号，则需要访问内存中的页表，找到对应页表项，得到页面存放的内存块号，再将内存块号与页内偏移量拼接形成物理地址，最后，访问该物理地址对应的内存单元。因此，若快表未命中，则访问某个逻辑地址需要两次访存（注意:在找到页表项后，应同时将其存入快表，以便后面可能的再次访问。但若快表已满，则必须按照一定的算法对旧的页表项进行替换）</li></ol><p>由于查询快表的速度比查询页表的速度快很多，因此只要快表命中，就可以节省很多时间。因为局部性原理，一般来说快表的命中率可以达到90%以上。</p><p>例：某系统使用基本分页存储管理，并采用了具有快表的地址变换机构。访问一次快表耗时1us，访问一次内存耗时100us。若快表的命中率为90%，那么访问一个逻辑地址的平均耗时是多少?</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">(1+100)* 0.9+(1+100+100)* 0.1 =111 us</span><br><span class="line"></span><br><span class="line">有的系统支持快表和慢表同时查找，如果是这样，平均耗时应该是</span><br><span class="line">(1+100)*0.9+(100+100)* 0.1=110.9 us</span><br><span class="line"></span><br><span class="line">若未采用快表机制，则访问一个逻辑地址需要</span><br><span class="line">100+100= 200us</span><br></pre></td></tr></table></figure><p>显然，引入快表机制后，访问一个逻辑地址的速度快多了。</p>]]></content>
      
      
      <categories>
          
          <category> 计算机基础 </category>
          
          <category> 操作系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 操作系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>23-内存空间的分配与回收</title>
      <link href="/2021/12/26/23-%E5%86%85%E5%AD%98%E7%A9%BA%E9%97%B4%E7%9A%84%E5%88%86%E9%85%8D%E4%B8%8E%E5%9B%9E%E6%94%B6/"/>
      <url>/2021/12/26/23-%E5%86%85%E5%AD%98%E7%A9%BA%E9%97%B4%E7%9A%84%E5%88%86%E9%85%8D%E4%B8%8E%E5%9B%9E%E6%94%B6/</url>
      
        <content type="html"><![CDATA[<h1 id="连续分配管理方式"><a href="#连续分配管理方式" class="headerlink" title="连续分配管理方式"></a>连续分配管理方式</h1><blockquote><p>连续分配：指系统为用户进程分配的必须是一个连续的内存空间</p></blockquote><h2 id="单一连续分配"><a href="#单一连续分配" class="headerlink" title="单一连续分配"></a>单一连续分配</h2><p>在单一连续分配方式中，内存被分为系统区和用户区。</p><ul><li>系统区通常位于内存的低地址部分，用于存放操作系统相关数据</li><li>用户区用于存放用户进程相关数据。内存中只能有一道用户程序，用户程序独占整个用户区空间。</li></ul><p><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20211225191718.png"></p><h3 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h3><ul><li>优点：实现简单，无外部碎片，可以采用覆盖技术扩充内存，不一定需要内存保护机制</li><li>缺点：只能用于单用户，单任务的操作系统中，有内部碎片，存储器利用率极低</li></ul><blockquote><p>内部碎片：分配给某进程的内存区域中，如果有些部分没有用上，这些内存部分就被称为“内部碎片”</p></blockquote><h2 id="固定分区分配"><a href="#固定分区分配" class="headerlink" title="固定分区分配"></a>固定分区分配</h2><p>20世纪60年代出现了支持多道程序的系统，为了能在内存中装入多道程序，且这些程序之间又不会相互干扰，于是将整个用户空间划分为若干个固定大小的分区，在每个分区中只装入一道作业，这样就形成了最早的、最简单的一种可运行多道程序的内存管理方式。</p><p>固定分区分配又可以细分为分区大小相等与分区大小不等两种情况</p><p><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20211225192123.png"></p><p>针对分区大小不等的情况，系统为了维护分区状态以及管理各个分区，需要建立一个数据结构–分区说明表：</p><table><thead><tr><th>分区号</th><th>大小（MB）</th><th>起始地址（M）</th><th>状态</th></tr></thead><tbody><tr><td>1</td><td>2</td><td>8</td><td>未分配</td></tr><tr><td>2</td><td>2</td><td>10</td><td>未分配</td></tr><tr><td>3</td><td>4</td><td>12</td><td>已分配</td></tr><tr><td>…</td><td>…</td><td>…</td><td>…</td></tr></tbody></table><p>当某用户程序要装入内存时，由操作系统内核程序根据用户程序大小检索该表，从中找到一个能满足大小的、未分配的分区，将之分配给该程序，然后修改状态为“已分配”。</p><h3 id="优缺点-1"><a href="#优缺点-1" class="headerlink" title="优缺点"></a>优缺点</h3><ul><li>分区大小相等：<ul><li>优点：适用于计算机控制多个相同对象的场合</li><li>缺点：缺乏灵活性</li></ul></li><li>分区大小不等：<ul><li>优点：实现简单，无外部碎片，增加了灵活性，可以按照不同大小的进程需求，根据系统中运行的作业大小情况进行划分</li><li>缺点：当用户程序过大时，可能所有分区都不能满足需求，此时不得不采用覆盖技术解决，但这又会降低性能，会产生内部碎片，内存效率低</li></ul></li></ul><h2 id="动态分区分配"><a href="#动态分区分配" class="headerlink" title="动态分区分配"></a>动态分区分配</h2><p>动态分区分配又称为可变分区分配。这种分配方式不会预先划分内存分区，而是在进程装入内存时，根据进程的大小动态地建立分区，并使分区的大小正好适合进程的需要。因此系统分区的大小和数目是可变的。(eg:假设某计算机内存大小为64MB，系统区8MB，用户区共56 MB..)</p><p><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/%E6%9C%AA%E5%91%BD%E5%90%8D%E6%96%87%E4%BB%B6.jpg"></p><p>动态分区分配中首先我们要考虑“系统要用什么样的数据结构记录内存使用情况？”，另外从进程4进入过程中我们看到，有多个空闲分区满足它的要求，所以我们要考虑“当很多空闲分区都能满足需求时，应该选择哪个分区进行分配”，最后我们看到，在进程3执行结束后，几个空闲分区在物理位置上相连，是否要将它们几个结合，所以我们还需要考虑“如何进行分区的分配与回收”</p><h3 id="系统要用什么样的数据结构记录内存使用情况？"><a href="#系统要用什么样的数据结构记录内存使用情况？" class="headerlink" title="系统要用什么样的数据结构记录内存使用情况？"></a>系统要用什么样的数据结构记录内存使用情况？</h3><p>最长采用两种常用的数据结构：空闲分区表和空闲分区链</p><p><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20211225194753.png"></p><h3 id="当很多空闲分区都能满足需求时，应该选择哪个分区进行分配"><a href="#当很多空闲分区都能满足需求时，应该选择哪个分区进行分配" class="headerlink" title="当很多空闲分区都能满足需求时，应该选择哪个分区进行分配"></a>当很多空闲分区都能满足需求时，应该选择哪个分区进行分配</h3><p>把一个新作业装入内存时，须按照一定的动态分区分配算法，从空闲分区表（或空闲分区链）中选出一个分区分配给该作业。由于分配算法算法对系统性能有很大的影响，因此人们对它进行了广泛的研究。并在此基础上完成了<a href="#%E5%8A%A8%E6%80%81%E5%88%86%E5%8C%BA%E5%88%86%E9%85%8D%E7%AE%97%E6%B3%95">多种动态分区分配算法</a></p><h3 id="如何进行分区的分配与回收"><a href="#如何进行分区的分配与回收" class="headerlink" title="如何进行分区的分配与回收"></a>如何进行分区的分配与回收</h3><p>首先是在分配过程中，可能会出现将进程大小与空闲分区大小不相等的情况，此时对于空闲分区表来说就需要修改对应分区大小以及起始地址。也可能出现进程大小恰好等于空闲分区大小的情况，此时就需要删除空闲分区表中的一行，对空闲分区链也同理</p><p>而对于回收过程，需要注意的就是，如果一个进程执行结束，其所在分区由分配状态变为空闲状态，就需要检查该分区前后是否还存在空闲分区，如果前方或后方存在空闲分区，就需要将他们合并为一个分区，并修改空闲分区表。如果前后都不存在空闲分区，则需要在空闲分区表中新增一行</p><p>动态分区分配没有内部碎片，但是有外部碎片。</p><blockquote><ul><li>内部碎片：分配给某进程的内存区域中，如果有些部分没有用上。</li><li>外部碎片：是指内存中的某些空闲分区由于太小而难以利用。</li><li>紧凑技术：如果内存中空闲空间的总和本来可以满足某进程的要求,但由于进程需要的是一整块连续的内存空间，因此这些“碎片”不能满足进程的需求。可以通过紧凑（拼凑，Compaction)技术来解决外部碎片。</li></ul></blockquote><h2 id="动态分区分配算法"><a href="#动态分区分配算法" class="headerlink" title="动态分区分配算法"></a>动态分区分配算法</h2><h3 id="首次适应算法"><a href="#首次适应算法" class="headerlink" title="首次适应算法"></a>首次适应算法</h3><ul><li>算法思想：每次都从低地址开始查找，找到第一个能满足大小的空闲分区。</li><li>如何实现：空闲分区以地址递增的次序排列。每次分配内存时顺序查找空闲分区链（或空闲分区表），找到大小能满足要求的第一个空闲分区。</li></ul><p><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20211227170023.png"></p><h3 id="最佳适应算法"><a href="#最佳适应算法" class="headerlink" title="最佳适应算法"></a>最佳适应算法</h3><ul><li>算法思想：由于动态分区分配是一种连续分配方式，为各进程分配的空间必须是连续的一整片区域。因此为了保证当“大进程”到来时能有连续的大片空间，可以尽可能多地留下大片的空闲区，即优先使用更小的空闲区。</li><li>如何实现：空闲分区按容量递增次序链接。每次分配内存时顺序查找空闲分区链（或空闲分区表），找到大小能满足要求的第一个空闲分区。</li></ul><p><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20211227170350.png"></p><p>缺点：每次都选最小的分区进行分配，会留下越来越多的、很小的、难以利用的内存块。因此这种方法会产生很多的外部碎片。</p><h3 id="最坏适应算法"><a href="#最坏适应算法" class="headerlink" title="最坏适应算法"></a>最坏适应算法</h3><p>又称最大适应算法（Largest Fit）</p><ul><li>算法思想：为了解决最佳适应算法的问题–即留下太多难以利用的小碎片，可以在每次分配时优先使用最大的连续空闲区，这样分配后剩余的空闲区就不会太小，更方便使用。</li><li>如何实现：空闲分区按容量递减次序链接。每次分配内存时顺序查找空闲分区链（或空闲分区表），找到大小能满足要求的第一个空闲分区。</li></ul><p><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20211227170723.png"></p><p>缺点：每次都选最大的分区进行分配，虽然可以让分配后留下的空闲区更大，更可用，但是这种方式会导致较大的连续空闲区被迅速用完。如果之后有“大进程”到达，就没有内存分区可用了。</p><h3 id="临近适应算法"><a href="#临近适应算法" class="headerlink" title="临近适应算法"></a>临近适应算法</h3><p>基于首次适应算法的一种改良</p><ul><li>算法思想：首次适应算法每次都从链头开始查找的。这可能会导致低地址部分出现很多小的空闲分区，而每次分配查找时，都要经过这些分区，因此也增加了查找的开销。如果每次都从上次查找结束的位置开始检索，就能解决上述问题。</li><li>如何实现：空闲分区以地址递增的顺序排列（可排成一个循环链表）。每次分配内存时从上次查找结束的位置开始查找空闲分区链（或空闲分区表），找到大小能满足要求的第一个空闲分区。</li></ul><p>首次适应算法每次都要从头查找，每次都需要检索低地址的小分区。但是这种规则也决定了当低地址部分有更小的分区可以满足需求时，会更有可能用到低地址部分的小分区，也会更有可能把高地址部分的天分区保留下来（最佳适应算法的优点）</p><p>邻近适应算法的规则可能会导致无论低地址、高地址部分的空闲分区都有相同的概率被使用，也就导致了高地址部分的大分区更可能被使用，划分为小分区，最后导致无大分区可用（最大适应算法的缺点）</p><h3 id="四种动态分配算法比较"><a href="#四种动态分配算法比较" class="headerlink" title="四种动态分配算法比较"></a>四种动态分配算法比较</h3><table><thead><tr><th>算法</th><th>算法思想</th><th>分区排列顺序</th><th>优点</th><th>缺点</th></tr></thead><tbody><tr><td>首次适应</td><td>从头到尾找适合的分区</td><td>空闲分区以地址递增次序排列</td><td>综合看性能最好。算法开销小,回收分区后一般不需要对空闲分区队列重新排序</td><td></td></tr><tr><td>最佳适应</td><td>优先使用更小的分区，以保留更多大分区</td><td>空闲分区以容量递增次序排列</td><td>会有更多的大分区被保留下来，更能满足大进程需求</td><td>会产生很多的，难以利用的碎片;算法开销大,回收分区后可能需要对空闲分区队列重新排序</td></tr><tr><td>最坏适应</td><td>优先使用更大的分区，以防止产生太小的不可用的碎片</td><td>空闲分区以容量递减次序排列</td><td>可以减少难以利用的小碎片</td><td>大分区容易被用完，不利于大进程:算法开销大(原因同上)</td></tr><tr><td>临近适应</td><td>由首次适应演变而来，每次从上次查找结束位置开始查找</td><td>空闲分区以地址递增次序排列（可排列成循环链表）</td><td>不用灭磁都从低地址的小分区开始检索，算法开销小</td><td>会使高地址的大分区也被用完</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 计算机基础 </category>
          
          <category> 操作系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 操作系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>22-内存空间扩充（覆盖与交换）</title>
      <link href="/2021/12/25/22-%E5%86%85%E5%AD%98%E7%A9%BA%E9%97%B4%E6%89%A9%E5%85%85%EF%BC%88%E8%A6%86%E7%9B%96%E4%B8%8E%E4%BA%A4%E6%8D%A2%EF%BC%89/"/>
      <url>/2021/12/25/22-%E5%86%85%E5%AD%98%E7%A9%BA%E9%97%B4%E6%89%A9%E5%85%85%EF%BC%88%E8%A6%86%E7%9B%96%E4%B8%8E%E4%BA%A4%E6%8D%A2%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="覆盖技术"><a href="#覆盖技术" class="headerlink" title="覆盖技术"></a>覆盖技术</h1><p>早期计算机内存很小，因此经常出现内存大小不够使用的情况，因此人们引入了覆盖技术，用来解决“程序大小超过物理内存总和”的问题</p><p>覆盖技术的思想在于，将程序分为多个段（多个执行模块），常用的模块常驻在内存中，不常用的模块在需要时调入，使用后调出。实现这种功能还需要将内存划分为固定区和若干个覆盖区</p><p>需要常驻在内存的模块进入固定区后就不再调出，直到整个程序运行结束，不常用的模块在需要时调入覆盖区，用不到时调出</p><p><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20211225163447.png"></p><p>以上图为例，A模块作为需要常驻的模块，在程序开始运行后就进入常驻区，直到程序运行结束。B，C模块只能由A调用，并且不可能同时调用，所以B，C共用一个覆盖区，覆盖区大小由最大模块决定，而D模块只能由B模块调用，E，F模块只能由C模块调用，显而易见，DEF三个模块同一时间只可能有一个运行，所以DEF可以共用一个覆盖区，同时由最大的程序D决定覆盖区大小</p><p>这种覆盖技术的缺点在于：必须由程序员声明覆盖结构，操作系统完成自动覆盖。对用户不透明，增加了用户编程负担。覆盖技术只用于早期的操作系统中，现在已成为历史。</p><h1 id="交换技术"><a href="#交换技术" class="headerlink" title="交换技术"></a>交换技术</h1><p>交换（对换）技术的设计思想:内存空间紧张时，系统将内存中某些进程暂时换出外存，把外存中某些已具备运行条件的进程换入内存（进程在内存与磁盘间动态调度）</p><p>之前所讲过的中级调度（内存调度），就是要决定哪个处于挂起状态的进程重新调入内存</p><p><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20211225164351.png"></p><p>可以看到，在将进程存入外存的过程中，内存保留了这些进程的PCB，并将他们添加到挂起队列中，这是因为PCB中保存了这些进程的运行情况以及在外存中的位置信息，必须保留它们才能重新将这些挂起进程调回内存中</p><blockquote><p>回忆部分： 暂时换出外存等待的进程状态称为挂起状态（挂起态，suspend）挂起态又可以进一步细分为就绪挂起、阻塞挂起两种状态</p></blockquote><p><a href="https://ywrby.cn/2021/11/01/8-%E8%BF%9B%E7%A8%8B%E7%9A%84%E7%8A%B6%E6%80%81%EF%BC%8C%E6%8E%A7%E5%88%B6%E4%B8%8E%E9%80%9A%E4%BF%A1/">进程的状态，控制与通信</a></p><p><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20211225165109.png" alt="七状态模型"></p><h2 id="交换技术需要考虑的问题"><a href="#交换技术需要考虑的问题" class="headerlink" title="交换技术需要考虑的问题"></a>交换技术需要考虑的问题</h2><ol><li>应该在外存（磁盘）的什么位置保存被换出的进程?<ul><li>具有对换功能的操作系统中，通常把磁盘空间分为文件区和对换区两部分。文件区主要用于存放文件，主要追求存储空间的利用率，因此对文件区空间的管理采用离散分配方式。对换区空间只占磁盘空间的小部分，被换出的进程数据就存放在对换区。由于对换的速度直接影响到系统的整体速度，因此对换区空间的管理主要追求换入换出速度，因此通常对换区采用连续分配方式。总之，对换区的I/O速度比文件区的更快。</li></ul></li><li>什么时候应该交换?<ul><li>交换通常在许多进程运行且内存吃紧时进行，而系统负荷降低就暂停。例如:在发现许多进程运行时经常发生缺页，就说明内存紧张，此时可以换出一些进程;如果缺页率明显下降，就可以暂停换出。</li></ul></li><li>应该换出哪些进程?<ul><li>可优先换出阻塞进程;可换出优先级低的进程;为了防止优先级低的进程在被调入内存后很快又被换出，有的系统还会考虑进程在内存的驻留时间…</li></ul></li></ol><p>需要注意的一点就是整个过程中，进程的PCB始终还是存放在内存队列中的，不会被换出到外存中</p>]]></content>
      
      
      <categories>
          
          <category> 计算机基础 </category>
          
          <category> 操作系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 操作系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>21-内存与内存管理</title>
      <link href="/2021/12/19/21-%E5%86%85%E5%AD%98%E4%B8%8E%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/"/>
      <url>/2021/12/19/21-%E5%86%85%E5%AD%98%E4%B8%8E%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h1 id="内存基础知识"><a href="#内存基础知识" class="headerlink" title="内存基础知识"></a>内存基础知识</h1><blockquote><p>内存(Memory)是计算机的重要部件之一，也称内存储器和主存储器，它用于暂时存放CPU中的运算数据，与硬盘等外部存储器交换的数据。它是外存与CPU进行沟通的桥梁。只要计算机开始运行，操作系统就会把需要运算的数据从内存调到CPU中进行运算，当运算完成，CPU将结果传送出来。</p></blockquote><p>在多道程序环境下，同一时间可能会有多个程序并发执行，即有多个程序的数据需要同时存放在内存中，此时，为了区分内存中不同数据存放的位置，就需要引入存储单元的概念</p><blockquote><p>存储单元：一般应具有存储数据和读写数据的功能，以8位二进制作为一个存储单元，也就是一个字节。每个单元有一个地址，是一个整数编码，可以表示为二进制整数。程序中的变量和主存储器的存储单元相对应。变量的名字对应着存储单元的地址，变量内容对应着单元所存储的数据。存储地址一般用十六进制数表示，而每一个存储器地址中又存放着一组二进制（或十六进制）表示的数，通常称为该地址的内容。</p><ol><li>如果计算机“按字节编址”则每个存储单元大小为1字节即1B，即8个二进制位</li><li>如果字长为16位的计算机“按字编址”，则每个存储单元大小为1字，每个字大小为16个二进制位</li></ol></blockquote><p><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/dhauidhwuiahuidwhaui.png"></p><p>内存在进程运行过程中的操作</p><p><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20211220184336.png"></p><p>可见，我们写的代码要翻译成CPU能识别的指令。这些指令会告诉CPU应该去内存的哪个地址存/取数据，这个数据应该做什么样的处理。在这个例子中，指令中直接给出了变量x的实际存放地址（物理地址）。但实际在生成机器指令的时候并不知道该进程的数据会被放到什么位置。所以编译生成的指令中一般是使用逻辑地址（相对地址)</p><p>逻辑地址与相对地址的区别</p><p><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20211220184704.png"></p><p><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20211220184911.png"></p><p>链接的三种方式</p><ol><li>静态链接:在程序运行之前，先将各目标模块及它们所需的库函数连接成一个完整的可执行文件（装入模块)，之后不再拆开。</li><li>装入时动态链接:将各目标模块装入内存时，边装入边链接的链接方式。</li><li>运行时动态链接:在程序执行中需要该目标模块时，才对它进行链接。其优点是便于修改和更新，便于实现对目标模块的共享。</li></ol><p>装入的三种方式：<br><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20211220185617.png"></p><p><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20211220190022.png"></p><p><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20211220190215.png"></p><h1 id="内存管理"><a href="#内存管理" class="headerlink" title="内存管理"></a>内存管理</h1><p>操作系统作为系统资源的管理者，当然也需要对内存进行管理，这些管理涉及到：</p><ol><li>操作系统负责<strong>内存控件的分配与回收</strong></li><li>操作系统需要提供某种技术从逻辑上<strong>对内存控件进行扩充</strong></li><li>操作系统需要提供<strong>地址转换功能</strong>，负责程序的逻辑地址与物理地址的转换（通过上文所说的三种装入方法）</li><li>操作系统需要提供<strong>内存保护</strong>功能，保证各个进程在各自的存储空间内运行，互不干扰</li></ol><h2 id="内存保护的概念与实现方法"><a href="#内存保护的概念与实现方法" class="headerlink" title="内存保护的概念与实现方法"></a>内存保护的概念与实现方法</h2><p><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20211221210302.png"></p><h3 id="方法一："><a href="#方法一：" class="headerlink" title="方法一："></a>方法一：</h3><p>在CPU中设置一堆上下限寄存器，存放进程的上下限地址。进程的指令要访问某个地址时，CPU检查是否越界</p><p><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20211221210449.png"></p><h3 id="方法二："><a href="#方法二：" class="headerlink" title="方法二："></a>方法二：</h3><p>采用重定位寄存器（又称基址寄存器）和界地址寄存器(又称限长寄存器)进行越界检查。重定位寄存器中存放的是进程的起始物理地址。界地址寄存器中存放的是进程的最大逻辑地址。</p><p><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20211221210621.png"></p>]]></content>
      
      
      <categories>
          
          <category> 计算机基础 </category>
          
          <category> 操作系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 操作系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>20-死锁</title>
      <link href="/2021/12/11/20-%E6%AD%BB%E9%94%81/"/>
      <url>/2021/12/11/20-%E6%AD%BB%E9%94%81/</url>
      
        <content type="html"><![CDATA[<h1 id="死锁的基本概念"><a href="#死锁的基本概念" class="headerlink" title="死锁的基本概念"></a>死锁的基本概念</h1><p>在并发环境下，各进程因竞争资源而造成的一种互相等待对方手里资源，导致各个进程都阻塞，无法向前推进的现象，称为“死锁”。发生死锁后若无外力的干涉，这些进程都将无法向前推进</p><p>要注意的是，死锁，饥饿和死循环是三个比较容易混淆的概念</p><ul><li>饥饿：由于长期得不到想要的资源，某进程无法向前推进的现象。例如：在短进程优先算法（SPF）中，若有源源不断的短进程到来，则长进程一直得不到处理机，从而发生长进程“饥饿”</li><li>死循环：某进程执行过程中一直跳不出某个循环的现象，有时是因为程序逻辑bug导致，有时也可能是程序故意设计</li></ul><p>综上，可以总结三者的异同点：</p><table><thead><tr><th>-</th><th>共同点</th><th>区别</th></tr></thead><tbody><tr><td>死锁</td><td>都是进程无法顺利向前推进的现象</td><td>死锁一定是“循环等待对方手里的资源”导致的，因此如果有死锁现象，那至少有两个或以上的进程同时发生死锁。同时，由于是始终处于等待对方资源的状态，所以发生死锁的进程一定处于阻塞态</td></tr><tr><td>饥饿</td><td>-</td><td>可能只有一个进程发生饥饿（例如上文所提到的长进程饥饿）。发生饥饿的进程既可能是阻塞态（例如长期得不到I/O设备），也可能是就绪态（长期得不到处理机）</td></tr><tr><td>死循环</td><td>-</td><td>可能只有一个进程发生死循环。死循环的进程可以上处理机运行，即发生死循环的进程可能处于运行态。只不过无法像期待的那样顺利推进。死锁和饥饿的问题是由于操作系统分配资源的策略不合理所导致，而死循环是由于代码逻辑错误所导致。因此死锁和饥饿是操作系统的问题，死循环是程序员的问题</td></tr></tbody></table><h2 id="死锁的必要条件"><a href="#死锁的必要条件" class="headerlink" title="死锁的必要条件"></a>死锁的必要条件</h2><p>产生死锁必须同时满足以下的四个条件，任意条件不成立，死锁都不会发生</p><ul><li>互斥条件：只有对必须互斥使用的资源进行争抢才会导致死锁。例如哲学家就餐问题，打印机设备等。像内存，扬声器这种可以同时被多个进程使用的资源是不会导致死锁的（因为进程不用阻塞等待这种资源）</li><li>不剥夺条件：进程获得的资源，在未使用完之前，不能被其他进程强行夺走，只能主动释放</li><li>请求和保持条件：进程已经保持了至少一个资源，但又提出了新的资源请求，而该资源又被其他进程占有，此时请求进程被阻塞，但又对自己已有的资源保持不放</li><li>循环等待条件：存在一种进程资源的循环等待链，链中的每一个进程已获得的资源同时被下一个进程所请求</li></ul><p>发生死锁一定又循环等待，但发生循环等待不一定有死锁</p><h2 id="发生死锁的时机"><a href="#发生死锁的时机" class="headerlink" title="发生死锁的时机"></a>发生死锁的时机</h2><ul><li>对系统资源的竞争：各个进程对不可剥夺资源的竞争（例如打印机）可能引起死锁，对可剥夺资源（CPU）的竞争不会引起死锁</li><li>进程推进顺序非法：请求和释放资源的顺序不当，同样会导致死锁。例如：并发执行的进程P1，P2分别申请并占有了资源R1，R2，之后进程P1又紧接着申请资源R2，P2申请资源R1，就会导致死锁</li><li>信号量的使用不当：例如在生产者与消费者问题中，如果实现互斥操作的P操作在实现同步操作的P操作之前，就可能导致死锁（这里可以把互斥信号量和同步信号量也堪称一种抽象的系统资源）</li></ul><p>总之，对不可剥夺资源的不合理分配，可能导致死锁</p><h2 id="死锁的处理策略–不允许死锁发生"><a href="#死锁的处理策略–不允许死锁发生" class="headerlink" title="死锁的处理策略–不允许死锁发生"></a>死锁的处理策略–不允许死锁发生</h2><ol><li>预防死锁：破坏死锁产生必要条件中的一个或几个</li><li>避免死锁：用某种方法防止系统进入不安全状态，从而避免死锁（银行家算法）</li></ol><h2 id="死锁的处理策略–允许死锁发生"><a href="#死锁的处理策略–允许死锁发生" class="headerlink" title="死锁的处理策略–允许死锁发生"></a>死锁的处理策略–允许死锁发生</h2><ol><li>死锁的检测和解除：允许死锁的发生，不过操作系统会负责检测出死锁的发生，然后采取某种措施解除死锁</li></ol><h1 id="静态策略：预防死锁"><a href="#静态策略：预防死锁" class="headerlink" title="静态策略：预防死锁"></a>静态策略：预防死锁</h1><p>破坏死锁产生必要条件中的一个或几个</p><h2 id="破坏互斥条件"><a href="#破坏互斥条件" class="headerlink" title="破坏互斥条件"></a>破坏互斥条件</h2><ul><li>互斥条件：只有对必须互斥使用的资源进行争抢才会导致死锁。</li></ul><p>如果把只能互斥使用的资源改造为允许共享使用，则系统不会进入死锁状态。例如SPOOLing技术，操作系统可以使用SPOOLing技术把独占设备在逻辑上改造成共享设备，比如用SPOOLing技术将打印机改造为共享设备</p><p><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20211211153530.png"></p><p>该策略的缺点：并不是所有资源都可以改造成可共享使用的资源。并且处于系统安全角度考虑，很多地方必须保护这种互斥性，所以破坏互斥条件的应用范围不广</p><h2 id="破坏不可剥夺条件"><a href="#破坏不可剥夺条件" class="headerlink" title="破坏不可剥夺条件"></a>破坏不可剥夺条件</h2><ul><li>不剥夺条件：进程获得的资源，在未使用完之前，不能被其他进程强行夺走，只能主动释放</li></ul><ol><li>方案一：当某个进程请求新的资源得不到满足时，它必须立即释放保持的所有资源，待以后需要时重新申请，也就是说，即使资源尚未使用完，也需要主动释放，从而破坏不可剥夺条件</li><li>方案二：当某个进程需要的资源被其他进程所占有的时候，可以由操作系统协助，将想要的资源强行剥夺。这种方式一般需要考虑进程之间的优先级（优先级高的进程可以剥夺低优先级进程的资源）</li></ol><p>该策略的缺点：</p><ul><li>实现起来比较复杂</li><li>释放已获得的资源可能造成前一阶段工作的失效。因此这种方式一般只适用于易保存和恢复状态的资源，例如CPU</li><li>反复申请和释放资源会增加系统开销，降低系统吞吐量</li><li>若采用方案一，意味着只要暂时得不到资源，之前的资源需要全部放弃，后面重新申请，如果该现象一直发生，会导致饥饿</li></ul><h2 id="破坏请求和保持条件"><a href="#破坏请求和保持条件" class="headerlink" title="破坏请求和保持条件"></a>破坏请求和保持条件</h2><ul><li>请求和保持条件：进程已经保持了至少一个资源，但又提出了新的资源请求，而该资源又被其他进程占有，此时请求进程被阻塞，但又对自己已有的资源保持不放</li></ul><p>可以采用静态分配方法，即进程在运行前一次申请完它所需要的全部资源，在它的资源未满足前，不让它投入运行，一旦投入运行，这些资源就一直归他所有，该进程不会请求别的任何资源</p><p>该策略缺点：有些资源可能只需要使用很短的时间，因此如果进程的整个运行期间都保持所有资源，就会造成部分资源的严重浪费，资源利用率低。另外策略也可能导致某些进程饥饿</p><p><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20211211155245.png"></p><p>例如上图中A类进程与B类进程分别需要使用资源1和资源2就可以运行，而C类进程需要同时等待两种资源全部空闲才可执行，此时若A类B类进程交替不断到来，则C类进程会由于没有全部资源陷入饥饿</p><h2 id="破坏循环等待条件"><a href="#破坏循环等待条件" class="headerlink" title="破坏循环等待条件"></a>破坏循环等待条件</h2><ul><li>循环等待条件：存在一种进程资源的循环等待链，链中的每一个进程已获得的资源同时被下一个进程所请求</li></ul><p>可采用顺序资源分配法。首先给系统中的资源编号，并且规定每个进程必须按照编号递增的顺序请求资源，同类资源（编号相同的资源）一次申请完</p><p>原理分析：一个进程已占有小编号资源时，才有资格申请更大编号的资源。按此规则，已持有大编号资源的进程无法逆向申请小编号的资源，从而打破循环等待</p><p>该策略的缺点</p><ol><li>不方便新增设备，因为可能需要重新分配所有的编号</li><li>进程时机使用资源的顺序和编号递增顺序不一致，会导致资源浪费。例如某进程需要申请5号打印机资源和7号扫描仪资源，使用顺序是先使用扫描仪后使用打印机，但由于5号打印机编号较小，所以必须提前申请该资源并一直占用，知道申请并使用完7号扫描仪后，才能使用并释放，导致5号打印机被浪费</li><li>必须按规定次序申请资源，用户编程麻烦</li></ol><p><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20211211160546.png"></p><h1 id="动态策略：避免死锁"><a href="#动态策略：避免死锁" class="headerlink" title="动态策略：避免死锁"></a>动态策略：避免死锁</h1><h2 id="基本概念-安全序列"><a href="#基本概念-安全序列" class="headerlink" title="基本概念-安全序列"></a>基本概念-安全序列</h2><blockquote><p>银行家算法:在银行中，客户申请贷款的数量是有限的，每个客户在第一次申请贷款时要声明完成该项目所需的最大资金量，在满足所有贷款要求时，客户应及时归还。银行家在客户申请的贷款数量不超过自己拥有的最大值时，都应尽量满足客户的需要。在这样的描述中，银行家就好比操作系统，资金就是资源，客户就相当于要申请资源的进程。</p></blockquote><p><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20211215174819.png"></p><p>不合理请求<br><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20211215175214.png"></p><p>合理请求<br><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20211215174453.png"></p><p>根据上面的两个示例我们可以看到，在给B借30亿的情况下，如果B，A，T同时提出20亿借贷的请求，则我们所有企业都无法满足，此时系统陷入死锁状态，而与之相对的，在给A借20亿的情况下，我们有T-&gt;B-&gt;A这样的能够保证系统安全的系列存在</p><p>上面给出的T-&gt;B-&gt;A序列，就是一个安全序列，所谓安全序列，就是指如果系统按照这种序列分配资源，则每个进程都能顺利完成。只要能找出一个安全序列，系统就是安全状态。当然，安全序列可能有多个。</p><p>如果分配了资源之后，系统中找不出任何一个安全序列，系统就进入了不安全状态。这就意味着之后可能所有进程都无法顺利的执行下去。当然，如果有进程提前归还了一些资源，那系统也有可能重新回到安全状态，不过我们在分配资源之前总是要考虑到最坏的情况。</p><p>如果系统处于安全状态，就一定不会发生死锁。如果系统进入不安全状态，就可能发生死锁（处于不安全状态未必就是发生了死锁，但发生死锁时一定是在不安全状态）</p><p>因此可以在资源分配之前预先判断这次分配是否会导致系统进入不安全状态，以此决定是否答应资源分配请求。这也是“银行家算法”的核心思想。</p><h2 id="银行家算法核心思想"><a href="#银行家算法核心思想" class="headerlink" title="银行家算法核心思想"></a>银行家算法核心思想</h2><p>在进程提出资源申请时，预先判断此次分配是否会导致系统进入不安全状态(不存在安全序列)，如果会进入不安全状态，就暂时不答应这次请求，让该进程先阻塞等待</p><p>但是上面的例子中，只涉及一种资源的分配（钱），而在计算机这种可能涉及多种资源分配的环境下，就需要通过高维向量来解决上述问题：例如系统中有五个进程P0-P4，三种资源R0-R2，初始数量为(10,5,7)则某一时刻的情况可以表示如下</p><table><thead><tr><th>进程</th><th>最大需求</th><th>已分配</th><th>最多还需要</th></tr></thead><tbody><tr><td>P0</td><td>(7,5,3)</td><td>(0,1,1)</td><td>(7,4,3)</td></tr><tr><td>P1</td><td>(3,2,2)</td><td>(2,0,0)</td><td>(1,2,2)</td></tr><tr><td>P2</td><td>(9,0,2)</td><td>(3,0,2)</td><td>(6,0,0)</td></tr><tr><td>P3</td><td>(2,2,2)</td><td>(2,1,1)</td><td>(0,1,1)</td></tr><tr><td>P4</td><td>(4,3,3)</td><td>(0,0,2)</td><td>(4,3,3)</td></tr></tbody></table><p>此时系统剩余可用资源(3,3,2)要判断系统是否处于安全状态，思路就是尝试找到一条安全序列，而方法就是自上而下依次检查剩余可用资源(3,3,2)是否能满足各进程需求</p><p>检查过程：</p><ol><li>首先P0最多需要资源(7,4,3)&gt;剩余资源(3,3,2)，所以P0暂时无法进入安全序列</li><li>接下来P1(1,2,2)&lt;(3,3,2)所以P1可以进入安全序列</li><li>P1进入安全序列分配资源并等待P1归还所有已分配资源</li><li>P1归还所有已分配资源，所以系统剩余资源(2,0,0)+(3,3,2)=(5,3,2)</li><li>继续向下执行P2(6,0,0)&gt;(5,3,2)，所以P2暂时不能进入安全序列</li><li>P3(0,1,1)&lt;(5,3,2)所以P3进入安全序列，分配资源，并等待P3归还所有已分配资源</li><li>P3归还资源，系统剩余资源(2,1,1)+(5,3,2)=(7,4,3)</li><li>继续向下执行P4(4,3,1)&lt;(7,4,3)，P4进入安全序列，分配资源，并归还</li><li>P4归还资源，系统剩余资源(0,0,2)+(7,4,3)=(7,4,5)</li><li>不断执行，此时所有进程都可进入安全序列</li><li>最终得到安全序列P1-&gt;P3-&gt;P4-&gt;P0-&gt;P2(安全序列不唯一)</li></ol><p>成功找到一条安全序列表明系统处于安全状态，不可能发生死锁</p><h2 id="银行家算法实现思路"><a href="#银行家算法实现思路" class="headerlink" title="银行家算法实现思路"></a>银行家算法实现思路</h2><p><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20211215182345.png"></p><h1 id="死锁的检测和解除"><a href="#死锁的检测和解除" class="headerlink" title="死锁的检测和解除"></a>死锁的检测和解除</h1><h2 id="死锁的检测"><a href="#死锁的检测" class="headerlink" title="死锁的检测"></a>死锁的检测</h2><p>为了能对系统是否已经发生了死锁进行检测，我们需要：</p><ol><li>用某种数据结构来保存资源的请求和分配信息</li><li>提供一种算法，利用上述信息来检测系统是否已经进入死锁状态</li></ol><p>能够用来保存资源的请求与分配信息的结构就是资源分配图，资源分配图具有如下特点：</p><ul><li>具有两种节点<ul><li>进程节点：对应一个进程</li><li>资源节点：对应一类资源，一类资源可能有多个</li></ul></li><li>具有两种边<ul><li>请求边：从进程节点指向资源节点，表示进程想申请几个资源（一条边表示想要申请一个）</li><li>分配边：从资源节点指向进程节点，表示已经为该进程分配了几个资源（一条边表示已分配一个资源）</li></ul></li></ul><p><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20211219172358.png"></p><p>介绍了一种保存资源和请求分配信息的数据结构后，我们就应该考虑如何利用算法，检测整个过程中系统是否发生死锁。</p><p>以上面这张资源分配图为例，P1进程请求一个R2资源，此时R2资源一共两个，其中一个被分配给P2进程，所以剩余资源足够分配给P1进程，此时P1进程不需要额外资源，可以正常执行。待执行结束后归还一个R2资源和两个R1资源，此时P2请求一个额外的R1资源，R1资源一共三个，其中一个已经分配给P2进程，剩余两个空闲，所以能够分配一个额外的R1资源给P2，P2进程也可顺利执行，则该情况下未发生死锁</p><p><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20211219173206.png"></p><p>相对的，如果资源分配图变成这种情况，则P1进程请求两个R2资源，但空闲R2资源为0，P1被阻塞，P2进程请求一个R1资源，空闲R1资源为0，P2被阻塞，P3进程不请求额外资源，只有P3进程可以正常执行，执行后归还一个R2资源，但此时P1进程仍无法执行，P2进程也无法请求到额外资源，系统进入死锁状态</p><p>所以说，如果系统中剩余的可用资源数足够满足进程的需求，那么这个进程暂时是不会阻塞的，可以顺利地执行下去。如果这个进程执行结束了把资源归还系统，就可能使某些正在等待资源的进程被激活，并顺利地执行下去。相应的，这些被激活的进程执行完了之后又会归还一些资源,这样可能又会激活另外一些阻塞的进程…</p><p>如果按照上述的过程分析最终能够消除所有边，则称该图是“可完全简化的”，此时一定没有死锁，如果最终不能消除所有边，则此时就发生了死锁，最终还连这边的进程就是处于死锁状态的进程</p><p><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20211219173937.png"></p><p>综上，检测死锁的算法就可以描述为：</p><ol><li>在资源分配图中，找出既不阻塞又不是孤点的进程Pi(即找出一条存在有向边与它相连，且该有向边对应资源的申请数量小于等于系统中己有空闲资源数量。如下图中，R1没有空闲资源，R2有一个空闲资源。若所有的连接该进程的边均满足上述条件，则这个进程能继续运行直至完成，然后释放它所占有的所有资源）。消去它所有的请求边和分配边，使之称为孤立的结点。在下图中，P1是满足这一条件的进程结点,于是将P1的所有边消去。</li><li>进程Pi所释放的资源，可以唤醒某些因等待这些资源而阻塞的进程，原来的阻塞进程可能变为非阻塞进程。在下图中，P2就满足这样的条件。根据1)中的方法进行一系列简化后，若能消去途中所有的边，则称该图是可完全简化的。<br><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20211219172358.png"></li></ol><h2 id="死锁的解除"><a href="#死锁的解除" class="headerlink" title="死锁的解除"></a>死锁的解除</h2><p>一旦检测出死锁的发生，就应该立即解除死锁。</p><p>注意:并不是系统中所有的进程都是死锁状态，用死锁检测算法化简资源分配图后，还连着边的那些进程就是死锁进程</p><p>解除死锁的主要方法有:</p><ol><li>资源剥夺法。挂起（暂时放到外存上)某些死锁进程，并抢占它的资源，将这些资源分配给其他的死锁进程。但是应防止被挂起的进程长时间得不到资源而饥饿。</li><li>撤销进程法（或称终止进程法)。强制撤销部分、甚至全部死锁进程，并剥夺这些进程的资源。这种方式的优点是实现简单，但所付出的代价可能会很大。因为有些进程可能已经运行了很长时间，己经接近结束了，一旦被终止可谓功亏一篑，以后还得从头再来。</li><li>进程回退法。让一个或多个死锁进程回退到足以避免死锁的地步。这就要求系统要记录进程的历史信息,设置还原点。</li></ol><h3 id="如何绝对挂起或剥夺哪些进程"><a href="#如何绝对挂起或剥夺哪些进程" class="headerlink" title="如何绝对挂起或剥夺哪些进程"></a>如何绝对挂起或剥夺哪些进程</h3><ol><li>考虑进程的优先级，对优先级低的进程进行剥夺</li><li>考虑已执行的时间，避免剥夺已经长时间运行的进程，造成损失</li><li>考虑进程完成时间，优先为可快速完成的进程分配资源</li><li>考虑进程已经使用了多少资源</li><li>考虑进程是交互式的还是批处理式的，避免交互式进程被剥夺影响用户体验</li></ol>]]></content>
      
      
      <categories>
          
          <category> 计算机基础 </category>
          
          <category> 操作系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 操作系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>19-管程</title>
      <link href="/2021/11/28/19-%E7%AE%A1%E7%A8%8B/"/>
      <url>/2021/11/28/19-%E7%AE%A1%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="管程"><a href="#管程" class="headerlink" title="管程"></a>管程</h1><h2 id="信号量机制存在的问题"><a href="#信号量机制存在的问题" class="headerlink" title="信号量机制存在的问题"></a>信号量机制存在的问题</h2><p>编写程序困难，容易出错。因此人们考虑使用另外设计的机制，保证程序员在编写程序过程中不需要关注复杂的PV操作。</p><h2 id="管程的定义和组成"><a href="#管程的定义和组成" class="headerlink" title="管程的定义和组成"></a>管程的定义和组成</h2><p>管程是一种特殊的软件模块，其组成部分为：</p><ol><li>局部与管程的共享数据结构（类似于局部变量的概念，该数据结构只能被管程所访问）</li><li>对该数据结构进行操作的一组过程（类似于局部方法）</li><li>对局部于管程的共享数据设置初始值的语句（初始化方法）</li><li>管程的名字</li></ol><h2 id="管程的基本特征"><a href="#管程的基本特征" class="headerlink" title="管程的基本特征"></a>管程的基本特征</h2><ol><li>局部与管程的数据只能被局部与管程的过程（方法）所访问</li><li>一个进程只有通过调用管程内的方法，才能进入管程并访问共享数据</li><li>每次仅允许一个进程在管程内执行某个内部过程（方法）</li></ol><h2 id="管程示例"><a href="#管程示例" class="headerlink" title="管程示例"></a>管程示例</h2><p><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20211128165547.png"></p><p>这个过程中由编译器负责实现各个进程互斥的进入管程中的方法</p><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><ul><li>引入管程的目的无非是为了更方便的实现进程的互斥与同步</li><li>需要在管程中定义共享数据（例如生产者消费者问题中的缓冲区）</li><li>需要在管程中定义用于访问共享数据的“入口”，即函数</li><li>只有通过管程中定义的方法才能进入管程，才能访问共享数据</li><li>管程存在很多方法，但每次只能开放其中一个方法作为“入口”，并且只允许一个进程或线程进入（这种互斥的特性是由编译器实现的，程序员不需要关心）</li><li>可在管程中设置条件变量以及等待/唤醒操作来解决进程同步问题</li><li>管程体现了一种封装思想，将复杂的PV操作进行封装方便程序设计人员使用</li></ul>]]></content>
      
      
      <categories>
          
          <category> 计算机基础 </category>
          
          <category> 操作系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 操作系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>18-信号量相关问题（吸烟者，读者-写者等）</title>
      <link href="/2021/11/18/18-%E4%BF%A1%E5%8F%B7%E9%87%8F%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98%EF%BC%88%E5%90%B8%E7%83%9F%E8%80%85%EF%BC%8C%E8%AF%BB%E8%80%85-%E5%86%99%E8%80%85%E7%AD%89%EF%BC%89/"/>
      <url>/2021/11/18/18-%E4%BF%A1%E5%8F%B7%E9%87%8F%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98%EF%BC%88%E5%90%B8%E7%83%9F%E8%80%85%EF%BC%8C%E8%AF%BB%E8%80%85-%E5%86%99%E8%80%85%E7%AD%89%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="吸烟者问题"><a href="#吸烟者问题" class="headerlink" title="吸烟者问题"></a>吸烟者问题</h1><p>假设一个系统有三个抽烟者进程和一个供应者进程。每个抽烟者不停地卷烟并抽掉它，但是要卷起并抽掉一支烟，抽烟者需要有三种材料:烟草、纸和胶水。三个抽烟者中，第一个拥有烟草、第二个拥有纸、第三个拥有胶水。供应者进程无限地提供三种材料，供应者每次将两种材料放桌子上，拥有剩下那种材料的抽烟者卷一根烟并抽掉它，并给供应者进程一个信号告诉完成了，供应者就会放另外两种材料再桌上，这个过程一直重复(让三个抽烟者轮流地抽烟)</p><p><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20211117201635.png"></p><p>以上图为例，供应者向桌上摆放烟草和纸两种材料，缺少这两种材料的三号吸烟者就会取走材料吸烟，在吸烟结束后会提醒供应者放新的材料在桌上</p><p>根据题目我们直到，放在桌上的材料一共有三种组合方式</p><ol><li>纸和胶水（order1）会被一号吸烟者取走</li><li>烟草和胶水（order2）会被二号吸烟者取走</li><li>烟草和纸（order3）会被三号吸烟者取走</li></ol><p>本题可以看作是存在一个生产者和多个消费者的问题，同时生产者所生产的物品并不相同</p><h2 id="关系分析"><a href="#关系分析" class="headerlink" title="关系分析"></a>关系分析</h2><p>找出题目中描述的各个进程，分析同步互斥关系</p><ul><li>互斥关系：桌子可以抽象为容量为1的缓冲区，需要互斥访问</li><li>同步关系：桌上有组合一时第一个抽烟者取走物品</li><li>同步关系：桌上有组合二时第二个抽烟者取走物品</li><li>同步关系：桌上有组合三时第三个抽烟者取走物品</li><li>同步关系：抽烟者完成吸烟后发出完成信号，供应者将下一组组合放在桌上</li></ul><h2 id="整理思路"><a href="#整理思路" class="headerlink" title="整理思路"></a>整理思路</h2><p>根据各个进程的操作流程确定PV操作的大致顺序</p><p>对于互斥关系的处理只要遵循在访问临界资源前对临界资源上锁，访问之后解锁即可</p><p>对于同步关系的处理要遵循“前V后P”原则，必须先执行的操作后执行V操作，必须后执行的操作执行前执行P操作</p><h2 id="设置信号量"><a href="#设置信号量" class="headerlink" title="设置信号量"></a>设置信号量</h2><p>由于本题目中缓冲区大小为1，同一时间只可能至多有一个进程访问互斥资源，所以不需要设置互斥信号量mutex</p><p>同步信号量的设置要看对应资源初始值进行赋值</p><p><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20211117205952.png"></p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">semaphore offer1=<span class="number">0</span>; <span class="comment">//桌上组合一的数量</span></span><br><span class="line">semaphore offer2=<span class="number">0</span>; <span class="comment">//桌上组合二的数量</span></span><br><span class="line">semaphore offer3=<span class="number">0</span>; <span class="comment">//桌上组合三的数量</span></span><br><span class="line">semaphore finish=<span class="number">0</span>; <span class="comment">//抽烟是否完成</span></span><br><span class="line"><span class="keyword">int</span> i=<span class="number">0</span>; <span class="comment">//用于实现三个吸烟者轮流吸烟</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//供应者进程</span></span><br><span class="line">provider()&#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(i==<span class="number">0</span>)&#123;</span><br><span class="line">            将组合一放桌上</span><br><span class="line">            V(offer1); <span class="comment">//题型一号吸烟者吸烟</span></span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(i==<span class="number">1</span>)&#123;</span><br><span class="line">            将组合二放桌上</span><br><span class="line">            V(offer2); <span class="comment">//题型二号吸烟者吸烟</span></span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            将组合三放桌上</span><br><span class="line">            V(offer3); <span class="comment">//题型三号吸烟者吸烟</span></span><br><span class="line">        &#125;</span><br><span class="line">        i=(i+<span class="number">1</span>)%<span class="number">3</span>; <span class="comment">//实现让三个吸烟者轮流吸烟</span></span><br><span class="line">        P(finish); <span class="comment">//等待吸烟者吸烟完成后继续放组合</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//一号吸烟者进程</span></span><br><span class="line">smoker1()&#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">        P(offer1); <span class="comment">//等待组合一放到桌上</span></span><br><span class="line">        从桌上拿走组合一，吸烟</span><br><span class="line">        V(finish); <span class="comment">//题型供应者提供新组合</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//二号吸烟者进程</span></span><br><span class="line">smoker2()&#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">        P(offer2); <span class="comment">//等待组合二放到桌上</span></span><br><span class="line">        从桌上拿走组合二，吸烟</span><br><span class="line">        V(finish); <span class="comment">//题型供应者提供新组合</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//三号吸烟者进程</span></span><br><span class="line">smoker3()&#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">        P(offer3); <span class="comment">//等待组合三放到桌上</span></span><br><span class="line">        从桌上拿走组合三，吸烟</span><br><span class="line">        V(finish); <span class="comment">//题型供应者提供新组合</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 计算机基础 </category>
          
          <category> 操作系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 操作系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>区块链网络中矿池选择的演化博弈</title>
      <link href="/2021/11/15/%E5%8C%BA%E5%9D%97%E9%93%BE%E7%BD%91%E7%BB%9C%E4%B8%AD%E7%9F%BF%E6%B1%A0%E9%80%89%E6%8B%A9%E7%9A%84%E6%BC%94%E5%8C%96%E5%8D%9A%E5%BC%88/"/>
      <url>/2021/11/15/%E5%8C%BA%E5%9D%97%E9%93%BE%E7%BD%91%E7%BB%9C%E4%B8%AD%E7%9F%BF%E6%B1%A0%E9%80%89%E6%8B%A9%E7%9A%84%E6%BC%94%E5%8C%96%E5%8D%9A%E5%BC%88/</url>
      
        <content type="html"><![CDATA[<h1 id="区块链网络中矿池选择的演化博弈"><a href="#区块链网络中矿池选择的演化博弈" class="headerlink" title="区块链网络中矿池选择的演化博弈"></a>区块链网络中矿池选择的演化博弈</h1><p><a href="https://ieeexplore.ieee.org/abstract/document/8326513">论文原文链接: Evolutionary Game for Mining Pool Selection in Blockchain Networks</a></p><h2 id="Abstract"><a href="#Abstract" class="headerlink" title="Abstract"></a>Abstract</h2><p>在基于工作量证明（POW）的区块链网络中，区块矿工参与解决加密难题的竞赛，以赢得发布（即挖掘）新区块的奖励。由于加密难题的显著难度，个体矿工倾向于加入矿池以确保稳定的利润。我们研究了区块链网络中矿池选择的动态，其中矿池可以选择任意块挖掘策略（<a href="#%E6%8C%96%E6%8E%98%E7%AD%96%E7%95%A5">补充</a>）。我们将解谜的哈希率和区块传播延迟确定为决定挖矿竞争结果的两个主要因素。然后我们将个体矿工的策略演化建模为演化博弈。我们提供了两个池情况下池选择动力学中演化稳定性的理论分析。数值模拟支持我们的理论发现，并证明了一般情况下矿工策略演变的稳定性</p><h2 id="Section1-Introduction"><a href="#Section1-Introduction" class="headerlink" title="Section1-Introduction"></a>Section1-Introduction</h2><p>公共区块链网络构建为覆盖点对点 (P2P) 网络，用于去中心化防篡改数据记录。中本聪共识协议 用于在利益角度上激励全节点（区块矿工）遵守区块链状态维护的“最长链规则”。遵循该协议，区块矿工将一组任意经过验证的交易打包成一个数据结构，称为候选“区块”，并将其广播到整个网络。区块链状态被维护为由散列指针以松散同步的方式链接的块的线性列表。即，矿工始终将观察到的最长链作为其本地区块链副本。</p><p>中本聪协议的激励机制由两部分组成：</p><ol><li>一个计算密集型的加密难题解决过程</li><li>一个奖励确认过程，用于在矿工发布的区块被网络认可时向矿工提供奖励</li></ol><p>密码谜题解决过程是通过工作量证明 (PoW) 竞赛实现的，其中矿工详尽地查询可信随机预言机，例如 SHA-256 哈希函数，以找到满足原像的随机字符串条件基于他们自己的区块提议。在奖励过程中，首先在网络上传播其候选区块的矿工因其在验证新交易方面的努力而获得数字代币奖励。与移动网络中流行的激励机制相比，中本聪协议的特点是在其区块确认功能中嵌入了去中心化的代币发行方案。在每个区块固定奖励的情况下，节点加入共识过程的意愿主要受能源消耗预期成本的影响。</p><p>赢得 PoW 竞赛的概率取决于矿工的哈希率（即矿工每秒对哈希函数的查询次数）与整个网络的总哈希率之间的比率。同时，P2P网络中的区块传播时间决定了一个共识回合内区块确认的最终结果，因为只有传播到大多数节点的第一个区块才会被接受为区块链的新头。实际上，由于网络中压倒性的哈希率，单个矿工赢得 PoW 竞赛的机会可以忽略不计。因此，现实世界的区块链网络由代表矿工联盟的代理节点主导，这些节点被称为矿池。矿池作为任务调度器，将原像搜索任务划分为更小的子任务，并根据矿工的投入/报告哈希率将它们分配给矿池中的矿工。通过聚合许多矿工的哈希率，矿池赢得区块奖励的概率变得非常大。然后，单个矿工可以根据其在池中的哈希率份额来确保其少量但稳定的奖励份额。</p><p>在这篇论文中，我们研究了基于 PoW 的区块链网络中的矿池选择问题。我们认为个体矿工是有限理性的，矿池采用任意的挖掘策略。我们将网络中的池选择动态建模为演化博弈模型。我们关注哈希率和传播延迟对策略演化的影响，并研究了两个矿池情况下矿池选择动态的演化稳定性。</p><h2 id="Section2-Problem-Formulation"><a href="#Section2-Problem-Formulation" class="headerlink" title="Section2-Problem Formulation"></a>Section2-Problem Formulation</h2><h3 id="涉及参数"><a href="#涉及参数" class="headerlink" title="涉及参数"></a>涉及参数</h3><ul><li>$$N: 区块链网络中独立矿工数量$$</li><li>$$M: 区块链网络中独立矿工形成的矿池数量$$</li><li>$$\mathcal {M}：所有矿池的集合$$</li><li>$$\omega _{i}: 矿池i要求每个独立矿工提供的哈希率$$</li><li>$$\pmb {\omega }: 所有矿池要求每个独立矿工提供的哈希率集合$$</li><li>$$x_{i}: 矿池i中矿工人数占总人数比例$$</li><li>$$\mathbf {x}: 各个矿池中矿工人数占总人数比例的集合$$</li><li>$${\Pr }^{\textrm {mine}}_{i}(\mathbf {x},\pmb {\omega }): 矿池i赢得挖矿竞赛的概率$$</li><li>$$s: 区块大小$$</li><li>$$\gamma: 网络规模相关参数$$</li><li>$$c: 每个链路平均有效信道容量$$</li><li>$$\tau _{p}(s): 大小为s的块的传输延迟时间$$</li><li>$$\beta: 由网络规模和每个节点的平均验证速度共同决定的参数$$</li><li>$$\tau _{v}(s): 验证大小为s的块所需的时间$$</li><li>$${\Pr }^{\textrm {orphan}}(s): 孤立大小为 s 的有效块的概率$$</li><li>$${\Pr }^{\textrm {win}}_{i}(\mathbf {x}, \pmb {\omega }, si): 矿池 i 最终赢得一个大小为si的区块的挖矿竞赛的概率是$$</li><li>$$R: 代币发行的奖励$$</li><li>$$\rho: 每单位数据大小的交易确认价格$$</li><li>$$\rho s_{i}: 区块交易的手续费$$</li><li>$$p: 在 T 期间维持单位哈希率的能源价格$$</li><li>$$p\omega _{i}: 能量成本$$</li><li>$$y_{i}(\mathbf {x}, \pmb {\omega }, s_{i}): 矿工在矿池 i 中的期望收益$$</li></ul><h3 id="A-利用POW机制进行挖矿的矿工收益计算"><a href="#A-利用POW机制进行挖矿的矿工收益计算" class="headerlink" title="A.利用POW机制进行挖矿的矿工收益计算"></a>A.利用POW机制进行挖矿的矿工收益计算</h3><p>现假设有一个基于POW的区块链网络，其中有N个独立矿工，这些矿工自行组织成M个矿池，这些矿池的集合可以表示为$$\mathcal {M}={1, 2, \ldots, M}$$，我们假设解谜过程是<a href="#%E6%8A%97asic">抗ASIC</a>的，换句话说，矿工使用通用计算单元进行哈希查询，并且具有大致相同的哈希效率，即每瓦特的哈希率。矿池i要求<strong>每个</strong>加入矿池的矿工提供一定的哈希率<br>$$\omega _{i}$$</p><p>$$\pmb {\omega }=[\omega _{1},\ldots, \omega _{M}]^{\top }$$</p><p>表示所有矿池要求每个独立矿工提供的哈希率集合，另外，让</p><p>$$\mathbf {x}=[x_{1},\ldots,x_{M}]^{\top }$$</p><p>表示矿池中矿工人数占总体矿工数的比例，即</p><p>$$\mathcal {X}=\left&lt;!–swig￼1–&gt; x_{i}=1}\right}$$</p><p><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20211208153315.png"></p><p>综上所述，矿池i赢得挖矿竞赛的概率为：</p><p>$${\Pr }^{\textrm {mine}}_{i}(\mathbf {x},\pmb {\omega })=\frac {\omega <em>{i} x</em>{i}}{\sum _{j=1}^{M}\omega <em>{j} x</em>{j}}$$</p><p><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20211208153412.png"></p><p>矿池 i 向所有P2P网络中的对等方广播一个成功开采的区块，以将其传播到整个网络。区块传播时间由每条链路上的传输延迟和每个中继节点的交易验证时间决定。对于大小为s的块，传输延迟可以建模为</p><p>$$\tau _{p}(s)=\frac {s}{\gamma c}$$</p><p>其中</p><p>$$\gamma$$</p><p>表示网络规模相关参数，c是每个链路的平均有效信道容量。同时，由于验证一笔交易需要固定的计算量，区块验证时间可以建模为线性函数</p><p>$$\tau _{v}(s)=\beta s$$</p><p>其中</p><p>$$\beta$$</p><p>是由网络规模和每个节点的平均验证速度共同决定的参数.然后，大小为 s 的块在网络中传播的平均时间为:</p><p>$$ \tau (s)=\tau _{p}(s)+\tau _{v}(s)=\frac {s}{\gamma c}+\beta s. $$</p><p>由于传播延迟而放弃（即孤立）有效候选块的发生率遵循泊松过程(<a href="#%E5%AD%A4%E7%AB%8B%E5%9D%97">补充</a>)，平均速率为 1/T，由网络维持为固定的平均挖掘速率。因此，孤立大小为 s 的有效块的概率为：</p><p>$${\Pr }^{\textrm {orphan}}(s)=1-e^{-\tau (s)/T}=1-e^{-\left({\frac {s}{\gamma c}+\beta s}\right) /T}.$$</p><p>所以，然后，矿池 i 最终赢得一个大小为 </p><p>$$s_{i}$$ </p><p>的区块的挖矿竞赛的概率是 ( 赢得竞赛的概率乘挖到的区块不被孤立的概率 ) ：</p><p>$${\Pr }^{\textrm {win}}<em>{i}(\mathbf {x}, \pmb {\omega }, s</em>{i})=(1-{\Pr }^{\textrm {orphan}}(s))*{\Pr }^{\textrm {mine}}<em>{i}(\mathbf {x},\pmb {\omega })=\frac {\omega <em>{i} x</em>{i}}{\sum <em>{j=1}^{M}\omega <em>{j} x</em>{j}} e^{-\left({\frac {s</em>{i}}{\gamma c}+\beta s</em>{i}}\right)/T}.$$</p><p><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20211208153637.png"></p><p>一个区块的收益由固定的代币发行奖励和打包在新区块中的所有交易的交易费用组成。考虑到区块链用户为每笔交易支付固定费用并且交易记录具有相同的大小。令 R 表示代币发行奖励，</p><p>$$\rho$$ </p><p>表示每单位数据大小的交易确认价格。然后，交易费用可以表示为</p><p> $$\rho s_{i}$$</p><p> 由于哈希计算，矿工还必须考虑能源成本。让 p 表示在 T 期间维持单位哈希率的能源价格。能量成本可以表示为</p><p>$$p\omega _{i}$$</p><p>  结合之前的讨论，矿工在矿池 i 中的期望收益可以表示为</p><p>$$y_{i}(\mathbf {x}, \pmb {\omega }, s_{i})=\frac {R+\rho s_{i}}{N x_{i}}\frac {\omega <em>{i} x</em>{i}}{\sum <em>{j=1}^{M}\omega <em>{j} x</em>{j}} e^{-\left({\frac {s</em>{i}}{\gamma c}+\beta s_{i}}\right)/T}-p\omega _{i}.\qquad $$</p><p><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20211208153743.png"></p><h3 id="B-矿池选择过程中的演化博弈"><a href="#B-矿池选择过程中的演化博弈" class="headerlink" title="B.矿池选择过程中的演化博弈"></a>B.矿池选择过程中的演化博弈</h3><p>考虑到每个矿工都是有限理性的，并且旨在最大化其个体的收益。所以我们可以将矿池选择过程中的演化博弈定义为一个四元组：</p><p>$$\mathcal {G}=\langle \mathcal {N}, \mathcal {M}, \mathbf {x}, {y_{i}(\mathbf {x}, \pmb {\omega }, s_{i})}_{i\in \mathcal {M}} \rangle$$</p><ul><li>$$其中\mathcal {N}表示个体矿工人数,并且\vert \mathcal {N}\vert =N$$</li><li>$$\mathcal {M}={1, 2, \ldots, M}表示所有矿池的集合$$</li><li>$$\mathbf {x}\in \mathcal {X}表示人口状态向量$$</li><li>$${y_{i}(\mathbf {x}, \pmb {\omega }, s_{i})}_{i\in \mathcal {M}}表示每个矿池中单个矿工收益的集合$$</li></ul><p>最后，根据成对比例模仿协议，我们完成了矿池选择过程中的演化博弈过程</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">初始化阶段</span></span><br><span class="line"><span class="comment">1. 所有矿工i堆积选择一个矿池加入</span></span><br><span class="line"><span class="comment">2. 初始化t为1</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">while</span> x has <span class="keyword">not</span> converged <span class="keyword">and</span> t&lt;MAX_COUNTER <span class="keyword">do</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i∈N <span class="keyword">do</span></span><br><span class="line"></span><br><span class="line">j ← Rand(<span class="number">1</span>,M) &#123;Randomly selects a pool j∈M &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Determine whether to switch to pool j according to the switching probability</span></span><br><span class="line"><span class="comment">//根据转换概率公式（下文给出）决定是否切换矿池</span></span><br><span class="line"><span class="function">Function <span class="title">switching_probability</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">end <span class="keyword">for</span></span><br><span class="line"></span><br><span class="line">t=t+<span class="number">1</span></span><br><span class="line"></span><br><span class="line">end <span class="keyword">while</span></span><br></pre></td></tr></table></figure><p>转换概率公式：</p><p>$$\rho <em>{i,j}=x</em>{j}\max (y_{j}(\mathbf {x}, \pmb {\omega }, s_{j}) - y_{i}(\mathbf {x}, \pmb {\omega }, s_{i}), 0)$$</p><p><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20211208153807.png"></p><h2 id="仿真过程"><a href="#仿真过程" class="headerlink" title="仿真过程"></a>仿真过程</h2><h2 id="补充知识"><a href="#补充知识" class="headerlink" title="补充知识"></a>补充知识</h2><h3 id="挖掘策略"><a href="#挖掘策略" class="headerlink" title="挖掘策略"></a>挖掘策略</h3><p>挖掘策略：指矿工在解谜过程以及最后公布区块阶段采取的相应策略，旨在通过合法的方式增大自己的收益，常见的挖掘策略有自私挖掘与合作挖掘，从而还衍生出了智能矿工的概念（不断动态分析各个矿池的数据,可以动态获到当前收益最高的矿池，选择收益最高的矿池）</p><p>自私挖掘：自私挖掘主要通过扣留区块，拖延公布区块的时间来达成。- 自私挖矿的目的不是破坏加密货币的区块链网络，而是获得更大利润。</p><blockquote><p>这种攻击主要由矿工发起。我们以比特币区块链作为例子。简单地说，攻击者挖到新区块后藏起来不公布，其他诚实矿工因为不知道新区块的存在，还是继续在旧区块基础上挖矿。等到攻击者挖到第二枚区块后便会同时公布手中藏着的两枚区块，这时，区块链分叉就出现了。只要攻击者比诚实矿工多挖一枚区块，攻击者所在的分叉就是最长链：根据比特币的共识机制，矿工只在最长链后面挖矿。因此，原本诚实矿工们所在的那条链，因为比攻击者的分叉短，便作废了。此时此刻，攻击者因为挖到了两枚新区块而获得相应收益；而诚实矿工的分叉被废弃，他们什么也得不到。</p></blockquote><blockquote><p>这种攻击的前提是对于算力（即挖矿速度）的比拼。如同刚才提到的，面对区块链出现分叉情况时（这里的分叉不是日常所说改变共识原则的硬分叉或软分叉，而是在共识原则不变前提下的分叉），最长的那一条链被视作合法链。如果自私挖矿攻击者能够迅速让原本的长链变成短链（即在短时间内发布自己挖到的两枚或多枚区块，让自己所在的区块链分叉变成最长链），那么所有诚实守法的矿工所做的努力都白费了。</p></blockquote><h3 id="抗ASIC"><a href="#抗ASIC" class="headerlink" title="抗ASIC"></a>抗ASIC</h3><p>ASIC是专用继承电路的缩写，是为特定目的而生产的微芯片，在加密货币领域，ASIC最常用于计算密码难题，特别是用于挖矿过程。</p><p>顾名思义，抗ASIC是指能够有效抗击ASIC的算法，常见的具有抗ASIC性的货币有以太坊等</p><h3 id="孤立块"><a href="#孤立块" class="headerlink" title="孤立块"></a>孤立块</h3><p>孤立块的出现是由于意外分叉，意外分叉即两个或以上的矿工在几乎相同的时间成功挖到区块，此时原来的区块链便会产生分叉，而收到不同区块的两组矿工便会在两条分叉的链上继续挖矿，直至其中一组矿工首先挖到下一枚区块，生成了更长链，此时网络中的矿工便会舍弃原来较短的链上的最后一枚区块，转而相信最长链的数据，分叉也随之消失，而被舍弃的那枚区块，就叫做孤立块。</p>]]></content>
      
      
      <categories>
          
          <category> 区块链 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 区块链 </tag>
            
            <tag> 演化博弈 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>17-生产者与消费者问题</title>
      <link href="/2021/11/12/17-%E7%94%9F%E4%BA%A7%E8%80%85%E4%B8%8E%E6%B6%88%E8%B4%B9%E8%80%85%E9%97%AE%E9%A2%98/"/>
      <url>/2021/11/12/17-%E7%94%9F%E4%BA%A7%E8%80%85%E4%B8%8E%E6%B6%88%E8%B4%B9%E8%80%85%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h1 id="生产者与消费者问题"><a href="#生产者与消费者问题" class="headerlink" title="生产者与消费者问题"></a>生产者与消费者问题</h1><p>系统中有一组生产者进程和一组消费者进程，生产者进程每次生产一个产品就放入缓冲区，消费者进程每次从缓冲区中取出一个产品并使用（这里的产品可能是某种数据）</p><p>生产者和消费者共享一个初始为空，大小为n的缓冲区</p><ul><li>只有缓冲区没满时，生产者才能将产品放入缓冲区，否则必须等待</li><li>只有缓冲区不空时，消费者才能从缓冲区取出产品，否则必须等待</li><li>缓冲区是临界资源，各进程必须互斥访问</li></ul><p><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20211112154744.png"></p><h2 id="PV操作题目常见方法"><a href="#PV操作题目常见方法" class="headerlink" title="PV操作题目常见方法"></a>PV操作题目常见方法</h2><p>信号量机制可以实现互斥，同步以及对一类资源的申请和释放</p><ul><li>互斥：一般会设置初值为1的互斥信号量</li><li>同步：设置初值为0的同步信号量（实现一前一后）</li><li>资源的释放和申请：设置一个信号量，初始值即为资源数量（本质还是进程同步）</li></ul><h2 id="PV操作题目分析步骤"><a href="#PV操作题目分析步骤" class="headerlink" title="PV操作题目分析步骤"></a>PV操作题目分析步骤</h2><ol><li>关系分析，找出题目中描述的各个进程，分析它们之间的同步互斥关系<ul><li>本题中，涉及以下几种进程同步，互斥关系</li><li>互斥关系：对于临界区的访问，必须互斥进行</li><li>同步关系：缓冲区满，生产者必须开始等待，直到消费者取走产品</li><li>同步关系：缓冲区空，消费者必须开始等待，直到生产者放入产品</li></ul></li><li>整理思路，根据各进程的操作流程确定P，V操作的大致顺序<ul><li>生产者每次要消耗一个空闲缓冲区（P）并生产一个产品（V）</li><li>消费者每次要消耗一个产品（P）并释放一个空闲缓冲区（V）</li><li>往缓冲区收入/取走产品需要互斥</li></ul></li><li>设置信号量，根据上文内容确定所需的信号量，并根据题目条件确定信号量初值<ul><li>互斥信号量一般为1</li><li>同步信号量一般为资源初始值</li></ul></li></ol><h2 id="解题"><a href="#解题" class="headerlink" title="解题"></a>解题</h2><p>根据上文所述，我们需要三个信号量来解决本问题</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">semaphore mutex=<span class="number">1</span>; <span class="comment">// 互斥信号量，实现对缓冲区的互斥访问</span></span><br><span class="line">semaphore empty=n; <span class="comment">// 同步信号量，表示空闲缓冲区的数量</span></span><br><span class="line">semaphore full=<span class="number">0</span>; <span class="comment">// 同步信号量，表示产品数量，也即非空闲缓冲区的数量</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//生产者</span></span><br><span class="line">producer ()&#123;</span><br><span class="line">    <span class="comment">// 执行循环</span></span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">        生产一个产品</span><br><span class="line">        P(empty); <span class="comment">// 消耗一个空闲缓冲区</span></span><br><span class="line">        P(mutex); <span class="comment">// 对缓冲区上锁</span></span><br><span class="line">        把产品放入缓冲区;</span><br><span class="line">        V(mutex); <span class="comment">//对缓冲区解锁</span></span><br><span class="line">        V(full); <span class="comment">//增加一个产品数量</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//消费者</span></span><br><span class="line">consumer ()&#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">        P(full); <span class="comment">//消耗一个产品</span></span><br><span class="line">        P(mutex); <span class="comment">//对缓冲区上锁</span></span><br><span class="line">        从缓冲区取出一个产品;</span><br><span class="line">        V(mutex); <span class="comment">//释放缓冲区</span></span><br><span class="line">        V(empty); <span class="comment">//增加一个空闲缓冲区数量</span></span><br><span class="line">        使用产品;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个过程中相邻的两个P操作不能交换位置，例如，若将生产者中相邻的两个P操作交换位置</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//生产者</span></span><br><span class="line">producer ()&#123;</span><br><span class="line">    <span class="comment">// 执行循环</span></span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">        生产一个产品</span><br><span class="line">        P(mutex); <span class="comment">// 对缓冲区上锁</span></span><br><span class="line">        P(empty); <span class="comment">// 消耗一个空闲缓冲区</span></span><br><span class="line">        把产品放入缓冲区;</span><br><span class="line">        V(mutex); <span class="comment">//对缓冲区解锁</span></span><br><span class="line">        V(full); <span class="comment">//增加一个产品数量</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>假设此时empty=0,full=n即缓冲区中没有空闲位置，则生产者进程执行</p><ol><li>使mutex变为0</li><li>由于没有空闲缓冲区，所以生产者被阻塞</li><li>消费者进程执行，由于mutex=0，即生产者还没有释放临界资源的“锁”，所以消费者也被阻塞</li><li>生产者等待消费者释放空闲缓冲区，消费者等待生产者释放临界区资源</li><li>造成死锁</li></ol><p>同理，若调换消费者相邻P操作的位置，在full=0,empty=n时也会造成死锁</p><p><strong>因此，实现互斥的P操作一定要放在实现同步的P操作之后</strong></p><p>V操作不会导致进程阻塞，因此相邻V操作的位置可换</p><h1 id="多生产者多消费者问题-放取水果问题"><a href="#多生产者多消费者问题-放取水果问题" class="headerlink" title="多生产者多消费者问题-放取水果问题"></a>多生产者多消费者问题-放取水果问题</h1><p>桌子上有一只盘子，每次只能向其中放入一个水果。爸爸专向盘子中放苹果，妈妈专向盘子中放橘子，儿子专等着吃盘子中的橘子，女儿专等着吃盘子中的苹果。只有盘子空时，爸爸或妈妈才可向盘子中放一个水果。仅当盘子中有自己需要的水果时，儿子或女儿可以从盘子中取出水果。用PV操作实现上述过程。</p><ol><li>关系分析，找出题目中各个进程以及它们之间的同步互斥关系<ul><li>可以看到，这个题目中父亲和母亲相当于两个生产者进程，女儿和儿子相当于两个消费者进程</li><li>只不过要注意这里的两个生产者生产物品不同，消费者消费的物品也不同</li></ul></li><li>整理思路，根据各个进程的操作流程确定PV操作大致顺序<ul><li>互斥操作要在在临界区前后分别PV，同步操作要前V后P</li><li>互斥关系：对缓冲区（盘子）的访问要互斥进行</li><li>同步关系：父亲将苹果放入盘子，女儿才可以取苹果</li><li>同步关系：母亲将橘子放入盘子，儿子才可以取橘子</li><li>同步关系：只有盘子为空时，父亲或母亲才能放入水果</li></ul></li><li>设置信号量（互斥信号量一般为1，同步信号量初值取决于资源初始书目）</li></ol><p><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20211114192311.png"></p><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">semaphore mutex=<span class="number">1</span>; <span class="comment">//实现互斥访问临界区（盘子）</span></span><br><span class="line">semaphore apple=<span class="number">0</span>; <span class="comment">//盘子中有几个苹果</span></span><br><span class="line">semaphore orange=<span class="number">0</span>; <span class="comment">//盘子中有几个橘子</span></span><br><span class="line">semaphore plate=<span class="number">1</span>; <span class="comment">//盘子中还可以放几个水果</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 父亲进程</span></span><br><span class="line">dad()&#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">        准备一个苹果;</span><br><span class="line">        P(plate);  <span class="comment">//等待一个盘子位置</span></span><br><span class="line">        P(mutex);  <span class="comment">//临界区上锁</span></span><br><span class="line">        把苹果放入盘子;</span><br><span class="line">        V(mutex); <span class="comment">//临界区解锁</span></span><br><span class="line">        V(apple); <span class="comment">//释放苹果资源（苹果数加一，同时唤醒女儿进程执行）</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//母亲进程</span></span><br><span class="line">mom()&#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">        准备一个橘子;</span><br><span class="line">        P(plate);  <span class="comment">//等待一个盘子位置</span></span><br><span class="line">        P(mutex);  <span class="comment">//临界区上锁</span></span><br><span class="line">        把橘子放入盘子;</span><br><span class="line">        V(mutex); <span class="comment">//临界区解锁</span></span><br><span class="line">        V(orange); <span class="comment">//释放橘子资源（橘子数加一，同时唤醒儿子进程执行）</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//女儿进程</span></span><br><span class="line">daughter()&#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">        P(apple); <span class="comment">//等待苹果资源</span></span><br><span class="line">        P(mutex); <span class="comment">//临界区上锁</span></span><br><span class="line">        从盘中取出苹果;</span><br><span class="line">        V(mutex); <span class="comment">//临界区解锁</span></span><br><span class="line">        V(plate); <span class="comment">//已经取出了苹果，所以释放盘子资源</span></span><br><span class="line">        吃掉苹果;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//儿子进程</span></span><br><span class="line">son()&#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">        P(orange); <span class="comment">//等待橘子资源</span></span><br><span class="line">        P(mutex); <span class="comment">//临界区上锁</span></span><br><span class="line">        从盘中取出橘子;</span><br><span class="line">        V(mutex); <span class="comment">//临界区解锁</span></span><br><span class="line">        V(plate); <span class="comment">//已经取出了橘子，所以释放盘子资源</span></span><br><span class="line">        吃掉橘子;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 计算机基础 </category>
          
          <category> 操作系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 操作系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>16-用信号量实现进程互斥,同步,前驱关系</title>
      <link href="/2021/11/12/16-%E7%94%A8%E4%BF%A1%E5%8F%B7%E9%87%8F%E5%AE%9E%E7%8E%B0%E8%BF%9B%E7%A8%8B%E4%BA%92%E6%96%A5-%E5%90%8C%E6%AD%A5-%E5%89%8D%E9%A9%B1%E5%85%B3%E7%B3%BB/"/>
      <url>/2021/11/12/16-%E7%94%A8%E4%BF%A1%E5%8F%B7%E9%87%8F%E5%AE%9E%E7%8E%B0%E8%BF%9B%E7%A8%8B%E4%BA%92%E6%96%A5-%E5%90%8C%E6%AD%A5-%E5%89%8D%E9%A9%B1%E5%85%B3%E7%B3%BB/</url>
      
        <content type="html"><![CDATA[<h1 id="信号量机制实现进程互斥"><a href="#信号量机制实现进程互斥" class="headerlink" title="信号量机制实现进程互斥"></a>信号量机制实现进程互斥</h1><h2 id="主要步骤"><a href="#主要步骤" class="headerlink" title="主要步骤"></a>主要步骤</h2><ol><li>分析并发进程的关键活动，划定临界区（例如：对打印机等临界资源的访问就应放在临界区内）</li><li>设置互斥信号量，常命名为mutex，初值为1（因为一般情况下对临界区的访问同一时间只能存在一个进程）</li><li>在临界区之前执行P(mutex)</li><li>在临界区之后执行V(mutex)</li></ol><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">semaphore mutex=<span class="number">1</span>;</span><br><span class="line">P1()&#123;</span><br><span class="line">    ...</span><br><span class="line">    P(mutex)</span><br><span class="line">    临界区代码段...</span><br><span class="line">    V(mutex)</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">P2()&#123;</span><br><span class="line">    ...</span><br><span class="line">    P(mutex)</span><br><span class="line">    临界区代码段...</span><br><span class="line">    V(mutex)</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><ul><li>对不同的临界资源需要设置不同的互斥信号量（mutex1，mutex2）</li><li>P,V操作必须成对出现，缺少P就不能保证临界资源的互斥访问，缺少V就会导致资源永远不被释放，等待进程永远不能唤醒</li></ul><h1 id="信号量机制实现进程同步"><a href="#信号量机制实现进程同步" class="headerlink" title="信号量机制实现进程同步"></a>信号量机制实现进程同步</h1><p>进程同步的目的在于让各个本来异步并发的进程按要求有序推进</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">P1()&#123;</span><br><span class="line">    代码<span class="number">1</span>;</span><br><span class="line">    代码<span class="number">2</span>;</span><br><span class="line">    代码<span class="number">3</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">P2()&#123;</span><br><span class="line">    代码<span class="number">4</span>;</span><br><span class="line">    代码<span class="number">5</span>;</span><br><span class="line">    代码<span class="number">6</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例如，在上面的P1和P2进程中，由于异步性导致程序执行顺序并不确定，但我们必须保证代码1和代码2在代码4之前执行，此时就需要使用进程同步机制实现</p><h2 id="用信号量实现进程同步的步骤"><a href="#用信号量实现进程同步的步骤" class="headerlink" title="用信号量实现进程同步的步骤"></a>用信号量实现进程同步的步骤</h2><ol><li>分析什么地方需要实现“同步关系”，即保证“一前一后”执行的两个操作</li><li>设置同步信号量：S，初值为0</li><li>在“必须先执行的操作”之后执行V(S)</li><li>在“必须后执行的操作”之前执行P(S)</li></ol><h2 id="示例-1"><a href="#示例-1" class="headerlink" title="示例"></a>示例</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">semaphore S=<span class="number">0</span>; <span class="comment">//初始化同步信号量，初值为0</span></span><br><span class="line"></span><br><span class="line">P1()&#123;</span><br><span class="line">    代码<span class="number">1</span>;</span><br><span class="line">    代码<span class="number">2</span>;</span><br><span class="line">    <span class="comment">//代码1和代码2是必须先执行的操作</span></span><br><span class="line">    <span class="comment">//所以在它们之后执行V(S)</span></span><br><span class="line">    V(S); </span><br><span class="line">    代码<span class="number">3</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">P2()&#123;</span><br><span class="line">    <span class="comment">//代码4是必须后执行的操作</span></span><br><span class="line">    <span class="comment">//所以在它前面执行P(S)</span></span><br><span class="line">    P(S);</span><br><span class="line">    代码<span class="number">4</span>;</span><br><span class="line">    代码<span class="number">5</span>;</span><br><span class="line">    代码<span class="number">6</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>若先执行了P1进程，执行完代码1和代码2后，进行V操作，则信号量S++后S=1，之后执行P2进程时，执行P操作判断S=1&gt;0所以表示有可用资源可以继续执行，S–后S=0，不会执行block原语被阻塞，可以继续往下执行代码4</p><p>若先执行P2进程，由于P操作判断S=0表示没有可用资源，所以执行block原语，主动请求阻塞P2进程，直到P1进程执行完代码1和代码2后到V操作发现S=-1表示等待队列中有进程在等待资源，所以其主动唤醒P2进程，P2进程得以继续执行代码4</p><h1 id="信号量机制实现前驱关系"><a href="#信号量机制实现前驱关系" class="headerlink" title="信号量机制实现前驱关系"></a>信号量机制实现前驱关系</h1><p>一共有六个进程P1,P2…P6，其中进程P1中有代码S1，P2中有代码S2，…P6中有代码S6，这些代码要求按如下前驱图所示的顺序执行<br><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20211112104420.png"></p><h2 id="主要步骤-1"><a href="#主要步骤-1" class="headerlink" title="主要步骤"></a>主要步骤</h2><p>其实每一对前驱关系都是一个进程同步问题（需要保证一前一后的操作），所以</p><ol><li>要为每一对前驱关系各设置一个同步变量</li><li>在“必须先执行操作”之后对相应同步变量执行V操作</li><li>在“必须后执行操作”之前对相应同步变量执行P操作</li></ol><p><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20211112105243.png"></p><p><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20211112105325.png"></p><p> 不难看出，前驱关系本质上还是更复杂的进程同步问题 </p>]]></content>
      
      
      <categories>
          
          <category> 计算机基础 </category>
          
          <category> 操作系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 操作系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>15-信号量机制</title>
      <link href="/2021/11/09/15-%E4%BF%A1%E5%8F%B7%E9%87%8F%E6%9C%BA%E5%88%B6/"/>
      <url>/2021/11/09/15-%E4%BF%A1%E5%8F%B7%E9%87%8F%E6%9C%BA%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<h1 id="信号量机制"><a href="#信号量机制" class="headerlink" title="信号量机制"></a>信号量机制</h1><p>在我们之前学习的有关进程互斥的硬件软件方法中，都存在着一些不可避免的问题</p><ul><li>例如在双标志检查法中，由于检查和上锁操作不能原子性的完成，导致两个进程可能同时进入临界区</li><li>又比如之前所讲的软硬件方法都无法实现“让权等待”</li></ul><p>基于以上所说的问题，我们最终提出了有效解决进程互斥与进程同步的方法–信号量机制</p><p>用户进程可以通过使用操作系统提供的一对原语来对信号量进行操作，从而方便的实现进程互斥与进程同步</p><p>信号量实质就是一个变量（可以是一个整数，也可以是复杂的记录型变量），可以用一个信号量来表示系统中某种资源的数量（例如：系统有两台打印机，就可以设置一个信号量初始值为2）</p><p>原语是一种特殊程序段，其执行只能一气呵成，不可中断。原语是利用开/关中断指令实现的。软件解决方案的主要问题基本都出在进入区中的各种操作不能原子性的执行，因此如果能把进入区，退出区的操作都利用原语实现，就可以避免问题的产生</p><p>我们所使用的一对原语是：wait(S)原语和signal(S)原语，可以把原语理解为我们自己写的函数，函数名为wait和signal，括号里的S表示信号量S，其实就是函数调用时所传入的一个参数</p><p>wait和signal原语常被称为P,V操作，因此做题时也常将其写作P(S),V(S)</p><h2 id="整型信号量"><a href="#整型信号量" class="headerlink" title="整型信号量"></a>整型信号量</h2><p>用一个整数型变量作为信号量，用来表示系统中某种资源的数量，整数型信号量与我们平常创建的普通整数变量的区别主要是我们对该信号量只能进行三种操作：即初始化或P操作和V操作</p><p>例如：系统中有一台打印机</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> S=<span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">wait</span><span class="params">(<span class="keyword">int</span> S)</span> </span>&#123; <span class="comment">//wait原语，相当于进入区</span></span><br><span class="line">    <span class="comment">//检查和上锁一气呵成，避免了并发过程中异步导致的问题</span></span><br><span class="line">    <span class="keyword">while</span>(S&lt;=<span class="number">0</span>); <span class="comment">//如果资源不够，则始终循环等待，这一步不满足“让权等待”</span></span><br><span class="line">    S=S-<span class="number">1</span>; <span class="comment">//如果资源足够，则占用一个资源</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">signal</span><span class="params">(<span class="keyword">int</span> s)</span> </span>&#123; <span class="comment">//signal原语，相当于退出区</span></span><br><span class="line">    S=S+<span class="number">1</span>;  <span class="comment">//在使用完资源后，在退出区释放资源</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20211108205942.png"></p><p>按照上面示例，P0进程在进入区利用wait原语申请资源，然后进入临界区，此时S减一后为0，P1到Pn进程只能在wait原语中循环等待，直到P0进程释放资源。</p><p>此时就不会出现我们之前的两个进程同时进入临界区的情况，因为wait是原语，其执行原子性操作，所以检查和上锁是同时进行的</p><h2 id="记录型信号量"><a href="#记录型信号量" class="headerlink" title="记录型信号量"></a>记录型信号量</h2><p>整型信号量存在的缺陷是不满足“让权等待”存在忙等，所以人们又提出了“记录型信号量”，即用记录型数据结构表示的信号量</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*记录型信号量的定义*/</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> value;  <span class="comment">//剩余资源数</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">process</span> *<span class="title">L</span>;</span>  <span class="comment">//等待队列</span></span><br><span class="line">&#125;semaphore</span><br><span class="line"></span><br><span class="line"><span class="comment">/*某进程需要使用资源时，通过wait原语申请*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">wait</span><span class="params">(semaphore S)</span></span>&#123;</span><br><span class="line">    S.value--;  <span class="comment">//将资源数减一</span></span><br><span class="line">    <span class="keyword">if</span>(S.value&lt;<span class="number">0</span>)&#123; <span class="comment">//判断资源数是否小于0</span></span><br><span class="line">        <span class="comment">//小于0表示剩余资源不足</span></span><br><span class="line">        block(S.L);</span><br><span class="line">        <span class="comment">//使用block原语使进程从运行态进入阻塞态，</span></span><br><span class="line">        <span class="comment">//并把该进程挂到信号量S的等待队列（即阻塞队列中）</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*进程使用完资源后，使用signal原语释放资源*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">signal</span><span class="params">(semaphore S)</span></span>&#123;</span><br><span class="line">    S.value++;  <span class="comment">//将剩余资源数加一</span></span><br><span class="line">    <span class="keyword">if</span>(S.value&lt;=<span class="number">0</span>)&#123; <span class="comment">//判断资源数是否小于等于0</span></span><br><span class="line">        <span class="comment">//资源数小于等于0表示等待队列中还有进程处于阻塞态等待资源释放</span></span><br><span class="line">        wakeup(S.L)</span><br><span class="line">        <span class="comment">//利用wakeup原语唤醒等待队列中的一个进程</span></span><br><span class="line">        <span class="comment">//该进程从阻塞态转变为就绪态</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20211108212318.png"></p><p><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20211108212327.png"></p><p>现在有四个进程按照P0-&gt;P3的顺序申请使用打印机</p><ol><li>初始化打印机信号量：S.value=2</li><li>P0进程申请打印机，调用wait原语S.value-1=1，随后经过判断S.value&gt;=0所以成功申请打印机并且不进入等待队列</li><li>P1进程申请打印机，调用wait原语S.value-1=0，经过判断S.value&gt;=0，有剩余资源所以成功申请打印机并且不进入等待队列</li><li>P2申请打印机，调用wait原语S.value-1=-1，经过判断S.value&lt;0所以没有剩余资源，利用block原语对P2进程进行阻塞，并将其放入等待队列</li><li>P3申请打印机，调用wait原语S.value-1=-2，经过判断S.value&lt;0所以没有剩余资源，利用block原语对P3进程进行阻塞，并将其放入等待队列</li><li>P0进程使用结束，利用signal原语S.value+1=-1，经过判断S.value&lt;=0，所以等待队列中有进程处于等待状态，调用wakeup原语唤醒一个等待进程</li><li>P2进程被唤醒，开始使用打印机，并且快速使用完毕，调用signal原语S.value+1=0，S.value&lt;=0所以等待队列中还有进程在等待，调用wakeup原语唤醒一个进程</li><li>P3进程被唤醒，开始使用打印机</li><li>P1进程使用完毕，调用signal原语S.value+1=1，此时S.value&gt;0所以等待队列中没有进程，所以不需要执行wakeup原语</li><li>P3进程使用完毕，调用signal原语S.value+1=2，此时S.value&gt;0所以等待队列中没有进程，所以不需要执行wakeup原语</li></ol><p>记录型信号量与整型信号量的主要区别在于其内部存储了等待队列，因此在发现资源被全部分配的情况下，进程不需要始终执行循环，造成“忙等”，而是可以利用block原语进行阻塞，主动放弃处理机，并进入该资源信号量的等待队列中，可见，记录型信号量完成的机制遵循了“让权等待”原则，不会出现“忙等”</p>]]></content>
      
      
      <categories>
          
          <category> 计算机基础 </category>
          
          <category> 操作系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 操作系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1-归并排序-算法复习</title>
      <link href="/2021/11/07/1-%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F-%E7%AE%97%E6%B3%95%E5%A4%8D%E4%B9%A0/"/>
      <url>/2021/11/07/1-%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F-%E7%AE%97%E6%B3%95%E5%A4%8D%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="归并"><a href="#归并" class="headerlink" title="归并"></a>归并</h1><p>要了解归并排序算法首先要了解归并这一过程，归并过程处理两个可比较数组（两个数组已经各自有序），在归并过程中，不断对两个数组的当前首元素进行比较，将较小的元素放置到新数组的下一位置。</p><h2 id="归并实现：-原地归并的抽象方法"><a href="#归并实现：-原地归并的抽象方法" class="headerlink" title="归并实现：(原地归并的抽象方法)"></a>归并实现：(原地归并的抽象方法)</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.ywrby.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MergeTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">less</span><span class="params">(Comparable v, Comparable w)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> v.compareTo(w) &lt; <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//原地归并的抽象实现</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    * 参数a表示已经部分有序的原数组（前一部分，后一部分分别有序）</span></span><br><span class="line"><span class="comment">    * 参数lo表示前一部分数组的首元素（前一部分最小值）</span></span><br><span class="line"><span class="comment">    * 参数mid表示前一部分数组最后一个元素（后一部分数组首元素的前一位，前一部分最大值）</span></span><br><span class="line"><span class="comment">    * 参数hi表示后一部分数组最后一位(后一部分最大值)</span></span><br><span class="line"><span class="comment">    * */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">MergeTest</span><span class="params">(Comparable[] a,<span class="keyword">int</span> lo,<span class="keyword">int</span> mid,<span class="keyword">int</span> hi)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i=lo,j=mid+<span class="number">1</span>;</span><br><span class="line">        Comparable[] aux=<span class="keyword">new</span> Comparable[hi+<span class="number">1</span>];</span><br><span class="line">        <span class="comment">//通过遍历复制原数组</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> k=lo;k&lt;=hi;k++)&#123;</span><br><span class="line">            aux[k]=a[k];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//对原数组进行归并</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> k=lo;k&lt;=hi;k++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i&gt;mid) a[k]=aux[j++];  <span class="comment">//若前一部分数组元素用尽，就取后一部分数组元素</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(j&gt;hi) a[k]=aux[i++];  <span class="comment">//若后一部分数组元素，就取前一部分数组元素</span></span><br><span class="line">            <span class="comment">// 两个都没有用尽，就比较两数组当前首元素大小，取二者中较小的</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(less(aux[j],aux[i])) a[k]=aux[j++];  </span><br><span class="line">            <span class="keyword">else</span> a[k]=aux[i++];  </span><br><span class="line">        &#125;</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="自顶向下的归并排序"><a href="#自顶向下的归并排序" class="headerlink" title="自顶向下的归并排序"></a>自顶向下的归并排序</h1><p>基于原地归并的抽象实现完成的一种递归排序，首先不断对原数组进行分割，直至不能分割（每个数组中仅含一个元素），然后以每两个数组进行归并（因为只有一个元素，所以数组有序），经过一轮归并，数组中元素为2个或1个，继续递归进行归并排序，直至数组全部归并只剩一个</p><p>整个过程利用了分治思想，将一个大问题拆解为若干个简单的小问题加以解决</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.ywrby.sorts;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.ywrby.tools.StopWatch;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//自顶向下的归并排序</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MergeSort</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">less</span><span class="params">(Comparable v, Comparable w)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> v.compareTo(w) &lt; <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Comparable[] aux;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//原地归并的抽象实现</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 参数a表示已经部分有序的原数组（前一部分，后一部分分别有序）</span></span><br><span class="line"><span class="comment">     * 参数lo表示前一部分数组的首元素（前一部分最小值）</span></span><br><span class="line"><span class="comment">     * 参数mid表示前一部分数组最后一个元素（后一部分数组首元素的前一位，前一部分最大值）</span></span><br><span class="line"><span class="comment">     * 参数hi表示后一部分数组最后一位(后一部分最大值)</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">merge</span><span class="params">(Comparable[] a, <span class="keyword">int</span> lo, <span class="keyword">int</span> mid, <span class="keyword">int</span> hi)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = lo, j = mid + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> k = lo; k &lt;= hi; k++) &#123;</span><br><span class="line">            aux[k] = a[k];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//对原数组进行归并</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> k = lo; k &lt;= hi; k++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i &gt; mid) a[k] = aux[j++];  <span class="comment">//若前一部分数组元素用尽，就取后一部分数组元素</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (j &gt; hi) a[k] = aux[i++];  <span class="comment">//若后一部分数组元素，就取前一部分数组元素</span></span><br><span class="line">                <span class="comment">// 两个都没有用尽，就比较两数组当前首元素大小，取二者中较小的</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (less(aux[j], aux[i])) a[k] = aux[j++];</span><br><span class="line">            <span class="keyword">else</span> a[k] = aux[i++];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//准备额外空间用于盛放排序后的数组</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(Comparable[] a)</span> </span>&#123;</span><br><span class="line">        aux = <span class="keyword">new</span> Comparable[a.length];</span><br><span class="line">        sort(a, <span class="number">0</span>, a.length - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*基于原地归并的抽象实现完成的一种递归排序</span></span><br><span class="line"><span class="comment">     *首先不断对原数组进行分割，直至不能分割（每个数组中仅含一个元素）</span></span><br><span class="line"><span class="comment">     *然后以每两个数组进行归并（因为只有一个元素，所以数组有序）</span></span><br><span class="line"><span class="comment">     *经过一轮归并，数组中元素为2个或1个</span></span><br><span class="line"><span class="comment">     *继续递归进行归并排序，直至数组全部归并只剩一个</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(Comparable[] a, <span class="keyword">int</span> lo, <span class="keyword">int</span> hi)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (hi &lt;= lo) <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">int</span> mid = lo + (hi - lo) / <span class="number">2</span>;</span><br><span class="line">        sort(a, lo, mid);</span><br><span class="line">        sort(a, mid + <span class="number">1</span>, hi);</span><br><span class="line">        merge(a, lo, mid, hi);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">exch</span><span class="params">(Comparable[] a, <span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line">        Comparable temp = a[i];</span><br><span class="line">        a[i] = a[j];</span><br><span class="line">        a[j] = temp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">(Comparable[] a)</span> </span>&#123;</span><br><span class="line">        System.out.print(<span class="string">&quot;After sort : &quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; a.length; i++) &#123;</span><br><span class="line">            System.out.print(a[i] + <span class="string">&quot;  &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isSorted</span><span class="params">(Comparable[] a)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; a.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!less(a[i], a[i + <span class="number">1</span>])) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> N = <span class="number">1000</span>;</span><br><span class="line">        Comparable&lt;Double&gt;[] test = <span class="keyword">new</span> Comparable[N];</span><br><span class="line">        System.out.print(<span class="string">&quot;before sort : &quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line">            <span class="keyword">double</span> data = Math.random();</span><br><span class="line">            System.out.print(data + <span class="string">&quot;  &quot;</span>);</span><br><span class="line">            test[i] = data;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">        StopWatch watch = <span class="keyword">new</span> StopWatch();</span><br><span class="line">        sort(test);</span><br><span class="line">        <span class="keyword">double</span> time = watch.elapsedTime();</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * assert关键字：assert [boolean 表达式]</span></span><br><span class="line"><span class="comment">         * 如果[boolean表达式]为true，则程序继续执行。</span></span><br><span class="line"><span class="comment">         * 如果为false，则程序抛出AssertionError，并终止执行。</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="function"><span class="keyword">assert</span> <span class="title">isSorted</span><span class="params">(test)</span></span>;</span><br><span class="line">        show(test);</span><br><span class="line">        System.out.println(<span class="string">&quot;time=&quot;</span> + time);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="算法分析"><a href="#算法分析" class="headerlink" title="算法分析"></a>算法分析</h2><p>对于长度为N的任意数组，自顶向下的归并排序需要NlgN/2~NlgN次++比较++</p><p>令C(N)表示一个长度为N的数组需要进行比较的次数。易知：C(0)=C(1)=0,且自顶向下排序采用了递归的方法，所以可以写成：<br>$$C(N)&lt;=C_{前}(N/2)+C_{后}(N/2)+N$$</p><p>第一项表示数组前半部分比较次数，第二项则表示后半部分比较次数，最后一项表示将两项归并到一起所需要的最大比较次数</p><p>$$C(N)&gt;=C_{前}(N/2)+C_{后}(N/2)+N/2$$<br>同理最后一项表示归并时最小比较次数</p><p>以$N=2^n$时为例下的++最坏情况++进行分析，可以得到如下结论：</p><p>$$C(2^n)=C_{前}(2^{n-1})+C_{后}(2^{n-1})+2^n=2*C(2^{n-1})+2^n$$<br>将上式两边同时除以2^n得到：</p><p>$$C(2^n)/2^n=C(2^{n-1})/2^{n-1}+1$$<br>利用该式可以替换右边第一项得到：</p><p>$$C(2^n)/2^n=C(2^{n-2})/2^{n-2}+1+1$$<br>重复n次得到<br>$$C(2^n)/2^n=C(0)/2^{0}+n=n$$<br>因此</p><p>$$C(2^n)=n<em>2^n$$<br>进而由N=2^n得到<br>$$C(N)=N</em>lgN$$</p><p>虽然这是对特殊情况的一种讨论，但我们不难理解这对任意N是普遍适用的</p><hr><p>对于长度为N的任意数组，自顶向下的归并排序最多需要++访问数组++6NlgN次</p><p>每次归并最多访问数组6N次（第一个for循环的复制过程2N次，比较过程中最多2N次，将排序好的元素放回2N次），所以由上一个命题易知，最多需要访问数组6NlgN次</p><hr><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><p>运行时间与NlgN成正比，所以可以处理数百万甚至更大规模数组，这是初级排序算法无法做到的</p><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><p>辅助数组所使用的额外空间与N成正比</p><hr><h3 id="算法优化"><a href="#算法优化" class="headerlink" title="算法优化"></a>算法优化</h3><ol><li>对小规模数组使用插入排序而不是始终递归</li><li>添加方法以测试数组是否已经有序(a[mid]&lt;=a[mid+1])</li><li>不将元素复制到辅助数组</li></ol><hr><h1 id="自底向上的归并排序"><a href="#自底向上的归并排序" class="headerlink" title="自底向上的归并排序"></a>自底向上的归并排序</h1><p>自底向上的归并排序会遍历整个数组，根据子数组大小进行两两排序。子数组的大小sz的初始值为1，每次加倍。最后一个字数组的大小只有在数组大小是sz的偶数倍的时候才会等于sz(否则会比sz小)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.ywrby.sorts;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.ywrby.tools.StopWatch;</span><br><span class="line"></span><br><span class="line"><span class="comment">//自底向上的归并排序</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MergeBuSort</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">less</span><span class="params">(Comparable v, Comparable w)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> v.compareTo(w) &lt; <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Comparable[] aux;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">merge</span><span class="params">(Comparable[] a, <span class="keyword">int</span> lo, <span class="keyword">int</span> mid, <span class="keyword">int</span> hi)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = lo, j = mid + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> k = lo; k &lt;= hi; k++) &#123;</span><br><span class="line">            aux[k] = a[k];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//对原数组进行归并</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> k = lo; k &lt;= hi; k++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i &gt; mid) a[k] = aux[j++];  <span class="comment">//若前一部分数组元素用尽，就取后一部分数组元素</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (j &gt; hi) a[k] = aux[i++];  <span class="comment">//若后一部分数组元素，就取前一部分数组元素</span></span><br><span class="line">                <span class="comment">// 两个都没有用尽，就比较两数组当前首元素大小，取二者中较小的</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (less(aux[j], aux[i])) a[k] = aux[j++];</span><br><span class="line">            <span class="keyword">else</span> a[k] = aux[i++];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(Comparable[] a)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> N=a.length;</span><br><span class="line">        aux=<span class="keyword">new</span> Comparable[a.length];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> sz=<span class="number">1</span>;sz&lt;N;sz*=<span class="number">2</span>)&#123;  <span class="comment">//sz：子数组大小</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> lo=<span class="number">0</span>;lo&lt;N-sz;lo+=sz*<span class="number">2</span>)&#123;  <span class="comment">//lo：子数组索引</span></span><br><span class="line">                merge(a,lo,lo+sz-<span class="number">1</span>,Math.min(lo+sz*<span class="number">2</span>-<span class="number">1</span>,N-<span class="number">1</span>));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">exch</span><span class="params">(Comparable[] a, <span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line">        Comparable temp = a[i];</span><br><span class="line">        a[i] = a[j];</span><br><span class="line">        a[j] = temp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">(Comparable[] a)</span> </span>&#123;</span><br><span class="line">        System.out.print(<span class="string">&quot;After sort : &quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; a.length; i++) &#123;</span><br><span class="line">            System.out.print(a[i] + <span class="string">&quot;  &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isSorted</span><span class="params">(Comparable[] a)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; a.length-<span class="number">1</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!less(a[i],a[i+<span class="number">1</span>]))&#123;<span class="keyword">return</span> <span class="keyword">false</span>;&#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> N=<span class="number">100</span>;</span><br><span class="line">        Comparable&lt;Double&gt;[] test=<span class="keyword">new</span> Comparable[N];</span><br><span class="line">        System.out.print(<span class="string">&quot;before sort : &quot;</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N;i++)&#123;</span><br><span class="line">            <span class="keyword">double</span> data=Math.random();</span><br><span class="line">            System.out.print(data+<span class="string">&quot;  &quot;</span>);</span><br><span class="line">            test[i]=data;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">        StopWatch watch=<span class="keyword">new</span> StopWatch();</span><br><span class="line">        sort(test);</span><br><span class="line">        <span class="keyword">double</span> time=watch.elapsedTime();</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * assert关键字：assert [boolean 表达式]</span></span><br><span class="line"><span class="comment">         * 如果[boolean表达式]为true，则程序继续执行。</span></span><br><span class="line"><span class="comment">         * 如果为false，则程序抛出AssertionError，并终止执行。</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="function"><span class="keyword">assert</span> <span class="title">isSorted</span><span class="params">(test)</span></span>;</span><br><span class="line">        show(test);</span><br><span class="line">        System.out.println(<span class="string">&quot;time=&quot;</span>+time);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="归并排序的局限性"><a href="#归并排序的局限性" class="headerlink" title="归并排序的局限性"></a>归并排序的局限性</h1><ol><li>归并排序的空间复杂度不是最优的</li><li>除了比较，算法的其他操作（访问数组）也可能很重要</li><li>不进行比较也能将某些数据排序</li></ol>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>14-进程同步与进程互斥</title>
      <link href="/2021/11/07/14-%E8%BF%9B%E7%A8%8B%E5%90%8C%E6%AD%A5%E4%B8%8E%E8%BF%9B%E7%A8%8B%E4%BA%92%E6%96%A5/"/>
      <url>/2021/11/07/14-%E8%BF%9B%E7%A8%8B%E5%90%8C%E6%AD%A5%E4%B8%8E%E8%BF%9B%E7%A8%8B%E4%BA%92%E6%96%A5/</url>
      
        <content type="html"><![CDATA[<h1 id="进程同步"><a href="#进程同步" class="headerlink" title="进程同步"></a>进程同步</h1><blockquote><p>回顾:进程具有异步性的特征，即各个并发执行的进程以各自独立的，不可预知的速度向前推进</p></blockquote><p><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20211102103952.png"></p><p>但进程的异步性在有些情况下可能会影响程序的正常运行，以上图的管道通信为例，进程1负责写入数据，进程2负责读取数据，只有进程1将管道数据填满后进程2才能成功取到数据，但两个进程并发执行，无法确定读写数据操作的先后顺序，而实际情况又要求必须先写后读的方式执行，此时就需要通过进程同步解决相关问题</p><p>进程同步亦称直接制约关系，它是指为完成某个任务而建立的两个或多个进程，这些进程由于需要在某些位置上协调工作次序而产生的制约关系。进程间的直接制约关系就是源于它们之间的相互合作</p><h1 id="进程互斥"><a href="#进程互斥" class="headerlink" title="进程互斥"></a>进程互斥</h1><p><a href="https://ywrby.cn/2021/11/01/2-%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%9A%84%E5%9B%9B%E4%B8%AA%E7%89%B9%E5%BE%81/">两种资源共享方式</a></p><p>通过之前的知识我们知道，进程的“并发”依赖于“共享”的支持，各个并发执行的进程不可避免的需要共享一些系统资源</p><p>我们把<strong>一个时间段内只允许一个进程使用</strong>的资源称为临界资源，许多物理（摄像头，打印机）都属于临界资源，此外还有许多变量，数据，内存缓冲区都属于临界资源</p><p>对临界资源的访问，必须互斥地进行。</p><p>互斥亦称间接制约关系。进程互斥指当一个进程访问某临界资源时，另一个想要访问该临界资源的进程必须等待，当前访问临界资源的进程结束访问，释放临界资源后，另一个进程才能访问临界资源</p><p>对临界资源的互斥访问，可以在逻辑上分为如下四个部分：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">    <span class="comment">//进入区</span></span><br><span class="line">    entry_section() &#123; </span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        进入区负责检查是否可以进入临界区</span></span><br><span class="line"><span class="comment">        若可以进入，则应设置“正在访问临界资源的标志”（即上锁）</span></span><br><span class="line"><span class="comment">        以阻止其他进程同时进入临界区</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//临界区</span></span><br><span class="line">    critical_section() &#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        临界区就是访问临界资源的那段代码</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//退出区</span></span><br><span class="line">    exit_section() &#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        退出区负责接触“正在访问临界资源的标志”（即解锁）</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//剩余区</span></span><br><span class="line">    remainder_section() &#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        剩余区负责进行其他处理</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：</p><ul><li>临界区是进程中访问临界资源的代码段</li><li>进入区和退出区是负责实现互斥的代码段</li><li>临界区有时也称为临界段</li></ul><h2 id="进程互斥需要遵循的原则"><a href="#进程互斥需要遵循的原则" class="headerlink" title="进程互斥需要遵循的原则"></a>进程互斥需要遵循的原则</h2><p>为了实现对临界资源的互斥访问，同时保证系统整体性能，进程互斥需要遵循以下原则</p><ol><li>空闲让进：临界区空闲时，可以允许一个请求进入临界区的进程立即进入临界区</li><li>忙则等待：当已有进程进入临界区时，其他试图进入临界区的进程必须等待</li><li>有限等待：对请求访问的进程，应保证能在有限时间进入临界区（避免饥饿）</li><li>让权等待：当进程不能进入临界区，应立即释放处理机，防止进程忙等待（处理机被占用，但没有真正运行）</li></ol><h1 id="进程互斥的软件实现方法"><a href="#进程互斥的软件实现方法" class="headerlink" title="进程互斥的软件实现方法"></a>进程互斥的软件实现方法</h1><h2 id="单标志法"><a href="#单标志法" class="headerlink" title="单标志法"></a>单标志法</h2><h3 id="算法思想"><a href="#算法思想" class="headerlink" title="算法思想"></a>算法思想</h3><p>两个进程在访问完临界区后会把使用临界区的权限转交给另一个进程，也就是说每个进程进入临界区的权限只能被另一个进程赋予</p><h3 id="算法示例"><a href="#算法示例" class="headerlink" title="算法示例"></a>算法示例</h3><p><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20211107165923.png"></p><p>从上面示例可以看到，turn初值设为0，即刚开始只允许0号进入临界区，若P1进程尝试进入临界区，则会在执行第五行代码时被循环卡在进入区，直到时间片用尽，切换P0进程运行，P0在进入区代码检查通过能够正常访问临界区</p><p>此时，即使发生进程切换导致P1再次执行也会由于进入区的检查导致P1无法进入临界区，只有当P0进程在临界区执行完毕，释放资源，执行第三行代码进入退出区后，P1才能进入临界区</p><p>可以看到，该代码保证了同一时刻最多只允许一个进程访问临界区</p><p>但是，这种算法的据现象在于，如果当前标志位turn所设置的进程一直不执行，则会导致另一个进程始终无法进入临界区，即违背了“空闲让进” 的原则</p><h2 id="双标志先检查法"><a href="#双标志先检查法" class="headerlink" title="双标志先检查法"></a>双标志先检查法</h2><h3 id="算法思想-1"><a href="#算法思想-1" class="headerlink" title="算法思想"></a>算法思想</h3><p>设置一个布尔型数组flag[],数组中各个元素用来标记各个进程想进入临界区的意愿，例如“flag[0]=true”表示0号进程P0现在想要进入临界区，每个进程在进入临界区前都会先检查是否有其他进程想要进入临界区，若没有，则将自身标志位设为true，开始访问临界区</p><p><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20211107171251.png"></p><p>但是，由于进程执行过程中的异步性，代码的执行顺序是不确定的，若按照1，5，2，6，3，7的顺序执行，则会导致两个标志位同时被设置为true，同时进入临界区，违反了“忙则等待”原则</p><p>出现上面问题的核心原因就在于进入区中的“检查”和“上锁”处理不是原子性执行，而是分开执行的，在检查后，上锁前可能发生进程切换</p><p><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20211107172133.png"></p><h2 id="双标志后检查法"><a href="#双标志后检查法" class="headerlink" title="双标志后检查法"></a>双标志后检查法</h2><h3 id="算法思想-2"><a href="#算法思想-2" class="headerlink" title="算法思想"></a>算法思想</h3><p>考虑到前面的先检查法出现问题是由于先检查后上锁，但是两个操作又无法原子性执行，所以后检查法希望通过先上锁，后检查来解决上面提到的问题</p><h3 id="算法示例-1"><a href="#算法示例-1" class="headerlink" title="算法示例"></a>算法示例</h3><p><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20211107172524.png"></p><p>很明显，这样的算法出现了另一个致命性的问题，加入代码执行按照1，5，2，6的顺序执行，则由于双方都提前进行了上锁，所以两个进程都只能处于循环等待的状态，P0和P1最终都无法进入临界区</p><p>综上，后检查法解决了“忙则等待” 的问题，却违背了“空闲让进”和“有限等待”原则，最终会导致饥饿现象的产生</p><h2 id="Peterson算法"><a href="#Peterson算法" class="headerlink" title="Peterson算法"></a>Peterson算法</h2><h3 id="算法思想-3"><a href="#算法思想-3" class="headerlink" title="算法思想"></a>算法思想</h3><p>双标志后检查法出现的问题在于最终可能双方都想进入临界区导致互相争夺都无法进入，而Peterson算法为了改进这种情况，提出了“谦让”的方式，主动让对方先使用临界区</p><h3 id="算法示例-2"><a href="#算法示例-2" class="headerlink" title="算法示例"></a>算法示例</h3><p><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20211107173326.png"></p><p>我们再利用异步性来检验当前算法是否能够保证所有原则，假设代码以1，2，3，6，7，8的顺序执行，由于在第三行代码判断时flag[1]=false，所以P0进程能够顺利进入临界区，P1进程需要在第八行代码处等待，直到P0进程释放资源并修改意愿为flag[0]=false，P1进程才能进入临界区</p><p>假设代码以1，6，2，3的顺序执行</p><ol><li>首先经过1和6行代码，P0和P1都表示了想进入临界区的意愿</li><li>P0进程在第二行代码处将turn设为1表示愿意谦让</li><li>随后到第三行代码发现P1进程想要进入临界区并且自己愿意谦让，所以P0开始循环等待</li><li>直到进程切换到P1</li><li>P1继续执行第七行代码修改turn为0</li><li>然后执行第八行代码发现P0想要执行并且自己愿意谦让，P1开始循环等待</li><li>直到进程切换到P0</li><li>P0继续执行第三行代码，发现P1虽然想要执行，但此时P1谦让（turn!=1）所以P0进入临界区</li><li>P0执行完后，修改执行意愿</li><li>P1进入临界区继续执行</li></ol><p>可以看到，P0进程经过三次进程切换才得到成功执行，但由于谦让机制，最终一定会得到执行</p><h3 id="算法总结"><a href="#算法总结" class="headerlink" title="算法总结"></a>算法总结</h3><p>Peterson算法用软件方法解决了进程互斥问题，遵循了“空闲让进”，“忙则等待”，“有限等待”三个原则。不过依然没有遵循“让权等待”原则</p><h2 id="进程同步的硬件实现方法"><a href="#进程同步的硬件实现方法" class="headerlink" title="进程同步的硬件实现方法"></a>进程同步的硬件实现方法</h2><h3 id="中断屏蔽方法"><a href="#中断屏蔽方法" class="headerlink" title="中断屏蔽方法"></a>中断屏蔽方法</h3><p>利用“开/关中断指令”实现（与原语的实现思想相同，即在某进程开始访问临界区到结束访问位置都不允许被中断，也就不能发生进程切换，因此也不可能发生两个溶蚀访问临界区的情况）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">关中断; //关中断后即不允许当前进程被中断，也必然不会发生进程切换</span><br><span class="line">临界区;</span><br><span class="line">开中断; //直到当前进程访问完临界区，才执行开中断指令，别的进程才有机会上处理机并访问临界区</span><br><span class="line">...</span><br></pre></td></tr></table></figure><ul><li>优点：简洁，高效</li><li>缺点：不适用于多处理机，只适用于操作系统内核进程，不适用于用户进程（因为开/关中断指令都只能运行在内核态，这组指令不能让用户随意使用）</li></ul><h3 id="TestAndSet指令"><a href="#TestAndSet指令" class="headerlink" title="TestAndSet指令"></a>TestAndSet指令</h3><p>简称TS指令，也被称为TestAndSetLock（TSL）指令，TSL指令使用硬件实现的，执行的过程中不允许被中断，只能一气呵成。下面是用C语言描述的TSL指令的实现逻辑</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 布尔型的共享变量 lock 表示当前临界区是否被加锁</span></span><br><span class="line"><span class="comment">// true表示已加锁，false表示未加锁</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">TestAndSet</span><span class="params">(<span class="keyword">bool</span> *lock)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">bool</span> old;</span><br><span class="line">    old = *lock; <span class="comment">//old用来存放lock原来的值</span></span><br><span class="line">    *lock = <span class="literal">true</span>; <span class="comment">//无论当前是否已加锁，都将lock设为true</span></span><br><span class="line">    <span class="keyword">return</span> old; <span class="comment">//返回lock原来的值</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 以下是使用TSL指令实现的互斥算法的逻辑</span></span><br><span class="line"><span class="keyword">while</span> (TestAndSet (&amp;lock)); <span class="comment">//上锁并检查</span></span><br><span class="line">临界区代码段...</span><br><span class="line">lock = <span class="literal">false</span>;  <span class="comment">// 解锁</span></span><br><span class="line">剩余区代码段...</span><br></pre></td></tr></table></figure><p>若刚开始lock是false，则TSL返回的old值为false，不满足循环条件，能够成功进入临界区（此时已经成功在TSL指令内部进行了上锁）。若刚开始lock是true，则执行TSL指令后old的值为true，所以始终进行while循环，直到当前访问临界区的进程在退出区将lock设为false进行解锁</p><p>相比软件实现方法，TSL指令把上锁和检查操作用硬件的方式变成了只能一步执行到底的原子操作，避免了软件实现方法中的逻辑漏洞</p><ul><li>优点：实现简单，避免了软件实现中的逻辑漏洞，适用于多处理机环境</li><li>缺点：不满足“让权等待”原则，暂时无法进入临界区的进程会占用CPU并循环执行TSL指令，导致忙等</li></ul><h3 id="Swap指令"><a href="#Swap指令" class="headerlink" title="Swap指令"></a>Swap指令</h3><p>又叫Exchange指令，或XCHG指令。Swap指令是用硬件实现的，执行的过程中不允许被中断，只能一气呵成。以下是用C语言描述其逻辑</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Swap指令的作用是交换两个变量的值</span></span><br><span class="line">Swap(<span class="keyword">bool</span> *a,<span class="keyword">bool</span> *b)&#123;</span><br><span class="line">    <span class="keyword">bool</span> temp;</span><br><span class="line">    temp=*a;</span><br><span class="line">    *a=*b;</span><br><span class="line">    *b=temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//以下是用Swap指令实现互斥的算法逻辑</span></span><br><span class="line"><span class="comment">//lock表示当前临界区是否被加锁</span></span><br><span class="line"><span class="keyword">bool</span> old=<span class="literal">true</span>;</span><br><span class="line"><span class="keyword">while</span>(old==<span class="literal">true</span>)&#123;</span><br><span class="line">    Swap(&amp;lock, &amp;old);</span><br><span class="line">&#125;</span><br><span class="line">临界区代码段...</span><br><span class="line">lock=<span class="literal">false</span>;</span><br><span class="line">剩余区代码段...</span><br></pre></td></tr></table></figure><p>逻辑上来看Swap和TSL指令没有太大区别，都是先记录此时临界区是否上锁，再将上锁标记lock设为true，最后检查old，如果为false则可进入临界区，否则循环等待</p><ul><li>优点：实现简单，避免了软件实现中的逻辑漏洞，适用于多处理机环境</li><li>缺点：不满足“让权等待”原则，暂时无法进入临界区的进程会占用CPU并循环执行TSL指令，导致忙等</li></ul>]]></content>
      
      
      <categories>
          
          <category> 计算机基础 </category>
          
          <category> 操作系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 操作系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>13-常见调度算法</title>
      <link href="/2021/11/06/13-%E5%B8%B8%E8%A7%81%E8%B0%83%E5%BA%A6%E7%AE%97%E6%B3%95/"/>
      <url>/2021/11/06/13-%E5%B8%B8%E8%A7%81%E8%B0%83%E5%BA%A6%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="常见调度算法"><a href="#常见调度算法" class="headerlink" title="常见调度算法"></a>常见调度算法</h1><h2 id="FCFS-先来先服务-First-Come-First-Server"><a href="#FCFS-先来先服务-First-Come-First-Server" class="headerlink" title="FCFS-先来先服务 (First Come First Server)"></a>FCFS-先来先服务 (First Come First Server)</h2><h3 id="算法思想"><a href="#算法思想" class="headerlink" title="算法思想"></a>算法思想</h3><p>主要从“公平”角度考虑，类似我们生活中的排队购物现象，先到先服务</p><h3 id="算法规则"><a href="#算法规则" class="headerlink" title="算法规则"></a>算法规则</h3><p>按照作业/进程到达的先后顺序进行服务</p><h3 id="用于作业-进程调度"><a href="#用于作业-进程调度" class="headerlink" title="用于作业/进程调度"></a>用于作业/进程调度</h3><ul><li>用于<strong>作业</strong>调度时：考虑的是哪个作业先到达<strong>后备队列</strong></li><li>用于<strong>进程</strong>调度时：考虑的是哪个进程先到达<strong>就绪队列</strong></li></ul><h3 id="是否可抢占？"><a href="#是否可抢占？" class="headerlink" title="是否可抢占？"></a>是否可抢占？</h3><p>非抢占式算法</p><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/%E5%85%88%E6%9D%A5%E5%85%88%E6%9C%8D%E5%8A%A1%E4%BE%8B%E9%A2%98.jpg" alt="先来先服务例题"></p><h3 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h3><ul><li>优点：公平，算法实现简单</li><li>缺点：排在长作业/长进程后面的短作业需要等待很长时间，其带权周转时间很大，对短作业用户体验不好。</li></ul><p>综上即FCFS算法对长作业有利，对短作业不利（例如上面例题种P3作业的带权周转时间达到了很大的8）</p><h3 id="是否会导致饥饿"><a href="#是否会导致饥饿" class="headerlink" title="是否会导致饥饿"></a>是否会导致饥饿</h3><p>饥饿指某进/作业长时间得不到服务</p><p>FCFS算法不会导致饥饿，只要各个任务依序排队，总会轮到响应作业</p><h2 id="SJF-短作业优先-Shortest-Job-First"><a href="#SJF-短作业优先-Shortest-Job-First" class="headerlink" title="SJF-短作业优先 (Shortest Job First)"></a>SJF-短作业优先 (Shortest Job First)</h2><h3 id="算法思想-1"><a href="#算法思想-1" class="headerlink" title="算法思想"></a>算法思想</h3><p>追求最少的平均等待时间，最少的平均周转时间，最少的平均带权周转时间</p><h3 id="算法规则-1"><a href="#算法规则-1" class="headerlink" title="算法规则"></a>算法规则</h3><p>最短的作业/进程有限得到服务（这里的最短指的是要求服务时间最短）</p><h3 id="用于作业-进程调度-1"><a href="#用于作业-进程调度-1" class="headerlink" title="用于作业/进程调度"></a>用于作业/进程调度</h3><p>即可用于作业调度，也可用于进程调度，用于进程调度事被称为“短进程优先算法（SPF，Shortest Process First）”</p><h3 id="是否可抢占"><a href="#是否可抢占" class="headerlink" title="是否可抢占"></a>是否可抢占</h3><p>SJF和SPF是非抢占式算法，但是也存在抢占式的版本：最短剩余时间优先算法（SRTN，Shortest Remaining Time Next）</p><h3 id="示例-1"><a href="#示例-1" class="headerlink" title="示例"></a>示例</h3><p>非抢占式版本<br><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20211106092559.png"></p><p>抢占式版本<br><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20211106092914.png"></p><h3 id="优缺点-1"><a href="#优缺点-1" class="headerlink" title="优缺点"></a>优缺点</h3><ul><li>优点：拥有“最短的”平均等待时间，平均周转时间</li><li>缺点：不公平，对短作业有利，对长作业不利。可能产生饥饿现象，另外，由于作业/进程运行时间是由用户提供，并不一定真实，可能产生为了抢夺资源故意使用短作业的现象发生</li></ul><h3 id="是否会导致饥饿-1"><a href="#是否会导致饥饿-1" class="headerlink" title="是否会导致饥饿"></a>是否会导致饥饿</h3><p>会，如果不断有短作业到来，可能使已到达的长作业长时间得不到服务，产生饥饿现象</p><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><p><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20211106094107.png"></p><h2 id="HRRN-高响应比优先-Hignest-Response-Ration-Next"><a href="#HRRN-高响应比优先-Hignest-Response-Ration-Next" class="headerlink" title="HRRN-高响应比优先 (Hignest Response Ration Next)"></a>HRRN-高响应比优先 (Hignest Response Ration Next)</h2><h3 id="算法思想-2"><a href="#算法思想-2" class="headerlink" title="算法思想"></a>算法思想</h3><p>要综合考虑作业/进程的等待时间和要求服务时间</p><h3 id="算法规则-2"><a href="#算法规则-2" class="headerlink" title="算法规则"></a>算法规则</h3><p>在每次调度时先计算各个作业/进程的响应比，选择响应比最高的作业/进程为其服务</p><p>$$响应比=\frac{等待时间+要求服务时间}{要求服务时间}$$</p><h3 id="用于作业-进程调度-2"><a href="#用于作业-进程调度-2" class="headerlink" title="用于作业/进程调度"></a>用于作业/进程调度</h3><p>即可用于作业调度，也可用于进程调度</p><h3 id="是否可抢占-1"><a href="#是否可抢占-1" class="headerlink" title="是否可抢占"></a>是否可抢占</h3><p>非抢占式算法，只有当前运行的作业主动放弃处理机时，才会进行调度</p><h3 id="示例-2"><a href="#示例-2" class="headerlink" title="示例"></a>示例</h3><p><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20211106100235.png"></p><h3 id="优缺点-2"><a href="#优缺点-2" class="headerlink" title="优缺点"></a>优缺点</h3><ul><li>优点：<ul><li>综合考虑等待时间和运行时间</li><li>等待时间相同时，要求服务时间短的优先（SJF优点）</li><li>要求服务时间相同时，等待时间长的优先（FCFS优点）</li><li>对于长作业来说，随着等待时间越来越久，其响应比会增大，从而避免长作业饥饿</li></ul></li></ul><h3 id="是否会导致饥饿-2"><a href="#是否会导致饥饿-2" class="headerlink" title="是否会导致饥饿"></a>是否会导致饥饿</h3><p>不会</p><h2 id="RR-时间片轮转-Round-Robin"><a href="#RR-时间片轮转-Round-Robin" class="headerlink" title="RR-时间片轮转 (Round-Robin)"></a>RR-时间片轮转 (Round-Robin)</h2><h3 id="算法思想-3"><a href="#算法思想-3" class="headerlink" title="算法思想"></a>算法思想</h3><p>公平轮流为各个进程服务，让每个进程在一定时间间隔内都可以得到响应</p><h3 id="算法思想-4"><a href="#算法思想-4" class="headerlink" title="算法思想"></a>算法思想</h3><p>按照每个进程到达就绪队列的顺序，轮流让每个进程执行一个时间片（如100ms），若进程未在规定时间片内执行完则剥夺其处理机，重新将进程放入就绪队列的队尾重新排队</p><h3 id="用于作业-进程调度-3"><a href="#用于作业-进程调度-3" class="headerlink" title="用于作业/进程调度"></a>用于作业/进程调度</h3><p>用于进程调度（作业只有在被放入内存建立进程后才可能涉及分配处理机时间片）</p><h3 id="是否可抢占-2"><a href="#是否可抢占-2" class="headerlink" title="是否可抢占"></a>是否可抢占</h3><p>若进程未在时间片内运行完，则会被强行剥夺处理及使用权，因此时间片轮转算法属于抢占式算法，由时钟装置发出时钟中断来通知CPU时间片已到</p><h3 id="示例-3"><a href="#示例-3" class="headerlink" title="示例"></a>示例</h3><p>时间片大小为2<br><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/1QQ%E6%88%AA%E5%9B%BE20211106102617.png"></p><p><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/2QQ%E6%88%AA%E5%9B%BE20211106102718.png"></p><p><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/3QQ%E6%88%AA%E5%9B%BE20211106102736.png"></p><p><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20211106102745.png"></p><p>时间片大小为5<br><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20211106102951.png"></p><ul><li>从上面的时间片为5的示例的运行队列可以看出，在时间片比较大的情况下，RR算法和FCFS算法的运行队列非常相近。如果时间片太大（上面示例超过6时），使得每个进程都可以在一个时间片内完成，则RR算法会退化为FCFS算法，并且会增大进程响应时间，因此时间片不能太大</li><li>另一方面，进程调度是有时间代价（保存恢复运行环境），因此如果时间片太小，会导致进程切换过于频繁，系统花费大量时间处理进程切换，降低系统运行效率，因此时间片也不能太小</li><li>综上，一般情况下，设计时间片时要让切换进程的开销占比不超过1%</li></ul><h3 id="优缺点："><a href="#优缺点：" class="headerlink" title="优缺点："></a>优缺点：</h3><ul><li>优点：公平，响应快，适用于分时操作系统</li><li>缺点：由于高频率的进程切换，因此有一定的开销，不区分任务的紧急程度</li></ul><h3 id="是否会导致饥饿-3"><a href="#是否会导致饥饿-3" class="headerlink" title="是否会导致饥饿"></a>是否会导致饥饿</h3><p>不会</p><h2 id="优先级调度算法"><a href="#优先级调度算法" class="headerlink" title="优先级调度算法"></a>优先级调度算法</h2><h3 id="算法思想-5"><a href="#算法思想-5" class="headerlink" title="算法思想"></a>算法思想</h3><p>随着计算机发展，特别是实时操作系统出现，越来越多的应用场景需要根据任务的紧急程度决定处理顺序</p><h3 id="算法规则-3"><a href="#算法规则-3" class="headerlink" title="算法规则"></a>算法规则</h3><p>调度时选择优先级最高的作业/进程</p><h3 id="用于作业-进程调度-4"><a href="#用于作业-进程调度-4" class="headerlink" title="用于作业/进程调度"></a>用于作业/进程调度</h3><p>即可用于作业调度，也可用于进程调度，甚至可以用到I/O调度中</p><h3 id="是否可抢占-3"><a href="#是否可抢占-3" class="headerlink" title="是否可抢占"></a>是否可抢占</h3><p>抢占式，非抢占式都可以，区别在于非抢占式只能在进程主动放弃处理机资源时进行调度，抢占式则需要在就绪队列发生变化时进行检查，是否有优先级变化是否需要抢占</p><h3 id="示例-4"><a href="#示例-4" class="headerlink" title="示例"></a>示例</h3><p>非抢占式<br><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/%E9%9D%9E%E6%8A%A2%E5%8D%A0%E5%BC%8FQQ%E6%88%AA%E5%9B%BE20211106173125.png"></p><p>抢占式<br><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/%E6%8A%A2%E5%8D%A0%E5%BC%8FQQ%E6%88%AA%E5%9B%BE20211106173341.png"></p><h3 id="优缺点-3"><a href="#优缺点-3" class="headerlink" title="优缺点"></a>优缺点</h3><ul><li>优点：用优先级区分紧急程度，适用于实时操作系统，可灵活调整对各种作业/进程的偏好承度</li><li>缺点：若不断有高优先级进程到来，会导致低优先级进程发生饥饿</li></ul><h3 id="是否会发生饥饿"><a href="#是否会发生饥饿" class="headerlink" title="是否会发生饥饿"></a>是否会发生饥饿</h3><p>会</p><h3 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h3><p><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/%E8%A1%A5%E5%85%85QQ%E6%88%AA%E5%9B%BE20211106174305.png"></p><h2 id="多级反馈队列调度算法"><a href="#多级反馈队列调度算法" class="headerlink" title="多级反馈队列调度算法"></a>多级反馈队列调度算法</h2><h3 id="算法思想-6"><a href="#算法思想-6" class="headerlink" title="算法思想"></a>算法思想</h3><p>对其他调度算法的折中权衡</p><h3 id="算法规则-4"><a href="#算法规则-4" class="headerlink" title="算法规则"></a>算法规则</h3><ol><li>设置多级就绪队列，各级队列的优先级从高到低，时间片从小到大</li><li>新进程到达时优先进入第一级队列，按FCFS原则排队等待被分配时间片，若用完时间片进程还未结束，则进程进入下一级队列队尾，如果此时该进程已经处于最低级队列，则重新放回该队列队尾</li><li>只有第k级队列为空时，第k+1级队列的首个进程才会被分配时间片（优先级高的永远抢占运行）</li></ol><h3 id="用于作业-进程调度-5"><a href="#用于作业-进程调度-5" class="headerlink" title="用于作业/进程调度"></a>用于作业/进程调度</h3><p>用于进程调度</p><h3 id="是否可抢占-4"><a href="#是否可抢占-4" class="headerlink" title="是否可抢占"></a>是否可抢占</h3><p>多级反馈队列调度算法是抢占式算法，在k级队列的进程运行过程中，若更高级的队列（1~k-1）中进入新进程，则由于新进程优先级更高，抢占处理机，原k级进程被放回k级队列队尾</p><h3 id="示例-5"><a href="#示例-5" class="headerlink" title="示例"></a>示例</h3><p><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20211106182353.png"></p><p><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/1QQ%E6%88%AA%E5%9B%BE20211106182526.png"><br>首先P1在0时刻到达，进入最高级队列（1级队列），此时没有进程运行，P1占用CPU运行</p><p><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/2QQ%E6%88%AA%E5%9B%BE20211106182603.png"><br><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/2QQ%E6%88%AA%E5%9B%BE20211106182624.png"><br><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/3QQ%E6%88%AA%E5%9B%BE20211106182649.png"><br>一级队列时间片大小只有1，在1时刻，P1在运行完一个时间片后，就需要中断运行进入2级就绪队列等待，此时P2进程恰好进入1级队列，由于优先级更高，所以P2进程占用CPU运行一个时间片，运行结束后同样进入2级就绪队列等待<br><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/4QQ%E6%88%AA%E5%9B%BE20211106182707.png"><br><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/5QQ%E6%88%AA%E5%9B%BE20211106182722.png"><br>在2时刻，此时没有更高级进程进入，所以位于2级队列队首的P1进程继续执行，2级队列拥有两个时间片，P1在4时刻中断运行，由于还没有运行结束，所以继续降级进入3级队列等待，4时刻没有新进程到来，所以P2继续占用CPU运行<br><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/6QQ%E6%88%AA%E5%9B%BE20211106182755.png"><br><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/7QQ%E6%88%AA%E5%9B%BE20211106182808.png"><br>在5时刻，P2只运行了一个时间片，但由于此时有新进程P3进入，P3处于更高优先级，所以P3抢占CPU运行，P2只能重新回到2级队列队尾等待<br><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/8QQ%E6%88%AA%E5%9B%BE20211106182826.png"><br>在6时刻，P3进程运行结束，离开队列，此时P2处于更高优先级，所以继续占用CPU运行两个时间片</p><p><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/9QQ%E6%88%AA%E5%9B%BE20211106182903.png"></p><p><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20211106182935.png"><br>在8时刻，P2运行结束，离开队列，此时P1才能继续占用CPU运行4个时间片，4个时间片后P1仍未运行技术，此时由于P1位于最底层队列，所以P1只能重新回到3级队列队尾进行等待，直到占用CPU运行结束</p><p>综上所述，进程的运行情况为：P1(1)-&gt;P2(1)-&gt;P1(2)-&gt;P2(1)-&gt;p3(1)-&gt;P2(2)-&gt;p1(4)-&gt;p1(1)</p><h3 id="优缺点-4"><a href="#优缺点-4" class="headerlink" title="优缺点"></a>优缺点</h3><ul><li>优点：对所有进程相对公平（FCFS优点），每个新到达的进程都可以很快得到响应（RR优点），短进程只用较少时间就可以完成（SPF优点），不需要事先考虑进程的运行时间（避免用户造假，避免了SPF的缺点），可以灵活调整对各类进程的偏好程度（CPU密集型，I/O密集型）</li><li>缺点：可能会导致饥饿</li></ul><h3 id="是否会导致饥饿-4"><a href="#是否会导致饥饿-4" class="headerlink" title="是否会导致饥饿"></a>是否会导致饥饿</h3><p>是，若不断有新进程到来，则老进程由于进入低优先级队列无法得到执行，进入饥饿状态</p>]]></content>
      
      
      <categories>
          
          <category> 计算机基础 </category>
          
          <category> 操作系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 操作系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>12-调度算法的评价指标</title>
      <link href="/2021/11/06/12-%E8%B0%83%E5%BA%A6%E7%AE%97%E6%B3%95%E7%9A%84%E8%AF%84%E4%BB%B7%E6%8C%87%E6%A0%87/"/>
      <url>/2021/11/06/12-%E8%B0%83%E5%BA%A6%E7%AE%97%E6%B3%95%E7%9A%84%E8%AF%84%E4%BB%B7%E6%8C%87%E6%A0%87/</url>
      
        <content type="html"><![CDATA[<h1 id="调度算法的评价指标"><a href="#调度算法的评价指标" class="headerlink" title="调度算法的评价指标"></a>调度算法的评价指标</h1><h3 id="CPU利用率"><a href="#CPU利用率" class="headerlink" title="CPU利用率"></a>CPU利用率</h3><p>指CPU忙碌时间占总时间的比例</p><p>$$利用率=\frac{忙碌的时间}{总时间}$$</p><p>Eg:某计算机只支持单道程序，某个作业刚开始需要在CPU上运行5秒，再用打印机打印输出5秒，之后再执行5秒，才能结束。在此过程中CPU利用率、打印机利用率分别是多少?</p><p>$$CPU利用率=\frac{5+5}{5+5+5}=66.67%$$</p><p>$$打印机利用率=\frac{5}{5+5+5}=33.33%$$</p><h3 id="系统吞吐量"><a href="#系统吞吐量" class="headerlink" title="系统吞吐量"></a>系统吞吐量</h3><p>单位时间内完成作业的数量，对于计算机而言，肯定更希望用尽可能少的时间处理完尽可能多的作业，即系统吞吐量越大越好</p><p>$$系统吞吐量=\frac{总共完成的作业数目}{总共花费的时间总数}(单位：道/秒)$$</p><h3 id="周转时间"><a href="#周转时间" class="headerlink" title="周转时间"></a>周转时间</h3><p>指从作业被提交给系统开始，到作业完成为止的这段时间间隔。由四部分组成：</p><ul><li>高级调度时间：作业在外存后被队列上等待的时间(在一个作业处理过程中，只会发生一次)</li><li>低级调度时间(就绪态)：进程在就绪队列上等待进程调度的时间。即进程处于就绪态的情况</li><li>运行态：进程在CPU上执行的时间</li><li>阻塞态：进程等待I/O设备操作完成的时间</li></ul><p>(后三种时间在一个作业的整个处理过程种可能发生多次)</p><p>$$单个作业周转时间=作业完成时间-作业提交时间$$<br>$$平均周转时间=\frac{各作业周转时间之和}{作业数}$$</p><h4 id="带权周转时间"><a href="#带权周转时间" class="headerlink" title="带权周转时间"></a>带权周转时间</h4><p>$$带权周转时间=\frac{作业周转时间}{作业实际运行时间}=\frac{作业完成时间-作业提交时间}{作业实际运行的时间}$$</p><p>由上述公式易知带权周转时间必然大于1，带权周转时间与周转时间都是越小越好 </p><p>对于<strong>周转时间相同</strong>的两个作业，实际运行时间长的作业在相同时间内被服务的时间更多，带权周转时间更小，用户满意度更高。</p><p>对于<strong>实际运行时间相同</strong>的两个作业，周转时间短的带权周转时间更小，用户满意度更高。</p><h3 id="等待时间"><a href="#等待时间" class="headerlink" title="等待时间"></a>等待时间</h3><p>指进程/作业处于等待处理机状态的时间之和，等待时间越长，用户满意度越低</p><p>对于<strong>进程</strong>来说，等待时间就是指进程建立后<strong>等待被服务的时间之和</strong>，在<strong>等待I/0完成的期间其实进程也是在被服务的，所以不计入等待时间</strong>。</p><p>对于<strong>作业</strong>来说，不仅要考虑<strong>建立进程后</strong>的等待时间，还要加上<strong>作业在外存后备队列</strong>中等待的时间。</p><p>一个作业总共需要被CPU服务多久，被I/O设备服务多久一般是确定不变的，因此调度算法影响的一般只是任务/进程的等待时间</p><h3 id="响应事件"><a href="#响应事件" class="headerlink" title="响应事件"></a>响应事件</h3><p>指从用户提交请求到首次产生响应所用的时间</p>]]></content>
      
      
      <categories>
          
          <category> 计算机基础 </category>
          
          <category> 操作系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 操作系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>11-进程调度的时机，方式，切换与过程</title>
      <link href="/2021/11/06/11-%E8%BF%9B%E7%A8%8B%E8%B0%83%E5%BA%A6%E7%9A%84%E6%97%B6%E6%9C%BA%EF%BC%8C%E6%96%B9%E5%BC%8F%EF%BC%8C%E5%88%87%E6%8D%A2%E4%B8%8E%E8%BF%87%E7%A8%8B/"/>
      <url>/2021/11/06/11-%E8%BF%9B%E7%A8%8B%E8%B0%83%E5%BA%A6%E7%9A%84%E6%97%B6%E6%9C%BA%EF%BC%8C%E6%96%B9%E5%BC%8F%EF%BC%8C%E5%88%87%E6%8D%A2%E4%B8%8E%E8%BF%87%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="进程调度"><a href="#进程调度" class="headerlink" title="进程调度"></a>进程调度</h1><p>进程调度(低级调度)，就是按照某种算法从就绪队列中选择一个进程为其分配处理机</p><h2 id="需要进行进程调度与切换的情况（进程调度的时机）"><a href="#需要进行进程调度与切换的情况（进程调度的时机）" class="headerlink" title="需要进行进程调度与切换的情况（进程调度的时机）"></a>需要进行进程调度与切换的情况（进程调度的时机）</h2><h3 id="1-当前运行的进程主动放弃处理机"><a href="#1-当前运行的进程主动放弃处理机" class="headerlink" title="1. 当前运行的进程主动放弃处理机"></a>1. 当前运行的进程主动放弃处理机</h3><ul><li>进程正常终止</li><li>运行过程中发生异常而终止</li><li>进程主动请求阻塞（如等待I/O设备）</li></ul><h3 id="2-当前运行的进程被动放弃处理机"><a href="#2-当前运行的进程被动放弃处理机" class="headerlink" title="2. 当前运行的进程被动放弃处理机"></a>2. 当前运行的进程被动放弃处理机</h3><ul><li>分给进程的时间片用完</li><li>有更紧急的事情需要处理（如I/O中断）</li><li>有更高优先级的进程进入就绪队列</li></ul><h2 id="不能进行进程调度与切换的情况"><a href="#不能进行进程调度与切换的情况" class="headerlink" title="不能进行进程调度与切换的情况"></a>不能进行进程调度与切换的情况</h2><ul><li>在处理中断的过程中：中断处理过程复杂，与硬件密切相关，很难做到在中断处理过程中进行进程切换</li><li><strong>进程在操作系统内核程序临界区中（具体解释见下文）</strong></li><li>在原子操作过程中(原语)。原子操作不可中断，要一气呵成，所以运行过程中不可进行进程调度或切换</li></ul><h3 id="进程在操作系统内核程序临界区中不能进行进程调度和切换。"><a href="#进程在操作系统内核程序临界区中不能进行进程调度和切换。" class="headerlink" title="进程在操作系统内核程序临界区中不能进行进程调度和切换。"></a>进程在操作系统内核程序临界区中不能进行进程调度和切换。</h3><p><strong>临界资源</strong>：一个时间段内只允许一个进程使用的资源，各个进程需要互斥的访问临界资源</p><p><strong>临界区</strong>：访问临界资源的代码</p><p>内核程序临界区一般是用来访问某种内核数据结构的，比如进程的就绪队列（由各就绪进程PCB组成）</p><p>假如某进程当前正处在内核程序临界区，并且正在/之前访问就绪队列，则该进程会对就绪队列进行上锁操作，只要改进程不退出临界区，就绪队列的锁就不会释放，如果在此时进行进程调度或切换，调度操作的相关程序势必要访问就绪队列，可由于上锁所以无法访问，进程调度也就无法正常进行</p><p>由此可见，内核程序临界区访问的临界资源如果不尽快释放的话，极易影响到操作需要内核其他管理工作，因此在访问内核程序临界区期间，不可以进行进程调度与切换，而是尽快执行完当前程序，尽早离开内核程序临界区</p><p>注意，进程处于临界区时不能进行处理机调度这种说法是<strong>错误</strong>的。假如进程访问的不少内核程序临界区，而是普通程序临界区，我们一般更倾向于及时进行进程的调度和切换</p><p>例如，当进程处在普通程序临界区中访问打印机资源时，进程同样会对打印机资源上锁，在打印机打印完成前，进程一直处于临界区内，并且临界资源不会解锁。但是，打印机是慢速设备，如果此时禁止进程调度则当前进程一直等待，导致CPU一直处于空闲状态。这是一种极大的资源浪费。同时，普通临界区访问的临界资源并不会直接影响操作系统内核的管理工作（打印机等资源被占用不会影响进程调度的实现），因此在访问普通资源时可以进行进程调度和切换</p><h2 id="进程调度的方式"><a href="#进程调度的方式" class="headerlink" title="进程调度的方式"></a>进程调度的方式</h2><h3 id="非剥夺调度方式"><a href="#非剥夺调度方式" class="headerlink" title="非剥夺调度方式"></a>非剥夺调度方式</h3><p>又称非抢占方式。即，只允许进程主动放弃处理机。在运行过程中即便有更紧迫的任务到达，当前进程依然会继续使用处理机，直到该进程终止或主动要求进入阻塞态。</p><p>优缺点：实现简单，系统开销小但是无法及时处理紧急任务，适合于早期的批处理系统</p><h3 id="剥夺调度方式"><a href="#剥夺调度方式" class="headerlink" title="剥夺调度方式"></a>剥夺调度方式</h3><p>又称抢占方式。当一个进程正在处理机上执行时，如果有一个更重要或更紧迫的进程需要使用处理机，则立即暂停正在执行的进程，将处理机分配给更重要紧迫的那个进程。</p><p>优缺点：可以优先处理更紧急的进程，也可实现让各进程按时间片轮流执行的功能( 通过时钟中断)。适合于分时操作系统、实时操作系统</p><h2 id="进程的切换与过程"><a href="#进程的切换与过程" class="headerlink" title="进程的切换与过程"></a>进程的切换与过程</h2><p><strong>“狭义的进程调度”与“进程切换”的区别:</strong><br>狭义的进程调度指的是从就绪队列中选中一个要运行的进程。(这个进程可以是刚刚被暂停执行的进程，也可能是另一个进程，后一种情况就需要进程切换)<br>进程切换是指一个进程让出处理机，由另一个进程占用处理机的过程。</p><p><strong>广义的进程调度</strong>包含了选择一个进程和进程切换两个步骤。</p><h3 id="进程切换的过程主要完成了"><a href="#进程切换的过程主要完成了" class="headerlink" title="进程切换的过程主要完成了:"></a>进程切换的过程主要完成了:</h3><ol><li><strong>对原来运行进程各种数据的保存</strong></li><li><strong>对新的进程各种数据的恢复</strong>(如:程序计数器、程序状态字、各种数据寄存器等处理机现场信息，这些信息一般保存在进程控制块PCB)</li></ol><h3 id="注意"><a href="#注意" class="headerlink" title="注意:"></a>注意:</h3><p>进程切换是有代价的，因此如果过于频繁的进行进程调度、切换，必然会使整个系统的效率降低，使系统大部分时间都花在了进程切换上，而真正用于执行进程的时间减少。</p>]]></content>
      
      
      <categories>
          
          <category> 计算机基础 </category>
          
          <category> 操作系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 操作系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>10-处理机调度的概念与层次</title>
      <link href="/2021/11/06/10-%E5%A4%84%E7%90%86%E6%9C%BA%E8%B0%83%E5%BA%A6%E7%9A%84%E6%A6%82%E5%BF%B5%E4%B8%8E%E5%B1%82%E6%AC%A1/"/>
      <url>/2021/11/06/10-%E5%A4%84%E7%90%86%E6%9C%BA%E8%B0%83%E5%BA%A6%E7%9A%84%E6%A6%82%E5%BF%B5%E4%B8%8E%E5%B1%82%E6%AC%A1/</url>
      
        <content type="html"><![CDATA[<h1 id="调度"><a href="#调度" class="headerlink" title="调度"></a>调度</h1><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>当有多项任务需要处理时，由于资源有限，所有任务无法同时处理，此时就需要确定某种规则来决定各项任务的执行顺序，这就是调度</p><p>在多道程序系统中，进程的数量往往多于处理机个数，这样不可能同时并行处理各个进程</p><p>处理机调度，就是从就绪队列中按照一定的算法选择一个进程并将处理机分配给该进程使用，以实现进程的并发执行</p><h2 id="调度的三个层次"><a href="#调度的三个层次" class="headerlink" title="调度的三个层次"></a>调度的三个层次</h2><h3 id="高级调度（作业调度）"><a href="#高级调度（作业调度）" class="headerlink" title="高级调度（作业调度）"></a>高级调度（作业调度）</h3><p><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20211105200937.png"></p><p>由于内存空间有限，有时无法将用户提交的作业全部放入内存，因此就需要确定某种规则来决定作业调入内存的顺序，即高级调度</p><p>高级调度（作业调度）。按一定的原则从外存上处于后备队列（存储所有还没有进过内存的任务）的作业中挑选一个或多个作业，给他们<strong>分配内存等必要资源，并建立相应进程（建立PCB）</strong>，以使他们获得竞争处理机的权利</p><p>高级调度是辅存(外存)与内存之间的调度。每个作业只调入一次，调出一次。<strong>作业调入时会建立相应的PCB，作业调出时才撤销PCB</strong>。高级调度主要是指调入的问题，因为只有调入的时机需要操作系统来确定，但<strong>调出的时机必然是作业运行结束才调出</strong>。（即对于每项任务，高级调度只执行一次）</p><h3 id="中级调度（内存调度）"><a href="#中级调度（内存调度）" class="headerlink" title="中级调度（内存调度）"></a>中级调度（内存调度）</h3><p><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20211105201522.png"></p><p>引入了虚拟存储技术之后，可将暂时不能运行的进程调至外存等待。等它重新具备了运行条件且内存又稍有空闲时，再重新调入内存。</p><p>这么做的目的是为了<strong>提高内存利用率和系统吞吐量</strong>。</p><p>暂时调到外存等待的进程状态为<strong>挂起状态</strong>。值得注意的是，PCB并不会一起调到外存，而是会<strong>常驻内存</strong>。PCB中会记录进程数据在外存中的存放位置，进程状态等信息，操作系统通过内存中的PCB来保持对各个进程的监控、管理。<strong>被挂起的进程PCB会被放到的挂起队列中</strong>。</p><p>中级调度(内存调度)，就是要决定将哪个处于挂起状态的进程<strong>重新调入内存</strong>。<br><strong>一个进程可能会被多次调出、调入内存</strong>，因此中级调度发生的频率要比高级调度<strong>更高</strong>。</p><h4 id="挂起状态与七状态模型"><a href="#挂起状态与七状态模型" class="headerlink" title="挂起状态与七状态模型"></a>挂起状态与七状态模型</h4><p>暂时调到外存等待的进程状态称为挂起状态（挂起态suspend）</p><p>挂起态又可以进一步细分为就绪挂起和阻塞挂起两种状态</p><p>与五状态模型共同衍生出了七状态模型</p><p><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/%E4%B8%83%E7%8A%B6%E6%80%81%E6%A8%A1%E5%9E%8B.jpg" alt="七状态模型"></p><h3 id="低级调度（进程调度）"><a href="#低级调度（进程调度）" class="headerlink" title="低级调度（进程调度）"></a>低级调度（进程调度）</h3><p><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20211105201425.png"></p><p>低级调度(进程调度)，其主要任务是按照某种方法和策略从就绪队列中选取一一个进程， 将处理机分配给它。</p><p>进程调度是操作系统中<strong>最基本的一种调度</strong>， 在一般的操作系统中都必须配置进程调度。</p><p>进程调度的频率很高，一般几十毫秒一次。</p><h2 id="三级调度比较"><a href="#三级调度比较" class="headerlink" title="三级调度比较"></a>三级调度比较</h2><table><thead><tr><th>-</th><th>要做什么</th><th>调度发生在</th><th>发生频率</th><th>对进程状态的影响</th></tr></thead><tbody><tr><td>高级调度(作业调度)</td><td>按照某种规则，从后备队列中选择合适的作业将其调入内存，并为其创建进程</td><td>外存-&gt;内存(面向作业)</td><td>最低</td><td>无-&gt;创建态-&gt;就绪态</td></tr><tr><td>中级调度(内存调度)</td><td>按照某种规则，从挂起队列中选择合适的进程将其数据调回内存</td><td>外存-&gt;内存(面向进程)</td><td>中等</td><td>挂起态-&gt;就绪态(阻塞挂起-&gt;阻塞态，就绪挂起-&gt;就绪态等等……)</td></tr><tr><td>低级调度(进程调度)</td><td>按照某种规则，从就绪队列中选择一个进程为其分配处理机</td><td>内存-&gt;CPU</td><td>最高</td><td>就绪态-&gt;运行态</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 计算机基础 </category>
          
          <category> 操作系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 操作系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>9-线程概念与多线程模型</title>
      <link href="/2021/11/06/9-%E7%BA%BF%E7%A8%8B%E6%A6%82%E5%BF%B5%E4%B8%8E%E5%A4%9A%E7%BA%BF%E7%A8%8B%E6%A8%A1%E5%9E%8B/"/>
      <url>/2021/11/06/9-%E7%BA%BF%E7%A8%8B%E6%A6%82%E5%BF%B5%E4%B8%8E%E5%A4%9A%E7%BA%BF%E7%A8%8B%E6%A8%A1%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h1><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>线程是一个<strong>基本的CPU执行单元</strong>，也是<strong>程序执行流的最小单元</strong></p><p>引入线程后，不仅是进程间可以并发执行，一个进程的不同线程之间也可以并发执行，提高了系统的并发度，使得一个进程内可以并发执行多项任务（例如QQ可以同时视频聊天，发送文件等等）</p><p>引入线程后，进程只作为除CPU以外的系统资源的分配单元（如打印机，内存地址空间等），即除CPU以外的系统资源还是直接分配给进程而不是某个线程</p><h2 id="引入线程机制后，发生的变化"><a href="#引入线程机制后，发生的变化" class="headerlink" title="引入线程机制后，发生的变化"></a>引入线程机制后，发生的变化</h2><p><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/%E5%BC%95%E5%85%A5%E7%BA%BF%E7%A8%8B%E5%90%8E%E5%8F%91%E7%94%9F%E7%9A%84%E5%8F%98%E5%8C%96.jpg" alt="引入线程后发生的变化"></p><h2 id="线程的属性"><a href="#线程的属性" class="headerlink" title="线程的属性"></a>线程的属性</h2><ul><li>线程是处理机调度的单位</li><li>多CPU计算机中，各个线程可以占用不同的CPU</li><li>每个线程都有一个线程ID，和线程控制块（TCB）用来进行区分</li><li>线程同样有就绪，阻塞，运行三种基本状态</li><li>线程几乎不拥有系统资源</li><li>同一进程的不同线程间可以共享进程的资源</li><li>由于同一进程的不同线程间共享内存地址空间，所以各个线程间通信甚至无需系统干预</li><li>同一进程中的线程间进行切换，不会引起进程切换</li><li>不同进程中的线程进行切换，会引起进程切换</li><li>切换同进程中的线程，系统开销很小</li><li>切换进程，开销较大</li></ul><h2 id="线程的实现方式"><a href="#线程的实现方式" class="headerlink" title="线程的实现方式"></a>线程的实现方式</h2><p><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/%E7%94%A8%E6%88%B7%E7%BA%A7%E7%BA%BF%E7%A8%8B%E4%B8%8E%E5%86%85%E6%A0%B8%E7%BA%A7%E7%BA%BF%E7%A8%8B.jpg" alt="用户级线程与内核级线程"></p><h3 id="用户级线程"><a href="#用户级线程" class="headerlink" title="用户级线程"></a>用户级线程</h3><p>用户级线程由应用程序通过线程库实现，所有的线程管理工作都是由应用程序负责的（线程的创建，撤销，切换等等）</p><p>用户级线程中，线程切换可以在用户态下直接完成，无需操作系统干预</p><p>这种实现方式在用户看来有多个线程（同时并发执行多项操作），但是在操作系统内核看来，并不能意识到线程的存在（线程切换不由操作系统控制，这也说明操作系统不能将这种线程分配到多个CPU上并行执行，操作系统不直接管理这种线程）</p><p>即用户级线程对用户不透明，对操作系统透明（计算机领域内，透明指的是无法看到）</p><h3 id="内核级线程"><a href="#内核级线程" class="headerlink" title="内核级线程"></a>内核级线程</h3><p>内核级线程的管理工作由操作系统内核完成。即线程调度，线程切换等工作由内核负责。因此内核级线程的切换必须在核心态下执行</p><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><p>操作系统只能“看见”内核级线程，因此<strong>只有内核级线程才是处理机分配的单位</strong></p><p>以下方的多对多模型为例，其由三个用户级线程映射到两个内核级线程上，在用户看来，进程中同时有三个线程并发执行，但在操作系统看来，只有两个内核级线程，所以哪怕是在4核处理机的计算机上运行，该进程也最多只能被分配到两个核心，最所只有两个用户进程<strong>并行</strong>执行</p><h3 id="多线程模型"><a href="#多线程模型" class="headerlink" title="多线程模型"></a>多线程模型</h3><h4 id="多对一模型"><a href="#多对一模型" class="headerlink" title="多对一模型"></a>多对一模型</h4><p><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E6%A8%A1%E5%9E%8B%E5%A4%9A%E5%AF%B9%E4%B8%80.jpg" alt="多线程模型多对一"></p><h4 id="一对一模型"><a href="#一对一模型" class="headerlink" title="一对一模型"></a>一对一模型</h4><p><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E6%A8%A1%E5%9E%8B%E4%B8%80%E5%AF%B9%E4%B8%80.jpg" alt="多线程模型一对一"></p><h4 id="多对多模型"><a href="#多对多模型" class="headerlink" title="多对多模型"></a>多对多模型</h4><p><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E6%A8%A1%E5%9E%8B%E5%A4%9A%E5%AF%B9%E5%A4%9A.jpg" alt="多线程模型多对多"></p>]]></content>
      
      
      <categories>
          
          <category> 计算机基础 </category>
          
          <category> 操作系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 操作系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>8-进程的状态，控制与通信</title>
      <link href="/2021/11/01/8-%E8%BF%9B%E7%A8%8B%E7%9A%84%E7%8A%B6%E6%80%81%EF%BC%8C%E6%8E%A7%E5%88%B6%E4%B8%8E%E9%80%9A%E4%BF%A1/"/>
      <url>/2021/11/01/8-%E8%BF%9B%E7%A8%8B%E7%9A%84%E7%8A%B6%E6%80%81%EF%BC%8C%E6%8E%A7%E5%88%B6%E4%B8%8E%E9%80%9A%E4%BF%A1/</url>
      
        <content type="html"><![CDATA[<h1 id="进程的状态和转换"><a href="#进程的状态和转换" class="headerlink" title="进程的状态和转换"></a>进程的状态和转换</h1><p>进程是程序的一次执行。在这个执行过程中，有时进程正在被CPU处理，有时需要等待CPU服务，显然进程的状态是在不断变化的。为了方便对各个进程的管理，操作系统将进程合理的划分为几种状态</p><h2 id="进程的三种基本状态"><a href="#进程的三种基本状态" class="headerlink" title="进程的三种基本状态"></a>进程的三种基本状态</h2><h3 id="运行态-Running"><a href="#运行态-Running" class="headerlink" title="运行态 Running"></a>运行态 Running</h3><p>占有CPU，并在CPU上运行。</p><p>单核处理器下，同一时刻最多只有一个进程处于运行态，双核环境下可以有两个进程处于运行态</p><h3 id="就绪态-Ready"><a href="#就绪态-Ready" class="headerlink" title="就绪态 Ready"></a>就绪态 Ready</h3><p>已经具备运行条件，但由于没有空闲CPU，而暂时不能运行</p><p>注意这里所说的具备运行条件是指进程已经拥有了除CPU以外的所有需要的资源，包括所需要的设备的控制权限，缺少的只有CPU的控制权</p><h3 id="阻塞态-Waiting-Blocked"><a href="#阻塞态-Waiting-Blocked" class="headerlink" title="阻塞态 Waiting/Blocked"></a>阻塞态 Waiting/Blocked</h3><p>又称等待态，因等待某一事件而暂时不能运行</p><p>例如，等待操作系统分配打印机的控制权限，读取磁盘操作的请求等。CPU是计算机中最昂贵的不见，为了提高CPU利用率，需要先将其他进程所需资源分配到位，才能得到CPU服务</p><h2 id="进程的另外两种状态"><a href="#进程的另外两种状态" class="headerlink" title="进程的另外两种状态"></a>进程的另外两种状态</h2><h3 id="创建态-New"><a href="#创建态-New" class="headerlink" title="创建态 New"></a>创建态 New</h3><p>也称新建态，进程正在被创建，操作系统为进程分配资源，初始化PCB的阶段</p><h3 id="终止态-Terminated"><a href="#终止态-Terminated" class="headerlink" title="终止态 Terminated"></a>终止态 Terminated</h3><p>进程正在从系统中撤销，操作系统回收进程拥有的资源，撤销PCB</p><p>可能是由于进程运行结束，也可能是由于bug导致进程无法继续执行（例如数组越界或数学错误）</p><h2 id="进程状态的转换"><a href="#进程状态的转换" class="headerlink" title="进程状态的转换"></a>进程状态的转换</h2><p><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/%E8%BF%9B%E7%A8%8B%E7%8A%B6%E6%80%81%E7%9A%84%E8%BD%AC%E6%8D%A2.jpg" alt="进程状态的转换"></p><h1 id="进程控制"><a href="#进程控制" class="headerlink" title="进程控制"></a>进程控制</h1><p>进程控制的主要功能是对系统中的所有进程实施有效的管理，它具有创建新线程，撤销已有线程，实现线程状态转换等功能</p><p>简言之，进程控制就是要实现进程各个状态之间的转换</p><h2 id="如何实现进程控制"><a href="#如何实现进程控制" class="headerlink" title="如何实现进程控制"></a>如何实现进程控制</h2><p><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/%E8%BF%9B%E7%A8%8B%E6%8E%A7%E5%88%B6%E5%AE%9E%E7%8E%B0%E8%BF%9B%E7%A8%8B%E7%8A%B6%E6%80%81%E5%88%87%E6%8D%A2.jpg" alt="进程控制实现进程状态切换"></p><h2 id="原语"><a href="#原语" class="headerlink" title="原语"></a>原语</h2><p>原语的特点是执行期间不允许中断，只能一次全部执行完成。这种不可中断的操作也称原子操作。</p><p>原语采用“关中断指令”和“开中断指令”实现。代码执行前执行关中断指令，所有代码执行结束后执行开中断指令，在此期间，外部的中断信号会被忽略，待开中断指令执行后，再开始处理传来的外部中断信号，由此保证了原语的执行特点</p><p>显而易见，关中断/开中断指令的权限十分大，二者都是只允许在核心态下执行的特权指令</p><p><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20211102103251.png" alt="QQ截图20211102103251"></p><h3 id="原语可能进行的三类事情"><a href="#原语可能进行的三类事情" class="headerlink" title="原语可能进行的三类事情"></a>原语可能进行的三类事情</h3><ol><li>更新PCB中的信息（例如修改进程状态标志，将运行环境保存到PCB，从PCB恢复运行环境）<ul><li>所有进程控制原语一定会修改进程状态标志（因为所有进程控制原语一定修改进程状态）</li><li>剥夺当前运行进程的CPU使用权必然需要保存其运行环境（为后续该进程重新进入运行态，恢复运行环境准备）</li><li>某进程开始运行前必然要恢复运行环境（利用之前保存在PCB中的环境）</li></ul></li><li>将PCB插入合适的队列（进程组织）</li><li>分配/回收资源</li></ol><h3 id="进程的创建"><a href="#进程的创建" class="headerlink" title="进程的创建"></a>进程的创建</h3><p>无-&gt;创建态-&gt;就绪态</p><h4 id="创建原语"><a href="#创建原语" class="headerlink" title="创建原语"></a>创建原语</h4><ul><li>申请空白PCB</li><li>为新进程分配所需资源</li><li>初始化PCB</li><li>将PCB插入就绪队列</li></ul><h4 id="引起进程创建的事件"><a href="#引起进程创建的事件" class="headerlink" title="引起进程创建的事件"></a>引起进程创建的事件</h4><ul><li>用户登录：分时系统中，用户登陆成功，系统为其建立一个新进程</li><li>作业调度：多道批处理系统中，有新作业放入内存，会为其创建新进程</li><li>提供服务：用户向操作系统提出某些请求，会新建进程处理该请求</li><li>应用请求：用户主动请求创建一个子进程</li></ul><h3 id="进程的终止"><a href="#进程的终止" class="headerlink" title="进程的终止"></a>进程的终止</h3><p>就绪态/阻塞态/运行态-&gt;终止态-&gt;无</p><h4 id="撤销原语"><a href="#撤销原语" class="headerlink" title="撤销原语"></a>撤销原语</h4><ul><li>从PCB集合中找到所有终止进程的PCB</li><li>若进程正在运行，立即剥夺CPU，将CPU分配给其他进程</li><li>终止其所有子进程</li><li>将该进程拥有的所有资源归还给父进程或操作系统</li><li>删除PCB</li></ul><h4 id="引起进程终止的事件"><a href="#引起进程终止的事件" class="headerlink" title="引起进程终止的事件"></a>引起进程终止的事件</h4><ul><li>正常结束</li><li>异常结束（例如进程执行中出现bug）</li><li>外界干预（例如进程执行中手动通过任务管理器直接关闭进程）</li></ul><h3 id="进程的阻塞和唤醒"><a href="#进程的阻塞和唤醒" class="headerlink" title="进程的阻塞和唤醒"></a>进程的阻塞和唤醒</h3><h4 id="阻塞原语-运行态-gt-阻塞态"><a href="#阻塞原语-运行态-gt-阻塞态" class="headerlink" title="阻塞原语  运行态-&gt;阻塞态"></a>阻塞原语  运行态-&gt;阻塞态</h4><ul><li>找到要阻塞的进程对应的PCB</li><li>保护进程运行环境，将PCB状态信息设置为阻塞态，暂停进程运行</li><li>将PCB插入相应事件的等待队列</li></ul><h4 id="引起阻塞的事件"><a href="#引起阻塞的事件" class="headerlink" title="引起阻塞的事件"></a>引起阻塞的事件</h4><ul><li>需要等待分配某种资源</li><li>需要等待相互合作的其他进程完成工作</li></ul><h4 id="唤醒原语-阻塞态-gt-就绪态"><a href="#唤醒原语-阻塞态-gt-就绪态" class="headerlink" title="唤醒原语  阻塞态-&gt;就绪态"></a>唤醒原语  阻塞态-&gt;就绪态</h4><ul><li>在等待事件队列中找到PCB</li><li>将PCB从等待队列移除，设置进程为就绪态</li><li>将PCB插入就绪队列，等待被调度</li></ul><h4 id="引起进程唤醒的事件"><a href="#引起进程唤醒的事件" class="headerlink" title="引起进程唤醒的事件"></a>引起进程唤醒的事件</h4><ul><li>等待的事件发生</li></ul><p><strong>阻塞原语和唤醒原语必须成对出现</strong></p><h3 id="进程的切换"><a href="#进程的切换" class="headerlink" title="进程的切换"></a>进程的切换</h3><p>运行态-&gt;阻塞态/就绪态</p><p>就绪态-&gt;运行态</p><h4 id="切换原语"><a href="#切换原语" class="headerlink" title="切换原语"></a>切换原语</h4><ul><li>将运行环境信息保存在PCB中</li><li>PCB移入相应队列</li><li>选择另一个进程执行，并更新其PCB</li><li>根据PCB恢复新进程所需的运行环境</li></ul><h4 id="引起进程切换的事件"><a href="#引起进程切换的事件" class="headerlink" title="引起进程切换的事件"></a>引起进程切换的事件</h4><ul><li>当前进程的时间片结束</li><li>有更高优先级的进程到达</li><li>当前进程主动阻塞</li><li>当前进程终止</li></ul><h1 id="进程通信"><a href="#进程通信" class="headerlink" title="进程通信"></a>进程通信</h1><p>进程通信指进程之间的信息交换</p><p>进程是系统分配资源的单位（包括内存地址空间），因此各个进程拥有的内存地址空间相互独立，为了保证系统安全，一个进程不能直接访问另一个进程的地址空间。</p><p>但是有时进程之间的信息交换又是必须实现的，为了保证进程间的安全通信，操作系统提供了多种方法进行进程间的通信</p><ul><li>共享存储</li><li>消息传递</li><li>管道通信</li></ul><h2 id="共享存储"><a href="#共享存储" class="headerlink" title="共享存储"></a>共享存储</h2><p>两个进程都不能直接访问对方的地址空间，所以两个进程在内存中开辟出一块共享空间用于通信。</p><p>两个进程对共享空间的访问必须是互斥的，即A在访问共享空间时，B不可以访问（互斥访问通过操作系统提供的工具实现，即同步互斥工具，如P,V操作）</p><p><strong>共享存储又分为以下两种</strong></p><h3 id="基于数据结构的共享"><a href="#基于数据结构的共享" class="headerlink" title="基于数据结构的共享"></a>基于数据结构的共享</h3><p>共享空间里只能存放提前规定好的某种数据结构（例如长度为10的数组），这种方式共享的速度慢，对共享数据的限制多，是一种低级通信的方式</p><h3 id="基于存储区的共享"><a href="#基于存储区的共享" class="headerlink" title="基于存储区的共享"></a>基于存储区的共享</h3><p>在内存中画出一块共享存储区。数据的形式，存放位置由进程控制，而不再是操作系统，相较于前一种速度更快，是一种高速通信方式</p><h2 id="管道通信"><a href="#管道通信" class="headerlink" title="管道通信"></a>管道通信</h2><p>管道是指用于连续读写进程的一个共享文件，又名pipe文件，其实就是在内存中开辟一个固定大小的缓冲区</p><p><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20211102103952.png" alt="QQ截图20211102103952"></p><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><ul><li>管道只能采用半双工通信，即某一时间段内只能实现单向的传输，如果要实现双向同时通信，则需要设置两根管道</li><li>各进程仍然需要互斥的访问管道</li><li><strong>写进程</strong>将数据以字符流的形式写入管道，管道写满后，<strong>写进程</strong>的write系统调用将被阻塞，等待<strong>读进程</strong>读取所有数据，当<strong>读进程</strong>读取所有数据后，管道变空，此时<strong>读进程</strong>的read系统调用将被阻塞</li><li>如果管道没写满，就不允许读，如果管道没读空，就不允许写</li><li>数据一旦被读出，就从管道中被抛弃，没有备份，这就意味着读进程最多只能有一个，防止读错数据的情况发生</li></ul><h2 id="消息传递"><a href="#消息传递" class="headerlink" title="消息传递"></a>消息传递</h2><p>进程间的数据交换以格式化的信息（Message）为单位。进程通过操作系统提供的“发送消息/接收消息”两个<strong>原语</strong>进行数据交换</p><p><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/%E4%BF%A1%E6%81%AF%E4%BC%A0%E9%80%92%E6%B6%88%E6%81%AF%E4%BD%93.jpg" alt="信息传递消息体"></p><h3 id="直接通信方式"><a href="#直接通信方式" class="headerlink" title="直接通信方式"></a>直接通信方式</h3><p>A进程通过发送原语向B进程发送消息，B进程利用接收原语接收信息，并将消息挂到本进程的消息缓冲队列上，逐个读取消息缓冲队列的消息</p><h3 id="间接通信方式"><a href="#间接通信方式" class="headerlink" title="间接通信方式"></a>间接通信方式</h3><p>消息不直接在两个进程间传递，而是首先由发送方通过发送原语发送到中间实体（信箱）中，然后接收方利用接收原语找到信箱中发给自己的信息。所以该种通信方式也称“信箱通信方式”</p>]]></content>
      
      
      <categories>
          
          <category> 计算机基础 </category>
          
          <category> 操作系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 操作系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>7-进程</title>
      <link href="/2021/11/01/7-%E8%BF%9B%E7%A8%8B/"/>
      <url>/2021/11/01/7-%E8%BF%9B%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="进程"><a href="#进程" class="headerlink" title="进程"></a>进程</h1><p>程序的定义: 就是一个指令序列</p><p>早期的计算机，只支持单道程序。同一时间内只能有一道程序执行，此时计算机的CPU，内存以及I/O设备都由该程序单独使用，所以此时程序的代码放在程序段内，程序运行的数据放在数据段内，二者可分别置于内存的首尾两侧。</p><p><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/%E5%8D%95%E9%81%93%E7%A8%8B%E5%BA%8F%E5%86%85%E5%AD%98%E4%BD%BF%E7%94%A8.jpg" alt="单道程序内存使用"></p><p>在引入多道程序技术后，同一时间可能有多道程序执行，此时内存中存放了各个程序的程序段和数据段，如果不引入其他数据结构便无法找到对应程序的存放位置。所以系统为每个运行的程序都配置一个数据结构，称为进程控制块PCB(Progress Control Block)，用来描述进程的各种信息（如程序代码的存放位置）</p><p><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/%E5%A4%9A%E9%81%93%E7%A8%8B%E5%BA%8F%E5%86%85%E5%AD%98%E4%BD%BF%E7%94%A8.jpg" alt="多道程序内存使用"></p><h2 id="进程实体"><a href="#进程实体" class="headerlink" title="进程实体"></a>进程实体</h2><p>由PCB，程序段，数据段三部分构成，也称为进程映像</p><p>一般情况下，我们可以把进程实体简称为进程。我们平常所说的创建进程，指的就是创建进程实体中的PCB，而撤销进程，是指就是撤销进程实体中的PCB</p><p>PCB是进程存在的唯一标志</p><h2 id="进程定义"><a href="#进程定义" class="headerlink" title="进程定义"></a>进程定义</h2><blockquote><p>进程（Process）是计算机中的程序关于某数据集合上的一次<strong>运行活动</strong>，是系统进行资源分配和调度的基本单位，是操作系统结构的基础。在早期面向进程设计的计算机结构中，进程是程序的基本执行实体；在当代面向线程设计的计算机结构中，进程是线程的容器。程序是指令、数据及其组织形式的描述，进程是程序的实体。</p></blockquote><p>在引入了进程实体的概念后，可以把进程定义为：进程是进程实体的运行过程，是系统进行资源分配和调度的独立单位</p><p>严格来说，进程实体和进程是有区别的，进程实体是<strong>静态的</strong>，而进程是<strong>动态的</strong>。不过除非题目专门考察二者区别，否则可认为进程实体就是进程，所以可以说进程由程序段，数据段，PCB三部分组成</p><h2 id="程序段组成"><a href="#程序段组成" class="headerlink" title="程序段组成"></a>程序段组成</h2><p>程序段负责存储程序代码等相关信息</p><h2 id="数据段组成"><a href="#数据段组成" class="headerlink" title="数据段组成"></a>数据段组成</h2><p>由程序运行时使用，产生的运算数据组成，如全局变量，局部变量，宏定义常量就存放在数据段内</p><h2 id="PCB组成"><a href="#PCB组成" class="headerlink" title="PCB组成"></a>PCB组成</h2><p><strong>简要概况：进程的管理者(操作系统)所需的数据都存放在PCB中，程序运行本身需要的数据则存放在数据段和程序段中</strong></p><h3 id="进程描述信息"><a href="#进程描述信息" class="headerlink" title="进程描述信息"></a>进程描述信息</h3><ul><li>进程标识符PID：进程创建时分配的唯一的永不重复的ID，用于区分进程</li><li>用户标识符UID：标识用户身份</li></ul><h3 id="进程控制和管理信息"><a href="#进程控制和管理信息" class="headerlink" title="进程控制和管理信息"></a>进程控制和管理信息</h3><ul><li>进程当前状态</li><li>进程优先级</li></ul><h3 id="资源分配清单"><a href="#资源分配清单" class="headerlink" title="资源分配清单"></a>资源分配清单</h3><ul><li>程序段指针</li><li>数据段指针</li><li>键盘</li><li>鼠标</li></ul><h3 id="处理机相关信息"><a href="#处理机相关信息" class="headerlink" title="处理机相关信息"></a>处理机相关信息</h3><ul><li>各种寄存器：当进程切换时需要把进程当前运行情况记录下来保存在PCB中，以备后续继续执行时调用。如程序计数器的值表示了当前程序执行到了哪一句</li></ul><blockquote><p>要区分PCB和程序段数据段中存储信息的区别，其实只需要认清PCB中存储的都是进程的管理者（操作系统）所需的数据，而程序段和数据段则负责存储程序本身运行所需要的数据</p></blockquote><h2 id="进程的组织方式"><a href="#进程的组织方式" class="headerlink" title="进程的组织方式"></a>进程的组织方式</h2><blockquote><p>进程的组成讨论的是一个进程内部由哪些部分构成，而进程的组织讨论的是多个进程之间的组织问题</p></blockquote><h3 id="链接方式"><a href="#链接方式" class="headerlink" title="链接方式"></a>链接方式</h3><ul><li>按照进程的状态将PCB分为多个队列</li><li>操作系统持有指向各个队列的指针<ul><li>执行指针：指向当前运行态（执行态）的进程，在单CPU计算机中，同一时刻只可能有一个进程处于运行态，所以执行指针也只有一个</li><li>就绪队列指针：指向当前处于就绪态的进程，处于就绪状态的进程可能有多个（通常会把优先级高的进程放在队头）</li><li>阻塞队列指针：指向当前处于阻塞状态的进程，很多操作系统还会根据阻塞原因不同再划分多个阻塞队列</li></ul></li></ul><h3 id="索引方式"><a href="#索引方式" class="headerlink" title="索引方式"></a>索引方式</h3><ul><li>根据进程状态的不同，建立几张索引表</li><li>操作系统持有指向各个索引表的指针</li></ul><h2 id="进程的特征"><a href="#进程的特征" class="headerlink" title="进程的特征"></a>进程的特征</h2><ul><li>动态性（进程最基本的特征）：进程是程序的一次执行过程，是动态地产生，变化和消亡的</li><li>并发性：内存中有多个进程实体，各个进程可并发执行</li><li>独立性：进程是能独立运行，独立获得资源，独立接受调度的基本单位</li><li>异步性：各进程按各自独立的，不可预知的速度向前推进。操作系统需要提供“进程同步机制”来解决异步问题</li><li>结构性：每个进程都会配置一个PCB，从结构上看，进程都由PCB，数据段，程序段组成 </li></ul>]]></content>
      
      
      <categories>
          
          <category> 计算机基础 </category>
          
          <category> 操作系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 操作系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>6-系统调用</title>
      <link href="/2021/11/01/6-%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8/"/>
      <url>/2021/11/01/6-%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="系统调用"><a href="#系统调用" class="headerlink" title="系统调用"></a>系统调用</h1><p>系统调用是操作系统提供给应用程序（开发人员）使用的接口，可以理解为一种可供应用程序调用的特殊函数，应用程序可以发出系统调用请求来获得操作系统的服务</p><p>程序接口由一组系统调用组成</p><h2 id="系统调用的概念和作用"><a href="#系统调用的概念和作用" class="headerlink" title="系统调用的概念和作用"></a>系统调用的概念和作用</h2><p>应用程序通过系统调用请求操作系统的服务。系统中各种共享资源都由操作系统统一掌管，因此用户程序想要执行与资源有关的操作（例如存储分配。I/O操作，文件管理等）都必须通过系统调用的方式向操作系统提出服务请求，由操作系统代为完成。这样可以保证系统的稳定性和安全性，防止用户进行非法操作</p><p>如果没有系统调用存在，各个应用程序就可能会产生非法争夺共享资源的情况发生，例如多个应用同时对一个文件进行读写操作这显然是十分危险的</p><h2 id="系统调用分类（依照功能分类）"><a href="#系统调用分类（依照功能分类）" class="headerlink" title="系统调用分类（依照功能分类）"></a>系统调用分类（依照功能分类）</h2><ul><li>设备管理：完成设备的请求/释放/启动等功能</li><li>文件管理：完成文件的读/写/创建/删除等功能</li><li>进程控制：完成进程的创建/撤销/阻塞/唤醒等功能</li><li>进程通信：完成进程之间的消息传递/信号传递等功能</li><li>内存管理：完成内存的分配/回收等功能</li></ul><p>由于系统调用涉及到对系统资源的管理，对进程的控制，这些功能需要执行一些特权指令，所以<strong>系统调用的相关处理需要在核心态下进行</strong></p><h2 id="系统调用与库函数的区别"><a href="#系统调用与库函数的区别" class="headerlink" title="系统调用与库函数的区别"></a>系统调用与库函数的区别</h2><p>应用程序本身可以通过汇编语言直接进行系统调用，但是常见情况下更多是使用高级语言间接进行系统调用</p><p>高级编程语言向上层（应用程序）提供库函数，这些库函数中的<strong>一部分</strong>对系统调用进行了封装，隐藏了系统调用的细节，使上层进行系统调用更加方便</p><h2 id="系统调用的背后过程"><a href="#系统调用的背后过程" class="headerlink" title="系统调用的背后过程"></a>系统调用的背后过程</h2><p><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8%E8%83%8C%E5%90%8E%E7%9A%84%E8%BF%87%E7%A8%8B.jpg" alt="系统调用背后的过程"></p><h4 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h4><ul><li>陷入指令是在用户态执行的，执行陷入指令后立即引发一个内中断，从而使CPU进入核心态</li><li>发出系统调用请求是在用户态进行的，但对系统调用的相关处理是在核心态下进行的</li><li>陷入指令是唯一一个只能在用户态下执行，而<strong>不能在核心态下执行的指令</strong>（因为陷入指令是让CPU从用户态进入核心态的指令）</li></ul>]]></content>
      
      
      <categories>
          
          <category> 计算机基础 </category>
          
          <category> 操作系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 操作系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>5-中断和异常</title>
      <link href="/2021/11/01/5-%E4%B8%AD%E6%96%AD%E5%92%8C%E5%BC%82%E5%B8%B8/"/>
      <url>/2021/11/01/5-%E4%B8%AD%E6%96%AD%E5%92%8C%E5%BC%82%E5%B8%B8/</url>
      
        <content type="html"><![CDATA[<h1 id="中断和异常"><a href="#中断和异常" class="headerlink" title="中断和异常"></a>中断和异常</h1><h2 id="本质"><a href="#本质" class="headerlink" title="本质"></a>本质</h2><p>发生中断就意味着需要操作系统介入，开展管理工作。由于操作系统的管理工作（如进程切换，分配I/O设备等）需要使用特权指令，所以需要CPU由用户态切换到核心态。<strong>中断可以使CPU从用户态切换到核心态，是操作系统获得计算机的控制权</strong>。有了中断，才能实现多道程序并发执行</p><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><ul><li>中断发生时，CPU立即进入核心态</li><li>中断发生后，当前进程暂停运行，并由操作系统内核对中断进行处理</li><li>对于不同的中断信号，会进行不同的处理</li></ul><p><strong>用户态切换到核心态</strong>是通过中断实现的，并且中断是唯一的实现方式</p><p><strong>核心态到用户态的切换</strong>只需要执行一个特权指令，将程序状态字(PSW)的标志位设置为“用户态”即可</p><h2 id="中断的分类"><a href="#中断的分类" class="headerlink" title="中断的分类"></a>中断的分类</h2><h3 id="内中断"><a href="#内中断" class="headerlink" title="内中断"></a>内中断</h3><p>也称为异常，例外，陷入</p><p>信号来源：CPU内部，与当前执行的指令有关</p><p>内中断还细分为</p><ul><li>自愿中断：指令中断，如系统调用时的访管指令（陷入指令，trap指令）</li><li>强迫中断：硬件故障（如缺页中断），软件中断（如除0）</li></ul><p>内中断另一种分类方式：</p><ul><li>陷阱，陷入（trap）：有意而为之的异常，如系统调用</li><li>故障（fault）：由错误条件引起的，可能被故障处理程序修复，如缺页</li><li>终止（abort）：不可恢复的致命错误造成的结果，终止处理程序不再将控制返回给引发终止的应用程序，如整数除0操作</li></ul><h3 id="外中断"><a href="#外中断" class="headerlink" title="外中断"></a>外中断</h3><p>也称为中断（狭义上的中断）</p><p>信号来源：CPU内部，与当前执行的指令无关</p><p>外中断还可以分为</p><ul><li>外设请求：如I/O操作完成发出的中断信号</li><li>人工干预：如用户强行停止一个进程</li></ul><h2 id="外中断处理过程"><a href="#外中断处理过程" class="headerlink" title="外中断处理过程"></a>外中断处理过程</h2><ol><li>CPU在用户态下逐条执行指令，在每条指令执行结束后进行检查，检查当前是否有外部中断信号</li><li>如果检测到外部中断信号在，则需要保护被中断进程的CPU环境（如程序状态字PSW，程序计数器PC，各种通用寄存器）</li><li>根据中断信号类型转入响应的中断处理程序（在核心态下）</li><li>恢复原进程的CPU环境并退出中断，返回原进程继续向下执行指令</li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20211101160052.png"></p>]]></content>
      
      
      <categories>
          
          <category> 计算机基础 </category>
          
          <category> 操作系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 操作系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>4-操作系统的运行机制以及体系结构</title>
      <link href="/2021/11/01/4-%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%9A%84%E8%BF%90%E8%A1%8C%E6%9C%BA%E5%88%B6%E4%BB%A5%E5%8F%8A%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/"/>
      <url>/2021/11/01/4-%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%9A%84%E8%BF%90%E8%A1%8C%E6%9C%BA%E5%88%B6%E4%BB%A5%E5%8F%8A%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/</url>
      
        <content type="html"><![CDATA[<h2 id="运行机制"><a href="#运行机制" class="headerlink" title="运行机制"></a>运行机制</h2><h3 id="指令的概念"><a href="#指令的概念" class="headerlink" title="指令的概念"></a>指令的概念</h3><p>“指令”就是处理器（CPU）能够识别，执行的最基本命令</p><p>一般而言，指令可以由高级语言（C，Java，C++）翻译而来，一条高级语言的代码翻译过来可能对应多条指令</p><p>一些诸如基本运算的指令（加减乘除）不会影响到系统的安全性，但也有一些指令具有很高权限，例如内存清零指令，如果所有用户都可以执行任意指令，势必会影响到系统的安全性，因此就需要对指令进行分类</p><h3 id="指令的分类"><a href="#指令的分类" class="headerlink" title="指令的分类"></a>指令的分类</h3><ul><li>特权指令：不允许用户程序使用，如内存清零指令</li><li>非特权指令：如普通的运算指令（加减乘除）</li></ul><p>经过分类后我们还需要考虑，CPU如何判断当前状态是否可以执行特权指令</p><h3 id="处理器的两种状态"><a href="#处理器的两种状态" class="headerlink" title="处理器的两种状态"></a>处理器的两种状态</h3><ul><li>用户态（目态）：此时CPU只能执行非特权指令</li><li>核心态（管态）：此时CPU特权指令和非特权指令都可以执行</li></ul><p>处理器的状态由程序状态字寄存器（PSW）中的某个标志位来标识，如0为用户态，1为核心态</p><h3 id="两种程序"><a href="#两种程序" class="headerlink" title="两种程序"></a>两种程序</h3><ul><li>内核程序：操作系统的内核程序是系统的管理者，既可以执行特权指令，又可以执行非特权指令，运行在核心态</li><li>应用程序：为了保证系统安全运行，只能执行非特权指令，运行在用户态</li></ul><h2 id="操作系统的内核"><a href="#操作系统的内核" class="headerlink" title="操作系统的内核"></a>操作系统的内核</h2><p><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E7%9A%84%E5%B1%82%E6%AC%A1%E7%BB%93%E6%9E%84.jpg" alt="计算机系统的层次结构"></p><p>上图中所提到的原语具有原子性，即其运行只能一次全部执行完毕，不可以中断，所以原语要么不执行，要么一次性执行完毕</p><h3 id="操作系统的内核-1"><a href="#操作系统的内核-1" class="headerlink" title="操作系统的内核"></a>操作系统的内核</h3><p>内核是计算机上配置的底层软件，是操作系统最基本，最核心的部分。实现操作系统内核功能的那些程序就是内核程序</p><p>内核程序的划分对于不同操作系统是不完全一致的</p><p><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%9A%84%E5%86%85%E6%A0%B8.jpg" alt="操作系统的内核"></p><h2 id="操作系统的体系结构"><a href="#操作系统的体系结构" class="headerlink" title="操作系统的体系结构"></a>操作系统的体系结构</h2><p>最经典的操作系统体系结构是大内核与微内核</p><h3 id="大内核"><a href="#大内核" class="headerlink" title="大内核"></a>大内核</h3><p>将操作系统的主要功能模块都作为系统内核，运行在核心态</p><ul><li>优点：性能高</li><li>缺点：内核代码庞大，结构复杂，难以维护</li></ul><h3 id="微内核"><a href="#微内核" class="headerlink" title="微内核"></a>微内核</h3><p>只保留操作系统最基本的功能在内核</p><ul><li>优点：内核功能少，结构清晰，易于维护</li><li>缺点：需要频繁的在核心态和用户态之间切换，性能较低</li></ul><h3 id="类比"><a href="#类比" class="headerlink" title="类比"></a>类比</h3><p><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84%E7%B1%BB%E6%AF%94.jpg" alt="操作系统体系结构类比"></p>]]></content>
      
      
      <categories>
          
          <category> 计算机基础 </category>
          
          <category> 操作系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 操作系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>3-操作系统的发展与分类</title>
      <link href="/2021/11/01/3-%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%9A%84%E5%8F%91%E5%B1%95%E4%B8%8E%E5%88%86%E7%B1%BB/"/>
      <url>/2021/11/01/3-%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%9A%84%E5%8F%91%E5%B1%95%E4%B8%8E%E5%88%86%E7%B1%BB/</url>
      
        <content type="html"><![CDATA[<h1 id="操作系统的发展与分类"><a href="#操作系统的发展与分类" class="headerlink" title="操作系统的发展与分类"></a>操作系统的发展与分类</h1><h2 id="手工操作阶段"><a href="#手工操作阶段" class="headerlink" title="手工操作阶段"></a>手工操作阶段</h2><p>主要矛盾：用户独占全机，人机速度矛盾导致资源利用率极低（计算机的高速与人手工输入的低速）</p><h2 id="批处理阶段：单道批处理系统"><a href="#批处理阶段：单道批处理系统" class="headerlink" title="批处理阶段：单道批处理系统"></a>批处理阶段：单道批处理系统</h2><p>引入了脱机输入/输出技术（通过磁带完成），并通过监督程序（操作系统的雏形）控制作业的输入，输出</p><h3 id="主要优点："><a href="#主要优点：" class="headerlink" title="主要优点："></a>主要优点：</h3><p>解决了一定程度上的人机矛盾，资源利用率有所提升</p><h3 id="主要缺点"><a href="#主要缺点" class="headerlink" title="主要缺点"></a>主要缺点</h3><p>内存中只能有一道程序运行，该程序运行结束后才能执行下一道程序（所有程序只能串行执行）。CPU仍有大量时间是在等待I/O完成。资源利用率依然很低</p><h2 id="批处理阶段：多道批处理系统"><a href="#批处理阶段：多道批处理系统" class="headerlink" title="批处理阶段：多道批处理系统"></a>批处理阶段：多道批处理系统</h2><p>每次向内存中输入多道程序，此时操作系统正式诞生，并且引入了中断机制，由操作系统控制这些程序的运行流程，所有程序并发执行</p><h3 id="主要优点"><a href="#主要优点" class="headerlink" title="主要优点"></a>主要优点</h3><p>多道程序并发执行，共享计算机资源，资源利用率大幅提升。CPU和其他资源保持忙碌状态，系统吞吐量增大</p><h3 id="主要缺点-1"><a href="#主要缺点-1" class="headerlink" title="主要缺点"></a>主要缺点</h3><p>用户响应时间长，没有人机交互功能（用户提交自己的作业到内存中执行后不能控制任务执行，只能等待计算机完成）</p><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/daudushduahybcyscyeb27897289.png"></p><p><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20211101151636.png"></p><h2 id="分时操作系统"><a href="#分时操作系统" class="headerlink" title="分时操作系统"></a>分时操作系统</h2><p>计算机以时间片为单位轮流为各个用户/任务服务，各个用户可以在自己所在时间片内通过终端与计算机进行交互</p><p><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/%E5%88%86%E6%97%B6%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F.jpg" alt="分时操作系统"></p><h3 id="主要优点-1"><a href="#主要优点-1" class="headerlink" title="主要优点"></a>主要优点</h3><p>用户请求可以及时被响应，<strong>解决了人机交互的问题</strong>，允许多个用户同时使用一台计算机，并且用户操作相互独立，感受不到其他用户存在</p><h3 id="主要缺点-2"><a href="#主要缺点-2" class="headerlink" title="主要缺点"></a>主要缺点</h3><p>不能优先处理一些紧急任务，操作系统对每个用户/任务都是绝对公平的，循环为每个用户/任务服务一个时间片，无法区分任务紧急度</p><h2 id="实时操作系统"><a href="#实时操作系统" class="headerlink" title="实时操作系统"></a>实时操作系统</h2><p>在实时操作系统的控制下，计算机系统在接收到外部信号后及时进行处理，并且要在严格时限内完成事件，实时操作系统的主要特点是及时性和可靠性</p><h3 id="主要优点-2"><a href="#主要优点-2" class="headerlink" title="主要优点"></a>主要优点</h3><p>能够优先响应一些紧急任务，一些紧急任务不需要时间片排队</p><p>实时操作系统又分为硬实时操作系统和软实时操作系统</p><ul><li>硬实时操作系统严格在规定时间内完成处理（适用于对时限要求高的设备如导弹控制系统，自动驾驶等）</li><li>软实时操作系统可以接受偶尔违法事件规定（如一般的民用订票系统）</li></ul>]]></content>
      
      
      <categories>
          
          <category> 计算机基础 </category>
          
          <category> 操作系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 操作系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2-操作系统的四个特征</title>
      <link href="/2021/11/01/2-%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%9A%84%E5%9B%9B%E4%B8%AA%E7%89%B9%E5%BE%81/"/>
      <url>/2021/11/01/2-%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%9A%84%E5%9B%9B%E4%B8%AA%E7%89%B9%E5%BE%81/</url>
      
        <content type="html"><![CDATA[<h1 id="操作系统的特征"><a href="#操作系统的特征" class="headerlink" title="操作系统的特征"></a>操作系统的特征</h1><p>操作系统共有四个特征，分别是并发，共享，虚拟和异步。其中，并发和共享是操作系统最基本的特征，且二者互为存在条件</p><h2 id="并发"><a href="#并发" class="headerlink" title="并发"></a>并发</h2><p>指两个或多个事件在同一时间间隔内发生，这些事件在宏观上是同时发生的，但微观上是交替发生的</p><p>与之相对应的重要概念就是“并行”，并行指两个或多个事件在同一时刻同时发生</p><p>对于操作系统来说，并发性是指计算机系统同时存在着多个运行程序</p><p>一个单核处理机（CPU）同一时刻只能执行一个程序，因此操作系统会负责协调多个程序交替执行，使其在宏观上看起来是同时执行的</p><h2 id="共享"><a href="#共享" class="headerlink" title="共享"></a>共享</h2><p>共享即资源共享，是指系统中的资源可供内存中多个并发执行的进程共同使用。</p><p>一共有两种资源共享方式：</p><h3 id="互斥共享方式"><a href="#互斥共享方式" class="headerlink" title="互斥共享方式"></a>互斥共享方式</h3><p>指系统中的某些资源，虽然可以提供给多个进程使用，但同一时间段内只允许一个进程访问该资源（例如：<strong>相机资源</strong>，当我们在微信中使用相机资源进行视频聊天时，我们就无法在QQ中调用相机资源进行操作）</p><h3 id="同时共享方式"><a href="#同时共享方式" class="headerlink" title="同时共享方式"></a>同时共享方式</h3><p>系统中的某些资源，允许一个时间段内多个进程“同时”对该资源进行访问（例如：<strong>硬盘资源</strong>，同一时间段内，多个程序可以同时对硬盘资源进行写入或读取等操作，这些操作看起来就像是同时进行的一样）。这里的“同时”也是宏观上的同时，微观上一般仍然是采用分时操作完成的</p><h2 id="虚拟"><a href="#虚拟" class="headerlink" title="虚拟"></a>虚拟</h2><p>虚拟是指把一个物理实体变为若干个逻辑上的对应物，物理实体是实际存在的，逻辑上的对应物是用户感受到的</p><p>例如一个4GB内存的计算机可以同时运行内存需求远大于４G的多个程序，这里用到了空分复用技术，使得一个物理实体为４GB的内存，逻辑对应物即用户真实感受到的远大于４G</p><p>亦或一个单核CPU的计算机同时运行多个软件，同样利用虚拟处理器技术（时分复用技术），使得用户感受到的是多个CPU同时为自己服务</p><h2 id="异步"><a href="#异步" class="headerlink" title="异步"></a>异步</h2><p>在多道程序环境下，允许多个程序并发执行，但由于资源有限，进程不是一贯到底的，而是走走停停，以不可预知的速度向前推进，这就是进程的异步性</p><p>例如：进程A在执行过程中占用了相机资源，此时原本按计划轮到进程B继续执行，但由于进程B需要调用相机资源。而相机资源已被进程A占用，此时后续进程就会进入等待状态，直至进程A归还相机资源。可见，整个执行过程会一直走走停停，以不可与之的速度前进</p><p>从上面的说明中可以看出，系统出现异步性的本质原因在于系统的并发性，由于系统允许程序并发执行，所以才会出现多个程序由于争抢资源而陷入停滞状态。如果系统本身不支持并发，则所有程序将串行执行，即依次执行完每个单独程序，也就不会出现异步</p><hr><h1 id="并发和共享之间的关系"><a href="#并发和共享之间的关系" class="headerlink" title="并发和共享之间的关系"></a>并发和共享之间的关系</h1><p>并发和共享之间互为存在条件，并发性指计算机系统中可以同时存在多个运行中的程序，共享性指系统中的资源可供内存中多个并发执行的进程共同使用</p><p>例如：A，B两个程序同时向硬盘中写入文件。此时A，B两个程序正在并发执行体现了，并发性，同时操作硬盘资源体现了共享性。如果失去并发性，则A，B两个程序无法同时运行，系统中只存在一个正在运行的程序，共享性也就失去了意义。如果失去共享性，则A，B两个程序无法同时访问硬盘资源，也就无法并发运行</p><p>如果失去并发性，则一个时间段内系统只能运行一个程序，那么就失去了实现虚拟性的意义，也就是说没有并发性，虚拟性就无从谈起了</p><p>如果失去并发性，系统只能串行的处理各个进程（每次执行一个），每个进程会一贯到底的执行下去，所以异步性也就不复存在了</p>]]></content>
      
      
      <categories>
          
          <category> 计算机基础 </category>
          
          <category> 操作系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 操作系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1-操作系统基础</title>
      <link href="/2021/11/01/1-%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%9F%BA%E7%A1%80/"/>
      <url>/2021/11/01/1-%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h1 id="操作系统基础"><a href="#操作系统基础" class="headerlink" title="操作系统基础"></a>操作系统基础</h1><h2 id="操作系统概念"><a href="#操作系统概念" class="headerlink" title="操作系统概念"></a>操作系统概念</h2><h3 id="计算机系统结构"><a href="#计算机系统结构" class="headerlink" title="计算机系统结构"></a>计算机系统结构</h3><p><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E7%B3%BB%E7%BB%9F%E7%BB%93%E6%9E%84.jpg" alt="计算机系统系统结构"></p><p>可以看到用户与操作系统是存在直接交互的</p><p><strong>操作系统</strong>（Operating System OS）是指控制和管理整个计算机系统的硬件和软件资源，并合理组织调度计算机的工作和资源的分配，以提供给用户和其他软件方便的接口和环境，它是计算机系统中最基本的<strong>系统软件</strong></p><p><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/%E4%BB%BB%E5%8A%A1%E7%AE%A1%E7%90%86%E5%99%A8.jpg" alt="任务管理器"></p><p>通过操作系统提供的内存管理器可以直观的看到操作系统同时管理着软件与硬件</p><h1 id="操作系统的功能和目标"><a href="#操作系统的功能和目标" class="headerlink" title="操作系统的功能和目标"></a>操作系统的功能和目标</h1><h2 id="作为系统资源的管理者"><a href="#作为系统资源的管理者" class="headerlink" title="作为系统资源的管理者"></a>作为系统资源的管理者</h2><p>（进程：程序的执行过程，执行前需要将程序放到内存中，才能被CPU处理）</p><h3 id="提供的功能"><a href="#提供的功能" class="headerlink" title="提供的功能"></a>提供的功能</h3><ul><li>处理机管理（CPU处理进程等）</li><li>存储器管理（对内存进行管理）</li><li>文件管理（文件资源管理器等）</li><li>设备管理（摄像头，鼠标，键盘等设备进行管理）</li></ul><h3 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h3><p>安全，高效</p><h2 id="作为用户和计算机硬件之间的接口"><a href="#作为用户和计算机硬件之间的接口" class="headerlink" title="作为用户和计算机硬件之间的接口"></a>作为用户和计算机硬件之间的接口</h2><h3 id="提供的功能-1"><a href="#提供的功能-1" class="headerlink" title="提供的功能"></a>提供的功能</h3><ul><li>命令接口：允许用户直接使用<ul><li>联机命令接口：即交互式命令接口（Terminal命令行等），特点是用户输入一条指令，计算机立即做出应答</li><li>脱机命令接口：即批处理命令接口（.bat文件等），特点是用户将多条指令以文件等形式保存，通过运行文件，计算机逐条执行指令</li></ul></li><li>程序接口：允许用户通过程序间接使用。如C:\Windows\System32\user32.dll，程序员在程序中调用user32.dll（该调用过程被称为<strong>系统调用</strong>，也被称作广义指令），即可实现创建窗口等功能，而这个过程中用户只是间接使用了这个接口，并没有直接控制</li><li>GUI：图形用户界面，在现代操作系统中最为流行。</li></ul><p>以上这些提供用户和应用程序使用的接口都可以称为用户接口</p><h2 id="作为最接近硬件的层次"><a href="#作为最接近硬件的层次" class="headerlink" title="作为最接近硬件的层次"></a>作为最接近硬件的层次</h2><h3 id="功能和目标"><a href="#功能和目标" class="headerlink" title="功能和目标"></a>功能和目标</h3><p>实现对硬件机器的拓展</p><p>通过安装操作系统，可以使没有任何软件支持的裸机功能更强大，操作系统为其提供了强大的资源管理功能和方便用户的服务功能</p><p>通常把覆盖了软件的机器，称为扩充机器或虚拟机</p>]]></content>
      
      
      <categories>
          
          <category> 计算机基础 </category>
          
          <category> 操作系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 操作系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>5-Springboot进阶1</title>
      <link href="/2021/09/22/5-Springboot%E8%BF%9B%E9%98%B61/"/>
      <url>/2021/09/22/5-Springboot%E8%BF%9B%E9%98%B61/</url>
      
        <content type="html"><![CDATA[<h1 id="Springboot进阶1"><a href="#Springboot进阶1" class="headerlink" title="Springboot进阶1"></a>Springboot进阶1</h1><h2 id="Springboot依赖管理特性"><a href="#Springboot依赖管理特性" class="headerlink" title="Springboot依赖管理特性"></a>Springboot依赖管理特性</h2><h3 id="利用父项目进行依赖管理"><a href="#利用父项目进行依赖管理" class="headerlink" title="利用父项目进行依赖管理"></a>利用父项目进行依赖管理</h3><p>利用Springboot开发不可避免的要涉及到使用许多的依赖，而涉及到的依赖一多就可能由于依赖之间的版本问题导致错误的产生。这种时候对于依赖的管理就显得十分重要。</p><p>而我们实际开发中可以看到，许多的依赖在配置过程中并不需要指定其版本号，这是因为Springboot已经考虑到由于版本问题导致的依赖引用乱象。所以已经提前进行了依赖管理，而具体的方式就是利用父依赖进行依赖管理。</p><p><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210922092843.png"></p><p>以上图为例，在Maven配置文件pom.xml中，Springboot一般都已经自动配置了父依赖：spring-boot-starter-parent，查看父依赖文件我们可以看到，其内部还依赖于另外一个父依赖：spring-boot-dependencies</p><p><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210922093032.png"></p><p>而spring-boot-dependencies则详细的声明了我们日常可能使用到的各种依赖的版本号，即该文件为我们进行了依赖管理<br><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210922093316.png"></p><p>这里需要注意另一个问题，我们使用父项目进行依赖管理的过程中不可避免的涉及到项目需要使用的依赖版本与父项目内部定义的版本号冲突，这种时候我们就可以利用maven的就近原则（版本仲裁机制），在maven的配置文件pom.xml中声明我们需要的版本号以替代父项目中的版本号，有两种配置方法：</p><p>直接在依赖配置中声明版本号：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--数据库驱动--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.23<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>或是在配置文件中重写配置项，重新定义版本号</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mysql.version</span>&gt;</span>8.0.23<span class="tag">&lt;/<span class="name">mysql.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在实际开发中更推荐利用第二种方式定义，这种方式更便于我们对依赖进行管理</p><h3 id="各种Starter场景启动器"><a href="#各种Starter场景启动器" class="headerlink" title="各种Starter场景启动器"></a>各种Starter场景启动器</h3><p>Springboot提供各种各样开箱即用的场景启动器，这些启动器的命名一般都按照spring-boot-starter-*, （*就表示各种场景）</p><p>而相应的，一些第三方也会为我们提供各种启动器，这类启动器一般以：*-spring-boot-starter的格式进行命名</p><p>所有场景启动器最底层的依赖都是：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Springboot自动配置特性"><a href="#Springboot自动配置特性" class="headerlink" title="Springboot自动配置特性"></a>Springboot自动配置特性</h2><p>Springboot提前为我们进行了许多的配置，其中最明显的就是我们不需要再另外启动服务器，Springboot内置了tomcat服务器并为我们进行了配置。</p><p>当我们使用了web启动器后，在其内部就可以看到其为我们引入了tomcat启动器</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-tomcat<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>另外，在web启动器内部我们还可以看到，其为我们引入了SpringMVC启动器，并自动配好SpringMVC常用组件（功能）</p><p>其次，Springboot还自动配置了默认的包结构，主程序所在包及其下面的所有子包里面的组件都会被默认扫描进来。不需要再像以前一样进行包结构的配置，当然，我们仍然可以在主程序中使用注解重新配置我们自己的包结构。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication(scanBasePackages=&quot;com.google&quot;)</span></span><br></pre></td></tr></table></figure><p>可以看到Springboot拥有非常复杂的配置项，但并不是我们在启动项目时，这些配置项都会生效，Springboot会按需加载所有的配置项</p><ul><li>非常多的starter</li><li>引入了哪些场景这个场景的自动配置才会开启</li><li>SpringBoot所有的自动配置功能都在 spring-boot-autoconfigure 包里面</li></ul>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
          <category> 后端框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>3-Vue网络应用</title>
      <link href="/2021/09/04/3-Vue%E7%BD%91%E7%BB%9C%E5%BA%94%E7%94%A8/"/>
      <url>/2021/09/04/3-Vue%E7%BD%91%E7%BB%9C%E5%BA%94%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="Vue网络应用"><a href="#Vue网络应用" class="headerlink" title="Vue网络应用"></a>Vue网络应用</h1><h2 id="axios基本使用"><a href="#axios基本使用" class="headerlink" title="axios基本使用"></a>axios基本使用</h2><p>axios是一款易用、简洁且高效的http库，是一个可以用在浏览器和Node.js中的<br>异步通信框架，其主要作用就是实现Ajax异步通信，由于Vue只关注视图层内容，所以作者推荐使用该框架完成<br>网络通信内容</p><h3 id="axios功能特点"><a href="#axios功能特点" class="headerlink" title="axios功能特点"></a>axios功能特点</h3><ul><li>从浏览器中创建XMLHttpRequests</li><li>从node.js创建http请求</li><li>支持Promise API（在JS中进行链式编程）</li><li>拦截请求和相应</li><li>转换请求数据和响应数据</li><li>取消请求</li><li>自动转换JSON数据</li><li>客户端支持防御XSRF</li></ul><h2 id="Vue实例的生命周期"><a href="#Vue实例的生命周期" class="headerlink" title="Vue实例的生命周期"></a>Vue实例的生命周期</h2><p>每一个Vue实例都拥有完整的生命周期，即从开始船舰，初始化数据，编译模板，挂载DOM，渲染以及之后的不断更新渲染直到最后的卸载一系列过程，也就是一个Vue实例从创建到销毁的整个过程</p><p>在Vue实例的生命周期中，提供了一系列事件，可以让我们在事件触发时，注册相应的JS方法，利用我们注册的JS方法，更好的控制整个Vue实例（在这些事件响应方法中的this直接指向的是Vue实例），这些JS方法也被称为钩子，下面这幅图中展示了Vue的整个生命周期以及对应位置可以使用的钩子函数</p><p><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/lifecycle.png"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Vue Test<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--解决标签闪烁问题--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-attr">[v-clock]</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">display</span>: none;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;vue&quot;</span> <span class="attr">v-clock</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--将获取到的值在页面进行展示--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>username: &#123;&#123;info.username&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>user&#x27;s url: &#123;&#123;info.url&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>user&#x27;s password: &#123;&#123;info.pwd&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>result boolean: &#123;&#123;info.boolean&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>user&#x27;s school: &#123;&#123;info.sch&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--利用cdn导入axios与vue--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/axios/dist/axios.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue@2.6.14&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--定义Vue实例--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> app=<span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">el</span>: <span class="string">&quot;#vue&quot;</span>,</span></span><br><span class="line"><span class="javascript">            <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="javascript">            &#125;,</span></span><br><span class="line"><span class="javascript">            <span class="comment">//注意这里使用的是data()&#123;&#125;方法，用于获取返回值数据，</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">//与上面定义的data数据域并不相同</span></span></span><br><span class="line"><span class="javascript">            <span class="function"><span class="title">data</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">return</span>&#123;</span></span><br><span class="line"><span class="javascript">                    <span class="comment">//请求的参数格式必须与数据格式一致才能正常获取</span></span></span><br><span class="line"><span class="javascript">                    <span class="attr">info</span>:&#123;</span></span><br><span class="line"><span class="javascript">                        <span class="string">&quot;username&quot;</span>: <span class="literal">null</span>,</span></span><br><span class="line"><span class="javascript">                        <span class="string">&quot;url&quot;</span>: <span class="literal">null</span>,</span></span><br><span class="line"><span class="javascript">                        <span class="string">&quot;pwd&quot;</span>: <span class="literal">null</span>,</span></span><br><span class="line"><span class="javascript">                        <span class="string">&quot;boolean&quot;</span>: <span class="literal">null</span>,</span></span><br><span class="line"><span class="javascript">                        <span class="string">&quot;sch&quot;</span>: <span class="literal">null</span>,</span></span><br><span class="line"><span class="javascript">                        <span class="string">&quot;List&quot;</span>: []</span></span><br><span class="line"><span class="javascript">                    &#125;</span></span><br><span class="line"><span class="javascript">                &#125;</span></span><br><span class="line"><span class="javascript">            &#125;,</span></span><br><span class="line"><span class="javascript">            <span class="function"><span class="title">mounted</span>(<span class="params"></span>)</span>&#123; <span class="comment">//钩子函数 支持链式变成</span></span></span><br><span class="line"><span class="javascript">                <span class="comment">//通过axios进行网络操作，这里首先进行get操作请求相应数据，通过then方法获取相应结果，</span></span></span><br><span class="line"><span class="javascript">                <span class="comment">//利用response将响应值赋给Vue实例中的相应对象</span></span></span><br><span class="line"><span class="javascript">                axios.get(<span class="string">&quot;test.json&quot;</span>).then(<span class="function"><span class="params">response</span>=&gt;</span>(<span class="built_in">this</span>.info=response.data))</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;)</span></span><br><span class="line"><span class="javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> 前端框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2-本地应用：Vue指令</title>
      <link href="/2021/09/03/2-%E6%9C%AC%E5%9C%B0%E5%BA%94%E7%94%A8%EF%BC%9AVue%E6%8C%87%E4%BB%A4/"/>
      <url>/2021/09/03/2-%E6%9C%AC%E5%9C%B0%E5%BA%94%E7%94%A8%EF%BC%9AVue%E6%8C%87%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h1 id="Vue指令"><a href="#Vue指令" class="headerlink" title="Vue指令"></a>Vue指令</h1><h2 id="v-text指令"><a href="#v-text指令" class="headerlink" title="v-text指令"></a>v-text指令</h2><p>v-text指令用于设置标签的文本值，有两种设置标签文本值的方式，方式一就是通过v-text指令向标签传入值，但这种传入方式会整个替换掉标签内的全部文本信息，如果我们需要特殊化的修改某一部分文本值，就需要用到第二个方式，使用插值表达式传入值</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--使用v-text指令--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-text</span>=<span class="string">&quot;message&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--使用插值表达式--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;message&#125;&#125;--使用插值表达式<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> app=<span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">el</span>:<span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="javascript">            <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="javascript">                <span class="attr">message</span>:<span class="string">&quot;Hello Vue!&quot;</span></span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;)</span></span><br><span class="line"><span class="javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210711224316.png"></p><h2 id="v-html指令"><a href="#v-html指令" class="headerlink" title="v-html指令"></a>v-html指令</h2><p>v-html指令用于设置标签的innerHtml属性，如果传入的是普通值，则其结果与v-text指令没有区别，若其传入的是html结构，则会将相应html解析出来</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--传入的是普通文本值，效果与v-text一样--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-html</span>=<span class="string">&quot;content1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--传入的值为html结构，则按照html进行解析--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-html</span>=<span class="string">&quot;content2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> app=<span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">el</span>:<span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="javascript">            <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="javascript">                <span class="attr">content1</span>:<span class="string">&quot;Ywrby&quot;</span>,</span></span><br><span class="line"><span class="javascript">                <span class="attr">content2</span>:<span class="string">&quot;&lt;a href=&#x27;#&#x27;&gt;Ywrby-blog&lt;/a&gt;&quot;</span></span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;)</span></span><br><span class="line"><span class="javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210712020905.png"></p><h2 id="v-on指令"><a href="#v-on指令" class="headerlink" title="v-on指令"></a>v-on指令</h2><p>v-on指令用于为元素绑定事件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--利用v-on指令与单击事件绑定，在发生单击事件时调用clickFunc方法--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;事件绑定1&quot;</span> <span class="attr">v-on:click</span>=<span class="string">&quot;clickFunc&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--与双击事件绑定并调用doubleClickFunc方法--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;事件绑定3&quot;</span> <span class="attr">v-on:dblclick</span>=<span class="string">&quot;doubleClickFunc&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--vue中绑定事件的简化写法，省略固有的“v-on:”简写为“@”即可--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;事件绑定4&quot;</span> @<span class="attr">dblclick</span>=<span class="string">&quot;doubleClickFunc&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> app=<span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">el</span>:<span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="javascript">            <span class="attr">methods</span>:&#123;</span></span><br><span class="line"><span class="javascript">                <span class="attr">clickFunc</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                    alert(<span class="string">&quot;执行点击事件...&quot;</span>)</span></span><br><span class="line"><span class="javascript">                &#125;,</span></span><br><span class="line"><span class="javascript">                <span class="attr">doubleClickFunc</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                    alert(<span class="string">&quot;执行双击事件...&quot;</span>)</span></span><br><span class="line"><span class="javascript">                &#125;</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;)</span></span><br><span class="line"><span class="javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210712022812.png"></p><p><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210712022819.png"></p><p><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210712022825.png"></p><p>可以直观看到我们在vue实例中定义方法，只需要将其写入methods属性中即可，同时我们可以在方法中获取到Vue实例中的相关数据，只需要利用this关键字即可</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-on:click</span>=<span class="string">&quot;changeName&quot;</span> <span class="attr">v-text</span>=<span class="string">&quot;username&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> app=<span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">el</span>:<span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="javascript">            <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="javascript">                <span class="attr">username</span>:<span class="string">&quot;Ywrby&quot;</span></span></span><br><span class="line"><span class="javascript">            &#125;,</span></span><br><span class="line"><span class="javascript">            <span class="attr">methods</span>:&#123;</span></span><br><span class="line"><span class="javascript">                <span class="attr">changeName</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                    <span class="built_in">this</span>.username=<span class="string">&quot;Leslie&quot;</span></span></span><br><span class="line"><span class="javascript">                &#125;</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;)</span></span><br><span class="line"><span class="javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>需要在方法中传入参数只需要在方法名后利用括号传入参数即可</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-on:click</span>=<span class="string">&quot;changeName(&#x27;Leslie&#x27;)&quot;</span> <span class="attr">v-text</span>=<span class="string">&quot;username&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> app=<span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">el</span>:<span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="javascript">            <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="javascript">                <span class="attr">username</span>:<span class="string">&quot;Ywrby&quot;</span></span></span><br><span class="line"><span class="javascript">            &#125;,</span></span><br><span class="line"><span class="javascript">            <span class="attr">methods</span>:&#123;</span></span><br><span class="line"><span class="javascript">                <span class="attr">changeName</span>:<span class="function"><span class="keyword">function</span>(<span class="params">name</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                    <span class="built_in">this</span>.username=name</span></span><br><span class="line"><span class="javascript">                &#125;</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;)</span></span><br><span class="line"><span class="javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>捕捉按键相应只需要在方法后指定按键即可，例如：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">v-on:keyup.enter</span>=<span class="string">&quot;sayHi&quot;</span> <span class="attr">v-text</span>=<span class="string">&quot;username&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="简单计数器实现"><a href="#简单计数器实现" class="headerlink" title="简单计数器实现"></a>简单计数器实现</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span> <span class="attr">class</span>=<span class="string">&quot;input-num&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;sub&quot;</span>&gt;</span>-<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-text</span>=<span class="string">&quot;num&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;add&quot;</span>&gt;</span>+<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> app=<span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">el</span>:<span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="javascript">            <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="javascript">                <span class="attr">num</span>:<span class="number">0</span></span></span><br><span class="line"><span class="javascript">            &#125;,</span></span><br><span class="line"><span class="javascript">            <span class="attr">methods</span>:&#123;</span></span><br><span class="line"><span class="javascript">                <span class="attr">sub</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">if</span>(<span class="built_in">this</span>.num&gt;<span class="number">0</span>)&#123;</span></span><br><span class="line"><span class="javascript">                        <span class="built_in">this</span>.num-=<span class="number">1</span></span></span><br><span class="line"><span class="javascript">                    &#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="javascript">                        alert(<span class="string">&quot;到达最小值，不可以继续减少&quot;</span>)</span></span><br><span class="line"><span class="javascript">                    &#125;</span></span><br><span class="line"><span class="javascript">                &#125;,</span></span><br><span class="line"><span class="javascript">                <span class="attr">add</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                    <span class="built_in">this</span>.num+=<span class="number">1</span></span></span><br><span class="line"><span class="javascript">                &#125;</span></span><br><span class="line"><span class="javascript">                </span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;)</span></span><br><span class="line"><span class="javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210712171902.png"></p><p><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210712171920.png"></p><p><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210712171931.png"></p><h2 id="v-show指令"><a href="#v-show指令" class="headerlink" title="v-show指令"></a>v-show指令</h2><p>v-show指令用于根据给定值切换元素的显示状态（显示/隐藏），其可以直接接收布尔值对象，也可以接收给定的数据对象，还可以接收逻辑判断语句，无论接收哪种，最终一定是解析为布尔值后进行元素的显示与隐藏</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span> <span class="attr">class</span>=<span class="string">&quot;input-num&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--直接传入布尔值--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-show</span>=<span class="string">&quot;true&quot;</span>&gt;</span>允许显示<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-show</span>=<span class="string">&quot;false&quot;</span>&gt;</span>不允许显示<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--获取到data中的布尔值数据--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-show</span>=<span class="string">&quot;showPart&quot;</span>&gt;</span>通过data获取布尔值：允许显示<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--利用洛基判断获取布尔值数据并判断是否展示--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-show</span>=<span class="string">&quot;age&gt;=18&quot;</span>&gt;</span>通过逻辑判断获取布尔值：允许显示<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> app=<span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">el</span>:<span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="javascript">            <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="javascript">                <span class="attr">showPart</span>:<span class="literal">true</span>,</span></span><br><span class="line"><span class="javascript">                <span class="attr">age</span>:<span class="number">29</span></span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;)</span></span><br><span class="line"><span class="javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210712181356.png"></p><h2 id="v-if指令"><a href="#v-if指令" class="headerlink" title="v-if指令"></a>v-if指令</h2><p>v-if指令根据表达式的真假切换元素的显示状态，与v-show有所不同，v-show是通过为对应元素添加不可显示属性保证元素的隐藏，而v-if指令则是直接操作DOM元素直接删除对应元素保证其不会显示</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--直接传入布尔值--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-show</span>=<span class="string">&quot;false&quot;</span>&gt;</span>v-show:不允许显示<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-if</span>=<span class="string">&quot;false&quot;</span>&gt;</span>v-if:不允许显示<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210712181823.png"></p><p>通过浏览器可以看到，两个元素分别利用v-show与v-if指令禁止显示，v-show指令为元素添加了<code>style=&quot;display: none;&quot;</code>保证元素不被显示，而v-if直接操作DOM消除了对应元素，这就是二者的区别</p><h2 id="v-bind指令"><a href="#v-bind指令" class="headerlink" title="v-bind指令"></a>v-bind指令</h2><p>v-bind指令用于设置元素的属性（例如src,title,class），使用方法就是在v-bind指令后面跟上要设置的属性名称，通过等号为其赋值，也可以省略”v-bind”部分为”:”</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--不省略--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">v-bind:src</span>=<span class="string">&quot;imgClass&quot;</span> <span class="attr">v-bind:title</span>=<span class="string">&quot;imgTitle&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--省略--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">:src</span>=<span class="string">&quot;imgClass2&quot;</span> <span class="attr">:title</span>=<span class="string">&quot;imgTitle2&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> app=<span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">el</span>:<span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="javascript">            <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="javascript">                <span class="attr">imgTitle</span>:<span class="string">&quot;测试图片1&quot;</span>,</span></span><br><span class="line"><span class="javascript">                <span class="attr">imgClass</span>:<span class="string">&quot;https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/QQ截图20210712180853.png&quot;</span>,</span></span><br><span class="line"><span class="javascript">                <span class="attr">imgTitle2</span>:<span class="string">&quot;测试图片2&quot;</span>,</span></span><br><span class="line"><span class="javascript">                <span class="attr">imgClass2</span>:<span class="string">&quot;https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/67052833_p0.jpg&quot;</span></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;)</span></span><br><span class="line"><span class="javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210713004003.png"></p><h2 id="v-for指令"><a href="#v-for指令" class="headerlink" title="v-for指令"></a>v-for指令</h2><p>v-for指令可以根据数据生成列表结构</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;item in arr&quot;</span> <span class="attr">:title</span>=<span class="string">&quot;item&quot;</span>&gt;</span>&#123;&#123;item&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(item,index) in objArr&quot;</span> <span class="attr">:title</span>=<span class="string">&quot;item&quot;</span>&gt;</span>ID：&#123;&#123;index&#125;&#125;，用户名：&#123;&#123;item.usr&#125;&#125;，密码：&#123;&#123;item.pwd&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> app=<span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">el</span>:<span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="javascript">            <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="javascript">                <span class="attr">arr</span>:[<span class="string">&quot;张三&quot;</span>,<span class="string">&quot;李四&quot;</span>,<span class="string">&quot;王五&quot;</span>,<span class="string">&quot;赵六&quot;</span>],</span></span><br><span class="line"><span class="javascript">                <span class="attr">objArr</span>:[</span></span><br><span class="line"><span class="javascript">                    &#123;</span></span><br><span class="line"><span class="javascript">                        <span class="attr">usr</span>:<span class="string">&quot;Leslie&quot;</span>,</span></span><br><span class="line"><span class="javascript">                        <span class="attr">pwd</span>:<span class="string">&quot;123456&quot;</span></span></span><br><span class="line"><span class="javascript">                    &#125;,</span></span><br><span class="line"><span class="javascript">                    &#123;</span></span><br><span class="line"><span class="javascript">                        <span class="attr">usr</span>:<span class="string">&quot;Ywrby&quot;</span>,</span></span><br><span class="line"><span class="javascript">                        <span class="attr">pwd</span>:<span class="string">&quot;67890&quot;</span></span></span><br><span class="line"><span class="javascript">                    &#125;,</span></span><br><span class="line"><span class="javascript">                    &#123;</span></span><br><span class="line"><span class="javascript">                        <span class="attr">usr</span>:<span class="string">&quot;Ywryn&quot;</span>,</span></span><br><span class="line"><span class="javascript">                        <span class="attr">pwd</span>:<span class="string">&quot;123456&quot;</span></span></span><br><span class="line"><span class="javascript">                    &#125;</span></span><br><span class="line"><span class="javascript">                ]</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;)</span></span><br><span class="line"><span class="javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210713005625.png"></p><p>通过上面的实例可以看出v-for指令可以接收普通数组以及对象数组等特殊数据结构进行遍历，同时在使用过程中有两个默认参数item和index，item本质就是遍历数组的对象，类似于for i in range结构中的i，通过item可以获取到数组对应的元素对象，同样的，item是可以随意命名的，index即为该对象在数组中的索引值</p><h2 id="v-model指令"><a href="#v-model指令" class="headerlink" title="v-model指令"></a>v-model指令</h2><p>v-model指令用于设置和获取表单元素中的值(双向数据绑定)，即将数据绑定到对应元素后，随元素对数据的更改，原数据中的值也发生改变</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;message&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-text</span>=<span class="string">&quot;message&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> app=<span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">el</span>:<span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="javascript">            <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="javascript">                <span class="attr">message</span>:<span class="string">&quot;test message&quot;</span></span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;)</span></span><br><span class="line"><span class="javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210713064904.png"></p><p>可以看到将上面示例中将输入框元素与message数据绑定，因此初始状态下输入框显示message数据，当我们对输入框进行改变时，message中的数据也同步发生改变导致下方P标签内数据变化</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> 前端框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1-Vue基础</title>
      <link href="/2021/09/03/1-Vue%E5%9F%BA%E7%A1%80/"/>
      <url>/2021/09/03/1-Vue%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h1 id="Vue基础"><a href="#Vue基础" class="headerlink" title="Vue基础"></a>Vue基础</h1><blockquote><p>Vue.js是一套构建用户界面的渐进式框架。Vue只关注视图层，采用自底向上增量开发的设计。Vue的目标是通过尽可能简单的API实现响应的数据绑定和组合的视图组件。</p></blockquote><h2 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h2><ol><li>导入开发版本/生产版本的Vue.js</li><li>创建Vue实例对象，设置其el属性和data属性</li><li>使用模板语法将数据渲染到页面上</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Vue Test<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 创建Vue实例对象，设置其el属性和data属性 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">        &#123;&#123;message&#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 导入开发版本/生产版本的Vue.js --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 开发环境版本，包含了有帮助的命令行警告 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 使用模板语法将数据渲染到页面上 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> app=<span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">el</span>:<span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="javascript">            <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="javascript">                <span class="attr">message</span>:<span class="string">&quot;Hello Vue!&quot;</span></span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;)</span></span><br><span class="line"><span class="javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210711181227.png"></p><h2 id="el挂载点"><a href="#el挂载点" class="headerlink" title="el挂载点"></a>el挂载点</h2><p>上边在定义Vue实例时，内部定义了el挂载点，挂载点的作用在于指明要应用到的标签，例如上面实例中利用ID选择器#app指定应用于id为app的标签，同时我们需要关注Vue实例的作用范围，Vue会管理el选项所命中的元素及其内部的后代元素，例如：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    BODY标签：&#123;&#123;message&#125;&#125;</span><br><span class="line">    <span class="comment">&lt;!-- 创建Vue实例对象，设置其el属性和data属性 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">        DIV标签：&#123;&#123;message&#125;&#125;</span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">            P标签：&#123;&#123;message&#125;&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 导入开发版本/生产版本的Vue.js --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 开发环境版本，包含了有帮助的命令行警告 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 使用模板语法将数据渲染到页面上 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> app=<span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">el</span>:<span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="javascript">            <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="javascript">                <span class="attr">message</span>:<span class="string">&quot;Hello Vue!&quot;</span></span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;)</span></span><br><span class="line"><span class="javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210711181406.png"></p><p>从上面的实例可以看到，被成功选择的DIV标签及其内部的P标签成功获取message值，然而位于外部的Body标签并不能获取相关值</p><p>第二点需要关注的是el挂载点并不仅仅支持ID选择器，其同样支持CSS所满足的class等等选择器，即也可以按照下面方式定义挂载点</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--定义class属性--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">        DIV标签：&#123;&#123;message&#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--使用class选择器，利用“.”--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> app=<span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">el</span>:<span class="string">&quot;.app&quot;</span>,</span></span><br><span class="line"><span class="javascript">            <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="javascript">                <span class="attr">message</span>:<span class="string">&quot;Hello Vue!&quot;</span></span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;)</span></span><br><span class="line"><span class="javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>el挂载点可以作用于绝大部分双标签，例如DIV标签，P标签，H1，H2标签等等，但其不能作用于单标签以及HTML和Body标签</p><h2 id="data数据对象"><a href="#data数据对象" class="headerlink" title="data数据对象"></a>data数据对象</h2><p>data数据对象不止能保存基本文本数据，同样可以保存复杂的对象数据以及数组等复杂数据结构</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--获取普通文本数据--&gt;</span></span><br><span class="line">        &#123;&#123;message&#125;&#125;</span><br><span class="line">        <span class="comment">&lt;!--获取对象类型数据--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">                用户名：&#123;&#123;user.username&#125;&#125;</span><br><span class="line">                联系方式：&#123;&#123;user.wechat&#125;&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--获取数组类型数据--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>&#123;&#123;books[0]&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>&#123;&#123;books[1]&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>&#123;&#123;books[2]&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--在data内部定义普通文本数据，对象数据类型，数组数据类型--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> app=<span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">el</span>:<span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="javascript">            <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="javascript">                <span class="attr">message</span>:<span class="string">&quot;Hello Vue!&quot;</span>,</span></span><br><span class="line"><span class="javascript">                <span class="attr">user</span>:&#123;</span></span><br><span class="line"><span class="javascript">                    <span class="attr">username</span>:<span class="string">&quot;Ywrby&quot;</span>,</span></span><br><span class="line"><span class="javascript">                    <span class="attr">wechat</span>:<span class="string">&quot;1873319XXXX&quot;</span></span></span><br><span class="line"><span class="javascript">                &#125;,</span></span><br><span class="line"><span class="javascript">                <span class="attr">books</span>:[<span class="string">&quot;时间简史&quot;</span>,<span class="string">&quot;计算机网络组成原理&quot;</span>,<span class="string">&quot;比特币白皮书&quot;</span>]</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;)</span></span><br><span class="line"><span class="javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210711190239.png"></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> 前端框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1-JVM基础</title>
      <link href="/2021/07/27/1-JVM%E5%9F%BA%E7%A1%80/"/>
      <url>/2021/07/27/1-JVM%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h1 id="JVM基础"><a href="#JVM基础" class="headerlink" title="JVM基础"></a>JVM基础</h1><blockquote><p>JVM是Java Virtual Machine（Java虚拟机）的缩写，JVM是一种用于计算设备的规范，它是一个虚构出来的计算机，是通过在实际的计算机上仿真模拟各种计算机功能来实现的。</p></blockquote><blockquote><p>引入Java语言虚拟机后，Java语言在不同平台上运行时不需要重新编译。Java语言使用Java虚拟机屏蔽了与具体平台相关的信息，使得Java语言编译程序只需生成在Java虚拟机上运行的目标代码（字节码），就可以在多种平台上不加修改地运行。</p></blockquote><p><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210727163437.png"></p><p>通过上图的结构内容可以看到，JVM是运行在操作系统上的Java虚拟机，其本身并不具备直接执行Java程序的能力，通过在JVM中引入相应的基础类库形成JRE（Java Runtime Environment Java运行环境），JRE才是具备执行Java程序能力的运行环境。在JRE基础上结合相应的编译开发工具就构成了JDK（Java Development Kit Java 语言的软件开发工具包）。而我们实际日常的开发中，正式采用了JDK与相应IDE工具进行开发的模式</p><p>JVM的有点主要有以下几点：</p><ul><li>一次编写，处处运行</li><li>自动内存管理，垃圾回收机制</li><li>数组下标越界检查</li><li>支持多态</li></ul><p><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210727171521.png"></p><h1 id="JVM内存结构"><a href="#JVM内存结构" class="headerlink" title="JVM内存结构"></a>JVM内存结构</h1><h2 id="程序计数器"><a href="#程序计数器" class="headerlink" title="程序计数器"></a>程序计数器</h2><p>Program Counter Register（程序计数器，寄存器）。程序计数器是用于存放下一条指令所在单元的地址的地方。</p><p>以下面源代码与字节码文件为例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.ywrby;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.PrintStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JVMTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        PrintStream out=System.out;</span><br><span class="line">        out.println(<span class="number">1</span>);</span><br><span class="line">        out.println(<span class="number">2</span>);</span><br><span class="line">        out.println(<span class="number">3</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"> <span class="number">0</span> getstatic #<span class="number">2</span> &lt;java/lang/System.out : Ljava/io/PrintStream;&gt;</span><br><span class="line"> <span class="number">3</span> astore_1</span><br><span class="line"> <span class="number">4</span> aload_1</span><br><span class="line"> <span class="number">5</span> iconst_1</span><br><span class="line"> <span class="number">6</span> invokevirtual #<span class="number">3</span> &lt;java/io/PrintStream.println : (I)V&gt;</span><br><span class="line"> <span class="number">9</span> aload_1</span><br><span class="line"><span class="number">10</span> iconst_2</span><br><span class="line"><span class="number">11</span> invokevirtual #<span class="number">3</span> &lt;java/io/PrintStream.println : (I)V&gt;</span><br><span class="line"><span class="number">14</span> aload_1</span><br><span class="line"><span class="number">15</span> iconst_3</span><br><span class="line"><span class="number">16</span> invokevirtual #<span class="number">3</span> &lt;java/io/PrintStream.println : (I)V&gt;</span><br><span class="line"><span class="number">19</span> <span class="keyword">return</span></span><br></pre></td></tr></table></figure><p>二进制的字节码文件实质上就是一条条操作JVM的指令，这些指令不能直接操作CPU，需要通过解释器将二进制的字节码文件转化为机器码，进而通过机器码控制CPU</p><p>在这个过程中，程序计数器所起到的作用就是记住下一条操作指令的执行地址，从上面的字节码文件也可以看到，每一条指令前边的数字代表该指令的地址，程序计数器在执行某条指令时便会暂存下一条指令的地址，这样在该指令执行完成后就可以顺次执行剩余指令</p><h3 id="程序计数器特点"><a href="#程序计数器特点" class="headerlink" title="程序计数器特点"></a>程序计数器特点</h3><p><strong>线程私有性：</strong><br>程序计数器的第一个特点就是其是线程私有的，由于Java支持多线程，所以程序在执行过程中可能需要执行多个线程，但是在线程切换过程中，并不会出现线程之间的程序计数器服用的问题，每一个线程都拥有自己独立的程序计数器，记录当前指令地址，这样也可以保证在线程切换过程中导致指令地址错误</p><p><strong>不存在内存溢出</strong>，由于JVM虚拟机的定义，保证了程序计数器区别于堆和栈等结构，其内部不会出现内存溢出的情况</p><h2 id="虚拟机栈（JVM-stacks）"><a href="#虚拟机栈（JVM-stacks）" class="headerlink" title="虚拟机栈（JVM stacks）"></a>虚拟机栈（JVM stacks）</h2><p>虚拟机栈是线程私有的，每创建一个线程，虚拟机就会为这个线程创建一个虚拟机栈，虚拟机栈表示Java方法执行的内存模型，每调用一个方法就会为每个方法生成一个栈帧（Stack Frame），用来存储局部变量表、操作数栈、动态链接、方法出口等信息。每个方法被调用和完成的过程，都对应一个栈帧从虚拟机栈上入栈和出栈的过程。虚拟机栈的生命周期和线程是相同的</p><p>虚拟机栈是一个后入先出的栈。栈帧是保存在虚拟机栈中的，栈帧是用来存储数据和存储部分过程结果的数据结构，同时也被用来处理动态链接（Dynamic Linking）、方法返回值和异常分派（Dispatch Exception）。线程运行过程中，只有一个栈帧是处于活跃状态，称为“当前活跃栈帧”，当前活动栈帧始终是虚拟机栈的栈顶元素。<br><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/1217523-20170921103712696-66337560.png"></p><p>一个栈帧的结构大致如下图所示</p><p><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/1217523-20170921103713228-1287438455.png"></p><p>简单来说虚拟机栈负责存储线程运行时所需要的内存空间，而虚拟机栈中的每个栈帧负责存储每个方法运行时所需要的内存空间</p><p>通过上面所说的内容我们可以知道，垃圾回收机制是不会涉及对虚拟机栈内存的处理的，因为虚拟机栈严格遵循后进先出原则，所以每个栈帧在对应方法执行结束后都会出栈，其生命周期与线程生命周期一致，不需要回收。另外一点，我们可以通过<code>-Xss</code>命令手动设置虚拟机栈内存的大小，但并不代表我们设置的栈内存越大，程序执行效率就越高，因为系统本身内存是固定的，而每个线程都需要一个单独的虚拟机栈，所以栈内存如果过大，就会导致理论线程数减少</p><p>下面以一段简单的代码演示整个虚拟机栈的在程序运行过程中的执行流程</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.ywrby;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JVMTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        test1();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        test2();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> a=<span class="number">1</span>,b=<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">int</span> c=a+b;</span><br><span class="line">        <span class="keyword">return</span> c;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>整个代码涉及到了三个方法，分别是主方法main，和两个测试方法test1，test2，在主方法处打上断点，通过debug运行查看虚拟机栈的情况</p><p><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210729010140.png"></p><p>可以看到程序开始执行，作为主方法的main函数执行并被压入虚拟机栈中，其栈帧内部目前存储了传入变量args</p><p><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210729010350.png"></p><p>接下来主方法调用了test1方法，所以test1方法作为栈帧传入虚拟机栈顶部，此时test1栈帧就是新的当前活跃栈帧，由于其没有传入参数等变量，所以其内部暂时没有存储内容</p><p><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210729010554.png"></p><p>接下来，由于test1内部调用了test2方法，所以test2作为新的当前活跃栈帧被压入栈顶，其内部暂时还没有存储数据</p><p><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210729010713.png"></p><p>随着test2方法内部执行，其内部的变量a,b被存入栈帧中</p><p><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210729010812.png"></p><p>最后c作为返回值也被存储到栈帧中，此时test2方法已经执行完毕</p><p><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210729010945.png"></p><p>随着test2方法的执行结束，test2栈帧出栈，此时当前活跃栈帧重新变回test1栈帧</p><p><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210729011106.png"></p><p><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210729011246.png"><br>最后，test1方法执行完毕后出栈，此时虚拟机栈中只剩下主方法main栈帧，随着main函数执行结束，虚拟机栈为空</p><h3 id="虚拟机栈的线程安全问题"><a href="#虚拟机栈的线程安全问题" class="headerlink" title="虚拟机栈的线程安全问题"></a>虚拟机栈的线程安全问题</h3><ul><li>如果方法内局部变量没有逃离方法的作用访问，那么其就是线程安全的</li><li>如果局部变量引用了对象，并逃离了方法的作用方法，就需要考虑线程安全问题</li></ul><p>例如，下面三个方法中，test1方法中stringBuilder作为局部变量，始终没有逃离test1方法的访问，所以其是线程安全的。test2方法由于stringBuilder变量作为返回值逃离了test2方法的访问，所以其不是线程安全的，test3方法中，其接收了外部参数stringBuilder作为变量进行操作，所以在其操作该变量的过程当中也可能被其他线程操作该变量，所以test3是线程不安全的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JVMTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        StringBuilder stringBuilder=<span class="keyword">new</span> StringBuilder();</span><br><span class="line">        stringBuilder.append(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">        stringBuilder.append(<span class="string">&quot;2&quot;</span>);</span><br><span class="line">        System.out.println(stringBuilder);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> StringBuilder <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        StringBuilder stringBuilder=<span class="keyword">new</span> StringBuilder();</span><br><span class="line">        stringBuilder.append(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">        stringBuilder.append(<span class="string">&quot;2&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> stringBuilder;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">(StringBuilder stringBuilder)</span></span>&#123;</span><br><span class="line">        stringBuilder.append(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">        stringBuilder.append(<span class="string">&quot;2&quot;</span>);</span><br><span class="line">        System.out.println(stringBuilder);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="栈内存溢出"><a href="#栈内存溢出" class="headerlink" title="栈内存溢出"></a>栈内存溢出</h3><p>栈内存溢出，常见于两种情况下，一种情况是栈帧过多导致栈内存溢出（递归调用），另一种情况是栈帧过大导致溢出</p><p>以下面代码为例，test1方法递归调用自身，但是并未设置递归终止条件，这回导致不断产生栈帧，直至栈内存溢出</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JVMTest</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> count;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            test1();</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Throwable e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            System.out.println(count);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        count++;</span><br><span class="line">        test1();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    运行结果(报 栈内存溢出 错误)：</span></span><br><span class="line"><span class="comment">    java.lang.StackOverflowError</span></span><br><span class="line"><span class="comment">    at cn.ywrby.JVMTest.test1(JVMTest.java:18)</span></span><br><span class="line"><span class="comment">    at cn.ywrby.JVMTest.test1(JVMTest.java:18)</span></span><br><span class="line"><span class="comment">    at cn.ywrby.JVMTest.test1(JVMTest.java:18)</span></span><br><span class="line"><span class="comment">    ....</span></span><br><span class="line"><span class="comment">    at cn.ywrby.JVMTest.test1(JVMTest.java:18)</span></span><br><span class="line"><span class="comment">    24041</span></span><br><span class="line"><span class="comment">     */</span></span><br></pre></td></tr></table></figure><h2 id="本地方法栈"><a href="#本地方法栈" class="headerlink" title="本地方法栈"></a>本地方法栈</h2><p>本地方法栈（Native Method Stacks）与虚拟机栈所发挥的作用是非常相似的，其区别不过是虚拟机栈为虚拟机执行 Java 方法（也就是字节码）服务，而本地方法栈则是为虚拟机使用到的 Native 方法服务。虚拟机规范中对本地方法栈中的方法使用的语言、使用方式与数据结构并没有强制规定，因此具体的虚拟机可以自由实现它。</p><p>Navtive 方法是 Java 通过 JNI 直接调用本地 C/C++ 库，可以认为是 Native 方法相当于 C/C++ 暴露给 Java 的一个接口，Java 通过调用这个接口从而调用到 C/C++ 方法。当线程调用 Java 方法时，虚拟机会创建一个栈帧并压入 Java 虚拟机栈。然而当它调用的是 native 方法时，虚拟机会保持 Java 虚拟机栈不变，也不会向 Java 虚拟机栈中压入新的栈帧，虚拟机只是简单地动态连接并直接调用指定的 native 方法。</p><p><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/14211474-fe4b43e1ff9a3386.webp"></p><h2 id="堆（Heap）"><a href="#堆（Heap）" class="headerlink" title="堆（Heap）"></a>堆（Heap）</h2><p>我们在程序中通过new关键字创建新对象时，创建的对象都会使用堆内存。堆相较于之前讨论的程序计数器以及虚拟机栈和本地方法栈显著的区别就是堆是线程共享的，所以堆中的对象都需要考虑线程安全问题。同时也说明堆需要垃圾回收机制管理</p><h3 id="堆内存溢出"><a href="#堆内存溢出" class="headerlink" title="堆内存溢出"></a>堆内存溢出</h3><p>虽然在堆中存在垃圾回收机制，但是当我们正在使用的活跃对象超出内存范围时，无法触发垃圾回收，同样也会导致内存溢出的情况</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JVMTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            List&lt;String&gt; stringList=<span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">            String a=<span class="string">&quot;test&quot;</span>;</span><br><span class="line">            <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</span><br><span class="line">                stringList.add(a);</span><br><span class="line">                a = a + a;</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Throwable e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            System.out.println(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面这段代码中，我们通过对活跃对象stringList不断以指数形式增加字符串数据，导致其不能被垃圾回收机制处理同时在不断告诉增长，所以最终势必会引发内存溢出</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">报错内容 OutOfMemoryError：堆内存溢出</span></span><br><span class="line"><span class="comment">java.lang.OutOfMemoryError: Overflow: String length out of range</span></span><br><span class="line"><span class="comment">at java.base/java.lang.StringConcatHelper.checkOverflow(StringConcatHelper.java:48)</span></span><br><span class="line"><span class="comment">at java.base/java.lang.StringConcatHelper.mix(StringConcatHelper.java:122)</span></span><br><span class="line"><span class="comment">at cn.ywrby.JVMTest.main(JVMTest.java:14)</span></span><br><span class="line"><span class="comment">28</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="方法区"><a href="#方法区" class="headerlink" title="方法区"></a>方法区</h2><blockquote><p>方法区在JVM中也是一个非常重要的区域，它与堆一样，是被线程共享的区域。在方法区中，存储了每个类的信息（包括类的名称、方法信息、字段信息）、静态变量、常量以及编译器编译后的代码等。</p></blockquote><blockquote><p>方法区（method area）只是JVM规范中定义的一个概念，用于存储类信息、常量池、静态变量、JIT编译后的代码等数据，具体放在哪里，不同的实现可以放在不同的地方。而永久代是Hotspot虚拟机特有的概念，是方法区的一种实现，别的JVM都没有这个东西。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> JVM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1-Electron基础</title>
      <link href="/2021/07/15/1-Electron%E5%9F%BA%E7%A1%80/"/>
      <url>/2021/07/15/1-Electron%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h1 id="Electron基础"><a href="#Electron基础" class="headerlink" title="Electron基础"></a>Electron基础</h1><h2 id="安装Electron"><a href="#安装Electron" class="headerlink" title="安装Electron"></a>安装Electron</h2><ol><li>NodeJS官网安装node js环境：<a href="http://nodejs.org/%EF%BC%8C%E5%AE%89%E8%A3%85%E5%90%8E%E5%8F%AF%E4%BB%A5%E9%80%9A%E8%BF%87npm">http://nodejs.org/，安装后可以通过npm</a> -v或node -v检查是否正常安装</li><li>创建新文件夹，在文件夹内首先初始nodejs环境：npm init</li><li>创建Electron环境，在全局安装：<code>npm install -g electron</code></li><li>检测Electron是否安装成功，<code>electron -v</code>查看Electron版本号</li><li>启动Electron服务，在对应文件夹下： <code>electron .</code></li></ol><h2 id="完成一个HelloWorld页面"><a href="#完成一个HelloWorld页面" class="headerlink" title="完成一个HelloWorld页面"></a>完成一个HelloWorld页面</h2><ol><li>首先创建html页面并编写相关内容</li><li>创建main.js或index.js作为主进程控制文件，编写整个应用进程的启动逻辑</li><li>初始化nodejs文件</li><li>启动electron服务</li></ol><h3 id="测试界面"><a href="#测试界面" class="headerlink" title="测试界面"></a>测试界面</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello World<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="main-js主进程控制文件"><a href="#main-js主进程控制文件" class="headerlink" title="main.js主进程控制文件"></a>main.js主进程控制文件</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> electron =<span class="built_in">require</span>(<span class="string">&#x27;electron&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> app=electron.app <span class="comment">//引用APP，负责整个应用程序控制，即主进程</span></span><br><span class="line"><span class="keyword">var</span> BrowserWindow=electron.BrowserWindow <span class="comment">//窗口引用，负责对窗口的操作 </span></span><br><span class="line"><span class="keyword">var</span> mainWindow=<span class="literal">null</span> <span class="comment">//声明要开启的主窗口</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//编写应用启动状态下的逻辑</span></span><br><span class="line">app.on(<span class="string">&#x27;ready&#x27;</span>,<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="comment">//初始化主界面并设置长宽</span></span><br><span class="line">    mainWindow=<span class="keyword">new</span> BrowserWindow(&#123;<span class="attr">width</span>:<span class="number">700</span>,<span class="attr">height</span>:<span class="number">300</span>&#125;)</span><br><span class="line">    <span class="comment">//加载主界面视图文件</span></span><br><span class="line">    mainWindow.loadFile(<span class="string">&quot;test.html&quot;</span>)</span><br><span class="line">    <span class="comment">//编写关闭窗口时的逻辑</span></span><br><span class="line">    mainWindow.on(<span class="string">&#x27;closed&#x27;</span> ,<span class="function">()=&gt;</span>&#123;</span><br><span class="line">        mainWindow=<span class="literal">null</span> <span class="comment">//将主窗口置空，达到关闭效果</span></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210715010329.png"></p><h2 id="Electron中的主进程与渲染进程"><a href="#Electron中的主进程与渲染进程" class="headerlink" title="Electron中的主进程与渲染进程"></a>Electron中的主进程与渲染进程</h2><p>由于Electron基于Chromium架构，所以自然而然遵循其多进程架构，一个完整的Electron应用包含多个进程，这些进程被分为主进程与渲染进程</p><h3 id="主进程"><a href="#主进程" class="headerlink" title="主进程"></a>主进程</h3><p>一个Electron应用有且仅有一个主进程，主进程的控制文件由Node.JS配置文件package.json中的main属性声明，一般为main.js或index.js，创建或销毁窗口等所有系统事件，都需要定义在主进程的控制文件中，统一由主进程管理。</p><h3 id="渲染进程"><a href="#渲染进程" class="headerlink" title="渲染进程"></a>渲染进程</h3><p>一个Electron应用可以有多个渲染进程，没创建一个新页面就需要一个新的渲染进程。每个渲染进程都是独立的，任意一个渲染进程报错或崩溃都不会影响其他渲染进程运行</p><p><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/electronDemo08.png"></p><h3 id="主进程和渲染进程的区别"><a href="#主进程和渲染进程的区别" class="headerlink" title="主进程和渲染进程的区别"></a>主进程和渲染进程的区别</h3><ul><li>主进程通过BrowserWindow创建页面</li><li>每个BrowserWindow实例都在自己的渲染进程中运行, 当BrowserWindow实例被销毁后, 相应的渲染进程也会被终止</li></ul><h3 id="Electron运行流程"><a href="#Electron运行流程" class="headerlink" title="Electron运行流程"></a>Electron运行流程</h3><ol><li>读取package.json的中的入口文件,即main.js</li><li>main.js在主进程中创建渲染进程</li><li>读取应用页面的布局和样式</li><li>使用IPC在主进程执行任务并获取信息</li></ol><h3 id="主进程与渲染进程之间通信"><a href="#主进程与渲染进程之间通信" class="headerlink" title="主进程与渲染进程之间通信"></a>主进程与渲染进程之间通信</h3><p>主进程与渲染进程之间通过IPC进行通信</p><h4 id="主进程-1"><a href="#主进程-1" class="headerlink" title="主进程"></a>主进程</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> electron = <span class="built_in">require</span>(<span class="string">&#x27;electron&#x27;</span>) </span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> app = electron.app   </span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> BrowserWindow = electron.BrowserWindow;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> mainWindow = <span class="literal">null</span> ;</span><br><span class="line">app.on(<span class="string">&#x27;ready&#x27;</span>,<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    mainWindow = <span class="keyword">new</span> BrowserWindow(&#123;</span><br><span class="line">        <span class="attr">width</span>:<span class="number">500</span>,</span><br><span class="line">        <span class="attr">height</span>:<span class="number">500</span>,</span><br><span class="line">        <span class="comment">//开放nodejs，必须加入这两句 否则无法在渲染进程中正常加载fs</span></span><br><span class="line">        <span class="attr">webPreferences</span>:&#123; <span class="attr">nodeIntegration</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">contextIsolation</span>: <span class="literal">false</span>&#125;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    mainWindow.loadFile(<span class="string">&#x27;test.html&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    mainWindow.on(<span class="string">&#x27;closed&#x27;</span>,<span class="function">()=&gt;</span>&#123;</span><br><span class="line">        mainWindow = <span class="literal">null</span></span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="渲染进程-1"><a href="#渲染进程-1" class="headerlink" title="渲染进程"></a>渲染进程</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);  <span class="comment">//加载fs</span></span><br><span class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">//获取按钮和div控件</span></span><br><span class="line">    <span class="keyword">var</span> btn = <span class="built_in">this</span>.document.querySelector(<span class="string">&#x27;#btn&#x27;</span>)</span><br><span class="line">    <span class="keyword">var</span> content = <span class="built_in">this</span>.document.querySelector(<span class="string">&#x27;#content&#x27;</span>)</span><br><span class="line">    <span class="comment">//设置按钮点击事件</span></span><br><span class="line">    btn.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="comment">//读取文件并写入渲染进程数据中</span></span><br><span class="line">        fs.readFile(<span class="string">&#x27;test.txt&#x27;</span>,<span class="function">(<span class="params">err,data</span>)=&gt;</span>&#123;</span><br><span class="line">            content.innerHTML = data</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h4 id="测试页面"><a href="#测试页面" class="headerlink" title="测试页面"></a>测试页面</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Button</span> <span class="attr">id</span>=<span class="string">&quot;btn&quot;</span>&gt;</span>点击查看文件内容<span class="tag">&lt;/<span class="name">Button</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>  <span class="attr">id</span>=<span class="string">&quot;content&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>最终展示效果</p><p><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210715191459.png"></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> 前端框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Electron </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>7-数据链路层-逻辑链路控制子层</title>
      <link href="/2021/06/29/7-%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82-%E9%80%BB%E8%BE%91%E9%93%BE%E8%B7%AF%E6%8E%A7%E5%88%B6%E5%AD%90%E5%B1%82/"/>
      <url>/2021/06/29/7-%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82-%E9%80%BB%E8%BE%91%E9%93%BE%E8%B7%AF%E6%8E%A7%E5%88%B6%E5%AD%90%E5%B1%82/</url>
      
        <content type="html"><![CDATA[<h1 id="数据链路层概述"><a href="#数据链路层概述" class="headerlink" title="数据链路层概述"></a>数据链路层概述</h1><h3 id="保证数据传输的有效，可靠性"><a href="#保证数据传输的有效，可靠性" class="headerlink" title="保证数据传输的有效，可靠性"></a>保证数据传输的有效，可靠性</h3><ul><li>差错的检测和控制</li><li>流量控制（基于速率/基于反馈）-在数据链路层通常采取基于反馈的模式，即由接收方向发送方提供处理能力大小，发送方根据处理能力提供对应流量</li></ul><hr><h2 id="帧"><a href="#帧" class="headerlink" title="帧"></a>帧</h2><h4 id="（数据链路层处理的协议数据单元PDU）"><a href="#（数据链路层处理的协议数据单元PDU）" class="headerlink" title="（数据链路层处理的协议数据单元PDU）"></a>（数据链路层处理的协议数据单元PDU）</h4><h4 id="帧的组成：帧头-载荷-帧尾"><a href="#帧的组成：帧头-载荷-帧尾" class="headerlink" title="帧的组成：帧头+载荷+帧尾"></a>帧的组成：帧头+载荷+帧尾</h4><ul><li>帧头：包含定位所需要的地址，物理地址信息</li><li>载荷：上层网络层传递下来的包</li><li>帧尾：校验和，做帧的校验</li></ul><p><img src="https://note.youdao.com/yws/res/11235/8495AD2C3C404A6ABC48BE4B5E33340A" alt="帧的组成"></p><h4 id="数据链路层使用物理层提供的服务，所以要将物理层处理的位流（bits）转换成数据链路层能够处理的帧，这个过程就叫做“成帧”。"><a href="#数据链路层使用物理层提供的服务，所以要将物理层处理的位流（bits）转换成数据链路层能够处理的帧，这个过程就叫做“成帧”。" class="headerlink" title="数据链路层使用物理层提供的服务，所以要将物理层处理的位流（bits）转换成数据链路层能够处理的帧，这个过程就叫做“成帧”。"></a>数据链路层使用物理层提供的服务，所以要将物理层处理的位流（bits）转换成数据链路层能够处理的帧，这个过程就叫做“成帧”。</h4><h2 id="成帧"><a href="#成帧" class="headerlink" title="成帧"></a>成帧</h2><p>将原始的位流分散到离散的帧中</p><h4 id="常见的四种成帧方法"><a href="#常见的四种成帧方法" class="headerlink" title="常见的四种成帧方法"></a>常见的四种成帧方法</h4><ol><li>字符计数法</li><li>字节填充的标志字节法</li><li>比特填充的比特标记法</li><li>物理层编码违例法</li></ol><h4 id="字符计数法"><a href="#字符计数法" class="headerlink" title="字符计数法"></a>字符计数法</h4><p>发送方：</p><p>在每个帧头部中的第一个字段，标识该帧的长度共有多少字符</p><p>接收方：</p><p>通过第一个字段，就知道这个帧有几个字符，在哪里结束该帧</p><p><strong>优点：</strong> 实现简单</p><p><strong>缺点：</strong> 没有考虑重新同步问题，一旦出错，无法恢复，工程中极少使用</p><h4 id="字节填充的标志字节法"><a href="#字节填充的标志字节法" class="headerlink" title="字节填充的标志字节法"></a>字节填充的标志字节法</h4><p>考虑了重新同步问题，每一帧采用一个特殊字节做帧界，<strong>即当前帧的开始与上一个帧的结束</strong></p><table><thead><tr><th>标记</th><th>数据</th><th>标记</th><th>数据</th><th>…</th></tr></thead></table><p>将这个特殊字节称为标志字节（flag byte）</p><h5 id="存在问题：当传输数据中也存在标志字节时，会和真正的帧界混淆"><a href="#存在问题：当传输数据中也存在标志字节时，会和真正的帧界混淆" class="headerlink" title="存在问题：当传输数据中也存在标志字节时，会和真正的帧界混淆"></a>存在问题：当传输数据中也存在标志字节时，会和真正的帧界混淆</h5><p>解决方案：当数据中存在标记字节时，在标记前添加转义字符（这种方式解决了一部分问题，但同时也带来了一些特殊情况，当数据中包含转义字符时，又必须在转义字符前添加转义字符避免混淆）</p><p>特殊情况下传输数据内容：</p><table><thead><tr><th>ESC</th><th>FLAG</th><th>ESC</th><th>FLAG</th><th>ESC</th><th>FLAG</th></tr></thead></table><p>在成帧过程中就变成了<br>ESC |ESC | ESC | FLAG |ESC | ESC |ESC | FLAG |ESC | ESC |ESC | FLAG<br>—|—|—|—|—|—|—|—|—|—|—|—</p><p><strong>缺点：</strong> 1.数据中存在帧界或转义符时容易混淆，大量的标志字节或转义字符会造成低效率的成帧（最坏情况50%）。2. 不适用于任意比特数的帧，必须是8位整数倍</p><h4 id="比特填充的比特标记法"><a href="#比特填充的比特标记法" class="headerlink" title="比特填充的比特标记法"></a>比特填充的比特标记法</h4><p>这是一种面向二进制位的帧格式，把所有需传输的数据以比<br>特位一字排开，并以特殊的位模式01111110作为帧标志，即<br>一个帧的开始（同时标志前一个帧的结束）</p><p><strong>当帧内容出现与帧标志相同位串01111110时：</strong></p><p>在5个1后插入一个0，即变成01111101，接收方将自动删除第5 个1后的0。这称为<strong>位填充法（零比特填充法）</strong>，也称为透明传输。</p><p><strong>当扫描过程中出现错误导致部分帧没有被正确接收：</strong></p><p>接收方会继续扫描直到读取到下一个帧标志，开始重写转换同步数据</p><p><strong>优点：</strong> 可以传输任意比特数的帧，同时传输效率更高</p><h4 id="物理层编码违例法"><a href="#物理层编码违例法" class="headerlink" title="物理层编码违例法"></a>物理层编码违例法</h4><p>将冗余信号用作帧界</p><p>例如：在4B/5B编码模式中，将4比特映射到5比特上，能够承载32位却只利用了16位，剩下的位就可以用作帧界</p><p>例如：在曼彻斯特编码中，只利用了高到低表示1，低到高表示0，却没有利用高到高，低到低两种情况</p><p><img src="https://note.youdao.com/yws/res/11369/7EC4B66F1E584778A78424E240AA8023" alt="曼彻斯特编码"></p><p><strong>优点：</strong> 由于利用的是冗余信号，不会混淆，传输效率较高</p><hr><h1 id="差错处理的概述"><a href="#差错处理的概述" class="headerlink" title="差错处理的概述"></a>差错处理的概述</h1><h4 id="处理错误的常见手段"><a href="#处理错误的常见手段" class="headerlink" title="处理错误的常见手段"></a>处理错误的常见手段</h4><ol><li>纠错：恢复出正确的数据</li><li>检错：仅仅检出错误，不恢复，通常伴随重传</li></ol><h4 id="常见错误类型"><a href="#常见错误类型" class="headerlink" title="常见错误类型"></a>常见错误类型</h4><ol><li>单个错误：分散在各个数据块中</li><li>突发错误：集中于一个数据块，整个数据块都是错误</li></ol><h2 id="纠错码（前向纠错技术）"><a href="#纠错码（前向纠错技术）" class="headerlink" title="纠错码（前向纠错技术）"></a>纠错码（前向纠错技术）</h2><p>发现错误，从错误中恢复出正确的来。</p><p>由于纠错码需要纠错，这个过程中需要太多的冗余位，所以开销较大。在有线网络中极少使用，主要应用于无线网络中</p><h2 id="检错码"><a href="#检错码" class="headerlink" title="检错码"></a>检错码</h2><p>只能发现错误，不能从错误中恢复，但可采用重传恢复</p><p>主要应用于局域网</p><hr><h4 id="码字：包含数据位和校验位的n位单元（模式）"><a href="#码字：包含数据位和校验位的n位单元（模式）" class="headerlink" title="码字：包含数据位和校验位的n位单元（模式）"></a>码字：包含数据位和校验位的n位单元（模式）</h4><h4 id="海明距离：两个码字的海明距离指，两个码字间不同位的数目"><a href="#海明距离：两个码字的海明距离指，两个码字间不同位的数目" class="headerlink" title="海明距离：两个码字的海明距离指，两个码字间不同位的数目"></a>海明距离：两个码字的海明距离指，两个码字间不同位的数目</h4><p>例如：“11010101”与“10000101”的海明距离就是2</p><p>海明距离可以利用异或运算，其中1的个数表示海明距离</p><h4 id="全部码字的海明距离："><a href="#全部码字的海明距离：" class="headerlink" title="全部码字的海明距离："></a>全部码字的海明距离：</h4><p>指在全部码字中任意两个码字间海明距离的最小值</p><h4 id="海明距离的意义："><a href="#海明距离的意义：" class="headerlink" title="海明距离的意义："></a>海明距离的意义：</h4><p>如果海明距离为d，则一个码字要变成另一个码字，需要跳变d位（发生d个一位错误）才能实现。</p><h4 id="海明距离与“检错”的关系："><a href="#海明距离与“检错”的关系：" class="headerlink" title="海明距离与“检错”的关系："></a>海明距离与“检错”的关系：</h4><p>海明距离为d+1的编码能检测出d位的差错</p><h4 id="奇偶校验码："><a href="#奇偶校验码：" class="headerlink" title="奇偶校验码："></a>奇偶校验码：</h4><p>海明距离为2，能检验出1位错误</p><h4 id="奇偶校验码就是将一个校验位追加到传输数据中，分为奇校验和偶校验，校验位的值是“0”还是“1”取决于数据中“1”的个数。"><a href="#奇偶校验码就是将一个校验位追加到传输数据中，分为奇校验和偶校验，校验位的值是“0”还是“1”取决于数据中“1”的个数。" class="headerlink" title="奇偶校验码就是将一个校验位追加到传输数据中，分为奇校验和偶校验，校验位的值是“0”还是“1”取决于数据中“1”的个数。"></a>奇偶校验码就是将一个校验位追加到传输数据中，分为奇校验和偶校验，校验位的值是“0”还是“1”取决于数据中“1”的个数。</h4><p>例如：<br/><br>DATA:100011<br/><br>偶校验:100011 1<br/><br>奇校验:100011 0<br/></p><p>因为Data中含义3个1，偶校验就是加入校验码后1为偶数个，所以添加1。对应的奇校验则加入0</p><h5 id="奇偶校验检错举例："><a href="#奇偶校验检错举例：" class="headerlink" title="奇偶校验检错举例："></a>奇偶校验检错举例：</h5><p>有一组传输数据只有四种格式“00”，“11”，“01”，“10” 。<br>经过偶校验，编码后变为“000”，“110”，“011”，“101”</p><p>此时发送方向接收方传输数据“101”.产生一个跳变成为“111”.</p><p>显而易见“111”这个数据不在四种基本数据内，所以接收方可以成功检错</p><p>如果这个过程中发生两次跳变，可能变为“011”.</p><p>这个数据虽然变化了，但也出现在基本数据内，所以接收方无法成功检错，说明接收方无法通过奇偶校验处理两次及以上跳变</p><h4 id="海明距离与“纠错”关系"><a href="#海明距离与“纠错”关系" class="headerlink" title="海明距离与“纠错”关系"></a>海明距离与“纠错”关系</h4><p><strong>海明距离为2d+1的编码，能够纠正d位及以内的差错</strong></p><p>纠错的原理在于，此时即使码字发生d次跳变，这个<strong>错误码字与原码字之间的距离仍然是最近的</strong>。所以接收方只需要找到与这个错误码字海明距离最接近的码字就能将错误纠正</p><p><strong>例如：一个系统有4个合法码字（0000000000, 0000011111, 1111100000 ， 1111111111）</strong><br/></p><p>海明距离是 5=2*2+1，所以可纠正2位错误.<br/><br>发送方：0000011111<br/><br>发生两次跳变后：0000000111<br/><br>接收方发现差错并且找到海明距离最近的码字进行替换。<br/><br>收方纠正后: 0000011111</p><p>假如发生3次跳变（超出纠错范围）：0000000011<br/><br>收方找到的海明距离最近码字是：0000000000<br/><br>可以看到无法再进行纠错</p><h4 id="显而易见，随着海明距离增大，纠错能力就不断增强"><a href="#显而易见，随着海明距离增大，纠错能力就不断增强" class="headerlink" title="显而易见，随着海明距离增大，纠错能力就不断增强"></a>显而易见，随着海明距离增大，纠错能力就不断增强</h4><h4 id="但是，海明距离越大意味着合法码字越少，传输效率也就越低"><a href="#但是，海明距离越大意味着合法码字越少，传输效率也就越低" class="headerlink" title="但是，海明距离越大意味着合法码字越少，传输效率也就越低"></a>但是，海明距离越大意味着合法码字越少，传输效率也就越低</h4><h4 id="二者只能找到一种平衡，而不能同时保持高纠察率以及高传输效率吧"><a href="#二者只能找到一种平衡，而不能同时保持高纠察率以及高传输效率吧" class="headerlink" title="二者只能找到一种平衡，而不能同时保持高纠察率以及高传输效率吧"></a>二者只能找到一种平衡，而不能同时保持高纠察率以及高传输效率吧</h4><hr><h1 id="纠1位错的海明码"><a href="#纠1位错的海明码" class="headerlink" title="纠1位错的海明码"></a>纠1位错的海明码</h1><p>假设一个系统，经过编码后的码字位数是n位，则n位的组成应该为<strong>n=m+r</strong> 。其中m表示传输的数据位，r表示冗余位。</p><h4 id="在海明码中，将这些冗余位用作纠错位"><a href="#在海明码中，将这些冗余位用作纠错位" class="headerlink" title="在海明码中，将这些冗余位用作纠错位"></a>在海明码中，将这些冗余位用作纠错位</h4><h4 id="如何确定冗余位个数r："><a href="#如何确定冗余位个数r：" class="headerlink" title="如何确定冗余位个数r："></a>如何确定冗余位个数r：</h4><p>在数据传输过程中有m位数据位，所以<strong>合法码字</strong>有2^m个，而总位数为n，所以<strong>一共</strong> 有2^n个码字。任取一个合法码字，要保证其跳变一位后能够被纠错，或者说其跳变一位就变成错误码字，就需要至少n+1个码字来表示它。<br/><br>例如：总位数为5的 “10010” 是一个合法码字，为了保证其跳变一位后会变成错误码字，就要求 “10011”，“10000”，“10110”，“11010”，“00010”这五个与其海明距离为1的码字全部为错，也就是“10010”需要5+1个码字来表示。</p><p>综上，则有以下条件成立：</p><p>$$<br>(n+1)2^m&lt;=2^n<br>$$</p><p>$$<br>n=m+r<br>$$<br>推导出：</p><p>$$<br>(m+r+1)&lt;=2^r<br>$$</p><p>利用上式容易得出，纠正单个错误需要的校验位的下界满足：</p><table><thead><tr><th>m</th><th>r</th><th>n</th></tr></thead><tbody><tr><td>1</td><td>2</td><td>3</td></tr><tr><td>2~4</td><td>3</td><td>5~7</td></tr><tr><td>5~11</td><td>4</td><td>9~15</td></tr><tr><td>12~26</td><td>5</td><td>17~31</td></tr><tr><td>27~57</td><td>6</td><td>33~63</td></tr></tbody></table><hr><h3 id="海明纠错码"><a href="#海明纠错码" class="headerlink" title="海明纠错码"></a>海明纠错码</h3><ol><li>将每一个码字从左到右编号，最左边为第一位</li><li>规定凡编号为2的次幂的位是校验位，如1位，2位，4位，8位，16位…</li><li>其余各位均是数据位，如3，5，6，7，9…</li><li>每一个校验位的设置规则：包括自己在内的一些位的集合的奇偶值（奇偶校验）</li></ol><h4 id="如何决定每个数据位的校验位："><a href="#如何决定每个数据位的校验位：" class="headerlink" title="如何决定每个数据位的校验位："></a>如何决定每个数据位的校验位：</h4><p>将某一位数据位的编号展开成2的次幂的和（例如11可以写作：1+2+8），那么每一项所对应的位即为该数据位的校验位（供接收方使用）</p><p>如：一个系统中，码字的数据位是7位，根据上文公式求得冗余位是4位，所以码字位数一共11位，其中1，2，4，8位属于校验位（下图P表示校验位，D表示数据位）</p><table><thead><tr><th>—</th><th>1</th><th>2</th><th>3</th><th>4</th><th>5</th><th>6</th><th>7</th><th>8</th><th>9</th><th>10</th><th>11</th></tr></thead><tbody><tr><td>—</td><td>P1</td><td>P2</td><td>D1</td><td>P3</td><td>D2</td><td>D3</td><td>D4</td><td>P4</td><td>D5</td><td>D6</td><td>D7</td></tr><tr><td>1=2^0</td><td>Y</td><td></td><td>Y</td><td></td><td>Y</td><td></td><td>Y</td><td></td><td>Y</td><td></td><td>Y</td></tr><tr><td>2=2^1</td><td></td><td>Y</td><td>Y</td><td></td><td></td><td>Y</td><td>Y</td><td></td><td></td><td>Y</td><td>Y</td></tr><tr><td>4=2^2</td><td></td><td></td><td></td><td>Y</td><td>Y</td><td>Y</td><td>Y</td><td></td><td></td><td></td><td></td></tr><tr><td>8=2^3</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td>Y</td><td>Y</td><td>Y</td><td>Y</td></tr></tbody></table><p>上述图表中描述了我们在第四条中所说的每一个校验位所在的集合，例如第三行表示了1这个校验位的值由1，3，5，7，9，11这些位的值结合奇偶校验决定</p><table><thead><tr><th>—</th><th>1</th><th>2</th><th>3</th><th>4</th><th>5</th><th>6</th><th>7</th><th>8</th><th>9</th><th>10</th><th>11</th></tr></thead><tbody><tr><td>—</td><td>P1</td><td>P2</td><td>D1</td><td>P3</td><td>D2</td><td>D3</td><td>D4</td><td>P4</td><td>D5</td><td>D6</td><td>D7</td></tr><tr><td>信息码</td><td>-</td><td>-</td><td>1</td><td>-</td><td>0</td><td>0</td><td>1</td><td>-</td><td>0</td><td>0</td><td>0</td></tr><tr><td>检验位</td><td>0</td><td>0</td><td>-</td><td>1</td><td>-</td><td>-</td><td>-</td><td>0</td><td>-</td><td>-</td><td>-</td></tr><tr><td>海明码</td><td>0</td><td>0</td><td>1</td><td>1</td><td>0</td><td>0</td><td>1</td><td>0</td><td>0</td><td>0</td><td>0</td></tr><tr><td>(上图采用了偶校验)</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr></tbody></table><hr><h2 id="海明码纠错过程"><a href="#海明码纠错过程" class="headerlink" title="海明码纠错过程"></a>海明码纠错过程</h2><ol><li>首先将差错计数器置0</li><li>当海明码数据到达接收端后，接收端逐个检查各个校验位的奇偶性。</li><li>如发现某一校验位和它所检测的集合的奇偶性不正确，就将<strong>该检验位的编号</strong>加到差错计数器中。</li><li>Counter=0，无差错。Counter ≠0，出错，该值指明出错的位</li></ol><h4 id="比如："><a href="#比如：" class="headerlink" title="比如："></a>比如：</h4><p>接收到码字为00111000100，校验各校验位：(采用偶校验)<br/><br>第一位：<strong>0</strong>0<strong>1</strong>1<strong>1</strong>0<strong>0</strong>0<strong>1</strong>0<strong>0</strong>，校验集合有3个1，错。counter+1<br/><br>第二位：0<strong>01</strong>11<strong>00</strong>01<strong>00</strong>，校验集合有1个1，错。counter+2<br/><br>第四位：001<strong>1100</strong>0100，校验集合有2个1，对<br/><br>第八位：0011100<strong>0100</strong>，校验集合有1个1，错。counter+8<br/></p><p>累加出错位编号：1+2+8=11</p><p>可计算得其第11位出错，将该位由0改为1，即纠正得到正确结果: 00111000101</p><hr><h2 id="利用海明码纠正突发错误"><a href="#利用海明码纠正突发错误" class="headerlink" title="利用海明码纠正突发错误"></a>利用海明码纠正突发错误</h2><p>突发错误虽然是整个数据块的错误，但可以利用海明码巧妙的逐个纠正</p><ol><li>将连续的k个码字<strong>按行排列</strong>成矩阵</li><li>发送数据时，<strong>按列发送</strong>，每列k位</li><li>如果一个突发性错误长度是k位，则在k个码字中，<strong>至多只有一位</strong>受到影响，正好可用海明码纠错改位后恢复</li></ol><p><img src="https://note.youdao.com/yws/res/11942/A93E4862D1BF450FAC3797CAD515D1C9" alt="海明码纠错"></p><hr><h1 id="检错码-1"><a href="#检错码-1" class="headerlink" title="检错码"></a>检错码</h1><h4 id="采用检错码的原因："><a href="#采用检错码的原因：" class="headerlink" title="采用检错码的原因："></a>采用检错码的原因：</h4><p>纠错码占用太多冗余位，信道利用率不高</p><h4 id="在局域网中，主要使用的是检错码"><a href="#在局域网中，主要使用的是检错码" class="headerlink" title="在局域网中，主要使用的是检错码"></a>在局域网中，主要使用的是检错码</h4><h4 id="常见的检错码："><a href="#常见的检错码：" class="headerlink" title="常见的检错码："></a>常见的检错码：</h4><ul><li>奇偶校验码（海明距离为2，检一位错）</li><li>互联网校验和</li><li>循环冗余校验码</li></ul><h2 id="奇偶校验码：-1"><a href="#奇偶校验码：-1" class="headerlink" title="奇偶校验码："></a>奇偶校验码：</h2><p>奇偶位取值等同于对数据位进行模2和运算<br/><br>例如，采用偶校验: 1110000 -&gt; 1110000<strong>1</strong> <br/><br>接收方能够检查出是否存在单个比特的错误（或者奇数个）</p><p>出错误的概率在50%（奇数跳变成功检验，偶数则不能）</p><h2 id="校验和"><a href="#校验和" class="headerlink" title="校验和"></a>校验和</h2><p>校验和通常是按照N位码字来进行模2加/和运算，发送方将运算结果附加在<strong>数据报文尾部</strong> ，作为校验位。<br/><br>例如：16位的互联网补码校验和</p><h4 id="特点："><a href="#特点：" class="headerlink" title="特点："></a>特点：</h4><ul><li>比奇偶检验更好的检错性能</li><li>能检出高至N位的突发错误</li><li>检错随机错误率1-2^N</li><li>易受系统错误干扰，比如，增加的“0”</li></ul><blockquote><p>互联网校验和计算文档：RFC1071（computing the internet checksum）<br/><br>（1）待校验的相邻字节成对组成16比特的整数一行，按列<br>从低位开始计算其模2和；并将结果按位取反码，作为校验<br>和取值。<br/><br>（2）检查校验和时，将所有字节，包括校验和，进行相加<br>并求二进制反码。接收方：如果结果为全1 ，无错误<br/><br>注意：如果某列的模2和有溢出，向高位进位，如果高位产<br>生进位，循环向低位进位。</p></blockquote><h2 id="循环冗余检错码CRC"><a href="#循环冗余检错码CRC" class="headerlink" title="循环冗余检错码CRC"></a>循环冗余检错码CRC</h2><p>任何一个k位的帧都可以看成一个k-1次的多项式<br/><br>例如：1011001 可以看成-&gt;<br>$$<br>x^6+x^4+x^3+x^0<br>$$<br>(k项k-1阶多项式)</p><h4 id="CRC系统里一定具有生成多项式：G-x-，G-x-为r-冗余码个数-阶"><a href="#CRC系统里一定具有生成多项式：G-x-，G-x-为r-冗余码个数-阶" class="headerlink" title="CRC系统里一定具有生成多项式：G(x)，G(x)为r(冗余码个数)阶"></a>CRC系统里一定具有生成多项式：G(x)，G(x)为r(冗余码个数)阶</h4><h4 id="还具有m位帧的多项式：M-x-且一般-m-gt-r-M-x-gt-G-x"><a href="#还具有m位帧的多项式：M-x-且一般-m-gt-r-M-x-gt-G-x" class="headerlink" title="还具有m位帧的多项式：M(x),且一般 m&gt;r , M(x)&gt;G(x)"></a>还具有m位帧的多项式：M(x),且一般 m&gt;r , M(x)&gt;G(x)</h4><p>接下来：</p><p>$$<br>\frac{x^rM(x)}{G(x)}=Q(x)+R(x)<br>$$<br>Q(x)表示商，R(x)表示余数</p><p>易知：</p><p>$$<br>\frac{x^rM(x)-R(x)}{G(x)}=Q(x)<br>$$<br>说明<br>$$<br>x^rM(x)-R(x)<br>$$<br>一定能被G(x)整除，所以将它作为转码后的数据传送给接收方</p><p>接收方在收到后，将其与约定好的生成多项式G(x)相除：</p><ul><li>若为0，说明传输过程中没有发生错误</li><li>若不为0，说明传输过程发生错误</li></ul><hr><h4 id="在二进制运算中，减法和加法都做异或运算，即相同得0，相异得1"><a href="#在二进制运算中，减法和加法都做异或运算，即相同得0，相异得1" class="headerlink" title="在二进制运算中，减法和加法都做异或运算，即相同得0，相异得1"></a>在二进制运算中，减法和加法都做异或运算，即相同得0，相异得1</h4><p>例如：11010+10100=01110，11001-10010=01011</p><h4 id="模2运算：模2加以及模2减等同于异或运算，即相同得0，相异得1"><a href="#模2运算：模2加以及模2减等同于异或运算，即相同得0，相异得1" class="headerlink" title="模2运算：模2加以及模2减等同于异或运算，即相同得0，相异得1"></a>模2运算：模2加以及模2减等同于异或运算，即相同得0，相异得1</h4><p>0⊕0=0; 0⊕1=1;<br>1⊕0=1; 1⊕1=0.</p><hr><h3 id="CRC码计算："><a href="#CRC码计算：" class="headerlink" title="CRC码计算："></a>CRC码计算：</h3><h4 id="发送方"><a href="#发送方" class="headerlink" title="发送方"></a>发送方</h4><p>传输的一帧：1101011011（m=10）<br/><br>易知：<br>$$<br>M(x)=x^9+x^8+x^6+x^4+z^3+x+1<br>$$</p><p>规定：收发双方采用统一的<br>$$<br>G(x)=x^4+x+1<br>$$</p><p>计算得：<br>$$<br>T(x)=x^4M(x)=x^4(x^9+x^8+x^6+x^4+z^3+x+1)=x^{13}+x^{12}+x^{10}+x^8+z^7+x^5+x^4<br>$$<br>(相当于在原码字后边加r个0)</p><p>开始计算：（采用模2除法，用G(x)去除X^r*M(x)，得余数）<br/><br><img src="https://note.youdao.com/yws/res/12365/346D9BEBACC146C0B0F365510B00CFE4" alt="运算"></p><p>计算11010110110000/10011 得余数1110 ，采用模2减法，用XrM(x)减去余数，得到带CRC校验和的帧,11010110110000-1110=11010110111110，所以：</p><p><strong>最终得到发送给接收方的数据= 1101011011(帧数据)1110(余数)</strong></p><h4 id="接收方"><a href="#接收方" class="headerlink" title="接收方"></a>接收方</h4><p>接收方在得到传输过来的码字后，会利用规定的G(x)与之相除，能够整除则认为传输正确<br/><br>如果不能被整除，则检测为传输出错</p><hr><h3 id="生成多项式国际标准"><a href="#生成多项式国际标准" class="headerlink" title="生成多项式国际标准"></a>生成多项式国际标准</h3><p>CRC-12 ：$x^{12} + x^{11} + x^3 + x^2 + x^1 + 1 $。用于字符长度为6位<br/><br>CRC-16 ：$x^{16} + x^{15}+ x^2+ 1 $。用于字符长度为8位<br/><br>CRC-CCITT ：$x^{16} + x^{12}+ x^5+ 1$。 用于字符长度为8<br/><br>CRC32 ：$G(x)= x^{32}+x^{26}+x^{23}+x^{22}+x^{16}+x^{12}+x^{11}+x^{10}+x^8+x^7+x^5+x^4+x^3+x+1$</p><h4 id="CRC32广泛应用于以太网计算循环冗余校验时用"><a href="#CRC32广泛应用于以太网计算循环冗余校验时用" class="headerlink" title="CRC32广泛应用于以太网计算循环冗余校验时用"></a>CRC32广泛应用于以太网计算循环冗余校验时用</h4><h4 id="例题：如果生成多项式是-G-x-x-3-x-2-1，待传送的原始码字分别是1111-和-1100，请计算采用CRC编码后的码字分别是多少？"><a href="#例题：如果生成多项式是-G-x-x-3-x-2-1，待传送的原始码字分别是1111-和-1100，请计算采用CRC编码后的码字分别是多少？" class="headerlink" title="例题：如果生成多项式是 G(x)= x^3 + x^2 + 1，待传送的原始码字分别是1111 和 1100，请计算采用CRC编码后的码字分别是多少？"></a>例题：如果生成多项式是 G(x)= x^3 + x^2 + 1，待传送的原始码字分别是1111 和 1100，请计算采用CRC编码后的码字分别是多少？</h4><p>解题：生成多项式是3阶的，所以r=3，生成多项式对应的位（除数）是：1101<br/><br>待传输的1111，移位后变为：1111000（被除数），得到余数111<br/><br>用1111000-111，得到编码后的码字为：<strong>1111111</strong></p><hr><h1 id="三个单工协议-基本数据链路层协议"><a href="#三个单工协议-基本数据链路层协议" class="headerlink" title="三个单工协议-基本数据链路层协议"></a>三个单工协议-基本数据链路层协议</h1><h3 id="单工：数据的传输在某时是单向的"><a href="#单工：数据的传输在某时是单向的" class="headerlink" title="单工：数据的传输在某时是单向的"></a>单工：数据的传输在某时是单向的</h3><ul><li>无限制的单工协议</li><li>单工停-等协议</li><li>有噪声信道的弹弓协议</li></ul><h3 id="理想条件下假设："><a href="#理想条件下假设：" class="headerlink" title="理想条件下假设："></a>理想条件下假设：</h3><ul><li>物理层，数据链路层和网络层是各自独立运行的进程（在工程中可能有各自不同的存在形式）</li><li>机器A希望向B发送的是一个可靠的面向连接的长数据流</li><li>假设机器不会崩溃，即使崩溃，我们不会处理因崩溃产生的错误</li><li>从网络层拿到的数据是纯数据</li></ul><h3 id="几个协议共用的数据类型，调用函数"><a href="#几个协议共用的数据类型，调用函数" class="headerlink" title="几个协议共用的数据类型，调用函数"></a>几个协议共用的数据类型，调用函数</h3><h4 id="protocol-h文件"><a href="#protocol-h文件" class="headerlink" title="protocol.h文件"></a>protocol.h文件</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX_PKT 1024                    <span class="comment">/* packet size in bytes */</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">enum</span> &#123;</span> <span class="literal">false</span>, <span class="literal">true</span> &#125; boolean;   <span class="comment">/* boolean type */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> seq_nr;            <span class="comment">/* sequence or ACK numbers  序列号或确认号*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> data[MAX_PKT];</span><br><span class="line">&#125; packet;                               <span class="comment">/* 从网络层传输来的包/分组 */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">enum</span> &#123;</span> data, ack, nak &#125; frame_kind; <span class="comment">/* frame kind definition ack表示确认字符，nak表示否定应答或者非应答 */</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    frame_kind kind;                    <span class="comment">/* what kind of frame? 帧的类型 */</span></span><br><span class="line">    seq_nr seq;                         <span class="comment">/* sequence number 序列号*/</span></span><br><span class="line">    seq_nr ack;                         <span class="comment">/* ACK number 确认号/确认字符*/</span></span><br><span class="line">    packet info;                        <span class="comment">/* the Network layer packet 包/分组（来自网络层）直接作为帧的载荷定义在帧的结构中*/</span></span><br><span class="line">&#125; frame;   <span class="comment">//定义帧结构</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">enum</span> &#123;</span></span><br><span class="line">frame_arrival,  <span class="comment">//帧到达</span></span><br><span class="line">cksum_err,   <span class="comment">//检错码错误</span></span><br><span class="line">timeout,   <span class="comment">//时间超出</span></span><br><span class="line">network_layer_ready,   <span class="comment">//网络层完成准备（可以发送下一条数据）</span></span><br><span class="line">ack_timeout  <span class="comment">//延时确认计时器时间超出</span></span><br><span class="line">&#125; event_type;  <span class="comment">//定义事件类型</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/* wait for an event to happen; return its type of event */</span></span><br><span class="line"><span class="comment">/*等待事件发生，并返回事件类型：即上文事件类型类中的内容*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">wait_for_event</span><span class="params">(event_type* event)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* fetch a packet from the network layer for transmission 从网络层获取数据*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">from_network_layer</span><span class="params">(packet* p)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* deliver information from an inbound frame to the network layer 向网络层发送数据*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">to_network_layer</span><span class="params">(packet* p)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* get an inbound frame from the physical layer 从物理层获取数据*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">from_physical_layer</span><span class="params">(frame* r)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* pass the frame to the physical layer 向物理层发送数据*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">to_physical_layer</span><span class="params">(frame* s)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* start the clock and enable the timeout event 重传定时器启动*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">start_timer</span><span class="params">(seq_nr k)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* stop the clock and disable the timeout event 重传定时器关闭*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">stop_timer</span><span class="params">(seq_nr k)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* start an auxiliary timer and enable the ack_timeout event 捎带确认定时器启动*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">start_ack_timer</span><span class="params">(seq_nr k)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* stop an auxiliary timer and disable the ack_timeout event 稍待确认定时器关闭*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">stop_ack_timer</span><span class="params">(seq_nr k)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* allow the network to cause a network_layer_ready event */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">enable_network_layer</span><span class="params">(<span class="keyword">void</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* forbid the network to cause a network_layer_ready event */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">disable_network_layer</span><span class="params">(<span class="keyword">void</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* macro inc */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> inc(k) <span class="meta-keyword">if</span> (k &lt; MAX_SEQ) k = k + 1; <span class="meta-keyword">else</span> k = 0</span></span><br></pre></td></tr></table></figure><h4 id="其中定义了很重要的帧结构，以及事件类型，基本操作等等…"><a href="#其中定义了很重要的帧结构，以及事件类型，基本操作等等…" class="headerlink" title="其中定义了很重要的帧结构，以及事件类型，基本操作等等…"></a>其中定义了很重要的帧结构，以及事件类型，基本操作等等…</h4><hr><h2 id="无限制的单工协议-协议1"><a href="#无限制的单工协议-协议1" class="headerlink" title="无限制的单工协议-协议1"></a>无限制的单工协议-协议1</h2><p>这种协议设定了很多理想条件，在现实中很难满足，所以被称为“乌托邦协议”</p><h4 id="理想条件："><a href="#理想条件：" class="headerlink" title="理想条件："></a>理想条件：</h4><ul><li>收发双方的网络层都处于就绪状态（随时待命）</li><li>处理时间忽略不计（瞬间完成）</li><li>可用的缓存空间无穷大（无限空间）</li><li>假设DLL之间的信道永远不会损坏或者丢失帧（完美通道）</li></ul><h4 id="代码实现："><a href="#代码实现：" class="headerlink" title="代码实现："></a>代码实现：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">typedef <span class="class"><span class="keyword">enum</span> </span>&#123; frame_arrival &#125; event_type;</span><br><span class="line">#include <span class="string">&quot;protocol.h&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//封装发送过程</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sender1</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">frame s; <span class="comment">/*buffer for an outbound frame 为帧准备内存空间*/</span></span><br><span class="line">packet buffer; <span class="comment">/*buffer for an outbound packet*/</span></span><br><span class="line"><span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">from_network_layer(&amp;buffer); <span class="comment">/*go get something to send 从网络层获取数据存入缓存 */</span></span><br><span class="line">s.info = buffer; <span class="comment">/*copy it into s for transmission 将数据写入帧的载荷*/</span></span><br><span class="line">to_physical_layer(&amp;s); <span class="comment">/*send it on its way 将帧传递给物理层处理*/</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//解封装发送过程</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">receiver1</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">frame r;</span><br><span class="line">event_type event; <span class="comment">/*filled in by wait, but not used here*/</span></span><br><span class="line"><span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">wait_for_event(&amp;event); <span class="comment">/*only possibility is frame arrival 等待数据到达事件*/</span></span><br><span class="line">from_physical_layer(&amp;r); <span class="comment">/*go get the inbound frame 接收来自物理层的数据并进行成帧*/</span></span><br><span class="line">to_network_layer(&amp;r.info); <span class="comment">/*pass the data to the network layer 将数据中的包向上传递到网络层*/</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="单工停-等协议-协议2"><a href="#单工停-等协议-协议2" class="headerlink" title="单工停-等协议 协议2"></a>单工停-等协议 协议2</h2><p>无限制的单工协议条件过于完美，现实中要想实现就需要不断<strong>解除</strong>这些完美条件。<br/><br><strong>单工停-等协议首先取消了可用缓存空间无限大这一理想条件</strong><br/><br>也因此，需要解决接收方有可能被发送方传输的大量数据淹没这一问题<br/></p><h3 id="解决方法："><a href="#解决方法：" class="headerlink" title="解决方法："></a>解决方法：</h3><p>接收方在每次接收到数据后，会向发送方返回一个<strong>哑帧</strong>，表示自己已经正常接收到数据，并且可以继续接收数据。发送方在收到返回的哑帧后，才会继续传输下一个数据。<br><img src="https://note.youdao.com/yws/res/12514/09E7538217A4492EA1D5BEF2198ACD6F" alt="停等协议"></p><h4 id="代码实现：-1"><a href="#代码实现：-1" class="headerlink" title="代码实现："></a>代码实现：</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">enum</span> &#123;</span> frame_arrival &#125; event_type;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;protocol.h&quot;</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sender2</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">frame s; <span class="comment">/*buffer for an outbound frame*/</span></span><br><span class="line">packet buffer; <span class="comment">/*buffer for an outbound packet*/</span></span><br><span class="line">event_type event; <span class="comment">/*frame arrival is the only possibility */</span></span><br><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">from_network_layer(&amp;buffer); <span class="comment">/*go get something to send */</span></span><br><span class="line">s.info = buffer; <span class="comment">/*copy it into s for transmission*/</span></span><br><span class="line">to_physical_layer(&amp;s); <span class="comment">/*bye - bye little frame */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> *这里体现了与第一种协议的区别，</span></span><br><span class="line"><span class="comment"> *在发送一条数据后不会立即循环发送下一条</span></span><br><span class="line"><span class="comment"> *而是等待返回的哑帧再进一步操作</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">wait_for_event(&amp;event); <span class="comment">/*do not proceed until given the go ahead*/</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">receiver2</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">frame r, s; <span class="comment">/*buffers for frames*/</span></span><br><span class="line">event_type event; <span class="comment">/*frame arrival is the only possibility */</span></span><br><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">wait_for_event(&amp;event); <span class="comment">/*only possibility is frame arrival */</span></span><br><span class="line">from_physical_layer(&amp;r); <span class="comment">/*go get the inbound frame */</span></span><br><span class="line">to_network_layer(&amp;r.info); <span class="comment">/*pass the data to the network layer */</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> *与第一种协议不同之处</span></span><br><span class="line"><span class="comment"> *收到信息并传到网络层后，没有立即进入接收状态</span></span><br><span class="line"><span class="comment"> *而是返回一段哑帧</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">to_physical_layer(&amp;s); <span class="comment">/*send a dummy frame to awaken sender */</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="有噪声信道的单工协议-协议3"><a href="#有噪声信道的单工协议-协议3" class="headerlink" title="有噪声信道的单工协议-协议3"></a>有噪声信道的单工协议-协议3</h2><p>有噪声的单工信道协议在前文基础上，取消了帧不会损坏或丢失这一理想条件<br/><br>认为信道中含有噪声，有噪声就会引发错误<br/><br>进而考虑如何处理以下衍生问题并解决</p><h4 id="发现错误后如何通知发送方，如何修正错误，恢复正确帧：（PAR肯定确认重传协议-ARQ自动重传请求）"><a href="#发现错误后如何通知发送方，如何修正错误，恢复正确帧：（PAR肯定确认重传协议-ARQ自动重传请求）" class="headerlink" title="发现错误后如何通知发送方，如何修正错误，恢复正确帧：（PAR肯定确认重传协议/ARQ自动重传请求）"></a>发现错误后如何通知发送方，如何修正错误，恢复正确帧：（PAR肯定确认重传协议/ARQ自动重传请求）</h4><p>在接收方对数据进行检验并且检验正确后，会向发送方返回一个确认帧，发送方在收到确认帧后继续传输数据。<br/><br>发送方在数据发送的同时启动重传定时器（防止锁死），超过定时器规定时间还未收到确认帧（<strong>发送过程失败或者返回确认帧过程失败，或者检验错误</strong>），发送方就会重置计时器，并且重传原数据。<br/><br>在传输过程中，每个帧都具有自己独一无二的编码，防止<strong>数据帧成功到达接收方并且检验合格但返回确认帧失败的问题，同时方便重排</strong></p><p><img src="https://note.youdao.com/yws/res/12570/E5F010DC3F3D4EE09B25093504163544" alt="ARQ"></p><h4 id="代码实现：-2"><a href="#代码实现：-2" class="headerlink" title="代码实现："></a>代码实现：</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">enum</span> &#123;</span> frame_arrival &#125; event_type;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;protocol.h&quot;</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sender3</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">seq_nr next_frame_to_send; <span class="comment">/*seq number of next outgoing frame 出站序列号-用于区别各个帧 */</span></span><br><span class="line">frame s; <span class="comment">/*scratch variable */</span></span><br><span class="line">packet buffer; <span class="comment">/*buffer for an outbound packet*/</span></span><br><span class="line">event_type event;</span><br><span class="line">next_frame_to_send = <span class="number">0</span>; <span class="comment">/*initialize outbound sequence numbers 初始化出站序列号 */</span></span><br><span class="line">from_network_layer(&amp;buffer); <span class="comment">/*fetch first packet 获取第一个数据包*/</span></span><br><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">s.info = buffer; <span class="comment">/*construct a frame for transmission 将包放入帧的载荷*/</span></span><br><span class="line">s.seq = next_frame_to_send; <span class="comment">/*insert sequence number in frame */</span></span><br><span class="line">to_physical_layer(&amp;s); <span class="comment">/*send it on its way 向物理层传输 */</span></span><br><span class="line">start_timer(s.seq);  <span class="comment">/*if answer takes too long, time out 开启重传计时器*/</span></span><br><span class="line">wait_for_event(&amp;event); <span class="comment">/*frame arrival, cksum err, timeout 等待确认帧返回*/</span></span><br><span class="line"><span class="keyword">if</span> (event == frame_arrival) &#123;  <span class="comment">//判断是否返回确认帧</span></span><br><span class="line">from_physical_layer(&amp;s); <span class="comment">/*get the acknowledgement 获取物理层回传的数据*/</span></span><br><span class="line"><span class="keyword">if</span> (s.ack == next_frame_to_send) &#123;   <span class="comment">//获得收方确认则执行以下操作</span></span><br><span class="line">stop_timer(s.ack); <span class="comment">/*turn the timer off 重置重传计时器*/</span></span><br><span class="line">from_network_layer(&amp;buffer); <span class="comment">/*get the next one to send 从网络层获取下一个传输数据*/</span></span><br><span class="line">inc(next_frame_to_send); <span class="comment">/*invert next frame to send 转化序列号*/</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//如果这个过程中没有收到返回的确认帧，或确认帧表明传输错误</span></span><br><span class="line"><span class="comment">//则通过while循环进行重传</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">receiver3</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">seq_nr frame_expected;</span><br><span class="line">frame r, s;</span><br><span class="line">event_type event;</span><br><span class="line">frame_expected = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">wait_for_event(&amp;event); <span class="comment">/*possibilities: frame arrival, cksum err*/</span></span><br><span class="line"><span class="keyword">if</span> (event == frame_arrival) &#123;</span><br><span class="line"><span class="comment">/*a valid frame has arrived */</span></span><br><span class="line">from_physical_layer(&amp;r); <span class="comment">/*go get the newly arrived frame */</span></span><br><span class="line"><span class="keyword">if</span> (r.seq == frame_expected) &#123;  <span class="comment">//获得正确传输的数据</span></span><br><span class="line"><span class="comment">/*this is what we have been waiting for*/</span></span><br><span class="line">to_network_layer(&amp;r.info); <span class="comment">/*pass the data to the network layer 将数据向网络层传输*/</span></span><br><span class="line">inc(frame_expected); <span class="comment">/*next time expect the other sequence nr 下一阶段期待的序列号*/</span></span><br><span class="line">&#125;</span><br><span class="line">s.ack = <span class="number">1</span> - frame_expected; <span class="comment">/*tell which frame is being acked 告知发送方需要传输的数据*/</span></span><br><span class="line">to_physical_layer(&amp;s); <span class="comment">/*send acknowledgement 返回确认帧*/</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="提高传输效率的协议实现方式："><a href="#提高传输效率的协议实现方式：" class="headerlink" title="提高传输效率的协议实现方式："></a>提高传输效率的协议实现方式：</h3><h4 id="全双工："><a href="#全双工：" class="headerlink" title="全双工："></a>全双工：</h4><p>在信道传输的过程中，不再是单向的数据流动，而是除去了常见的收发双方概念，两方同时进行接受与发送数据的工作，提高数据传输的效率</p><h4 id="捎带确认："><a href="#捎带确认：" class="headerlink" title="捎带确认："></a>捎带确认：</h4><p>接收方在发送确认帧时，不再新建一个帧，而实挂靠到一个将要前往发送方的数据帧末尾。提高了信道利用率，但要注意，有时收发双方数量是不对等的，也就是我们不一定能等到可以挂靠的数据帧，所以我们要建立一个稍待确认计时器，超时之后直接发送确认帧</p><h4 id="批发数据（管道化技术）："><a href="#批发数据（管道化技术）：" class="headerlink" title="批发数据（管道化技术）："></a>批发数据（管道化技术）：</h4><p>在等待第一帧的确认帧返回时，不停止数据发送，而是持续发送数据，等第一帧的确认帧返回，再确定是否继续进行发送过程</p><hr><h1 id="滑动窗口协议-协议4"><a href="#滑动窗口协议-协议4" class="headerlink" title="滑动窗口协议-协议4"></a>滑动窗口协议-协议4</h1><p>上文所提到的三种协议都是单工或半双工协议，在等待确认帧返回的空闲时间里不进行任何操作，所以信道的利用率非常低。协议4-6区别于前文三种协议，采用以下几种手段提高信道利用率</p><h3 id="全双工模式"><a href="#全双工模式" class="headerlink" title="全双工模式"></a>全双工模式</h3><p>即在通讯过程中允许双方同时相互传输数据，整个过程模糊了收发双方的概念，因为双方都在同时进行收和发的操作</p><h3 id="管道化技术（批量发送）"><a href="#管道化技术（批量发送）" class="headerlink" title="管道化技术（批量发送）"></a>管道化技术（批量发送）</h3><p>在等待上一帧的确认帧返回时，不是单纯等待，而是继续发送帧。它可以一次性发送多条数据，我们将这些数据的组合称为一个窗口，管道化技术就是在逐个发送窗口。所以我们也称其为滑窗技术</p><h2 id="滑动窗口"><a href="#滑动窗口" class="headerlink" title="滑动窗口"></a>滑动窗口</h2><h4 id="整个过程中双方都对应拥有两个窗口："><a href="#整个过程中双方都对应拥有两个窗口：" class="headerlink" title="整个过程中双方都对应拥有两个窗口："></a>整个过程中双方都对应拥有两个窗口：</h4><ol><li>发送窗口：对应着已经发送，未被确认的数据帧的序列号</li><li>期望接收的数据帧的序列号</li></ol><p><img src="https://note.youdao.com/yws/res/13055/2BA706830A3B48308DBE26A0789B2817" alt="滑动窗口"></p><p>可以看到整个滑动窗口的流程是<strong>首先从接收一方开始</strong>，接收方首先将<strong>窗口设置在0位置</strong>，表示期望接收到0序列号的帧，接下来<strong>发送方</strong>开始<strong>滑动窗口到0</strong>，并向接收方发送0数据帧，在接收方收到第一帧后，<strong>接收方</strong>返回确认帧并且<strong>滑动窗口到1位置</strong>表示期望收到1数据帧，<strong>发送方</strong>在接到确认帧后<strong>继续滑动窗口</strong>并发送对应帧</p><h3 id="协议代码实现"><a href="#协议代码实现" class="headerlink" title="协议代码实现"></a>协议代码实现</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX_SEQ 1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&quot;protocol.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">protocol4</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">seq_nr next_frame_to_send;  <span class="comment">//将要发送的帧的序列号</span></span><br><span class="line">seq_nr frame_expected;   <span class="comment">//期望收到的帧的序列号</span></span><br><span class="line">frame r, s;  </span><br><span class="line">packet buffer;</span><br><span class="line">event_type event;</span><br><span class="line">next_frame_to_send = <span class="number">0</span>;  <span class="comment">//初始化将要发送的帧的序列号，从0号帧开始发送</span></span><br><span class="line">frame_expected = <span class="number">0</span>;   <span class="comment">//表明期望接受到的帧是0号帧</span></span><br><span class="line">from_network_layer(&amp;buffer);   <span class="comment">//从网络曾获取包</span></span><br><span class="line">s.info = buffer;  <span class="comment">//放入要发送的帧中</span></span><br><span class="line">s.seq = next_frame_to_send;</span><br><span class="line">s.ack = <span class="number">1</span> - frame_expected;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> *由于是双工协议，所以采用了稍待确认</span></span><br><span class="line"><span class="comment"> *也就是将确认帧放到数据帧中，提高了信道利用率</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">to_physical_layer(&amp;s);  <span class="comment">//像物理层开始传输</span></span><br><span class="line">start_timer(s.seq);  <span class="comment">//启动计时器</span></span><br><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">wait_for_event(&amp;event);  <span class="comment">//接收对应事件</span></span><br><span class="line"><span class="keyword">if</span> (event == frame_arrival) &#123;</span><br><span class="line">from_physical_layer(&amp;r);  <span class="comment">//从物理层获取返回的确认帧+数据帧 </span></span><br><span class="line"><span class="comment">//通过帧的seq号判断是否是期望接受的帧</span></span><br><span class="line"><span class="keyword">if</span> (r.seq == frame_expected) &#123;  </span><br><span class="line">to_network_layer(&amp;r.info); <span class="comment">//如果是就将数据继续向网络层传输</span></span><br><span class="line">inc(frame_expected);  </span><br><span class="line"><span class="comment">//这里调用了一个宏用来移动窗口</span></span><br><span class="line"><span class="comment">//这个宏的作用就是将期望的数据帧序列号+1，将期望窗口调整到下一位置</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//通过帧的ack号与发送出的帧序列号比较，判断数据是否成功到达接收方</span></span><br><span class="line"><span class="comment">//以及是否继续发送下一帧或者重传</span></span><br><span class="line"><span class="keyword">if</span> (r.ack == next_frame_to_send) &#123;</span><br><span class="line">stop_timer(r.ack);</span><br><span class="line">from_network_layer(&amp;buffer);</span><br><span class="line">inc(next_frame_to_send);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">s.info = buffer;</span><br><span class="line">s.seq = next_frame_to_send;</span><br><span class="line">s.ack = <span class="number">1</span> - frame_expected;</span><br><span class="line">to_physical_layer(&amp;s);</span><br><span class="line">start_timer(s.seq);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="窗口滑动条件"><a href="#窗口滑动条件" class="headerlink" title="窗口滑动条件"></a>窗口滑动条件</h2><h4 id="接收方收到帧后，首先核对帧是否与期望相同，如果相同，则返回确认帧并且滑动接收窗口（frame-expected-1）然后将数据像网络层传输"><a href="#接收方收到帧后，首先核对帧是否与期望相同，如果相同，则返回确认帧并且滑动接收窗口（frame-expected-1）然后将数据像网络层传输" class="headerlink" title="接收方收到帧后，首先核对帧是否与期望相同，如果相同，则返回确认帧并且滑动接收窗口（frame_expected+1）然后将数据像网络层传输"></a>接收方收到帧后，首先核对帧是否与期望相同，如果相同，则返回确认帧并且滑动接收窗口（frame_expected+1）然后将数据像网络层传输</h4><h4 id="发送方在收到确认帧后，核对响应帧号next-frame-to-send，全部完成后，从网络层获取新的数据，并将响应帧号next-frame-to-send-1即移动发送窗口，然后像物理层传输信息，否则，不移动窗口"><a href="#发送方在收到确认帧后，核对响应帧号next-frame-to-send，全部完成后，从网络层获取新的数据，并将响应帧号next-frame-to-send-1即移动发送窗口，然后像物理层传输信息，否则，不移动窗口" class="headerlink" title="发送方在收到确认帧后，核对响应帧号next_frame_to_send，全部完成后，从网络层获取新的数据，并将响应帧号next_frame_to_send+1即移动发送窗口，然后像物理层传输信息，否则，不移动窗口"></a>发送方在收到确认帧后，核对响应帧号next_frame_to_send，全部完成后，从网络层获取新的数据，并将响应帧号next_frame_to_send+1即移动发送窗口，然后像物理层传输信息，否则，不移动窗口</h4><h2 id="滑动窗口基本概念"><a href="#滑动窗口基本概念" class="headerlink" title="滑动窗口基本概念"></a>滑动窗口基本概念</h2><p>每个待发送帧被赋予一个<strong>序列号seq</strong>,seq的取值范围是 0 ~ 2^n-1（n位字段）<br/></p><h4 id="发送窗口"><a href="#发送窗口" class="headerlink" title="发送窗口"></a>发送窗口</h4><ul><li>顺序接收来自网络层的分组-&gt;成帧-&gt;赋予序列号</li><li>最多保存W个已经发送、等待确认的帧</li><li>窗口达到最大值W时强制关闭网络层</li></ul><h4 id="接收窗口"><a href="#接收窗口" class="headerlink" title="接收窗口"></a>接收窗口</h4><ul><li>对进入窗口的帧顺序提交网络层，产生确认</li><li>落在窗口外的帧被丢弃</li></ul><h4 id="SEQ码和ACK码"><a href="#SEQ码和ACK码" class="headerlink" title="SEQ码和ACK码"></a>SEQ码和ACK码</h4><p>因为滑动窗口协议只涉及1个窗口，所以在传输过程中，SEQ码和ACK码的取值只有0和1两种，当SEQ码=1时，表示当前发送的数据为1序列号的帧，<strong>当ACK码为1时，表示已经成功接收序列号为1的帧，期望接收序列号为0的帧</strong>（这里与直观感受并不一致）<br/><br>通信双方<strong>初始值</strong>：seq =0, ack=1（期待接收seq=0）</p><h4 id="窗口滑动机制"><a href="#窗口滑动机制" class="headerlink" title="窗口滑动机制"></a>窗口滑动机制</h4><ul><li>A首先发送数据帧（seq=0, ack=1, A0）–发送0帧，期望收到0帧</li><li>B收到A0，发送捎带确认帧（seq=0, ack=0, B0）–发送0帧，成功收到0帧，期望收到1帧</li><li>A收到对A0的确认，滑动窗口，发送帧（seq=1, ack=0, A1）–发送1帧，收到0帧，期望收到1帧</li></ul><h2 id="协议帧的差错控制"><a href="#协议帧的差错控制" class="headerlink" title="协议帧的差错控制"></a>协议帧的差错控制</h2><p><img src="https://note.youdao.com/yws/res/13132/A016A5C99B284C538F4C49285D7C9B6B" alt="传输过程"></p><p>可以看到在发生错误后，由于计时器时间设置不合理，接收方收到<strong>重复帧</strong>，这种情况下接收方会<strong>发送同样的确认帧</strong>返回发送方，但不会接收当前传过来的重复帧，这就使得整个流程<strong>可以正常运行</strong>，不会因为错误帧而中断。但整个流程<strong>效率极低</strong></p><hr><h2 id="效率问题"><a href="#效率问题" class="headerlink" title="效率问题"></a>效率问题</h2><h4 id="假设窗口每次只发送一帧，那么可以通过运算获得整个过程的信道利用率："><a href="#假设窗口每次只发送一帧，那么可以通过运算获得整个过程的信道利用率：" class="headerlink" title="假设窗口每次只发送一帧，那么可以通过运算获得整个过程的信道利用率："></a>假设窗口每次只发送一帧，那么可以通过运算获得整个过程的信道利用率：</h4><p>$$<br>信道传输速率是： b (bps)<br>$$</p><p>$$<br>每帧的大小是： k (bits)<br>$$</p><p>$$<br>来回时间是： R (sec)<br>$$</p><p>$$<br>信道利用率=\frac{k}{k+bR}<br>$$</p><p>带入数据：信道容量 b = 50 kbps，传输延迟 R = 500 ms（双程），数据帧的长度 k = 1000 bit。（设接收方收到数据帧后马上回送确认短帧，没有延时）</p><p>可以算的信道利用率为3.85%，不足4%，利用率极低。这是因为我们一个窗口只发送了一帧，这一帧到达之前，窗口始终处于空闲状态，所以需要设定窗口合理的帧数，使利用率提高（增加滑动窗口长度）</p><h4 id="设窗口长度为W-一个窗口发送字节的数量"><a href="#设窗口长度为W-一个窗口发送字节的数量" class="headerlink" title="设窗口长度为W(一个窗口发送字节的数量)"></a>设窗口长度为W(一个窗口发送字节的数量)</h4><p>$$<br>在源端发送数据帧过程需要的时间=T_f =\frac{k}{b}<br>$$</p><p>$$<br>从发送完毕到确认帧返回需要的时间（双程延迟）R<br>$$</p><p>$$<br>从开始发送到确认返回总共需要的时间(T_f +R)<br>$$</p><p>$$<br>线路的利用率=\frac{W*T_f}{T_f +R}<br>$$</p><p>上文实例中若假设信道利用率为100%，可以解得W=26，也就是一个窗口发送26帧时，信道利用率最高。当然，这只是理想状态下的假设，正常情况下一般无法达到信道100%的利用</p><h4 id="如何确定合适的W值"><a href="#如何确定合适的W值" class="headerlink" title="如何确定合适的W值"></a>如何确定合适的W值</h4><p>信道上的容量：一帧从发送方传输到接收期间可容纳的帧数量</p><p>带宽-延迟积：BD（B表示带宽，D表示时间）</p><p>窗口值：w=2*BD+1</p><p>实际上:w≤2*BD+1</p><hr><h3 id="例题："><a href="#例题：" class="headerlink" title="例题："></a>例题：</h3><p><strong>主机甲和主机乙之间使用后退N帧协议（GBN）传输数据，甲的发送窗口尺寸为1000，数据帧长为1000字节，信道为100Mbps，乙每收到一个数据帧立即利用一个短帧（忽略其传输延迟）进行确认。若甲乙之间的单向传播延迟是50ms，则甲可以达到的最大平均传输速率约为？</strong></p><p>解题：</p><p>假设平均传输效率为x(Mbps)<br/><br>根据w=2<em>BD+1<br/><br>易知：$1000=2</em>x(Mbps)*50(ms)*10^{-3}+1$<br/><br>解得：x=80Mbps</p><hr><h2 id="管道化技术面临的出错情况"><a href="#管道化技术面临的出错情况" class="headerlink" title="管道化技术面临的出错情况"></a>管道化技术面临的出错情况</h2><ul><li>连续发送W个数据帧，其中有一帧出错，但其后续帧被成功<br>发送<h4 id="接收方的接收策略选择"><a href="#接收方的接收策略选择" class="headerlink" title="接收方的接收策略选择"></a>接收方的接收策略选择</h4></li><li>丢弃错帧及后续帧，其后续帧因不是期望接收帧也被丢弃，对应协议5</li><li>丢弃错帧，缓存后续正确接收帧，对应协议6</li></ul><hr><h1 id="回退n帧-协议5"><a href="#回退n帧-协议5" class="headerlink" title="回退n帧-协议5"></a>回退n帧-协议5</h1><h4 id="上文提到了使用管道化技术带来的新问题与两种解决方式"><a href="#上文提到了使用管道化技术带来的新问题与两种解决方式" class="headerlink" title="上文提到了使用管道化技术带来的新问题与两种解决方式"></a>上文提到了使用管道化技术带来的新问题与两种解决方式</h4><ol><li>回退n帧</li><li>选择性重传</li></ol><p>这两种协议对应着不同的接收发送策略</p><h3 id="回退n帧"><a href="#回退n帧" class="headerlink" title="回退n帧"></a>回退n帧</h3><h4 id="接收方的接收策略与选择："><a href="#接收方的接收策略与选择：" class="headerlink" title="接收方的接收策略与选择："></a>接收方的接收策略与选择：</h4><p>直接将错误帧与后续帧丢弃，后续的正确帧到来后因不是期望帧也被舍弃</p><h4 id="发送方的发送策略："><a href="#发送方的发送策略：" class="headerlink" title="发送方的发送策略："></a>发送方的发送策略：</h4><p>发送前将所有帧缓存，在收到确认帧后，未为成功发送的帧以及后续所有帧进行重传</p><h3 id="选择性重传"><a href="#选择性重传" class="headerlink" title="选择性重传"></a>选择性重传</h3><h4 id="接收方的接收策略与选择：-1"><a href="#接收方的接收策略与选择：-1" class="headerlink" title="接收方的接收策略与选择："></a>接收方的接收策略与选择：</h4><p>丢弃错误帧，将剩余正确帧保留并缓存</p><h4 id="发送方的发送策略：-1"><a href="#发送方的发送策略：-1" class="headerlink" title="发送方的发送策略："></a>发送方的发送策略：</h4><p>在收到确认帧后只重传错误帧</p><hr><h2 id="回退n帧-1"><a href="#回退n帧-1" class="headerlink" title="回退n帧"></a>回退n帧</h2><h4 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h4><ul><li>定义了序列号seq，以及滑动窗口长度W</li><li>发送方持续发送数据，直到达到最大窗口长度</li><li>接收窗口为1，在接到错误帧后不确认(引发超时，进而重传)</li><li>发送方超时后进行重传，从未收到的确认帧处开始</li></ul><p><img src="https://note.youdao.com/yws/res/13276/FD5356893B554D9A8EE3D12C91412210" alt="回退n帧"></p><p>可以看到在发送过程中，从2号帧开始出错，则后续帧都被丢弃。之后接收方会返回1号帧的确认帧（注意！不是返回2号帧，而是返回错误帧的上一位帧的确认帧，因为1号帧成功被接收，发送方借此可以判断是从2号帧开始需要重传的）</p><p><img src="https://note.youdao.com/yws/res/13289/C43B4D62AEDD424BB206FFC06E9FE556" alt="发送方与接收方"></p><h2 id="累计确认"><a href="#累计确认" class="headerlink" title="累计确认"></a>累计确认</h2><h4 id="在滑动窗口中采用了累计确认的方式来对帧进行确认"><a href="#在滑动窗口中采用了累计确认的方式来对帧进行确认" class="headerlink" title="在滑动窗口中采用了累计确认的方式来对帧进行确认"></a>在滑动窗口中采用了累计确认的方式来对帧进行确认</h4><p>也就是说在收到对于5号帧确认时，暗含的意思就是已经完成了对0，1，2，3，4，5这几个帧的确认，而不必要每一个都发送确认帧</p><p>对于发送方，这样在接收到第n帧确认后，就可以删除n帧及以前所有的缓存</p><h4 id="但这同样也引发了新的问题-规定-："><a href="#但这同样也引发了新的问题-规定-：" class="headerlink" title="但这同样也引发了新的问题(规定)："></a>但这同样也引发了新的问题(规定)：</h4><p><strong>滑动窗口最大长度W不能超过最大序列号</strong><br>比如：序列号用三位表示，则<strong>最大序列号=111</strong>。表示7，所以<strong>窗口长度不能等于8或超过8</strong>，超过8很好理解，因为如果窗口长度大于8，则，没有足够的序列号为每一个帧标记。<br/><br>当序列号等于8时，有足够标记(0，1，2，3，4，5，6，7)但这也是不允许的，因为这会引发新的问题。<br/><br>我们在返回确认帧时采取了<strong>累计确认</strong>，当第一个窗口的8个帧全部被顺利接收后，接收方会返回一个确认帧ACK=7,表示已经正常收到7号帧及之前元素，可以继续发送下一窗口了。<br/><br>这时如果发送方在发送第二个窗口时发生错误，接收方根本没收到期望帧，就会重新发送确认帧ACK=7表示自己期望接受第二个窗口，可这时就会发生混淆，<strong>发送方不能分别这个确认帧，是希望对窗口二进行重传还是表示已经正常接收到窗口二。</strong> 无法正确执行程序<br/><br>如果滑动窗口不超过8就不会有这种问题，比如滑动窗口为7，这样第一窗口的确认帧是ACK=6，第二窗口的确认帧是ACK=5（因为第二窗口帧的序列号是从7开始的：7，0，1，2，3，4，5）<br/><br>这样就避免了过程中可能产生的歧义，很好的解决了问题</p><h3 id="回退n帧需要发送方付出更大的缓存代价，缓存整个窗口的数据帧"><a href="#回退n帧需要发送方付出更大的缓存代价，缓存整个窗口的数据帧" class="headerlink" title="回退n帧需要发送方付出更大的缓存代价，缓存整个窗口的数据帧"></a>回退n帧需要发送方付出更大的缓存代价，缓存整个窗口的数据帧</h3><h4 id="适合出错较少的高速信道"><a href="#适合出错较少的高速信道" class="headerlink" title="适合出错较少的高速信道"></a>适合出错较少的高速信道</h4><hr><h1 id="选择性重传-协议6"><a href="#选择性重传-协议6" class="headerlink" title="选择性重传-协议6"></a>选择性重传-协议6</h1><h2 id="基本概念-1"><a href="#基本概念-1" class="headerlink" title="基本概念"></a>基本概念</h2><ul><li>接收窗口接收错误帧后的所有正确帧，并将它们缓存起来</li><li>发送方只重传错误帧</li><li>接收方在接收到重传帧后，将其与其他帧按正确顺序排序，再提交至网络层</li></ul><h2 id="选择重传协议的工作原理分析"><a href="#选择重传协议的工作原理分析" class="headerlink" title="选择重传协议的工作原理分析"></a>选择重传协议的工作原理分析</h2><p><img src="https://note.youdao.com/yws/res/13360/E8B6AA74F2A24619A9AC0D85019A9745" alt="接收方发送方2"></p><h3 id="否定确认NAK"><a href="#否定确认NAK" class="headerlink" title="否定确认NAK"></a>否定确认NAK</h3><ul><li>在接收方收到错误帧时会发送否定确认NAK到发送方</li><li>这样可以加快出错帧的重传</li><li>对出错帧回送否定确认，使发方不再等到超时再重传</li></ul><h2 id="滑动窗口长度选择"><a href="#滑动窗口长度选择" class="headerlink" title="滑动窗口长度选择"></a>滑动窗口长度选择</h2><h4 id="接收窗口：W-MAX-SEQ-1-2"><a href="#接收窗口：W-MAX-SEQ-1-2" class="headerlink" title="接收窗口：W= (MAX_SEQ + 1) / 2"></a>接收窗口：W= (MAX_SEQ + 1) / 2</h4><h4 id="发送窗口一般小于接收窗口"><a href="#发送窗口一般小于接收窗口" class="headerlink" title="发送窗口一般小于接收窗口"></a>发送窗口一般小于接收窗口</h4><h3 id="原因："><a href="#原因：" class="headerlink" title="原因："></a>原因：</h3><p>当发送窗口和接收窗口都比较大时，就会导致新老窗口序列号重叠，比如说序列号为3位（XXX），收发窗口大小都是7，则接收窗口第一次为（0，1，2，3，4，5，6），第二次为（7，0，1，2，3，4，5）。这其中（0，1，2，3，4，5）都为重叠部分。<br/><br>当接收方正确接收第一窗口并滑动窗口后，确认帧被发送出去，但在确认帧发送过程中，全部丢失。所以发送方超时进行重发（0，1，2，3，4，5，6）这个窗口，当0号帧到达时<br/><br>接收方不能判定他是重传帧，反而在第二个窗口发现了对应帧的序列号，这个重传帧就被错误的放在了第二个窗口，而实际上，它只是第一个窗口的重传帧而已</p><hr><p>当W遵守W= (MAX_SEQ + 1) / 2 的规定时，就可以保证新老窗口之间没有重叠部分。，可以正常通过帧的序列号判定帧的类型</p><table><thead><tr><th align="center">—</th><th align="center">协议4：滑动窗口</th><th align="center">协议5：回退n帧</th><th align="center">协议6：选择性重传</th></tr></thead><tbody><tr><td align="center">发送窗口(SWnd)</td><td align="center">0&lt;SWnd&lt;=1</td><td align="center">0 &lt;=SWnd&lt;=MAX_SEQ</td><td align="center">0 &lt;= SWnd&lt;= RWnd</td></tr><tr><td align="center">接收窗口(RWnd)</td><td align="center">1</td><td align="center">1</td><td align="center">(MAX_SEQ+1)/2</td></tr></tbody></table><hr><h3 id="两种策略比较"><a href="#两种策略比较" class="headerlink" title="两种策略比较"></a>两种策略比较</h3><h4 id="回退n帧-2"><a href="#回退n帧-2" class="headerlink" title="回退n帧"></a>回退n帧</h4><ul><li>发送方需要较大的缓冲区，以便重传</li><li>重传帧数多，适于信道出错率较少的情况<h4 id="选择重传"><a href="#选择重传" class="headerlink" title="选择重传"></a>选择重传</h4></li><li>接收方需要较大的缓冲区，以便按正确顺序将分组提交网络层</li><li>重传帧数少，适于信道质量不好的情况</li></ul>]]></content>
      
      
      <categories>
          
          <category> 计算机基础 </category>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>6-数据链路层-介质访问控制子层</title>
      <link href="/2021/06/29/6-%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82-%E4%BB%8B%E8%B4%A8%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6%E5%AD%90%E5%B1%82/"/>
      <url>/2021/06/29/6-%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82-%E4%BB%8B%E8%B4%A8%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6%E5%AD%90%E5%B1%82/</url>
      
        <content type="html"><![CDATA[<h1 id="介质访问控制子层（MAC子层）概述"><a href="#介质访问控制子层（MAC子层）概述" class="headerlink" title="介质访问控制子层（MAC子层）概述"></a>介质访问控制子层（MAC子层）概述</h1><h2 id="MAC子层要解决的问题"><a href="#MAC子层要解决的问题" class="headerlink" title="MAC子层要解决的问题"></a>MAC子层要解决的问题</h2><h4 id="1-介质的多路访问控制-介质访问控制MAC"><a href="#1-介质的多路访问控制-介质访问控制MAC" class="headerlink" title="1. 介质的多路访问控制/介质访问控制MAC"></a>1. 介质的多路访问控制/介质访问控制MAC</h4><h4 id="2-数据通信方式（单播-广播-组播）"><a href="#2-数据通信方式（单播-广播-组播）" class="headerlink" title="2. 数据通信方式（单播/广播/组播）"></a>2. 数据通信方式（单播/广播/组播）</h4><ul><li>单播(unicast)：一对一的通信，是客户端与服务器之间的点到点连接</li><li>广播(broadcast)：一堆所有的通信，发出的信息，要送达到所有对象</li><li>组播(multicast)：一对一个组的通信，发出的信息送达到特定组的用户</li></ul><p><strong>局域网中采用了共享传输介质的方式来降低成本，共享传输介质上通常采用的就是广播的通信方式</strong></p><hr><h2 id="广播网络面临问题"><a href="#广播网络面临问题" class="headerlink" title="广播网络面临问题"></a>广播网络面临问题</h2><h4 id="一条信道上有多个站点，所以会出现在共享信道-多路访问信道，广播信道-上同时有两个甚至更多的站点同时请求占用网络"><a href="#一条信道上有多个站点，所以会出现在共享信道-多路访问信道，广播信道-上同时有两个甚至更多的站点同时请求占用网络" class="headerlink" title="一条信道上有多个站点，所以会出现在共享信道(多路访问信道，广播信道)上同时有两个甚至更多的站点同时请求占用网络"></a>一条信道上有多个站点，所以会出现在共享信道(多路访问信道，广播信道)上同时有两个甚至更多的站点同时请求占用网络</h4><h4 id="解决方法："><a href="#解决方法：" class="headerlink" title="解决方法："></a>解决方法：</h4><p>介质的多路访问控制：在多路访问信道上确定下一个使用者(分配信道)</p><h3 id="分配信道方式："><a href="#分配信道方式：" class="headerlink" title="分配信道方式："></a>分配信道方式：</h3><ul><li>静态分配：预先分配信道给用户，对于不同用户也采用相同的信道分配方式</li><li>动态分配：信道开放，没有预分配，按照需求临时分配给用户</li></ul><hr><h2 id="静态分配"><a href="#静态分配" class="headerlink" title="静态分配"></a>静态分配</h2><p>已经学习过的静态分配方式：</p><ul><li>频分多路复用 FDM（Frequency Division Multiplexing）</li><li>时分多路复用 TDM（Time Division Multiplexing）</li></ul><h3 id="缺陷："><a href="#缺陷：" class="headerlink" title="缺陷："></a>缺陷：</h3><ul><li>信道分配不合理，资源没有按需分配</li><li>有资源浪费，效率低</li><li>由于信道可能是按时间分配的，所以延迟时间增大N倍</li></ul><h3 id="静态信道分配的排队模型-符合M-M-1排队系统模型"><a href="#静态信道分配的排队模型-符合M-M-1排队系统模型" class="headerlink" title="静态信道分配的排队模型(符合M/M/1排队系统模型)"></a>静态信道分配的排队模型(符合M/M/1排队系统模型)</h3><h4 id="M"><a href="#M" class="headerlink" title="M:"></a>M:</h4><p>帧到达时间间隔服从指数分布（顾客到达时间间隔分布）<br/><br>平均到达率（输入率）：λ 帧/秒</p><h4 id="M-1"><a href="#M-1" class="headerlink" title="M:"></a>M:</h4><p>帧长度服从指数分布，平均长度$\frac{1}{μ}$ (位/帧)   （顾客到达时间间隔分布）<br/><br>信道容量为C 位/秒，则信道服务率为μC (帧/秒)</p><h4 id="1"><a href="#1" class="headerlink" title="1:"></a>1:</h4><p>并列服务台个数为1</p><h4 id="根据排队理论，可证明：单信道平均延迟时间（顾客在服务系统中的逗留时间）为："><a href="#根据排队理论，可证明：单信道平均延迟时间（顾客在服务系统中的逗留时间）为：" class="headerlink" title="根据排队理论，可证明：单信道平均延迟时间（顾客在服务系统中的逗留时间）为："></a>根据排队理论，可证明：单信道平均延迟时间（顾客在服务系统中的逗留时间）为：</h4><p>$$<br>T=\frac{1}{μC-λ}<br>$$</p><h4 id="信道N等分后每个子信道的平均延迟时间"><a href="#信道N等分后每个子信道的平均延迟时间" class="headerlink" title="信道N等分后每个子信道的平均延迟时间"></a>信道N等分后每个子信道的平均延迟时间</h4><p>$$<br>M —平均输入率： \frac{λ}{N}<br>$$</p><p>$$<br>M —平均服务率： \frac{μC}{N}<br>$$</p><p>$$<br>T_{FDM}=\frac{1}{μ(C/N)-(λ/N)}=\frac{N}{μC-λ}=NT<br>$$</p><h4 id="得证：信道N等分后每个子信道的平均延迟时间增大N倍"><a href="#得证：信道N等分后每个子信道的平均延迟时间增大N倍" class="headerlink" title="得证：信道N等分后每个子信道的平均延迟时间增大N倍"></a>得证：信道N等分后每个子信道的平均延迟时间增大N倍</h4><h3 id="适用范围："><a href="#适用范围：" class="headerlink" title="适用范围："></a>适用范围：</h3><ul><li>用户量少，用户数目固定</li><li>通信量大且流量稳定</li><li>不适用于突发性业务的情况</li></ul><hr><h2 id="动态分配"><a href="#动态分配" class="headerlink" title="动态分配"></a>动态分配</h2><h4 id="通过多路访问协议，动态分配信道资源，可以提高信道利用率"><a href="#通过多路访问协议，动态分配信道资源，可以提高信道利用率" class="headerlink" title="通过多路访问协议，动态分配信道资源，可以提高信道利用率"></a>通过多路访问协议，动态分配信道资源，可以提高信道利用率</h4><h4 id="多路访问协议分为两大类"><a href="#多路访问协议分为两大类" class="headerlink" title="多路访问协议分为两大类"></a>多路访问协议分为两大类</h4><ul><li>随机访问协议</li><li>受控访问协议</li></ul><h3 id="随机访问协议"><a href="#随机访问协议" class="headerlink" title="随机访问协议"></a>随机访问协议</h3><p>站点/用户争用信道，可能会出现站点之间的冲突</p><h4 id="典型的随机访问协议"><a href="#典型的随机访问协议" class="headerlink" title="典型的随机访问协议"></a>典型的随机访问协议</h4><ul><li>ALOHA协议</li><li>CSMA协议</li><li>CSMA/CD协议（以太网采用此协议）</li></ul><h3 id="受控访问协议（Controlled-Access）"><a href="#受控访问协议（Controlled-Access）" class="headerlink" title="受控访问协议（Controlled Access）"></a>受控访问协议（Controlled Access）</h3><h4 id="特点：站点明确被分配占用信道，不会产生冲突"><a href="#特点：站点明确被分配占用信道，不会产生冲突" class="headerlink" title="特点：站点明确被分配占用信道，不会产生冲突"></a>特点：站点明确被分配占用信道，不会产生冲突</h4><hr><h1 id="ALOHA协议"><a href="#ALOHA协议" class="headerlink" title="ALOHA协议"></a>ALOHA协议</h1><p>上世纪七十年代诞生于夏威夷大学的<strong>随机访问协议</strong>，为了解决夏威夷群岛与檀香山之间的无线网络通信问题。无线信道是典型的<strong>广播/共享信道</strong></p><h4 id="ALOHA协议有两个版本："><a href="#ALOHA协议有两个版本：" class="headerlink" title="ALOHA协议有两个版本："></a>ALOHA协议有两个版本：</h4><ul><li>纯ALOHA协议</li><li>分隙ALOHA协议(隙是时隙，时槽的意思)</li></ul><h2 id="纯ALOHA协议"><a href="#纯ALOHA协议" class="headerlink" title="纯ALOHA协议"></a>纯ALOHA协议</h2><h3 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h3><ul><li>任何一个信道都可以在帧生成后立刻发送帧（可能发生冲突，且不关心信道是否已经被占用），通过信号的反馈，检测信道，确定是否发送成功</li><li>两个以上站点都在发送数据时就会发生冲突</li><li>对于发送失败的帧，在随机延时后，继续重新发送</li></ul><p><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/ALOHA%E5%8E%9F%E7%90%86.jpg" alt="ALOHA原理"></p><h2 id="重要概念"><a href="#重要概念" class="headerlink" title="重要概念"></a>重要概念</h2><h3 id="吞吐率-Throughout-S"><a href="#吞吐率-Throughout-S" class="headerlink" title="吞吐率(Throughout) S"></a>吞吐率(Throughout) S</h3><p>在发送时间T(一个帧时)内，发送成功的平均帧数<br/><br>显然：0&lt;S&lt;1 <br/><br>S = 1时分组一个接一个地发送出去，帧之间没有空隙。一<br>般用S接近于1的程度来衡量信道的利用率</p><h3 id="运载负载-Carried-load-G-又称网络负载"><a href="#运载负载-Carried-load-G-又称网络负载" class="headerlink" title="运载负载(Carried load) G 又称网络负载"></a>运载负载(Carried load) G 又称网络负载</h3><p>时间T内所有通信站总共发送的帧平均值(包括原发和重发的分组)。</p><p>显然G&gt;=S，当G=S时表示无冲突发生，G&gt;S时，表示存在冲突，当G&gt;1时，表示冲突频繁</p><h3 id="p0"><a href="#p0" class="headerlink" title="p0"></a>p0</h3><p>一帧发送成功(即未发生冲突)的概率。即发送成功的分<br>组在已发送分组的总数中所占的比例。</p><h4 id="三者之间存在关系："><a href="#三者之间存在关系：" class="headerlink" title="三者之间存在关系："></a>三者之间存在关系：</h4><p>$$<br>S=G*P_0<br>$$</p><h3 id="冲突危险期"><a href="#冲突危险期" class="headerlink" title="冲突危险期"></a>冲突危险期</h3><p>发送的帧容易根其他帧发生冲突的时间</p><h4 id="在纯ALOHA协议中冲突危险期是２T"><a href="#在纯ALOHA协议中冲突危险期是２T" class="headerlink" title="在纯ALOHA协议中冲突危险期是２T"></a>在纯ALOHA协议中冲突危险期是２T</h4><h4 id="在2T内生成帧的均值是2G"><a href="#在2T内生成帧的均值是2G" class="headerlink" title="在2T内生成帧的均值是2G"></a>在2T内生成帧的均值是2G</h4><h4 id="生成k帧的概率服从泊松分布"><a href="#生成k帧的概率服从泊松分布" class="headerlink" title="生成k帧的概率服从泊松分布"></a>生成k帧的概率服从泊松分布</h4><p>$$<br>P_r[k]=\frac{G^ke^{-G}}{k!}<br>$$</p><h4 id="所以生成0帧的概率就是"><a href="#所以生成0帧的概率就是" class="headerlink" title="所以生成0帧的概率就是"></a>所以生成0帧的概率就是</h4><p>$$<br>P_r[0]=\frac{G^0e^{-G}}{0!}=e^{-G}<br>$$</p><h4 id="在冲突危险期内发送成功的概率就是在2T内都不产生新帧的概率，所以"><a href="#在冲突危险期内发送成功的概率就是在2T内都不产生新帧的概率，所以" class="headerlink" title="在冲突危险期内发送成功的概率就是在2T内都不产生新帧的概率，所以"></a>在冲突危险期内发送成功的概率就是在2T内都不产生新帧的概率，所以</h4><p>$$<br>P_0=P_r[0]*P_r[0]=e^{-2G}<br>$$</p><h4 id="带入纯ALOHA协议中"><a href="#带入纯ALOHA协议中" class="headerlink" title="带入纯ALOHA协议中"></a>带入纯ALOHA协议中</h4><p>$$<br>S=G<em>P_0=G</em>e^{-2G}<br>$$</p><h4 id="两边求导-求极值"><a href="#两边求导-求极值" class="headerlink" title="两边求导,求极值"></a>两边求导,求极值</h4><p>$$<br>S^{‘}=e^{-2G}-2G*e^{-2G}=0<br>$$</p><h4 id="当G-0-5时，S取得极大值≈0-184，即纯ALOHA协议信道利用率最大可达到18-4"><a href="#当G-0-5时，S取得极大值≈0-184，即纯ALOHA协议信道利用率最大可达到18-4" class="headerlink" title="当G=0.5时，S取得极大值≈0.184，即纯ALOHA协议信道利用率最大可达到18.4%"></a>当G=0.5时，S取得极大值≈0.184，即纯ALOHA协议信道利用率最大可达到18.4%</h4><h2 id="分隙-分槽-ALOHA协议"><a href="#分隙-分槽-ALOHA协议" class="headerlink" title="分隙(分槽)ALOHA协议"></a>分隙(分槽)ALOHA协议</h2><h3 id="协议原理"><a href="#协议原理" class="headerlink" title="协议原理"></a>协议原理</h3><p>把时间分成时间片(时隙)，时隙长度=1帧时T</p><p>新帧的产生仍然是随机的，但不再允许随机发送</p><p>每一个发送帧想要发送必须<strong>等待</strong>时槽的起点，等到时槽起点到来才可以发送，所以<strong>冲突只可能发生在时槽的起点</strong>，<strong>冲突危险期缩短为T</strong></p><p>一旦某个站占用时隙并且发送成功，则在这个时隙内就不会发生冲突（因为其他帧在这段时间内不能发送）</p><p><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/%E5%88%86%E6%A7%BDALOHA%E5%8D%8F%E8%AE%AE.jpg" alt="分槽ALOHA协议"></p><h4 id="显而易见，由于冲突时间减小，所以P0发生变化，性能随之提高"><a href="#显而易见，由于冲突时间减小，所以P0发生变化，性能随之提高" class="headerlink" title="显而易见，由于冲突时间减小，所以P0发生变化，性能随之提高"></a>显而易见，由于冲突时间减小，所以P0发生变化，性能随之提高</h4><p>$$<br>P_0=P_r[0]=e^{-G}<br>$$<br>$$<br>S=G<em>P_0=G</em>e^{-G}<br>$$<br>$$<br>S^{‘}=e^{-G}-G*e^{-G}=0<br>$$</p><h4 id="解得极值位于1处，此时S约等于0-368，也就是说信道利用率最大为36-8-。较纯ALOHA协议提升了一倍"><a href="#解得极值位于1处，此时S约等于0-368，也就是说信道利用率最大为36-8-。较纯ALOHA协议提升了一倍" class="headerlink" title="解得极值位于1处，此时S约等于0.368，也就是说信道利用率最大为36.8%。较纯ALOHA协议提升了一倍"></a>解得极值位于1处，此时S约等于0.368，也就是说信道利用率最大为36.8%。较纯ALOHA协议提升了一倍</h4><p><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/%E4%BF%A1%E9%81%93%E5%88%A9%E7%94%A8%E7%8E%87.jpg" alt="信道利用率"></p><hr><h1 id="载波侦听多路访问协议-CSMA"><a href="#载波侦听多路访问协议-CSMA" class="headerlink" title="载波侦听多路访问协议(CSMA)"></a>载波侦听多路访问协议(CSMA)</h1><p>属于改进的ALOHA协议，特点是“<strong>先听后发</strong>”</p><h3 id="CSMA分为两大类"><a href="#CSMA分为两大类" class="headerlink" title="CSMA分为两大类"></a>CSMA分为两大类</h3><ul><li>非持续式</li><li>持续式（又分为<strong>1-持续CSMA</strong>和<strong>P-持续式CSMA</strong>）</li></ul><h2 id="非持续式-载波侦听多路访问协议"><a href="#非持续式-载波侦听多路访问协议" class="headerlink" title="非持续式-载波侦听多路访问协议"></a>非持续式-载波侦听多路访问协议</h2><h4 id="特点："><a href="#特点：" class="headerlink" title="特点："></a>特点：</h4><ol><li>经侦听，如果介质空闲，就开始发送</li><li>如果介质忙，则等待一段随机事件</li><li>随机事件结束后，继续重复步骤1</li></ol><p><strong>等待一个随机时间，可以减少站点之间发生冲突的可能性，但在等待这段时间，可能整条信道是空闲的，这就会导致信道浪费</strong></p><h2 id="持续式-载波侦听多路访问协议"><a href="#持续式-载波侦听多路访问协议" class="headerlink" title="持续式-载波侦听多路访问协议"></a>持续式-载波侦听多路访问协议</h2><h3 id="1-持续式CSMA"><a href="#1-持续式CSMA" class="headerlink" title="1-持续式CSMA"></a>1-持续式CSMA</h3><ol><li>经侦听，如果介质空闲，就开始发送</li><li>如果介质忙，就开始持续侦听，直到介质空闲</li><li>如果发生冲突，就等待一个随机时间，然后重复步骤１</li></ol><h4 id="显然，持续式的随机时间要少于非持续式的随机时间"><a href="#显然，持续式的随机时间要少于非持续式的随机时间" class="headerlink" title="显然，持续式的随机时间要少于非持续式的随机时间"></a>显然，持续式的随机时间要少于非持续式的随机时间</h4><h4 id="存在问题："><a href="#存在问题：" class="headerlink" title="存在问题："></a>存在问题：</h4><p>一旦一条信道上有两个及以上站点在持续侦听，那么一旦介质空闲下来，多个站点同时争用信道，必然发生冲突</p><h3 id="P-持续式CSMA"><a href="#P-持续式CSMA" class="headerlink" title="P-持续式CSMA"></a>P-持续式CSMA</h3><ol><li>经侦听，如果介质空闲，以P概率发送，以1-P概率延迟一个时间单元</li><li>如介质忙，持续侦听，介质一旦空闲，重复步骤1</li><li>如果已经延迟一个时间单元，就再次重复步骤1</li></ol><p><strong>1-持续式是P-持续式的特例，当概率P为1时，二者相同</strong></p><h2 id="CSMA工作方式如果侦听到介质上没有报文发送，则帧发送后，仍然会发生冲突"><a href="#CSMA工作方式如果侦听到介质上没有报文发送，则帧发送后，仍然会发生冲突" class="headerlink" title="CSMA工作方式如果侦听到介质上没有报文发送，则帧发送后，仍然会发生冲突"></a>CSMA工作方式如果侦听到介质上没有报文发送，则帧发送后，仍然会发生冲突</h2><h4 id="冲突原因"><a href="#冲突原因" class="headerlink" title="冲突原因"></a>冲突原因</h4><ul><li>同时传送：两个都在持续侦听的站点在空闲时同时发送帧导致冲突</li><li>传播延迟时间</li></ul><h4 id="传播延迟时间"><a href="#传播延迟时间" class="headerlink" title="传播延迟时间"></a>传播延迟时间</h4><p>信号在介质上的传播速度只有在自由空间的65%左右，一般近似为：200m/μs。由于传播延迟时间的存在，某个<strong>站发出报文后仍会遇到冲突</strong></p><p><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/%E4%BC%A0%E6%92%AD%E5%BB%B6%E8%BF%9F.jpg" alt="传播延迟"></p><h3 id="冲突窗口"><a href="#冲突窗口" class="headerlink" title="冲突窗口"></a>冲突窗口</h3><p>发生冲突时间的上限，即发送站发出帧后能检测到碰撞的最长时间，数值上等于最远两站传播时间的两倍，即2t</p><h4 id="信号在物理信道上的传播速度v-一般近似为："><a href="#信号在物理信道上的传播速度v-一般近似为：" class="headerlink" title="信号在物理信道上的传播速度v 一般近似为："></a>信号在物理信道上的传播速度v 一般近似为：</h4><p>（v=200m/μs,网卡延时=$t_{PHY}$,最远距离S,t=S/v）</p><p>$$<br>Slow time=2t+2t_{PHY}<br>$$<br>如果考虑网段上有N个中继器，每个中继器延迟时间为 $t_{中继器}$，则可得下式：<br>$$<br>Slow time=2*(t+t_{PHY}+N*t_{中继器})<br>$$</p><h2 id="CSMA-CD-采用1-持续"><a href="#CSMA-CD-采用1-持续" class="headerlink" title="CSMA/CD(采用1-持续)"></a>CSMA/CD(采用1-持续)</h2><h3 id="（带冲突检测的载波侦听多路访问协议）"><a href="#（带冲突检测的载波侦听多路访问协议）" class="headerlink" title="（带冲突检测的载波侦听多路访问协议）"></a>（带冲突检测的载波侦听多路访问协议）</h3><h3 id="工作原理：“先听后发，边听边发”"><a href="#工作原理：“先听后发，边听边发”" class="headerlink" title="工作原理：“先听后发，边听边发”"></a>工作原理：“先听后发，边听边发”</h3><h3 id="特点：-1"><a href="#特点：-1" class="headerlink" title="特点："></a>特点：</h3><ul><li>经侦听，如果介质空闲，则发送当前帧</li><li>如介质忙，持续侦听，一旦空闲立即发送。</li><li>如果发生冲突，等待一个随机分布的时间再重复步骤1</li><li>不同于其他CSMA协议，该协议<strong>在帧发出后，仍持续监视</strong>该帧情况，一旦收到的信号与发出的不一致，就说明发生了冲突</li><li>发送站感知冲突后立即停止帧的发送，并且发一个简短的<strong>堵塞信号</strong> (称强化冲突信号，Jammingsignal)，通知网上各站已经发生冲突，<strong>本站及网上所有站都等待一段随机分布的时间</strong>，然后再按CSMA/CD方式重发该帧。</li></ul><h3 id="随着P变化P-持续式CSMA吞吐量变化"><a href="#随着P变化P-持续式CSMA吞吐量变化" class="headerlink" title="随着P变化P-持续式CSMA吞吐量变化"></a>随着P变化P-持续式CSMA吞吐量变化</h3><p><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/P%E9%9A%8F%E6%97%B6%E9%97%B4%E5%8F%98%E5%8C%96.jpg" alt="P随时间变化"></p><p>不难发现P越小，吞吐量越大，传输效率越高。这是由于发送出的帧发生冲突的可能性降低了，但同样的，P变小牺牲了等待时间，一个帧发送所经历的等待时间变长</p><h2 id="冲突检测方法"><a href="#冲突检测方法" class="headerlink" title="冲突检测方法"></a>冲突检测方法</h2><p>比较发送信号（A→B）与回复信号（A⬅B）的能量或脉冲<br>宽度变化<br/></p><p><strong>最大冲突检测时间（冲突窗口）</strong>：两个最远距离站点间的传输时间为t，则网络的最大冲突检测时间为2t</p><h2 id="冲突检测的要求"><a href="#冲突检测的要求" class="headerlink" title="冲突检测的要求"></a>冲突检测的要求</h2><ol><li>时隙宽度 = 最大冲突检测时间（保证在一个时隙内能够检测到最远距离发生的冲突）</li></ol><ol start="2"><li>发送有效帧的时间 &gt;= 最大冲突检测时间（防止因在发生冲突时已完成短帧发送而造成的异常情况）</li></ol><hr><h1 id="以太网概述"><a href="#以太网概述" class="headerlink" title="以太网概述"></a>以太网概述</h1><h2 id="以太网发展史"><a href="#以太网发展史" class="headerlink" title="以太网发展史"></a>以太网发展史</h2><ul><li>1973 Robert Metcalfe及其同事设计了以太网雏形（施乐公司）</li><li>1980 DIX发布最早的以太网标准，开放标准</li><li>1985 IEEE802.3对以太网作了小的修改，基本一致，兼容</li><li>1995 IEEE宣布了100Mbps以太网标准</li><li>1998 吉比特以太网标准（1000M） 1999</li><li>2002 IEEE通过了10Gbps以太网标准</li></ul><h3 id="以太网分为"><a href="#以太网分为" class="headerlink" title="以太网分为"></a>以太网分为</h3><ul><li>经典以太网（3M~10Mbps，不再使用）</li><li>交换式以太网（10M，100M，1G，广泛使用）</li></ul><h3 id="IEEE以太网命名规则"><a href="#IEEE以太网命名规则" class="headerlink" title="IEEE以太网命名规则"></a>IEEE以太网命名规则</h3><h4 id="10Base2：（IEEE-802-3a）"><a href="#10Base2：（IEEE-802-3a）" class="headerlink" title="10Base2：（IEEE 802.3a）"></a>10Base2：（IEEE 802.3a）</h4><p><strong>10</strong>：表示10Mbps<br/><br><strong>Base</strong>：表示以太网采用线路编码这种基带传输的方式<br/><br><strong>2</strong>：表示传输距离，单位是百米（四舍五入）<br/></p><h4 id="10Base-TX（IEEE-802-3X）"><a href="#10Base-TX（IEEE-802-3X）" class="headerlink" title="10Base-TX（IEEE 802.3X）"></a>10Base-TX（IEEE 802.3X）</h4><p>-T：表示铜制非屏蔽双绞线<br/><br>-F：表示光缆</p><table><thead><tr><th>名称</th><th>电缆</th><th>最大区间/长度</th><th>节点数/段</th><th>优点</th><th>接口</th></tr></thead><tbody><tr><td>10Base5</td><td>粗缆(采用总线拓扑)</td><td>500m</td><td>100</td><td>用于主干</td><td>AUI</td></tr><tr><td>10Base2</td><td>细缆(采用总线拓扑)</td><td>200m(185)</td><td>30</td><td>廉价</td><td>BNC</td></tr><tr><td>10Base-T</td><td>双绞线(采用星型拓扑)</td><td>100m</td><td>1024</td><td>易于维护</td><td>RJ-45</td></tr><tr><td>10Base-F</td><td>光纤</td><td>2km</td><td>1024</td><td>用于楼间</td><td>ST</td></tr></tbody></table><h3 id="10Base-T拓扑结构"><a href="#10Base-T拓扑结构" class="headerlink" title="10Base-T拓扑结构"></a>10Base-T拓扑结构</h3><p><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/10Base-T%E6%8B%93%E6%89%91%E7%BB%93%E6%9E%84.jpg" alt="10Base-T拓扑结构"></p><ul><li>物理连接是星型/扩展星型结构</li><li>逻辑上是总线结构（站点争用总线）</li></ul><h3 id="10Base-T相较于10Base2和10Base5的优点"><a href="#10Base-T相较于10Base2和10Base5的优点" class="headerlink" title="10Base-T相较于10Base2和10Base5的优点"></a>10Base-T相较于10Base2和10Base5的优点</h3><ol><li>安装成本大大降低</li><li>即插即用，组网灵活，增删方便（采用了RJ-45）</li><li>采用星型结构，故障便于隔离</li><li>适合大批量制造</li><li>具有开放式标准的互操作能力 </li></ol><h3 id="问题："><a href="#问题：" class="headerlink" title="问题："></a>问题：</h3><p>多个用户共享一条10M速率的信道</p><h4 id="10Base-T以太网采用曼彻斯特编码"><a href="#10Base-T以太网采用曼彻斯特编码" class="headerlink" title="10Base-T以太网采用曼彻斯特编码"></a>10Base-T以太网采用曼彻斯特编码</h4><ul><li>1：高电压到低电压</li><li>0：低电压到高电压</li><li>电压值：<br/></li></ul><p>+0.85 volt: high signal<br/><br>-0.85 volt: low signal<br/><br>0 volt: DC value</p><p><strong>所以要求比特率达到b = 10 Mbps</strong><br/><br><strong>就需要波特率B = 20 MHz（信号的变化频率）</strong></p><h4 id="IEEE802-3协议描述了运行在各种介质上1-Mb-s-10-Mb-s的1-持续CSMA-CD协议的局域网标准。"><a href="#IEEE802-3协议描述了运行在各种介质上1-Mb-s-10-Mb-s的1-持续CSMA-CD协议的局域网标准。" class="headerlink" title="IEEE802.3协议描述了运行在各种介质上1 Mb/s~10 Mb/s的1-持续CSMA/CD协议的局域网标准。"></a>IEEE802.3协议描述了运行在各种介质上1 Mb/s~10 Mb/s的1-持续CSMA/CD协议的局域网标准。</h4><h4 id="很多人对以太网和IEEE802-3不加区分，但二者确有差别（如帧格式）。"><a href="#很多人对以太网和IEEE802-3不加区分，但二者确有差别（如帧格式）。" class="headerlink" title="很多人对以太网和IEEE802.3不加区分，但二者确有差别（如帧格式）。"></a>很多人对以太网和IEEE802.3不加区分，但二者确有差别（如帧格式）。</h4><p><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B.jpg" alt="工作流程"></p><h3 id="以太网采用介质访问控制技术（CSMA-CD）"><a href="#以太网采用介质访问控制技术（CSMA-CD）" class="headerlink" title="以太网采用介质访问控制技术（CSMA/CD）"></a>以太网采用介质访问控制技术（CSMA/CD）</h3><p>CSMA/CD协议遵守先听后发，边发边听的原则，并且在发生冲突后返回等待一段随机时间，这段随机时间的确定，利用到了“<strong>二进制指数回退算法</strong>”</p><h4 id="二进制指数回退算法"><a href="#二进制指数回退算法" class="headerlink" title="二进制指数回退算法"></a>二进制指数回退算法</h4><ol><li>冲突检测到后，时间被分散成离散的时隙</li><li>时隙长度等于信号在介质上来回传输的时间，在以太网中一般是51.2μs</li><li>一般地，第i次冲突后，随机时间可从以下事件中选择</li></ol><p>$$<br>(0~2^i-1)*51.2μs<br>$$<br>当冲突超过16次，一般直接放弃发送</p><h2 id="提高负载方法"><a href="#提高负载方法" class="headerlink" title="提高负载方法"></a>提高负载方法</h2><p>10Base以太网逐渐不能满足人的需求，所以需要考虑如何提升负载</p><ul><li>提速到100M</li><li>采用全双工代替半双工，提速1倍</li><li>采用交换式网络，用交换机取代集线器</li></ul><h3 id="快速以太网（100M以太网）"><a href="#快速以太网（100M以太网）" class="headerlink" title="快速以太网（100M以太网）"></a>快速以太网（100M以太网）</h3><h4 id="标准：IEEE802-3u"><a href="#标准：IEEE802-3u" class="headerlink" title="标准：IEEE802.3u"></a>标准：IEEE802.3u</h4><p>属于改进的10M以太网</p><h4 id="要求：与10M以太网兼容"><a href="#要求：与10M以太网兼容" class="headerlink" title="要求：与10M以太网兼容"></a>要求：与10M以太网兼容</h4><h4 id="基本思想："><a href="#基本思想：" class="headerlink" title="基本思想："></a>基本思想：</h4><p>保留原有帧格式，接口和过程规则，<strong>将比特时间(发送1比特所需时间)由100ns降至10ns</strong>，电缆长度也由2500m降低至250m</p><h4 id="编码方式也发生了改变，由曼彻斯特编码变为4B-5B编码方式"><a href="#编码方式也发生了改变，由曼彻斯特编码变为4B-5B编码方式" class="headerlink" title="编码方式也发生了改变，由曼彻斯特编码变为4B/5B编码方式"></a>编码方式也发生了改变，由曼彻斯特编码变为4B/5B编码方式</h4><p><strong>4B/5B编码表</strong><br><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/%E7%BC%96%E7%A0%81%E8%A1%A8.jpg" alt="编码表"></p><p>优点：</p><ul><li>效率高</li><li>易于实现</li><li>容易电压平衡</li></ul><h3 id="千兆位以太网（吉比特以太网，GE）"><a href="#千兆位以太网（吉比特以太网，GE）" class="headerlink" title="千兆位以太网（吉比特以太网，GE）"></a>千兆位以太网（吉比特以太网，GE）</h3><h4 id="标准：IEEE802-3z"><a href="#标准：IEEE802-3z" class="headerlink" title="标准：IEEE802.3z"></a>标准：IEEE802.3z</h4><p>与现有的10M/100M以太网完美兼容</p><h4 id="主要工作在全双工模式，工作在半双工模式下时，需要使用CSMA-CD技术，可能带来传输距离过短的问题（适用帧串-帧扩充方法来解决）"><a href="#主要工作在全双工模式，工作在半双工模式下时，需要使用CSMA-CD技术，可能带来传输距离过短的问题（适用帧串-帧扩充方法来解决）" class="headerlink" title="主要工作在全双工模式，工作在半双工模式下时，需要使用CSMA/CD技术，可能带来传输距离过短的问题（适用帧串/帧扩充方法来解决）"></a>主要工作在全双工模式，工作在半双工模式下时，需要使用CSMA/CD技术，可能带来传输距离过短的问题（适用帧串/帧扩充方法来解决）</h4><h3 id="FDDI，ATM等技术失败原因"><a href="#FDDI，ATM等技术失败原因" class="headerlink" title="FDDI，ATM等技术失败原因"></a>FDDI，ATM等技术失败原因</h3><ul><li>太复杂，很难到桌面</li><li>部署复杂，成本高昂，交换机端口少</li><li>受快速以太网的冲击</li></ul><h3 id="以太网优点"><a href="#以太网优点" class="headerlink" title="以太网优点"></a>以太网优点</h3><ol><li>简易性和灵活性</li><li>易于维护</li><li>支持TCP/IP协议，容易互联</li><li>善于借鉴（4B/5B…）</li></ol><h1 id="以太网帧格式"><a href="#以太网帧格式" class="headerlink" title="以太网帧格式"></a>以太网帧格式</h1><p><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/%E5%AF%B9%E5%BA%94%E8%A7%84%E5%88%99.jpg" alt="对应规则"></p><h4 id="以太网和IEEE802-3之间并不是完全相同的，以太网对应OSI模型中的下两层（物理层数据链路层），而IEEE-802-3只对应于OSI模型中的下1-5层（物理层，逻辑链路控制子层）"><a href="#以太网和IEEE802-3之间并不是完全相同的，以太网对应OSI模型中的下两层（物理层数据链路层），而IEEE-802-3只对应于OSI模型中的下1-5层（物理层，逻辑链路控制子层）" class="headerlink" title="以太网和IEEE802.3之间并不是完全相同的，以太网对应OSI模型中的下两层（物理层数据链路层），而IEEE 802.3只对应于OSI模型中的下1.5层（物理层，逻辑链路控制子层）"></a>以太网和IEEE802.3之间并不是完全相同的，以太网对应OSI模型中的下两层（物理层数据链路层），而IEEE 802.3只对应于OSI模型中的下1.5层（物理层，逻辑链路控制子层）</h4><h4 id="二者的区别主要存在于帧格式上"><a href="#二者的区别主要存在于帧格式上" class="headerlink" title="二者的区别主要存在于帧格式上"></a>二者的区别主要存在于帧格式上</h4><h2 id="帧格式"><a href="#帧格式" class="headerlink" title="帧格式"></a>帧格式</h2><table><thead><tr><th>帧类型</th><th>前导码(先导码)</th><th><strong>帧起始字节</strong></th><th>目的地址</th><th>源地址</th><th><strong>长度/类型</strong></th><th>数据</th><th>校验和</th></tr></thead><tbody><tr><td>IEEE 802.3帧格式</td><td>62bit(1010…)</td><td><strong>2bit(11)</strong></td><td>6byte</td><td>6byte</td><td><strong>2byte(长度)</strong></td><td>46~1500byte</td><td>4byte-循环冗余校验</td></tr><tr><td>DIX以太网帧格式</td><td>62bit(1010…)</td><td><strong>2bit(10)</strong></td><td>6byte</td><td>6byte</td><td><strong>2byte(类型)</strong></td><td>46~1500byte</td><td>4byte-循环冗余校验</td></tr></tbody></table><h3 id="第一个字段—前导码-帧起始字段"><a href="#第一个字段—前导码-帧起始字段" class="headerlink" title="第一个字段—前导码+帧起始字段"></a>第一个字段—前导码+帧起始字段</h3><p>大小为8byte（前导码62bit，帧起始字段2bit）。帧起始字段用来表明一个帧的开始，在IEEE 802.3中这个字段是用11表示的，但在以太网中才用10表示</p><h3 id="第二，三个字段—目的地址，源地址"><a href="#第二，三个字段—目的地址，源地址" class="headerlink" title="第二，三个字段—目的地址，源地址"></a>第二，三个字段—目的地址，源地址</h3><p>每个字段6byte，48bit。表示的地址都是物理地址（MAC地址）</p><p><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/%E7%89%A9%E7%90%86%E5%9C%B0%E5%9D%80.jpg" alt="物理地址"></p><p>总共存在约$7*10^13$(七万亿个)，暂时不存在枯竭的风险</p><p>MAC地址表示形式=组织/机构ID（Manufacture ID 24bit）+NIC ID（自定义 24bit）</p><p>前后各24bit，由于都是用十六进制表示的，所以一个典型的物理地址表示如下：(三种格式均正确)</p><p>$$<br>00-60-8C-01-28-12<br>$$<br>$$<br>00:60:8C:01:28:12<br>$$<br>$$<br>00.60.8C.01.28.12<br>$$</p><p>其中前6位由IEEE分配表示的是一个企业或组织，例如：</p><ul><li>3Com 00-20-AF</li><li>IBM 08-00-5A</li><li>Cisco 00-00-0c</li></ul><p>后六位是由企业自行分配的</p><p>物理地址具有<strong>全球唯一性</strong>的特点，也就是说没有两台电脑可能具有相同的MAC地址，MAC地址烧录在ROM中，当计算机启动时，会从ROM拷贝到RAM中</p><h3 id="目的MAC地址定位目的机"><a href="#目的MAC地址定位目的机" class="headerlink" title="目的MAC地址定位目的机"></a>目的MAC地址定位目的机</h3><p><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/%E6%BA%90%E5%9C%B0%E5%9D%80.jpg" alt="源地址"></p><h4 id="为了维护MAC地址的全球唯一性IEEE-要求厂商遵守两条简单的规定："><a href="#为了维护MAC地址的全球唯一性IEEE-要求厂商遵守两条简单的规定：" class="headerlink" title="为了维护MAC地址的全球唯一性IEEE 要求厂商遵守两条简单的规定："></a>为了维护MAC地址的全球唯一性IEEE 要求厂商遵守两条简单的规定：</h4><ul><li>必须使用该供应商分配的OUI作为前3个字节</li><li>OUI相同的所有MAC地址的最后3个字节必须分配唯一的值</li></ul><h3 id="第四个字段—长度-类型字段"><a href="#第四个字段—长度-类型字段" class="headerlink" title="第四个字段—长度/类型字段"></a>第四个字段—长度/类型字段</h3><p>大小为2byte。</p><p>在IEEE 802.3中表示帧的长度字段（不包括前导码），长度最短不能小于64字节，最长不能超过1518各字节（由于以前内存十分昂贵，而帧中的数据要占用内存，如果过大对数据的要求会越高）</p><p>在DIX以太网协议中表示类型字段，由于以太网对应整个下两层直接与上层的网络层交流，所以第四字段用于存放网络层类型</p><h4 id="如何区分第四字段是类型还是长度？"><a href="#如何区分第四字段是类型还是长度？" class="headerlink" title="如何区分第四字段是类型还是长度？"></a>如何区分第四字段是类型还是长度？</h4><h4 id="如何区分当前帧是以太帧还是IEEE-802-3帧？"><a href="#如何区分当前帧是以太帧还是IEEE-802-3帧？" class="headerlink" title="(如何区分当前帧是以太帧还是IEEE 802.3帧？)"></a>(如何区分当前帧是以太帧还是IEEE 802.3帧？)</h4><h4 id="检查数值大小："><a href="#检查数值大小：" class="headerlink" title="检查数值大小："></a>检查数值大小：</h4><ul><li>小于等于1536(十六进制下&lt;=0x600)：表示长度字段（802.3帧）</li><li>大于1536(十六进制下&gt;0x600)：表示类型字段（以太帧）</li></ul><h3 id="第五个字段—数据字段"><a href="#第五个字段—数据字段" class="headerlink" title="第五个字段—数据字段"></a>第五个字段—数据字段</h3><p>长度最小为46字节（因为帧头，帧尾长度14字节，为保证帧的长度大于64字节，多以数据字段长度最少46字节）小于46字节就进行填充。</p><p>内含LLC层（逻辑链路子层）的数据</p><h3 id="第六个字段—校验字段"><a href="#第六个字段—校验字段" class="headerlink" title="第六个字段—校验字段"></a>第六个字段—校验字段</h3><p>大小4byte，32bit。</p><p>以太帧采用CRC循环冗余校验，校验的范围是目的/源地址，长度字段，LLC数据字段等</p><h2 id="为什么最小帧的长度是64byte"><a href="#为什么最小帧的长度是64byte" class="headerlink" title="为什么最小帧的长度是64byte"></a>为什么最小帧的长度是64byte</h2><p>以太网(802.3)采用CSMA/CD协议<br/><br>协议要求为保证正确检查是否发生冲突<br/></p><p>$$<br>最短帧的发送时间\ge争用时隙2t<br>$$<br>以太网规定，在10Mbps局域网中，时隙2t=51.2μs<br/><br>所以最短帧的长度：</p><p>$$<br>最短帧长度=\frac{10Mbps*51.2μs}{8}=64byte<br>$$</p><h1 id="二层交换的基本原理"><a href="#二层交换的基本原理" class="headerlink" title="二层交换的基本原理"></a>二层交换的基本原理</h1><h4 id="在不同的区域，地点，都存在着很多的LAN（局域网），我们将这些LAN连接起来就利用到了重要的“网桥”"><a href="#在不同的区域，地点，都存在着很多的LAN（局域网），我们将这些LAN连接起来就利用到了重要的“网桥”" class="headerlink" title="在不同的区域，地点，都存在着很多的LAN（局域网），我们将这些LAN连接起来就利用到了重要的“网桥”"></a>在不同的区域，地点，都存在着很多的LAN（局域网），我们将这些LAN连接起来就利用到了重要的“网桥”</h4><h4 id="网桥工作在DLL层（数据链路层），通过检查MAC地址做出转发帧的决策，因为工作在DLL层，所以不会检查网络层情况所以，IPv4-IPv6-AppleTalk-ATM-IPX-和OSI-分组均可穿越网桥。"><a href="#网桥工作在DLL层（数据链路层），通过检查MAC地址做出转发帧的决策，因为工作在DLL层，所以不会检查网络层情况所以，IPv4-IPv6-AppleTalk-ATM-IPX-和OSI-分组均可穿越网桥。" class="headerlink" title="网桥工作在DLL层（数据链路层），通过检查MAC地址做出转发帧的决策，因为工作在DLL层，所以不会检查网络层情况所以，IPv4, IPv6, AppleTalk, ATM, IPX, 和OSI 分组均可穿越网桥。"></a>网桥工作在DLL层（数据链路层），通过检查MAC地址做出转发帧的决策，因为工作在DLL层，所以不会检查网络层情况所以，IPv4, IPv6, AppleTalk, ATM, IPX, 和OSI 分组均可穿越网桥。</h4><p><strong>交换机是网桥的现代名称，二者之间不做区别</strong></p><h2 id="二层交换"><a href="#二层交换" class="headerlink" title="二层交换"></a>二层交换</h2><h4 id="通过网桥实现"><a href="#通过网桥实现" class="headerlink" title="通过网桥实现"></a>通过网桥实现</h4><p><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/%E7%BD%91%E6%A1%A5.jpg" alt="网桥"></p><p>网桥可以将两种不同格式的局域网相连接，例如802.11和802.3虽然是两个不同类型的LAN，仍然可以通过网桥连接起来，网桥会在内部处理两个LAN的区别，使之可以正常通信</p><ul><li>帧格式不同—进行重新封装</li><li>不同的数据传输速率—从快的LAN向慢的传递时进行缓存</li><li>不同的最大帧长度—进行切割 (例如， 802.3 1526 字节,802.11 2346 字节)</li><li>不同的安全策略，不同的服务质量信息—在传递过程中，如果以访不支持对应的安全策略或服务质量信息的话就会消去对应信息</li></ul><h2 id="透明的网桥（transparent-bridges）"><a href="#透明的网桥（transparent-bridges）" class="headerlink" title="透明的网桥（transparent bridges）"></a>透明的网桥（transparent bridges）</h2><ul><li>通过透明的网桥可以将多个LAN连接起来，同时硬件和软件<strong>不需要做任何形式的变化</strong>，所以称其为“透明”</li><li>透明网桥工作在<strong>混杂模式</strong>，接收<strong>所有</strong>与之相连的LAN的帧</li><li>当一个帧到达网桥，它必须要做出决策，<strong>丢弃还是转发</strong>，如果转发还要知道向哪个LAN转发</li><li>决策通过网桥内部的一张地址表实现，通过地址表确定丢弃还是转发</li></ul><h3 id="如何维护网桥内部的地址转发表"><a href="#如何维护网桥内部的地址转发表" class="headerlink" title="如何维护网桥内部的地址转发表"></a>如何维护网桥内部的地址转发表</h3><ul><li>初始时，这张转发表是空表</li><li>利用扩散算法（泛洪算法，flooding algorithm），当网桥不知道目的地址在何处时，将会把这个帧向传入LAN以外的所有LAN转发（<strong>广播</strong>）</li><li>逆向学习，网桥从到达帧的源地址认识到源地址对应的那台机是在帧来的那条LAN上，所以，把它写入MAC地址表（例如PC1发送一个帧从LAN1向PC6传递，到达网桥处时，网桥并不认识PC6，但它直到这个帧是从LAN1来的，并且这个帧的源地址是XX-XX-XX-XX-XX-XX，就会将这两个数据写入网桥的转发表中，再遇到要转发给XX-XX-XX-XX-XX-XX的帧，就只向LAN1转发）</li></ul><h3 id="网络的拓扑结构在不断变化，网桥如何适应这种变化"><a href="#网络的拓扑结构在不断变化，网桥如何适应这种变化" class="headerlink" title="网络的拓扑结构在不断变化，网桥如何适应这种变化"></a>网络的拓扑结构在不断变化，网桥如何适应这种变化</h3><ol><li>任何时候，在向网桥的转发表中写入数据的时候，都要同时打下时戳（表明数据在何时写入）</li><li>当一个到达的帧它的到达地址在表中已经有记录时，它会再次更新这个时戳</li><li>网桥周期性的扫描整张表，删去那些时戳已经过期的记录</li></ol><h4 id="这样保证了网桥的转发表中的数据一直都是最新且活跃的那些工作站的信息（如果一个工作站十分活跃的接收帧却从来不发送，那网桥中同样不会有它的信息）"><a href="#这样保证了网桥的转发表中的数据一直都是最新且活跃的那些工作站的信息（如果一个工作站十分活跃的接收帧却从来不发送，那网桥中同样不会有它的信息）" class="headerlink" title="这样保证了网桥的转发表中的数据一直都是最新且活跃的那些工作站的信息（如果一个工作站十分活跃的接收帧却从来不发送，那网桥中同样不会有它的信息）"></a>这样保证了网桥的转发表中的数据一直都是最新且活跃的那些工作站的信息（如果一个工作站十分活跃的接收帧却从来不发送，那网桥中同样不会有它的信息）</h4><h3 id="网桥工作原理"><a href="#网桥工作原理" class="headerlink" title="网桥工作原理"></a>网桥工作原理</h3><h4 id="当一个帧到达网桥时，网桥启动如下算法："><a href="#当一个帧到达网桥时，网桥启动如下算法：" class="headerlink" title="当一个帧到达网桥时，网桥启动如下算法："></a>当一个帧到达网桥时，网桥启动如下算法：</h4><ol><li>如果源LAN和目的LAN相同，则丢弃该帧（filtering，过滤或丢弃）</li><li>如果源LAN和目的LAN不同，则转发该帧（forwarding）</li><li>如果目的LAN不存在于转发表中，则广播该帧（flooding，泛洪广播）</li></ol><h4 id="每当帧到达，上述算法都将被执行一遍"><a href="#每当帧到达，上述算法都将被执行一遍" class="headerlink" title="每当帧到达，上述算法都将被执行一遍"></a>每当帧到达，上述算法都将被执行一遍</h4><h4 id="有些专用的-VLSI芯片可以在几微秒内完成查找和更新表项的动作"><a href="#有些专用的-VLSI芯片可以在几微秒内完成查找和更新表项的动作" class="headerlink" title="有些专用的 VLSI芯片可以在几微秒内完成查找和更新表项的动作"></a>有些专用的 VLSI芯片可以在几微秒内完成查找和更新表项的动作</h4><h3 id="网桥工作示例："><a href="#网桥工作示例：" class="headerlink" title="网桥工作示例："></a>网桥工作示例：</h3><p>初始时，整个结构状态：<br><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/%E5%88%9D%E5%A7%8B%E6%97%B6.jpg" alt="初始时"></p><p>此时两个网桥的转发表都是初始状态为空：</p><p>网桥1<br>MAC | Port<br>—|—<br> |<br>网桥2<br>MAC | Port<br>—|—<br> | </p><p>现在，要从图上的源地址（AA-AA-AA-AA-AA-AA）向目的地址（BB-BB-BB-BB-BB-BB）发送数据帧，帧从源地址出发到达LAN1，然后到达网桥1，网桥1发现源地址与目的地址不同，并且目的地址信息未知，所以进行<strong>广播</strong>，然后网桥1进行逆向学习，它发现这个帧的源地址是（AA-AA-AA-AA-AA-AA），没有在转发表中，并且它是从LAN1所在的端口（<strong>这里记作A1端口</strong>）来的，<strong>所以将这个地址和端口写入到转发表中。</strong></p><h4 id="网桥1"><a href="#网桥1" class="headerlink" title="网桥1"></a>网桥1</h4><table><thead><tr><th>MAC</th><th>Port</th></tr></thead><tbody><tr><td>AA-AA-AA-AA-AA-AA</td><td>A1</td></tr><tr><td>非目的地址收到帧后都选择<strong>忽略</strong>，当帧到达网桥2时，进行同样算法继续广播，同时进行逆向学习（将网桥1所在端口记作B1）将数据写入转发表中</td><td></td></tr></tbody></table><h4 id="网桥2"><a href="#网桥2" class="headerlink" title="网桥2"></a>网桥2</h4><table><thead><tr><th>MAC</th><th>Port</th></tr></thead><tbody><tr><td>AA-AA-AA-AA-AA-AA</td><td>B1</td></tr></tbody></table><p>最终数据帧成功从LAN4找到目的地址(BB-BB-BB-BB-BB-BB)<br><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/%E5%89%8D%E5%BE%80%E6%97%B6.jpg" alt="前往时"></p><p>这时，假设目的地址返回一个确认帧，数据从图上目的地址出发，通过LAN4到达网桥2，到达网桥2时，运行算法查找目的地址，发现此时目的地址就是原来的源地址（AA-AA-AA-AA-AA-AA），所以此时网桥2就会进行转发，而不再广播，只将这个帧转发给网桥1所在的B1端口。同时会进行逆向学习.</p><h4 id="网桥2-1"><a href="#网桥2-1" class="headerlink" title="网桥2"></a>网桥2</h4><table><thead><tr><th>MAC</th><th>Port</th></tr></thead><tbody><tr><td>AA-AA-AA-AA-AA-AA</td><td>B1</td></tr><tr><td>BB-BB-BB-BB-BB-BB</td><td>B2</td></tr></tbody></table><p>到达网桥1后同样的运行算法并且发现了AA-AA-AA-AA-AA-AA在准发表中对应的端口是LAN1所在的A1端口，所以它只对LAN1进行转发，并且进行逆向学习</p><h4 id="网桥1-1"><a href="#网桥1-1" class="headerlink" title="网桥1"></a>网桥1</h4><table><thead><tr><th>MAC</th><th>Port</th></tr></thead><tbody><tr><td>AA-AA-AA-AA-AA-AA</td><td>A1</td></tr><tr><td>BB-BB-BB-BB-BB-BB</td><td>A2</td></tr></tbody></table><p>最终成功在LAN1上找到了AA-AA-AA-AA-AA-AA</p><p><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/%E8%BF%94%E5%9B%9E%E6%97%B6.jpg" alt="返回时"></p><h4 id="有了网桥-交换机，各个LAN之间的通信可以互不影响，同时进行，这个过程也就分割了冲突域，提高了性能"><a href="#有了网桥-交换机，各个LAN之间的通信可以互不影响，同时进行，这个过程也就分割了冲突域，提高了性能" class="headerlink" title="有了网桥/交换机，各个LAN之间的通信可以互不影响，同时进行，这个过程也就分割了冲突域，提高了性能"></a>有了网桥/交换机，各个LAN之间的通信可以互不影响，同时进行，这个过程也就分割了冲突域，提高了性能</h4><h3 id="网桥与中继器比较"><a href="#网桥与中继器比较" class="headerlink" title="网桥与中继器比较"></a>网桥与中继器比较</h3><table><thead><tr><th>header 1</th><th>header 2</th></tr></thead><tbody><tr><td>row 1 col 1</td><td>row 1 col 2</td></tr><tr><td>row 2 col 1</td><td>row 2 col 2</td></tr></tbody></table><table><thead><tr><th>功能</th><th>网桥</th><th>中继器</th></tr></thead><tbody><tr><td>再生信号</td><td>Yes</td><td>Yes</td></tr><tr><td>连接采用不同MAC协议的网段</td><td>Yes</td><td>No</td></tr><tr><td>隔离冲突域</td><td>Yes</td><td>No</td></tr><tr><td>根据帧头的物理地址转发帧</td><td>Yes</td><td>No</td></tr><tr><td>丢弃损坏帧</td><td>Yes</td><td>No</td></tr></tbody></table><hr><h1 id="生成树协议（STP）"><a href="#生成树协议（STP）" class="headerlink" title="生成树协议（STP）"></a>生成树协议（STP）</h1><h4 id="（Spanning-Tree-Protocol）"><a href="#（Spanning-Tree-Protocol）" class="headerlink" title="（Spanning Tree Protocol）"></a>（Spanning Tree Protocol）</h4><p>为了数据传输的可靠性，我们经常采用冗余结构来搭建网桥，即一个LAN可能连着多个网桥，如下图所示，但这样同样带来了一些问题</p><p><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/%E5%86%97%E4%BD%99%E7%BB%93%E6%9E%84.jpg" alt="冗余结构"></p><h2 id="冗余结构导致了环结构的产生"><a href="#冗余结构导致了环结构的产生" class="headerlink" title="冗余结构导致了环结构的产生"></a>冗余结构导致了环结构的产生</h2><h3 id="问题1：多帧传送"><a href="#问题1：多帧传送" class="headerlink" title="问题1：多帧传送"></a>问题1：多帧传送</h3><p>例如PC1向PC3传输数据，从LAN1上可以直接到达，从LAN1到网桥1再到LAN2再到网桥2最后到PC3也可以到达，这就导致了会有多个相同的帧（或帧的副本）传送到PC3，造成多帧传送问题</p><h3 id="问题2：广播风暴"><a href="#问题2：广播风暴" class="headerlink" title="问题2：广播风暴"></a>问题2：广播风暴</h3><p>在局域网中经常会发送广播，例如PC1向PC2发送帧，帧到达网桥1进行广播到达网桥2，到达网桥2后，进行广播又可以回到网桥1，如此循环往复就会形成广播风暴。严重情况下可使网络彻底瘫痪</p><h3 id="MAC地址库不稳定"><a href="#MAC地址库不稳定" class="headerlink" title="MAC地址库不稳定"></a>MAC地址库不稳定</h3><p>PC1发出帧（MAC地址为A），A从LAN1通过端口port1到达网桥1，将这组信息（A，port1）写入转发表中。</p><p>同样的，A还能通过port2端口到达网桥2。在经过循环从LAN2到达网桥1的port3，所以更新这组数据为（A，port3）.导致交换机的逆向学习不断发生改变</p><p>导致帧的转发方向具有不确定性</p><hr><h2 id="解决方案：生成树协议"><a href="#解决方案：生成树协议" class="headerlink" title="解决方案：生成树协议"></a>解决方案：生成树协议</h2><p>Radia perlman提出了生成树算法，利用生成树的定义产生一棵无环的树</p><h4 id="IEEE将这个协议标准化为IEEE-802-1D-即STP"><a href="#IEEE将这个协议标准化为IEEE-802-1D-即STP" class="headerlink" title="IEEE将这个协议标准化为IEEE 802.1D,即STP"></a>IEEE将这个协议标准化为IEEE 802.1D,即STP</h4><h3 id="STP运作方式："><a href="#STP运作方式：" class="headerlink" title="STP运作方式："></a>STP运作方式：</h3><ul><li>每个网络一个根网桥</li><li>每个网桥一个根端口</li><li>每网段一个指定端口</li><li>非指定端口不被使用</li></ul><p><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/STP.jpg" alt="STP"></p><h4 id="生成树算法生成一棵逻辑上无回路的树，即生成树，但不能保证这棵生成树是最优的"><a href="#生成树算法生成一棵逻辑上无回路的树，即生成树，但不能保证这棵生成树是最优的" class="headerlink" title="生成树算法生成一棵逻辑上无回路的树，即生成树，但不能保证这棵生成树是最优的"></a>生成树算法生成一棵逻辑上无回路的树，即生成树，但不能保证这棵生成树是最优的</h4><h4 id="非指定端口虽然不参与数据帧的传送，但它会继续监听树的工作报文，一旦树中某些工作端口失效后，非工作端口会被重新启用，形成新的生成树"><a href="#非指定端口虽然不参与数据帧的传送，但它会继续监听树的工作报文，一旦树中某些工作端口失效后，非工作端口会被重新启用，形成新的生成树" class="headerlink" title="非指定端口虽然不参与数据帧的传送，但它会继续监听树的工作报文，一旦树中某些工作端口失效后，非工作端口会被重新启用，形成新的生成树"></a>非指定端口虽然不参与数据帧的传送，但它会继续监听树的工作报文，一旦树中某些工作端口失效后，非工作端口会被重新启用，形成新的生成树</h4><hr><h1 id="虚拟局域网VLAN"><a href="#虚拟局域网VLAN" class="headerlink" title="虚拟局域网VLAN"></a>虚拟局域网VLAN</h1><h4 id="经典LAN：物理LAN，地理位置靠近的工作站组成LAN"><a href="#经典LAN：物理LAN，地理位置靠近的工作站组成LAN" class="headerlink" title="经典LAN：物理LAN，地理位置靠近的工作站组成LAN"></a>经典LAN：物理LAN，地理位置靠近的工作站组成LAN</h4><h4 id="VLAN：虚拟局域网，一组逻辑上的设备或用户，不需要考虑地理位置"><a href="#VLAN：虚拟局域网，一组逻辑上的设备或用户，不需要考虑地理位置" class="headerlink" title="VLAN：虚拟局域网，一组逻辑上的设备或用户，不需要考虑地理位置"></a>VLAN：虚拟局域网，一组逻辑上的设备或用户，不需要考虑地理位置</h4><p>同一个VLAN用户中的通信<strong>和在LAN中是一样的</strong>，在一个VLAN中的<strong>广播只有VLAN的成员能够听到</strong>，而不会传到其他VLAN中去，从而避免了不必要的广播风暴产生。若没有<strong>路由</strong>，不同的VLAN之间不能够相互通信，进一步提高了不同工作组之间<strong>信息的安全性</strong>。网络管理员可以通过配置VLAN之间的路由来全面管理网络内部不同工作组之间的信息互访。</p><h2 id="VLAN的实现方式"><a href="#VLAN的实现方式" class="headerlink" title="VLAN的实现方式"></a>VLAN的实现方式</h2><ol><li>基于端口</li><li>基于MAC地址</li><li>基于三层协议</li></ol><p>基于端口的VLAN在交换机内部有一张VLAN成员配置表，由此了解某个端口属于哪个VLAN</p><p>当一个帧在LAN中定位目标机（MAC寻址）时，帧在整个VLAN中穿行，类似下图，从源地址出发，发送给所有相同类型的目标机<br><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/VLAN.jpg" alt="VLAN"></p><p>如上图情况所示，当一个VLAN的成员跨越了交换机时，帧在传输到交换机1时会进行一些处理，向帧中写入数据<strong>VLAN ID</strong>，表明这是该条VLAN上传送的帧，这样这个帧就会顺利到达交换机2，并在交换机2处重新进行格式转换，消去VLAN ID等信息，最终到达目标机的帧就与发出帧完全一致了</p><p>上述描述的就是IEEE802.1Q（一种帧标记法）</p><ul><li>帧在经过干线trunk（图中两个交换机之间的连线）时，会打上标签</li><li>标签中有10bit用来表示VLAN ID</li><li>到达干线终点时会拆除标签</li></ul><h4 id="一个VLAN就是一个广播域（广播域就是指网络中所有能接收到同样广播消息的设备的集合。）"><a href="#一个VLAN就是一个广播域（广播域就是指网络中所有能接收到同样广播消息的设备的集合。）" class="headerlink" title="一个VLAN就是一个广播域（广播域就是指网络中所有能接收到同样广播消息的设备的集合。）"></a>一个VLAN就是一个广播域（广播域就是指网络中所有能接收到同样广播消息的设备的集合。）</h4><h3 id="有了VLAN，可以使用二层交换机实现广播域的分割"><a href="#有了VLAN，可以使用二层交换机实现广播域的分割" class="headerlink" title="有了VLAN，可以使用二层交换机实现广播域的分割"></a>有了VLAN，可以使用二层交换机实现广播域的分割</h3><hr><h1 id="二层设备"><a href="#二层设备" class="headerlink" title="二层设备"></a>二层设备</h1><h3 id="二层（数据链路层设备）主要有"><a href="#二层（数据链路层设备）主要有" class="headerlink" title="二层（数据链路层设备）主要有"></a>二层（数据链路层设备）主要有</h3><ul><li>网卡</li><li>网桥</li><li>交换机</li></ul><h2 id="NIC网卡（Network-Interface-Card）"><a href="#NIC网卡（Network-Interface-Card）" class="headerlink" title="NIC网卡（Network Interface Card）"></a>NIC网卡（Network Interface Card）</h2><h3 id="主要功能："><a href="#主要功能：" class="headerlink" title="主要功能："></a>主要功能：</h3><p>网卡的主要功能包括命名、成帧、介质访问控制，再生信号等。</p><h4 id="为主机提供介质访问"><a href="#为主机提供介质访问" class="headerlink" title="为主机提供介质访问"></a>为主机提供介质访问</h4><h4 id="MAC地址就烧在网卡的ROM中"><a href="#MAC地址就烧在网卡的ROM中" class="headerlink" title="MAC地址就烧在网卡的ROM中"></a>MAC地址就烧在网卡的ROM中</h4><ul><li>Logical link control (LLC): 和上层通信</li><li>Naming: 提供一个独特的 MAC 地址标识符</li><li>Framing: 封装过程的一部分，为传输比特流打包</li><li>Media Access Control (MAC): 为访问共享介质提供访问策略</li><li>Signaling:创建信号和与介质的接口</li></ul><h4 id="网卡同时运作在第一层和第二层"><a href="#网卡同时运作在第一层和第二层" class="headerlink" title="网卡同时运作在第一层和第二层"></a>网卡同时运作在第一层和第二层</h4><p><strong>主要是第二层的设备</strong></p><ul><li>在计算机中与上层通信</li><li>Logical Link Control (LLC)</li><li>烧入芯片的MAC 地址</li><li>封装数据城帧</li><li>提供介质访问</li></ul><p><strong>也是第一层设备</strong></p><ul><li>创建信号和与介质的接口</li><li>内建转发器（ transceiver）</li></ul><h3 id="网卡分类："><a href="#网卡分类：" class="headerlink" title="网卡分类："></a>网卡分类：</h3><ul><li>按照计算机类型分类：笔记本，台式机</li><li>按照网络类型分类：Ethernet, Token Ring, FDDI</li><li>按照传输介质分类：Twisted pair, coax, fiber</li><li>按照系统总线类型分类：PCI, ISA</li></ul><h2 id="网桥"><a href="#网桥" class="headerlink" title="网桥"></a>网桥</h2><h3 id="连接不同的LAN网段"><a href="#连接不同的LAN网段" class="headerlink" title="连接不同的LAN网段"></a>连接不同的LAN网段</h3><p>通过过滤部分交通流量（以网段分流交通，基于 MAC 地址过滤流量），减少冲突的机会，改善网络性能。</p><h2 id="交换机"><a href="#交换机" class="headerlink" title="交换机"></a>交换机</h2><h3 id="LAN-交换机是多端口网桥"><a href="#LAN-交换机是多端口网桥" class="headerlink" title="LAN 交换机是多端口网桥"></a>LAN 交换机是多端口网桥</h3><h4 id="连接-LAN-网段-比网桥更高的交换速度"><a href="#连接-LAN-网段-比网桥更高的交换速度" class="headerlink" title="连接 LAN 网段(比网桥更高的交换速度)"></a>连接 LAN 网段(比网桥更高的交换速度)</h4><h4 id="使用一张-MAC-表，来决定一帧转发的端口"><a href="#使用一张-MAC-表，来决定一帧转发的端口" class="headerlink" title="使用一张 MAC 表，来决定一帧转发的端口"></a>使用一张 MAC 表，来决定一帧转发的端口</h4><h4 id="交换机常被用来替换集线器（hub），用作以太网星型拓扑中心，以改善现有网络性能"><a href="#交换机常被用来替换集线器（hub），用作以太网星型拓扑中心，以改善现有网络性能" class="headerlink" title="交换机常被用来替换集线器（hub），用作以太网星型拓扑中心，以改善现有网络性能"></a>交换机常被用来替换集线器（hub），用作以太网星型拓扑中心，以改善现有网络性能</h4><h4 id="增加带宽"><a href="#增加带宽" class="headerlink" title="增加带宽"></a>增加带宽</h4><h3 id="支持新的功能，如VLAN"><a href="#支持新的功能，如VLAN" class="headerlink" title="支持新的功能，如VLAN"></a>支持新的功能，如VLAN</h3><h3 id="基本的工作原理与网桥一模一样"><a href="#基本的工作原理与网桥一模一样" class="headerlink" title="基本的工作原理与网桥一模一样"></a>基本的工作原理与网桥一模一样</h3><h3 id="微分段"><a href="#微分段" class="headerlink" title="微分段"></a>微分段</h3><p>交换机利用微分段（LAN被交换机分割开的网段在冲突域中产生无冲突域，就是微分段）的技术（交换机的每个端口只接一个工作站）创建无冲突域</p><h3 id="交换机的交换模式"><a href="#交换机的交换模式" class="headerlink" title="交换机的交换模式"></a>交换机的交换模式</h3><h4 id="存储转发："><a href="#存储转发：" class="headerlink" title="存储转发："></a>存储转发：</h4><p>交换机将整个帧接收下来，计算其校验和，确保没有发生错误，再按照MAC地址转发表的指示进行转发</p><p>延迟大，出错率小</p><h4 id="直通交换（贯穿交换），虫孔交换："><a href="#直通交换（贯穿交换），虫孔交换：" class="headerlink" title="直通交换（贯穿交换），虫孔交换："></a>直通交换（贯穿交换），虫孔交换：</h4><p>交换机读取到帧的目的地址后，就直接将其进行转发，不再在接收整个帧后再处理。</p><p>延迟小，出错率高</p><h4 id="无碎片交换（无分片交换）："><a href="#无碎片交换（无分片交换）：" class="headerlink" title="无碎片交换（无分片交换）："></a>无碎片交换（无分片交换）：</h4><p>交换机再读取帧的字节数达到64字节后才开始转发，类似于前两种交换方式的折中，避免了碎片帧的转发（冲突的碎片帧，短帧，残帧往往小于64字节）</p><p>延迟和出错率达到了相当的平衡</p>]]></content>
      
      
      <categories>
          
          <category> 计算机基础 </category>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>5-网络层（下）</title>
      <link href="/2021/06/20/5-%E7%BD%91%E7%BB%9C%E5%B1%82%EF%BC%88%E4%B8%8B%EF%BC%89/"/>
      <url>/2021/06/20/5-%E7%BD%91%E7%BB%9C%E5%B1%82%EF%BC%88%E4%B8%8B%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="链路状态路由选择"><a href="#链路状态路由选择" class="headerlink" title="链路状态路由选择"></a>链路状态路由选择</h1><h3 id="（Link-State-Routing）简称LS"><a href="#（Link-State-Routing）简称LS" class="headerlink" title="（Link State Routing）简称LS"></a>（Link State Routing）简称LS</h3><p>距离矢量路由法由于不能从全局把握问题，只能从邻居节点获取信息导致了无穷计数，路由环等问题</p><p>这些问题可以通过链路状态路由选择加以解决</p><h2 id="LS主要思想"><a href="#LS主要思想" class="headerlink" title="LS主要思想"></a>LS主要思想</h2><ol><li><strong>发现</strong>：发现邻居节点，了解它们的网络地址</li><li><strong>设置</strong>：设置规定到每个邻居的成本度量</li><li><strong>构造</strong>：构造分组，包含所了解到的所有信息</li><li><strong>发送</strong>：将这个分组发送给其他路由器</li><li><strong>计算</strong>：计算到每个路由器的最短路径</li></ol><h3 id="发现"><a href="#发现" class="headerlink" title="发现"></a>发现</h3><h4 id="发现邻居节点"><a href="#发现邻居节点" class="headerlink" title="发现邻居节点"></a>发现邻居节点</h4><p>当一个路由器启动时，会向每条点对点线路发送一个特别的HELLO分组，收到HELLO分组的路由器会回送一个应答，应答中包含自己的名字（采用全球唯一的一个名字Globally Unique Name）</p><h3 id="设置"><a href="#设置" class="headerlink" title="设置"></a>设置</h3><h4 id="设置链路成本（开销-量度-代价）"><a href="#设置链路成本（开销-量度-代价）" class="headerlink" title="设置链路成本（开销/量度/代价）"></a>设置链路成本（开销/量度/代价）</h4><p>可以自动发现设置或是采用人工设置，常见的量度是设置为与<strong>链路带宽成反比</strong></p><h4 id="延迟也可以作为量度"><a href="#延迟也可以作为量度" class="headerlink" title="延迟也可以作为量度"></a>延迟也可以作为量度</h4><ul><li>路由器会发送一个特别的ECHO分组，另一端立刻回送一个应答</li><li>通过测量往返时间RTT，可以获得一个合理的延迟估计值</li><li>可以通过多次测量，取平均值，保证结果有效性</li></ul><h3 id="构造"><a href="#构造" class="headerlink" title="构造"></a>构造</h3><p>构造链路状态分组：Link State Packet/Adevertisement(LSP/LSA)，分组内包含的信息有：</p><ul><li>发送方标识(ID of the sender)</li><li>序列号(sequence number)，一个路由可能发送多个分组，序列号就是用于却别同一路由的不同分组的</li><li>年龄(age)</li><li>邻居列表(list to neighbors)，储存了能够到达的所有邻居</li><li>到邻居的成本/量度(delay to each neighbor)</li></ul><h4 id="构造链路状态分组的时机"><a href="#构造链路状态分组的时机" class="headerlink" title="构造链路状态分组的时机"></a>构造链路状态分组的时机</h4><p>周期性的构造分组，或者在有特殊事件发生时构造，例如某条线路或邻居DOWN掉了，这就是我们所说的触发更新</p><h3 id="发布-分发"><a href="#发布-分发" class="headerlink" title="发布/分发"></a>发布/分发</h3><p>发布链路状态分组，这一步操作关系着LSA/LSP能否分发到所有的路由器，如果这一步出现差错导致LSP不能分发给所有路由，会导致路由器构造的拓扑图不完整，即对网络认识不完整</p><h4 id="基本算法："><a href="#基本算法：" class="headerlink" title="基本算法："></a>基本算法：</h4><p>每个分组都包含一个序列号，序列号随新分组发送而递增，路由器会记录下它所看见的所有（源路由器，序列号）有序对</p><p>当一个新分组到达路由器时，路由器会结合源路由器与序列号进行判断：</p><ol><li>如果序列号大于当前已经存在的最大序列号，则该分组被当作新分组向其他所有路由器转发（泛洪广播）</li><li>如果序列号与当前已经存在的最大序列号相等，则路由器抛弃当前分组选择新到达的分组（喜新厌旧）</li><li>如果序列号小于已经存在的最大分组，则被认定为过时分组而被丢弃</li></ol><h4 id="基本算法遇到的问题"><a href="#基本算法遇到的问题" class="headerlink" title="基本算法遇到的问题"></a>基本算法遇到的问题</h4><ul><li>序列号回转：加入序列号多短，例如3bit，则可用的序列号只有8种000-111，所以分组假如收到000和111，无法判断二者的大小（可能是本轮的过时分组也可能是下一轮的最新分组）</li><li>路由器崩溃：假如一台正在运行的路由器突然崩溃，那么它的序列号会重新从0开始，这就导致接收方路由器会将新产生的分组当作过时分组进而丢弃</li><li>序列号损坏，假如发送方传输序列号过程中发生一位错误例如由4变为65540，则后续的5-65540分组都会被认定为旧分组而丢弃</li></ul><h4 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h4><p>序列号回转问题的解决方法就是采用32位序列号，这样在有限的时间内，机器不可能发生序列号回转的情况，而是一直处于递增状态</p><p>解决路由器崩溃和序列号损坏问题就利用到了分组中的年龄，当分组到达路由器后，年龄随时间逐秒递减1，直至年龄归0时，如果仍没有符合顺序新分组到达，则该分组被丢弃。而一般情况下每十秒会有一个新分组到达，假如超出时限，很可能是DOWN机或超过六个分组丢失，所以，成功解决了路由器崩溃的情况。而如果新到达的分组序列号与之前留存的分组序列号不是相邻的，则年龄倒计时不会停止，直到归0，所以也成功解决了序列号损坏的问题</p><h4 id="算法改进"><a href="#算法改进" class="headerlink" title="算法改进"></a>算法改进</h4><ul><li>当一个链路状态分组到达某个路由器时，它首先被放到一个保留区中等待一段时间</li><li>如果来自相同路由器的另一个分组到达了，这两个分组的序列号会被比较：<ul><li>如果相等，是重复分组，丢弃</li><li>如果不相等，旧的那个被丢弃</li></ul></li></ul><h3 id="计算"><a href="#计算" class="headerlink" title="计算"></a>计算</h3><p>当一个路由获得了全部链路状态分组就可以构造出全网络的拓扑图来了，这种拓扑图一般采用最短路径算法（例如：狄克斯特拉算法）来计算。计算的最终结果是一棵树，会存储在路由表种，用来引导分组的转发</p><h3 id="L-S路由算法特点："><a href="#L-S路由算法特点：" class="headerlink" title="L-S路由算法特点："></a>L-S路由算法特点：</h3><table><thead><tr><th>优点</th><th>缺点</th></tr></thead><tbody><tr><td>路由器认识一致</td><td>路由器需要较大的存储空间</td></tr><tr><td>LSP构造的图完全一样</td><td>计算负担很大</td></tr><tr><td>收敛快</td><td></td></tr><tr><td>适合在大型网络种使用</td><td></td></tr></tbody></table><hr><h1 id="单区域OSPF"><a href="#单区域OSPF" class="headerlink" title="单区域OSPF"></a>单区域OSPF</h1><h3 id="开放的最短路径优先协议-Open-Shortest-Path-First"><a href="#开放的最短路径优先协议-Open-Shortest-Path-First" class="headerlink" title="开放的最短路径优先协议(Open Shortest Path First)"></a>开放的最短路径优先协议(Open Shortest Path First)</h3><p>链路状态路由典型实例，在TCP/IP协议种，OSPF位于IP协议之上，OSPF是一种基于开放标准的链路状态路由协议，是目前IGP中应用最广，性能最优的协议</p><h2 id="OSPF特点"><a href="#OSPF特点" class="headerlink" title="OSPF特点"></a>OSPF特点</h2><ul><li>OSPF可以在大型网络中使用</li><li>OSPF克服了路由自环</li><li>支持VLSM，CIDR等技术，具有现代路由选择协议的特征</li><li>使用带宽作为度量值（$10^8$/BW）</li><li>收敛速度快</li><li>通过分区实现高效的网络管理</li></ul><h2 id="OSPF基本概念"><a href="#OSPF基本概念" class="headerlink" title="OSPF基本概念"></a>OSPF基本概念</h2><p>Internet由很多不同组织运营的独立网络或自制网络系统构成，早期的资质系统内部（也称域内），运行着RIP协议，目前大多是OSPF协议</p><p><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/OSPF.jpg" alt="OSPF"></p><p>对于有些庞大的资质系统AS，会将系统划分为多个区域Area，每个区域内单独运行OSPF，且每个系统中必然存在一个0号区域，作为骨干区域，所有区域都必须连接到骨干区域上，在一个区域中运行OSPF称作单区域OSPF ，一个AS如果不划分区域运行OSPF，则只有一个0号区域。</p><p><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/%E5%8C%BA%E5%9F%9F.jpg" alt="区域"></p><h3 id="单区域OSPF运行时部分术语"><a href="#单区域OSPF运行时部分术语" class="headerlink" title="单区域OSPF运行时部分术语"></a>单区域OSPF运行时部分术语</h3><ul><li>RouterID：一个３２位无符号整数，是路由器的唯一标识，在自制系统内唯一</li><li>协议号：89号，OSPF报文直接封装在IP分组中，通过IP分组的头部的protocol协议号就可以判别是否为OSPF分组</li><li>TTL：TTL一般为1，说明，OSPF一般只传递一跳，也就是只传给相邻的邻居节点</li></ul><h3 id="OSPF使用带宽-10-8-BW-作为代价判断标准"><a href="#OSPF使用带宽-10-8-BW-作为代价判断标准" class="headerlink" title="OSPF使用带宽($10^8$/BW)作为代价判断标准"></a>OSPF使用带宽($10^8$/BW)作为代价判断标准</h3><p>例如，10M的以太链路，对应的代价=$10^8/10*10^6$=10.</p><p>为了适应带宽增长，有些厂商的代价计算公式是可以配置的</p><h2 id="OSPF分组类型"><a href="#OSPF分组类型" class="headerlink" title="OSPF分组类型"></a>OSPF分组类型</h2><table><thead><tr><th>OSPF数据包类型</th><th>作用</th></tr></thead><tbody><tr><td>Hello数据包</td><td>与邻居建立和维护毗邻关系(keep alive)</td></tr><tr><td>数据库描述包(DD)</td><td>描述一个路由器的链路状况数据库的内容(链路状况数据库储存了路由器的收到的所有LSP，DD数据报包含了它们分组的头部信息)这样在交换数据库信息时就不需要交换全部信息，只需摘要即可</td></tr><tr><td>链路状态请求(LSR)</td><td>请求邻居路由器发送其链路状况数据库中的具体条目</td></tr><tr><td>链路状态更新(LSU)</td><td>向邻居路由器发送链路状态通告，或是网络中发生一些事件例如出现DOWN机时，都会导致感知到的路由器主动将这些信息通过LSU封装后转发给其他路由器</td></tr><tr><td>链路状态确认(LSAck)</td><td>确认收到了邻居路由器的LSU后，回发给源路由器</td></tr></tbody></table><h2 id="OSPF运行步骤"><a href="#OSPF运行步骤" class="headerlink" title="OSPF运行步骤"></a>OSPF运行步骤</h2><ol><li>建立路由器毗邻关系</li><li>选举DR和BDR</li><li>发现路由</li><li>选择最佳路由</li><li>维护路由信息</li></ol><h3 id="建立路由器毗邻关系（全毗邻关系）"><a href="#建立路由器毗邻关系（全毗邻关系）" class="headerlink" title="建立路由器毗邻关系（全毗邻关系）"></a>建立路由器毗邻关系（全毗邻关系）</h3><p>OSPF运行中最重要的一步</p><p><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/%E5%85%A8%E6%AF%97%E9%82%BB.jpg" alt="全毗邻"></p><p>达到全毗邻状态的两个路由器，它们内部LSP数据库内容完全一致，当两个路由器交换DD报文后发现数据库内容本来就完全一致时，就会跳过交换完整数据库内容的过程，直接成为全毗邻状态，建立全毗邻关系的过程叫做<strong>同步</strong></p><p>同步可能是个冗长的过程，在同步期间，网络社会是不安定的。</p><p><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/%E9%80%89%E4%B8%BE.jpg" alt="选举"></p><p>如图中的网络拓扑结构所示，如果两两节点之间逐个进行同步，则n个路由器需要进行n*(n-1)/2次的同步，但如果，选出一个特殊路由器作为指定路由器DR（Designated Router），所有路由器只与它进行同步，则同样能获取到全网的拓扑信息并且同步次数缩减至n-1次</p><p>指定路由器DR通过选举得出，选举过程如下：</p><ul><li>登记选民：统计本网段内的OSPF路由器</li><li>定候选人：统计本网段内priority&gt;0的OSPF路由器</li><li>竞选演说：所有候选人都假定自己是DR</li><li>投票选举：首先选举priority值最大的，如果相等，则选择RouterID最大的</li></ul><hr><h1 id="无类域间路由-CIDR"><a href="#无类域间路由-CIDR" class="headerlink" title="无类域间路由 CIDR"></a>无类域间路由 CIDR</h1><h2 id="IP协议面临的两大问题"><a href="#IP协议面临的两大问题" class="headerlink" title="IP协议面临的两大问题"></a>IP协议面临的两大问题</h2><h4 id="1-分类造成了数百万个地址浪费"><a href="#1-分类造成了数百万个地址浪费" class="headerlink" title="1. 分类造成了数百万个地址浪费"></a>1. 分类造成了数百万个地址浪费</h4><p>C类地址含有256-2=254个可用地址，B类含有约65000个可用地址，假如我目前需要的地址数在500左右，而C类无法满足需求，B类空闲地址过多，就会导致我不得不使用较大的B类，这也就造成了地址的浪费</p><h4 id="2-路由表膨胀"><a href="#2-路由表膨胀" class="headerlink" title="2. 路由表膨胀"></a>2. 路由表膨胀</h4><p>随着互联网的发展，路由表动辄上万条，这导致信息传递的速度变慢，增加了通信过程中端到端的延迟。</p><p><strong>为解决上述问题，就提出了CIDR技术</strong></p><h2 id="CIDR"><a href="#CIDR" class="headerlink" title="CIDR"></a>CIDR</h2><p>Classless Inter Domain Routing，即无类域间路由，CIDR缓解了地址枯竭的趋势，尤以其中的B类地址枯竭趋势见著。控制甚至缩减了路由表的开销</p><h2 id="CIDR基本思想"><a href="#CIDR基本思想" class="headerlink" title="CIDR基本思想"></a>CIDR基本思想</h2><p>分配地址的方法：按需分配，不再采用A类B类来分配<br>（例如：在CIDR出现之前假设一个用户需要2000个IP地址只能申请B类地址，但这会造成60000多个地址的浪费，CIDR出现后，就可以按需分配，2000个地址，最接近2048，所以需要11个主机位，所以网络位个数就是21，因此，可以分配一个块地址x.x.x.x/21给用户，就可以满足需求，并且除了两个不可以地址还有46个地址可扩展）</p><p>有了CIDR之后，路由表必须增加一组数据，就是地址的32位子网掩码用于寻径，即每个路由表都至少需要记录一个三元组（目的IP地址，子网掩码，输出线路）</p><h3 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h3><p>当一个分组到达路由器，路由器会提取其中的目的IP地址和子网掩码，进行按位与后确定目标网络，然后查找路由表，假如路由表中有多条线路与之匹配，则选择网络位最长的（IP地址的最长匹配前缀），例如地址为196.168.24.1遇到表中有能够匹配的两个地址（196.168.10.0/19，196.168.10.0/22）则会选择其中网络位更长的地址，因为网络位越长，说明网络越小，越接近我们寻找的目标网络</p><h3 id="缩减路由表规模-聚合"><a href="#缩减路由表规模-聚合" class="headerlink" title="缩减路由表规模-聚合"></a>缩减路由表规模-聚合</h3><p><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/CIDR.jpg" alt="CIDR"></p><p>如图，中间路由不需要记录12条路由的全部信息，只需要记录三条汇总的路由就可以。而最右边路由则只需要记录中间路由即可</p><p>这些都依靠路由的聚合完成，路由聚合必须保证子网地址是连续的，关键是确定新的聚合空间中网络位个数(网络位就是聚合的几个网络中不变的位)</p><h4 id="聚合结果：超网"><a href="#聚合结果：超网" class="headerlink" title="聚合结果：超网"></a>聚合结果：超网</h4><h4 id="聚合的前提条件："><a href="#聚合的前提条件：" class="headerlink" title="聚合的前提条件："></a>聚合的前提条件：</h4><pre><code>- 子网构成的地址空间是连续的- 下一跳一定是相同的</code></pre><h4 id="CIDR还带来了额外的好处：隔离了路由翻动"><a href="#CIDR还带来了额外的好处：隔离了路由翻动" class="headerlink" title="CIDR还带来了额外的好处：隔离了路由翻动"></a>CIDR还带来了额外的好处：隔离了路由翻动</h4><hr><h1 id="网络地址翻译NAT"><a href="#网络地址翻译NAT" class="headerlink" title="网络地址翻译NAT"></a>网络地址翻译NAT</h1><h2 id="提出NAT的原因"><a href="#提出NAT的原因" class="headerlink" title="提出NAT的原因"></a>提出NAT的原因</h2><ul><li>IPv4地址池已经枯竭</li><li>每个上网的设备都需要上网资源，包括IPv4地址</li></ul><p>为了解决上述问题，就需要使用到私人地址，私人地址是不可路由的地址，可以用于广域网链路上。私人地址不具备唯一性，在IPv4的三类地址中都保留了一部分地址作为私人地址</p><table><thead><tr><th>Class</th><th>RFC 1918 Internal Address Range</th><th>CIDR Prefix</th></tr></thead><tbody><tr><td>A</td><td>10.0.0.0 - 10.255.255.255</td><td>10.0.0.0/8</td></tr><tr><td>B</td><td>172.16.0.0 - 172.31.255.255</td><td>172.16.0.0/12</td></tr><tr><td>C</td><td>192.168.0.0 – 192.168.255.255</td><td>192.168.0.0/16</td></tr></tbody></table><p>由于私人地址不具备唯一性，无法连接至互联网，就需要用到上文所提的<strong>网络地址翻译NAT（net address translate）</strong>，NAT负责<strong>私人IP地址与公有IP地址之间的转换</strong>（一种类似的技术：PAT，port address translate（超载）可以将多个私有IP地址影射到同一个公有IP地址的不同端口）</p><h2 id="NAT"><a href="#NAT" class="headerlink" title="NAT"></a>NAT</h2><p>NAT是一个IP地址耗尽的快速修补方案（RFC3022中描述），内部网络使用私人地址，当内部网络需要和外网进行通信时，私人地址转换为合法的公网IP。NAT转换器负责完成这种转换过程。</p><h2 id="NAT转换器"><a href="#NAT转换器" class="headerlink" title="NAT转换器"></a>NAT转换器</h2><h3 id="功能："><a href="#功能：" class="headerlink" title="功能："></a>功能：</h3><ul><li>由NAT转换器完成私人地址与公网IP地址之间的转换，并且维护一个地址转换表</li><li>当有外网的分组到达时，NAT转换器查找地址转换表，转换分组目标地址后，转发该分组到内网</li></ul><h3 id="位置："><a href="#位置：" class="headerlink" title="位置："></a>位置：</h3><p>NAT转换器可以是一个专用的服务器，也可以运行在内网的边界路由器上，也可以在家用路由器(AP)上</p><h3 id="工作原理："><a href="#工作原理：" class="headerlink" title="工作原理："></a>工作原理：</h3><p>NAT工作原理如下图所示，首先内外内的主机将信息封装，此时封装的分组内第一层是源地址（内网地址），第二次是目的地址（公网地址）第三层两个参数分别是源和目的的端口号，当分组到达NAT转换器时，NAT转换器将分组进行解封装，提取其中的源地址和端口，将其替换为公网地址和端口，并将这组变化信息记录在地址转换器上，然后将其发往目的地址，目的地址收到分组后，假如需要重新返回一个分组（做出应答），只需要调换源和目的的位置就可以返回该分组，分组再次到达NAT转换器时，转换器同样首先解封装，然后检索地址转换表，查找<strong>目的端口</strong>对应的内网地址，并替换掉公网地址和端口，随后将分组转发到对应的内网地址</p><p><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/NAT%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86.jpg" alt="NAT工作原理"></p><h3 id="问题："><a href="#问题：" class="headerlink" title="问题："></a>问题：</h3><ul><li>违背了IP地址的唯一性</li><li>破坏了IP网络的无连接特性，使其成为了一个面向连接的网络，NAT转换器维护着整个连接状态，一旦NAT转换器崩溃，这种连接方式也会失效</li><li>违背了最基本的协议分层原则，在转换器中修改了分组内的端口号，端口号是由上层传输层管理的内容，跨层工作</li><li>如果传输层不是采用TCP／UDP而是采用其他协议，那么NAT转换器也会失效</li><li>有些应用需要在分组载荷中插入IP地址，接收方会提取载荷中的IP地址，而NAT转换器只操作头部数据，不会修改分组载荷内的内容，因此将导致该类应用无法正常运行</li><li>NAT让一个公网IP地址可以承载61400个（65536-4096）私人地址，导致了严重的超载</li></ul><h3 id="优点："><a href="#优点：" class="headerlink" title="优点："></a>优点：</h3><ul><li>节省了公有IP地址</li><li>提供了私网访问外网的多样性</li><li>具有一定的的保密性和安全性</li></ul><hr><h1 id="互联网控制信息协议ICMP"><a href="#互联网控制信息协议ICMP" class="headerlink" title="互联网控制信息协议ICMP"></a>互联网控制信息协议ICMP</h1><p>IP提供的是尽力传送的服务，分组可能会遭遇拥塞，丢弃，找不到目的机等等问题。因此，我们经常需要知道一条到目的机的路是否通达，延时大小等等。因此我们设计了IP协议的姊妹协议ICMP协议</p><h2 id="ICMP互联网控制信息协议"><a href="#ICMP互联网控制信息协议" class="headerlink" title="ICMP互联网控制信息协议"></a>ICMP互联网控制信息协议</h2><h3 id="Internet-Control-Message-Protocol"><a href="#Internet-Control-Message-Protocol" class="headerlink" title="(Internet Control Message Protocol)"></a>(Internet Control Message Protocol)</h3><ul><li>可以向源报告目标超时，不可达等问题</li><li>用来测试网络，如ping,tracert</li></ul><p>ICMP整个作为载荷封装到IP分组的数据域中<br><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/ICMP.jpg" alt="ICMP"></p><h3 id="ICMP类型"><a href="#ICMP类型" class="headerlink" title="ICMP类型"></a>ICMP类型</h3><table><thead><tr><th align="center">类型TYPE</th><th align="center">代码CODE</th><th>用途/描述 Description</th><th align="center">查询类Query</th><th align="center">差错类Error</th></tr></thead><tbody><tr><td align="center">0</td><td align="center">0</td><td>Echo Reply——回显应答（Ping应答）</td><td align="center">x</td><td align="center"></td></tr><tr><td align="center">3</td><td align="center">0</td><td>Network Unreachable——网络不可达</td><td align="center"></td><td align="center">x</td></tr><tr><td align="center">3</td><td align="center">1</td><td>Host Unreachable——主机不可达</td><td align="center"></td><td align="center">x</td></tr><tr><td align="center">3</td><td align="center">2</td><td>Protocol Unreachable——协议不可达</td><td align="center"></td><td align="center">x</td></tr><tr><td align="center">3</td><td align="center">3</td><td>Port Unreachable——端口不可达</td><td align="center"></td><td align="center">x</td></tr><tr><td align="center">3</td><td align="center">4</td><td>Fragmentation needed but no frag. bit set——需要进行分片但设置不分片比特</td><td align="center"></td><td align="center">x</td></tr><tr><td align="center">3</td><td align="center">5</td><td>Source routing failed——源站选路失败</td><td align="center"></td><td align="center">x</td></tr><tr><td align="center">3</td><td align="center">6</td><td>Destination network unknown——目的网络未知</td><td align="center"></td><td align="center">x</td></tr><tr><td align="center">3</td><td align="center">7</td><td>Destination host unknown——目的主机未知</td><td align="center"></td><td align="center">x</td></tr><tr><td align="center">3</td><td align="center">8</td><td>Source host isolated (obsolete)——源主机被隔离（作废不用）</td><td align="center"></td><td align="center">x</td></tr><tr><td align="center">3</td><td align="center">9</td><td>Destination network administratively prohibited——目的网络被强制禁止</td><td align="center"></td><td align="center">x</td></tr><tr><td align="center">3</td><td align="center">10</td><td>Destination host administratively prohibited——目的主机被强制禁止</td><td align="center"></td><td align="center">x</td></tr><tr><td align="center">3</td><td align="center">11</td><td>Network unreachable for TOS——由于服务类型TOS，网络不可达</td><td align="center"></td><td align="center">x</td></tr><tr><td align="center">3</td><td align="center">12</td><td>Host unreachable for TOS——由于服务类型TOS，主机不可达</td><td align="center"></td><td align="center">x</td></tr><tr><td align="center">3</td><td align="center">13</td><td>Communication administratively prohibited by filtering——由于过滤，通信被强制禁止</td><td align="center"></td><td align="center">x</td></tr><tr><td align="center">3</td><td align="center">14</td><td>Host precedence violation——主机越权</td><td align="center"></td><td align="center">x</td></tr><tr><td align="center">3</td><td align="center">15</td><td>Precedence cutoff in effect——优先中止生效</td><td align="center"></td><td align="center">x</td></tr><tr><td align="center">4</td><td align="center">0</td><td>Source quench——源端被关闭（基本流控制）</td><td align="center"></td><td align="center"></td></tr><tr><td align="center">5</td><td align="center">0</td><td>Redirect for network——对网络重定向</td><td align="center"></td><td align="center"></td></tr><tr><td align="center">5</td><td align="center">1</td><td>Redirect for host——对主机重定向</td><td align="center"></td><td align="center"></td></tr><tr><td align="center">5</td><td align="center">2</td><td>Redirect for TOS and network——对服务类型和网络重定向</td><td align="center"></td><td align="center"></td></tr><tr><td align="center">5</td><td align="center">3</td><td>Redirect for TOS and host——对服务类型和主机重定向</td><td align="center"></td><td align="center"></td></tr><tr><td align="center">8</td><td align="center">0</td><td>Echo request——回显请求（Ping请求）</td><td align="center">x</td><td align="center"></td></tr><tr><td align="center">9</td><td align="center">0</td><td>Router advertisement——路由器通告</td><td align="center"></td><td align="center"></td></tr><tr><td align="center">10</td><td align="center">0</td><td>Route solicitation——路由器请求</td><td align="center"></td><td align="center"></td></tr><tr><td align="center">11</td><td align="center">0</td><td>TTL equals 0 during transit——传输期间生存时间为0</td><td align="center"></td><td align="center">x</td></tr><tr><td align="center">11</td><td align="center">1</td><td>TTL equals 0 during reassembly——在数据报组装期间生存时间为0</td><td align="center"></td><td align="center">x</td></tr><tr><td align="center">12</td><td align="center">0</td><td>IP header bad (catchall error)——坏的IP首部（包括各种差错）</td><td align="center"></td><td align="center">x</td></tr><tr><td align="center">12</td><td align="center">1</td><td>Required options missing——缺少必需的选项</td><td align="center"></td><td align="center">x</td></tr><tr><td align="center">13</td><td align="center">0</td><td>Timestamp request (obsolete)——时间戳请求（作废不用）</td><td align="center">x</td><td align="center"></td></tr><tr><td align="center">14</td><td align="center">-</td><td>Timestamp reply (obsolete)——时间戳应答（作废不用）</td><td align="center">x</td><td align="center"></td></tr><tr><td align="center">15</td><td align="center">0</td><td>Information request (obsolete)——信息请求（作废不用）</td><td align="center">x</td><td align="center"></td></tr><tr><td align="center">16</td><td align="center">0</td><td>Information reply (obsolete)——信息应答（作废不用）</td><td align="center">x</td><td align="center"></td></tr><tr><td align="center">17</td><td align="center">0</td><td>Address mask request——地址掩码请求</td><td align="center">x</td><td align="center"></td></tr><tr><td align="center">18</td><td align="center">0</td><td>Address mask reply——地址掩码应答</td><td align="center">x</td><td align="center"></td></tr></tbody></table><h2 id="ICMP应用"><a href="#ICMP应用" class="headerlink" title="ICMP应用"></a>ICMP应用</h2><h3 id="PING"><a href="#PING" class="headerlink" title="PING"></a>PING</h3><p>使用ping命令（即调用ping过程）时，将向目的站点发送一个ICMP回声请求报文（包括一些任选的数据），如目的站点接收到该报文，必须向源站点发回一个ICMP回声应答报文，源站点收到应答报文（且其中的任选数据与所发送的相同），则认为目的站点是可达的，否则为不可达。</p><h3 id="PING的作用"><a href="#PING的作用" class="headerlink" title="PING的作用"></a>PING的作用</h3><ul><li>测试TCP/IP是否正常工作：ping 127.0.0.1</li><li>测试网络设备是否正常工作：ping 本机IP地址</li><li>检查对外连接的路由器：ping 默认网关</li><li>检查与某台设备的畅通情况：ping 设备IP</li><li>检查DNS设置：ping <a href="http://www.baidu.com/">www.baidu.com</a></li><li>执行DNS的反向查询，利用IP地址反向查询到域名：ping -a IP地址</li></ul><h3 id="tracert"><a href="#tracert" class="headerlink" title="tracert"></a>tracert</h3><p>当ping不通某个接口时，假如我们想知道是哪个地方失败，就需要用到tracert工具</p><p>tracert会逐个发送ICMP分组，TTL从1开始递增，首先发送TTL=1的分组，分组到达第一跳，TTL减为0，分组被丢弃，，此时目的路由器就会返回一个应答分组，源路由器可以通过应答分组获知ICMP分组成功到达第一跳，依次会发生TTL=2，3…的分组，知道收到一条错误应答，说明该路径在这个环节不可达。也就找到了错误的源头。tracert最大支持30跳。</p><h3 id="PMTU"><a href="#PMTU" class="headerlink" title="PMTU"></a>PMTU</h3><h4 id="利用-Type-3-code-4-的ICMP消息"><a href="#利用-Type-3-code-4-的ICMP消息" class="headerlink" title="利用(Type = 3 , code = 4)的ICMP消息"></a>利用(Type = 3 , code = 4)的ICMP消息</h4><p>路径MTU(Path Maximum Transimition Unit),动态发现互联网上任意一条路径最大传输单元的技术，每个网络都有各自的MTU也就是最大承载能力，常见的以太网的MTU是1500byte，传输的数据一旦超过这个大小就需要进行分片操作，但是分片操作消耗大，安全隐患多，消除这种问题的方法就是在一开始就探明这条路径的最大传输单元</p><h4 id="PMTU算法-PMTU技术"><a href="#PMTU算法-PMTU技术" class="headerlink" title="PMTU算法/PMTU技术"></a>PMTU算法/PMTU技术</h4><p><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/PMTU.jpg" alt="PMTU"></p><hr><p><strong>一般来说，ICMP消息仅发送给源机，由于ICMP是封装在IP分组中发送的，所以有一条规定：ICMP消息不生成自己的错误报告。这样的理由是假如某处发生拥塞，若ICMP生成自己的差错报告，则新生成的ICMP也会在此处拥塞，故而新的ICMP再次生成差错报告，如此往复，拥塞越来越严重</strong></p><hr><h1 id="地址解析协议ARP"><a href="#地址解析协议ARP" class="headerlink" title="地址解析协议ARP"></a>地址解析协议ARP</h1><h3 id="Address-Resolution-Protocol"><a href="#Address-Resolution-Protocol" class="headerlink" title="(Address Resolution Protocol)"></a>(Address Resolution Protocol)</h3><p>ARP是一个运行在局域网中的协议，它将，目标机的IP地址映射到MAC地址上。</p><h2 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h2><p><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/ARP%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86.jpg" alt="ARP工作原理"></p><p>当主机A只有主机E的IP地址而没有MAC地址时，主机A就会发出广播给局域网内所有主机，寻找主机E，其他主机在收到广播后不作应答，主机E在收到广播后返回自己的MAC地址</p><p>如果每一次发送数据都要来回发送ARP请求帧和返回帧，是非常耗费资源的，所以，有诸多的优化措施：</p><ul><li>每个主机建立一个ARP表，缓存ARP的结果</li><li>用ARP请求中的源信息来更新ARP表（在ARP请求帧中包含源机的IP和MAC地址对，所以每一个收到请求帧的主机，即使不做应答，也会根据请求帧的结果更新ARP表）</li><li>每个机器在启动时都会广播它的IP/MAC地址对，当前在局域网内的全部主机在收到后将它们储存在ARP缓存表中，这就是所谓的<strong>免费ARP</strong>，此时请求机不奢求能够收到应答，因为他发出的目的IP地址就是它自己，但假如收到应答，说明该局域网中自己的IP地址被其他人使用了，发生了IP地址冲突（免费ARP最显著特征，source IP=target IP，源ID＝目标ID）</li></ul><p>ARP请求帧是二层广播帧，目标机只有跟源机在同一个LAN中才能收到请求帧，假如目标机是一个远程机（不在同一个局域网内部），则ARP无法找到目标MAC地址。此时源机会先寻找整个网络中的默认网关，然后由默认网关找到目标机的MAC地址并最终返回源机</p><p>为了减少ARP请求次数，每个设备包括路由器都有各自的ARP表，ARP表是IP地址到MAC地址的映射表，存储在存储器内存中，自动维护，一旦掉电故障，表内信息全部消失。表中内容是自动更新和维护的</p><h3 id="维护ARP表-arp-a-查看"><a href="#维护ARP表-arp-a-查看" class="headerlink" title="维护ARP表(arp -a  查看)"></a>维护ARP表(arp -a  查看)</h3><ul><li>通过广播ARP请求中的源设备信息添加更新表</li><li>利用自己的ARP请求之应答信息来添加、更新表</li><li>删除超过一定时限的信息</li></ul><hr><h1 id="拥塞控制"><a href="#拥塞控制" class="headerlink" title="拥塞控制"></a>拥塞控制</h1><p>一个网络能够承载的数据流量是有限制的，在待传输分组不多，轻载的时候，发出的分组都能够顺利发送</p><h2 id="拥塞"><a href="#拥塞" class="headerlink" title="拥塞"></a>拥塞</h2><p>当一个子网，或子网的一部分出现太多分组时，网络性能急剧下降，导致拥塞（拥塞出现时，分组被丢弃，重传，网络吞吐量严重下降，甚至无法传输分组）</p><h2 id="控制拥塞的方式："><a href="#控制拥塞的方式：" class="headerlink" title="控制拥塞的方式："></a>控制拥塞的方式：</h2><h3 id="开环："><a href="#开环：" class="headerlink" title="开环："></a>开环：</h3><p>开环控制试图用良好的设计从根源解决问题，本质就是保证问题从一开始就没有发生的可能性。开环决策不考虑网络当前状态，而是提前考虑</p><p>问题在于事物发展过快，任何一个曾经良好的开环设计随着时间推移都会被加速淘汰，开环设计很难准确的估计需求，即使超前的设计随着时间推移，也会越来越吃力</p><h3 id="闭环："><a href="#闭环：" class="headerlink" title="闭环："></a>闭环：</h3><p>基于上文所述的问题，更多采取闭环设计。</p><p>闭环控制建立在反馈环路的概念上，分三个步骤解决问题</p><ul><li>监视系统：检测何时何地发生拥塞</li><li>传递拥塞信号：将拥塞信息传递到能够采取行动的地方</li><li>调整系统运行，控制拥塞发生</li></ul><h2 id="检测拥塞："><a href="#检测拥塞：" class="headerlink" title="检测拥塞："></a>检测拥塞：</h2><p>确定拥塞的量度，数值越大表示拥塞的程度越重：</p><ul><li>因为缺乏缓存空间而丢弃的分组百分比</li><li>平均队列长度</li><li>超时和重传的分组数</li><li>平均分组延迟</li><li>分组延迟的标准方差</li></ul><h2 id="传递拥塞"><a href="#传递拥塞" class="headerlink" title="传递拥塞"></a>传递拥塞</h2><p>传递拥塞有多种方式。</p><p>最常见的就是向源机返回一个拥塞警告分组，但由于当前路径拥塞，这个警告分组有可能根本无法到达源。</p><p>还可以设置每个分组保留一位或一个字段作为警告位，当拥塞度量超过阈值时，路由器就对这个位或者这个域填充位以此警告它的邻居。</p><p>还有一种方法，主机或路由器周期性向外发送探询，即probe分组，显式的询问有关拥塞的情况，然后在有拥塞的地方利用回收的信息路由流量</p><h2 id="解决拥塞"><a href="#解决拥塞" class="headerlink" title="解决拥塞"></a>解决拥塞</h2><p>拥塞产生的根本原因无非是发送了过多的分组，超过了资源承载的能力。（<strong>拥塞根源：负载&gt;资源</strong>），因此要解决拥塞就是要扭转这个不等式，所以可以从两方面入手</p><h3 id="增加资源"><a href="#增加资源" class="headerlink" title="增加资源"></a>增加资源</h3><p>可以在某些点间增加更多的通道，提升带宽，增加资源承载能力以解决问题。</p><h3 id="降低负载"><a href="#降低负载" class="headerlink" title="降低负载"></a>降低负载</h3><ul><li>拒绝服务：拒绝为某些用户提供服务</li><li>服务降质：为某些用户的服务降低等级</li><li>绕开拥塞点：让用户更有预见性的安排需求</li></ul><h4 id="以上几种方法的反应顺序与速度"><a href="#以上几种方法的反应顺序与速度" class="headerlink" title="以上几种方法的反应顺序与速度"></a>以上几种方法的反应顺序与速度</h4><p><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/%E5%8F%8D%E5%BA%94%E9%80%9F%E5%BA%A6.jpg" alt="反应速度"></p><h3 id="数据报子网中的流量限制方法"><a href="#数据报子网中的流量限制方法" class="headerlink" title="数据报子网中的流量限制方法"></a>数据报子网中的流量限制方法</h3><ul><li>每台路由器可以监视它的输出线路和其它资源的使用情况</li><li>每条线路和一个实变量 u 关联在一起，其值位于(0.0 -1.0)之间</li><li>无论何时，只要 u 超出了阈值，对应的线路就进入到警告<br>“warning”状态</li><li>每个新到达的分组都将被检查，看它的输出线路是否处于<br>“警告状态”</li></ul><p>处于警告状态后，可以采取抑制分组措施来解决问题。</p><h3 id="抑制分组原理："><a href="#抑制分组原理：" class="headerlink" title="抑制分组原理："></a>抑制分组原理：</h3><p>当发生拥塞后，路由器向源机发送ICMP抑制分组，源机在收到抑制分组后，削减发送到目的机的流量，并在一段时间内丢弃目的机发送的抑制分组，以避免过度削减流量。一段时间后，源机继续检测是否仍有抑制分组，如果不再收到抑制分组，就逐渐增加流量大小</p><h3 id="逐跳抑制分组："><a href="#逐跳抑制分组：" class="headerlink" title="逐跳抑制分组："></a>逐跳抑制分组：</h3><p>当网络拥塞或是距离过远时，直接发送抑制分组的效果并不好，这时可以采用逐跳抑制分组的方式，对目的机上游的路由器逐个进行抑制，这样可以快速解决拥塞问题，但这大大增加了上游路由器所需要的缓存空间</p><h3 id="负载脱落-载荷脱落"><a href="#负载脱落-载荷脱落" class="headerlink" title="负载脱落/载荷脱落"></a>负载脱落/载荷脱落</h3><p>处理拥塞最极端，最有效的方法。面对超载时，就会选择丢弃一部分分组，丢弃部分分组的决定方式有:</p><h4 id="分组丢弃策略："><a href="#分组丢弃策略：" class="headerlink" title="分组丢弃策略："></a>分组丢弃策略：</h4><ul><li>随即丢弃</li><li>丢弃新到达的分组(葡萄酒策略，适合文件传输)</li><li>丢弃早到达的分组(牛奶策略，适合多媒体类)</li><li>丢弃不太重要的分组(需要在分组中指明优先级)</li></ul><h2 id="随机早期检测（RED）"><a href="#随机早期检测（RED）" class="headerlink" title="随机早期检测（RED）"></a>随机早期检测（RED）</h2><h4 id="Random-Early-Detection"><a href="#Random-Early-Detection" class="headerlink" title="(Random Early Detection)"></a>(Random Early Detection)</h4><p>在情况恶化，无可救药之前，采取一定措施的检测方式，就是在拥塞早期对分组进行处理。根据路由器维护的最早的队列，平均长度来决定何时开始丢弃分组（拥塞处理开始）</p><hr><h1 id="流量整形"><a href="#流量整形" class="headerlink" title="流量整形"></a>流量整形</h1><p>用户产生的数据总是忽大忽小的，具有突发特性。而流量整形就是调节数据平均传输速率（和突发数据流），以减少突发带来的拥塞，缓存溢出以及丢包等等问题。</p><h3 id="流量整形算法主要有漏桶，令牌桶两种"><a href="#流量整形算法主要有漏桶，令牌桶两种" class="headerlink" title="流量整形算法主要有漏桶，令牌桶两种"></a>流量整形算法主要有漏桶，令牌桶两种</h3><h2 id="漏桶"><a href="#漏桶" class="headerlink" title="漏桶"></a>漏桶</h2><ul><li>每个主机连接到网络的接口中都有一个漏桶，即一个优先长度的内部队列</li><li>当桶中有分组的时候，输出速率是恒定的，当桶空的时候，输出速率是0</li><li>当一个分组到达满的桶的时候，分组将被丢弃（满则溢）</li><li>每个时钟嘀嗒(tick)，仅允许一个分组或固定数量的分组发送出去</li></ul><h3 id="算法效果"><a href="#算法效果" class="headerlink" title="算法效果"></a>算法效果</h3><p>主机内用户进程产生的分组流往往是一个不稳定的流，漏桶可以让它输出到网络时变成一个稳定流，抹平了突发尖峰，极大地减少了发生拥塞的机会。</p><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><p>漏桶满了之后数据将被丢弃，不能大量的突发数据</p><h2 id="令牌桶"><a href="#令牌桶" class="headerlink" title="令牌桶"></a>令牌桶</h2><p>令牌桶是改进的漏桶算法</p><ul><li>当大量数据突发的时候，令牌桶算法允许输出加快到某种程度</li><li>令牌桶拥有令牌（tokens），且以每△T秒产生一个令牌的速度往桶中输入令牌</li><li>一个分组要发送的时候，它必要从桶中取出和获取到一个令牌</li><li>令牌桶算法允许累积令牌，但最多可以累积n（令牌桶的容量）个令牌</li></ul><h3 id="和漏桶算法相比："><a href="#和漏桶算法相比：" class="headerlink" title="和漏桶算法相比："></a>和漏桶算法相比：</h3><ul><li>令牌桶允许突发，但是最大突发受制于令牌桶容量的限制</li><li>当桶满的时候，令牌桶算法丢掉的是令牌（不是分组）</li></ul><p><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/%E4%BB%A4%E7%89%8C%E6%A1%B6.jpg" alt="令牌桶"></p><h3 id="计算最大突发时间"><a href="#计算最大突发时间" class="headerlink" title="计算最大突发时间"></a>计算最大突发时间</h3><ul><li>突发时间： S 秒</li><li>令牌桶容量： B字节</li><li>令牌到达的速率： R 字节/秒</li><li>最大输出速率： M 字节/秒</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">B+RS=MS</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">S=\frac&#123;B&#125;&#123;M-R&#125;</span><br></pre></td></tr></table></figure><hr>]]></content>
      
      
      <categories>
          
          <category> 计算机基础 </category>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1-区块链基础概述</title>
      <link href="/2021/05/16/1-%E5%8C%BA%E5%9D%97%E9%93%BE%E5%9F%BA%E7%A1%80%E6%A6%82%E8%BF%B0/"/>
      <url>/2021/05/16/1-%E5%8C%BA%E5%9D%97%E9%93%BE%E5%9F%BA%E7%A1%80%E6%A6%82%E8%BF%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="1-区块链基础概述"><a href="#1-区块链基础概述" class="headerlink" title="1-区块链基础概述"></a>1-区块链基础概述</h1><blockquote><p>区块链（英语：blockchain或block chain）是借由密码学串接并保护内容的串连文字记录（又称区块）。每一个区块包含了前一个区块的加密散列、相应时间戳记以及交易资料（通常用默克尔树（Merkle tree）算法计算的散列值表示），这样的设计使得区块内容具有难以篡改的特性。用区块链技术所串接的分布式账本能让两方有效记录交易，且可永久查验此交易。目前区块链技术最大的应用是数字货币，例如比特币的发明。</p></blockquote><blockquote><p>比特币（英语：Bitcoin，缩写：BTC 或 XBT）是一种基于去中心化，采用点对点网络与共识主动性，开放源代码，以区块链作为底层技术的加密货币，比特币由中本聪（网名）（Satoshi Nakamoto）于2008年10月31日发表论文，2009年1月3日，创世区块诞生。在某些国家、央行、政府机关则将比特币视为虚拟商品，而不认为是货币。</p></blockquote><h2 id="区块链结构"><a href="#区块链结构" class="headerlink" title="区块链结构"></a>区块链结构</h2><p>在加密货币应用中，区块链结构的作用就是用作账本，每一个区块都是一页账册，它们相互之间通过哈希值进行连接形成一条完整有序的链表，每个区块的头部哈希是它们的唯一标识。</p><p><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/%E5%8C%BA%E5%9D%97%E9%93%BE%E7%BB%93%E6%9E%84.jpg"></p><p>从上面的区块链结构可以看得出，一个区块由主要的三部分组成，分别是区块头部以及区块主体还有单独的确认数。区块头部存储了整个区块的基本信息：区块高度本质是区块的索引值，标识了该区块在整个区块中的索引位置，难度指标记录了当前区块链网络中所挖取的区块的难度值，PoW结果即符合难度指标下求解出的nonce值，时间戳记录了当前区块生成的时间，区块头部哈希唯一标识该区块，其由区块头部数据经过哈希算法得出，前置区块preHash记录了该区块前一位区块的哈希值。区块主体Body只负责存储开始挖矿操作前，交易池中所存储的全部交易数据。最后第三部分是确认数，即当某一结点发现区块时将其广播出去后，得到其他节点确认的数量，比特币中，以6个为界，6个以上确认数的区块一般被认为是不可能出现错误的区块，以太坊中，则以12个确认数为界。</p><p>在区块链结构中，展现的最重要的内容就是通过哈希算法，确保数据的不可篡改性，上面的区块链结构对区块链内容进行部分省略，真实结构中区块头部存储了额外的属性“Merkle Hash”，MerkleHash通过对所有交易数据进行哈希计算得来，这与我们一般进行哈希计算不同，首先对每笔交易进行哈希计算，随后将结果按照顺序两两相加，在对相加的结果进行哈希计算，不断重复，直到算得唯一的哈希值为止，以该值为Merkle Hash，该值可以保证区块中交易的不可篡改，只要改动任意一笔交易都会导致merklehash的值被改变从而无法通过校验<br><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/merklehash.png"><br>（碰到奇数情况，最后一个哈希值无法配对的情况下，则该哈希值进行自加运算自己与自己相加后计算哈希值）</p><p><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/merklehash2.png"></p><p>除了上面提到的Merkle Hash，记录在区块头部的头部Hash则是用来唯一表示该区块，其由区块头部的全部数据生成</p><blockquote><p>如果一个恶意的攻击者修改了一个区块中的某个交易，那么Merkle Hash验证就不会通过。所以，他只能重新计算Merkle Hash，然后把区块头的Merkle Hash也修改了。这时，我们就会发现，这个区块本身的Block Hash就变了，所以，下一个区块指向它的链接就断掉了。由于比特币区块的哈希必须满足一个难度值，因此，攻击者必须先重新计算这个区块的Block Hash，然后，再把后续所有区块全部重新计算并且伪造出来，才能够修改整个区块链。在后面的挖矿中，我们会看到，修改一个区块的成本就已经非常非常高了，要修改后续所有区块，这个攻击者必须掌握全网51%以上的算力才行，所以，修改区块链的难度是非常非常大的，并且，由于正常的区块链在不断增长，同样一个区块，修改它的难度会随着时间的推移而不断增加。</p></blockquote><p>比特币使用的加密算法分为两种：SHA-256和RipeMD160，其利用这两种哈希算法的方式分别是</p><ul><li>对数据进行两次SHA-256计算，这种算法在比特币协议中通常被称为hash256或者dhash</li><li>先计算SHA-256，再计算RipeMD160，这种算法在比特币协议中通常被称为hash160</li></ul><h3 id="定义区块链结构"><a href="#定义区块链结构" class="headerlink" title="定义区块链结构"></a>定义区块链结构</h3><h4 id="区块结构设计"><a href="#区块结构设计" class="headerlink" title="区块结构设计"></a>区块结构设计</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Block</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 区块 Header</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> BlockHeader header;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 区块 Body</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> BlockBody body;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 确认数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> confirmNum = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="区块头部设计"><a href="#区块头部设计" class="headerlink" title="区块头部设计"></a>区块头部设计</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 区块头</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"> <span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BlockHeader</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 区块高度</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> Integer index;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 难度指标</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> BigInteger difficulty;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * PoW 问题的答案</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> Long nonce;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 时间戳</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> Long timestamp;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 区块头 Hash</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> String hash;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 上一个区块的 hash 地址</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> String previousHash;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">BlockHeader</span><span class="params">(Integer index, String previousHash)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.index = index;</span><br><span class="line"><span class="keyword">this</span>.timestamp = System.currentTimeMillis();</span><br><span class="line"><span class="keyword">this</span>.previousHash = previousHash;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">BlockHeader</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.timestamp = System.currentTimeMillis();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;BlockHeader&#123;&quot;</span> +</span><br><span class="line"><span class="string">&quot;index=&quot;</span> + index +</span><br><span class="line"><span class="string">&quot;, difficulty=&quot;</span> + difficulty +</span><br><span class="line"><span class="string">&quot;, nonce=&quot;</span> + nonce +</span><br><span class="line"><span class="string">&quot;, timestamp=&quot;</span> + timestamp +</span><br><span class="line"><span class="string">&quot;, hash=&#x27;&quot;</span> + hash + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line"><span class="string">&quot;, previousHash=&#x27;&quot;</span> + previousHash + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line"><span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 计算当前区块头的 hash 值</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">hash</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> Hash.sha3(<span class="string">&quot;BlockHeader&#123;&quot;</span> +</span><br><span class="line"><span class="string">&quot;index=&quot;</span> + index +</span><br><span class="line"><span class="string">&quot;, difficulty=&quot;</span> + difficulty +</span><br><span class="line"><span class="string">&quot;, nonce=&quot;</span> + nonce +</span><br><span class="line"><span class="string">&quot;, timestamp=&quot;</span> + timestamp +</span><br><span class="line"><span class="string">&quot;, previousHash=&#x27;&quot;</span> + previousHash + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line"><span class="string">&#x27;&#125;&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="区块主体设计"><a href="#区块主体设计" class="headerlink" title="区块主体设计"></a>区块主体设计</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 区块数据</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BlockBody</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 区块所包含的交易记录</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> List&lt;Transaction&gt; transactions;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">BlockBody</span><span class="params">(List&lt;Transaction&gt; transactions)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.transactions = transactions;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">BlockBody</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.transactions = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Transaction&gt; <span class="title">getTransactions</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> transactions;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 添加一笔交易打包到区块</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> transaction</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addTransaction</span><span class="params">(Transaction transaction)</span> </span>&#123;</span><br><span class="line">transactions.add(transaction);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;BlockBody&#123;&quot;</span> +</span><br><span class="line"><span class="string">&quot;transactions=&quot;</span> + transactions +</span><br><span class="line"><span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="区块链结构设计"><a href="#区块链结构设计" class="headerlink" title="区块链结构设计"></a>区块链结构设计</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 区块链主类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BlockChain</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//日志打印工具</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Logger logger = LoggerFactory.getLogger(BlockChain.class);</span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> DBAccess dbAccess; <span class="comment">//数据库操作</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> AppClient appClient; <span class="comment">//客户端启动</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> Miner miner; <span class="comment">//矿工类，用于进行挖矿</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> TransactionPool transactionPool; <span class="comment">//交易池</span></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> TransactionExecutor transactionExecutor;  <span class="comment">//交易执行器</span></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> AppConfig appConfig; <span class="comment">//系统配置</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 是否正在同步区块</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">boolean</span> syncing = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 挖取一个区块</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Block <span class="title">mining</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">Optional&lt;Block&gt; lastBlock = getLastBlock(); <span class="comment">//获取当前区块链上最后一个区块</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 创建新区块，这里需要注意这个新建区块的过程不是简单的新建一个对象，而是在该方法</span></span><br><span class="line"><span class="comment"> * 中完成了区块对象的创建，以及挖矿计算（工作量证明），并且写入了该区块的基本信息。</span></span><br><span class="line"><span class="comment"> * 同时写入了第一笔交易，即CoinBase交易（矿工奖励）</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">Block block = miner.newBlock(lastBlock);   </span><br><span class="line"><span class="comment">// 获取当前未打包的交易记录</span></span><br><span class="line"><span class="keyword">for</span> (Iterator t = transactionPool.getTransactions().iterator(); t.hasNext();) &#123;</span><br><span class="line"><span class="comment">//向区块中添加交易记录</span></span><br><span class="line">block.getBody().addTransaction((Transaction) t.next());</span><br><span class="line">t.remove(); <span class="comment">// 已打包的交易移出交易池</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 存储区块信息到数据库</span></span><br><span class="line">dbAccess.putLastBlockIndex(block.getHeader().getIndex());</span><br><span class="line">dbAccess.putBlock(block);</span><br><span class="line">logger.info(<span class="string">&quot;Find a New Block, &#123;&#125;&quot;</span>, block);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断系统是否设置了自动发现其他节点，如果设置了，需要在挖矿成功后，将新区块广播到所有节点</span></span><br><span class="line"><span class="keyword">if</span> (appConfig.isNodeDiscover()) &#123;</span><br><span class="line"><span class="comment">// 触发挖矿事件，并等待其他节点确认区块</span></span><br><span class="line">ApplicationContextProvider.publishEvent(<span class="keyword">new</span> NewBlockEvent(block));</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// 未开启节点自动发现，不需要发布信息</span></span><br><span class="line">transactionExecutor.run(block);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> block;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 发送交易</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> credentials 交易发起者的凭证</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> to 交易接收者</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> amount</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> data 交易附言</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Transaction <span class="title">sendTransaction</span><span class="params">(Credentials credentials, String to, BigDecimal amount, String data)</span> <span class="keyword">throws</span></span></span><br><span class="line"><span class="function">Exception </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//校验付款和收款地址</span></span><br><span class="line">Preconditions.checkArgument(to.startsWith(<span class="string">&quot;0x&quot;</span>), <span class="string">&quot;收款地址格式不正确&quot;</span>);</span><br><span class="line">Preconditions.checkArgument(!credentials.getAddress().equals(to), <span class="string">&quot;收款地址不能和发送地址相同&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//构建交易对象</span></span><br><span class="line">Transaction transaction = <span class="keyword">new</span> Transaction(credentials.getAddress(), to, amount);</span><br><span class="line">transaction.setPublicKey(Keys.publicKeyEncode(credentials.getEcKeyPair().getPublicKey().getEncoded()));</span><br><span class="line">transaction.setStatus(TransactionStatusEnum.APPENDING);</span><br><span class="line">transaction.setData(data);</span><br><span class="line">transaction.setTxHash(transaction.hash());</span><br><span class="line"><span class="comment">//签名</span></span><br><span class="line">String sign = Sign.sign(credentials.getEcKeyPair().getPrivateKey(), transaction.toSignString());</span><br><span class="line">transaction.setSign(sign);</span><br><span class="line"></span><br><span class="line"><span class="comment">//先验证私钥是否正确</span></span><br><span class="line"><span class="keyword">if</span> (!Sign.verify(credentials.getEcKeyPair().getPublicKey(), sign, transaction.toSignString())) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;私钥签名验证失败，非法的私钥&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 加入交易池，等待打包</span></span><br><span class="line">transactionPool.addTransaction(transaction);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (appConfig.isNodeDiscover()) &#123;</span><br><span class="line"><span class="comment">//触发交易事件，向全网广播交易，并等待确认</span></span><br><span class="line">ApplicationContextProvider.publishEvent(<span class="keyword">new</span> NewTransactionEvent(transaction));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> transaction;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取最后一个区块</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Optional&lt;Block&gt; <span class="title">getLastBlock</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> dbAccess.getLastBlock();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 添加一个节点</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> ip</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> port</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addNode</span><span class="params">(String ip, <span class="keyword">int</span> port)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">appClient.addNode(ip, port);</span><br><span class="line">Node node = <span class="keyword">new</span> Node(ip, port);</span><br><span class="line">dbAccess.addNode(node);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="加密货币的两种货币模型（UTXO和Account模型）"><a href="#加密货币的两种货币模型（UTXO和Account模型）" class="headerlink" title="加密货币的两种货币模型（UTXO和Account模型）"></a>加密货币的两种货币模型（UTXO和Account模型）</h2><p>在加密货币领域存在两种货币存储模型，一种是以太坊所使用的也是最常见，最为普遍应用的账户模型（Account模型），另一种则是中本聪提出的目前比特币所使用的UTXO模型（未使用的交易输出）</p><p>Account模型即账户模型，简单来讲，就是系统会始终维护一张账户表，账户表记录了有关于使用者的所有账户信息（核心在于始终维护账户余额）。在每次计算账户余额时都需要遍历区块链，获取有关该用户的所有交易信息，然后对交易信息核算，得到账户余额，这种模型在为支付而产生的比特币身上并不适用。</p><p>UTXO模型则直接从概念上去除了货币与钱包模型，只保留了支付输入和支付输出两个概念，即每笔交易都是由输入和输出组成的，例如：A所有的未使用的交易输出为10，此时A向B转账2，本质上就是A的10单位未支付输出转化为两部分（UTXO模型中不存在使用一部分未支付输出的概念，转换的前提一定是用尽这个用户的所有未支付输出），一部分是转换给B的2单位未支付输出，另一部分就是转给A（自己）的8单位未支付输出，这个概念更类似于我们现实生活中的纸币概念，每张纸币的源头一定是国家进行发行，每张纸币不能再细分，只会以找零的形式回到我们手中一部分。</p><p>UTXO模型交易的一些要求：</p><ul><li>除了挖矿( coinbase 交易) 之外，所有的资金来源都必须来自前面某一个或者几个交易的 UTXO，你可以把它理解成一个特殊的链表。</li><li>UTXO 是交易的最小单元，不嫩再分割.</li><li>任何一笔交易的交易输入总量必须等于交易输出总量，等式两边必须配平.</li><li>比特币种没有余额概念，只有分散到区块链里的 UTXO.</li></ul><p>例如，我们以一个稍微复杂的交易图来展示两种货币模型在计算余额过程中的区别</p><p><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/dahdjkahjk.jpg"></p><p>现在，在Account模型的前提下，我们要计算甲的账户余额就需要遍历整个交易网络，筛选出有关于甲的所有交易，然后进行计算<br><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/hausfhfofdaio.jpg"></p><p>而通过UTXO模型，我们只需要计算最后剩余的UTXO列表，找出有关于甲的UTXO相加，最终的结果即为甲当前余额</p><p><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/bitcoin%E4%B8%A4%E7%A7%8D%E6%94%AF%E4%BB%98%E6%A8%A1%E5%9E%8B4djsaio.jpg"></p><p><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/bitcoin%E4%B8%A4%E7%A7%8D%E6%94%AF%E4%BB%98%E6%A8%A1%E5%9E%8B3dsjaio.jpg"></p><p>可以看到UTXO模型充分考虑到了比特币的交易属性，以及区块链的结构特性，能够更加快速的获得账户余额</p><h3 id="Account模型建立"><a href="#Account模型建立" class="headerlink" title="Account模型建立"></a>Account模型建立</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 钱包账户</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Account</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 钱包地址</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">protected</span> String address;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 钱包私钥</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">protected</span> String priKey;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 账户余额</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">protected</span> BigDecimal balance;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 账户控制工具类, 锁定，解锁等操作</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Personal</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> DBAccess dbAccess;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 创建一个默认账户</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Account <span class="title">newAccount</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ECKeyPair keyPair = Keys.createEcKeyPair();</span><br><span class="line"><span class="keyword">return</span> newAccount(keyPair);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 使用指定的秘钥创建一个默认账户</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> keyPair</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Account <span class="title">newAccount</span><span class="params">(ECKeyPair keyPair)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Account account = <span class="keyword">new</span> Account(keyPair.getAddress(), keyPair.exportPrivateKey(), BigDecimal.ZERO);</span><br><span class="line">dbAccess.putAccount(account); <span class="comment">// 存储账户</span></span><br><span class="line"><span class="keyword">return</span> account;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="加密货币的挖矿流程"><a href="#加密货币的挖矿流程" class="headerlink" title="加密货币的挖矿流程"></a>加密货币的挖矿流程</h2><p>比特币进行挖矿的本质，就是解数学难题的过程（利用随机数和固定数据进行哈希计算得到在指定范围下的哈希值），我们俗称的矿工，就是不断利用设备进行计算挖矿的人员。</p><p>挖矿的主要流程可以概括如下：</p><ol><li>账户与账户之间交易后，交易发起者将交易向整个网络广播</li><li>所有接收到广播的节点，对交易信息进行验证后，将交易加入本节点的交易池中</li><li>矿工节点在创建新区块对象后，会首先在交易列表中增加一笔交易，这笔交易就是系统奖励给矿工的奖励交易，也被称为CoinBase，往往是区块链的第一笔交易</li><li>在矿工节点开始挖矿后，读取交易池中的所有交易（后续加入的交易，只在交易池中保留，不干扰挖矿过程中的交易列表）</li><li>根据读取到的交易列表进行哈希计算，直到最终得到唯一的Merkle Hash，将MerkleHash写入到区块头部</li><li>对区块头部数据进行哈希计算得到头部哈希</li><li>开始进行POW工作量证明</li><li>找到符合条件的哈希值，成功建立新区块</li><li>将新区块信息广播到整个网络，其他节点在收到广播后对区块进行验证，验证通过后将其加入本节点区块链结构，并返回确认信息</li><li>其他挖矿节点在收到新区块的并验证后，停止当前挖矿进程，开始根据新的难度挖取下一个区块</li></ol><h3 id="POW共识机制"><a href="#POW共识机制" class="headerlink" title="POW共识机制"></a>POW共识机制</h3><p>上文提到，加密货币在挖矿的过程中需要确定共识机制，即所有节点都需要确定一套大家共同遵照的准则，按照该准则确定新区块的发现。比特币则采用了基于POW（Proof Of Work：工作量证明）的共识机制</p><blockquote><p>工作量证明（Proof-of-Work，PoW）是一种对应服务与资源滥用、或是阻断服务攻击的经济对策。一般是要求用户进行一些耗时适当的复杂运算，并且答案能被服务方快速验算，以此耗用的时间、设备与能源做为担保成本，以确保服务与资源是被真正的需求所使用。</p></blockquote><p>上面这句话给出了两个要点，一个是从用户角度，这些复杂运算是耗时的，可以认证用户是真正有需求的高质量用户，第二点是服务方能够快速演算，保证能够短时间验算结果并提供后续服务。这些特性最大程度上保证了比特币挖矿的环境，复杂的耗时运算保证了挖矿节点都是高算力且稳定的节点，具有维持区块链结构的能力，服务方能够快速验证，保证了其他节点在收到新区块消息后能够快速验算并更新区块链结构</p><h4 id="简单的工作量证明实例："><a href="#简单的工作量证明实例：" class="headerlink" title="简单的工作量证明实例："></a>简单的工作量证明实例：</h4><p>教师在布置作业，希望通过作业检验同学们的工作量，为每位同学布置了一道高阶方程习题，由于高阶方程并没有有效的数学解法，同学们只能通过穷举法一个个尝试答案，为了保证同学们之间不可以相互抄袭，老师规定方程最高阶的系数是同学自己的学号，因此，每位同学的方程最终解都不一定相同，同时，老师可以用较短的时间快速检验同学们的解是否正确</p><p>$$?X^9+3X^5-2X^2+3X=0$$</p><p>最快解出方程并经过其他同学和老师检验的同学便可以证明自己的工作量，得到部分奖励。</p><hr><p>以上实例解释了工作量证明如何在系统中生效，比特币的挖矿过程与之类似，但并不是计算高阶方程，而是进行哈希运算，挖矿过程中，节点会通过更改区块头部nonce不断生成不同的头部哈希，然后将头部哈希与当前难度范围进行比较，难度范围就是哈希值前0的个数，随着比特币网络中算力的增加，难度范围会不断加大。例如，当前难度为4，就指需要生成头部哈希的前四位都是0的nonce值</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">hash256(block data, nonce=0) = 291656f37cdcf493c4bb7b926e46fee5c14f9b76aff28f9d00f5cca0e54f376f</span><br><span class="line">hash256(block data, nonce=1) = f7b2c15c4de7f482edee9e8db7287a6c5def1c99354108ef33947f34d891ea8d</span><br><span class="line">hash256(block data, nonce=2) = b6eebc5faa4c44d9f5232631f39ddf4211443d819208da110229b644d2a99e12</span><br><span class="line">hash256(block data, nonce=3) = 00aeaaf01166a93a2217fe01021395b066dd3a81daffcd16626c308c644c5246</span><br><span class="line">hash256(block data, nonce=4) = 26d33671119c9180594a91a2f1f0eb08bdd0b595e3724050acb68703dc99f9b5</span><br><span class="line">hash256(block data, nonce=5) = 4e8a3dcab619a7ce5c68e8f4abdc49f98de1a71e58f0ce9a0d95e024cce7c81a</span><br><span class="line">hash256(block data, nonce=6) = 185f634d50b17eba93b260a911ba6dbe9427b72f74f8248774930c0d8588c193</span><br><span class="line">hash256(block data, nonce=7) = 09b19f3d32e3e5771bddc5f0e1ee3c1bac1ba4a85e7b2cc30833a120e41272ed</span><br><span class="line">...</span><br><span class="line">hash256(block data, nonce=709132) = 0000bc1afba7277ef31c8ecd1f3fef071cf993485fe5eab08e4f7647f47be95c</span><br></pre></td></tr></table></figure><p>节点在发现新区块后可以安全广播，得益于两点，首先在进行新区块的哈希计算前，区块头部增加了MerkleHash，其通过当前交易池内的所有交易确定，所以如果有恶意节点篡改交易数据会导致MerkleHash发生变化，进而导致头部哈希发生变化无法通过验证，想要修改交易数据必须重新计算MerkleHash以及之后的所有区块数据（因为后面节点的头部哈希依赖于该节点的哈希值即前置哈希preHash），同时，挖矿节点也不需要担心自己的工作量结果被盗窃，因为交易列表中的第一笔交易记录了奖励交易CoinBase，这笔交易是指向挖矿节点的，如果被修改也会导致前面所说的结果发生。</p><p>比特币的奖励和难度值都是动态变化的，比特币总量约2100万枚，初始状态下每发现一个新区块奖励50枚比特币，每挖去剩余总量的一半都会导致新发现区块链的奖励减半，例如当发现1050万枚比特币后，新发现奖励变为25枚，当之后又发现525万枚后，奖励减半为12.5枚比特币。比特币网络的难度值也是不断变化的，它的难度值保证大约每10分钟产生一个区块，而难度值在每2015个区块调整一次：如果区块平均生成时间小于10分钟，说明全网算力增加，难度值也会增加，如果区块平均生成时间大于10分钟，说明全网算力减少，难度值也会减少。因此，难度值随着全网算力的增减会动态调整。</p><p><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/%E6%8C%96%E7%9F%BF%E6%B5%81%E7%A8%8Biufusa.jpg"></p><h3 id="POW算法实现"><a href="#POW算法实现" class="headerlink" title="POW算法实现"></a>POW算法实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 工作量证明实现</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProofOfWork</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 难度目标位, target=24 时大约 30 秒出一个区块</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> TARGET_BITS = <span class="number">18</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 区块</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Block block;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 难度目标值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> BigInteger target;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;创建新的工作量证明，设定难度目标值&lt;/p&gt;</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;对1进行移位运算，将1向左移动 (256 - TARGET_BITS) 位，得到我们的难度目标值&lt;/p&gt;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> block</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ProofOfWork <span class="title">newProofOfWork</span><span class="params">(Block block)</span> </span>&#123;</span><br><span class="line">        BigInteger targetValue = BigInteger.valueOf(<span class="number">1</span>).shiftLeft((<span class="number">256</span> - TARGET_BITS));</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ProofOfWork(block, targetValue);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">ProofOfWork</span><span class="params">(Block block, BigInteger target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.block = block;</span><br><span class="line">        <span class="keyword">this</span>.target = target;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 运行工作量证明，开始挖矿，找到小于难度目标值的Hash</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> PowResult <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> nonce = <span class="number">0</span>;</span><br><span class="line">        String shaHex = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">while</span> (nonce &lt; Long.MAX_VALUE) &#123;</span><br><span class="line">            <span class="keyword">byte</span>[] data = <span class="keyword">this</span>.prepareData(nonce);</span><br><span class="line">            shaHex = Hash.sha3String(data);</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">new</span> BigInteger(shaHex, <span class="number">16</span>).compareTo(<span class="keyword">this</span>.target) == -<span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                nonce++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> PowResult(nonce, shaHex, <span class="keyword">this</span>.target);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 验证区块是否有效</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">validate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">byte</span>[] data = <span class="keyword">this</span>.prepareData(<span class="keyword">this</span>.getBlock().getHeader().getNonce());</span><br><span class="line">        <span class="comment">// 与目标难度值进行比较</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> BigInteger(Hash.sha3String(data), <span class="number">16</span>).compareTo(<span class="keyword">this</span>.target) == -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 准备数据</span></span><br><span class="line"><span class="comment">     * 注意：在准备区块数据时，一定要从原始数据类型转化为byte[]，不能直接从字符串进行转换</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> nonce</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">byte</span>[] prepareData(<span class="keyword">long</span> nonce) &#123;</span><br><span class="line">        <span class="keyword">byte</span>[] prevBlockHashBytes = &#123;&#125;;</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isNotBlank(<span class="keyword">this</span>.getBlock().getHeader().getPreviousHash())) &#123;</span><br><span class="line">            <span class="comment">//这里要去掉 hash 值的　0x 前缀， 否则会抛出异常</span></span><br><span class="line">            String prevHash = Numeric.cleanHexPrefix(<span class="keyword">this</span>.getBlock().getHeader().getPreviousHash());</span><br><span class="line">            prevBlockHashBytes = <span class="keyword">new</span> BigInteger(prevHash, <span class="number">16</span>).toByteArray();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> ByteUtils.merge(</span><br><span class="line">                prevBlockHashBytes,</span><br><span class="line">                ByteUtils.toBytes(<span class="keyword">this</span>.getBlock().getHeader().getTimestamp()),</span><br><span class="line">                ByteUtils.toBytes(TARGET_BITS),</span><br><span class="line">                ByteUtils.toBytes(nonce)</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> Block <span class="title">getBlock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> block;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> BigInteger <span class="title">getTarget</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> BigInteger.valueOf(<span class="number">1</span>).shiftLeft((<span class="number">256</span> - TARGET_BITS));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * PoW 挖矿算法实现</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PowMiner</span> <span class="keyword">implements</span> <span class="title">Miner</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> DBAccess dbAccess;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Block <span class="title">newBlock</span><span class="params">(Optional&lt;Block&gt; block)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取挖矿账户</span></span><br><span class="line">Account account;</span><br><span class="line">Optional&lt;Account&gt; minerAccount = dbAccess.getMinerAccount();</span><br><span class="line"><span class="keyword">if</span> (!minerAccount.isPresent()) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;没有找到挖矿账户，请先创建挖矿账户.&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">Block newBlock;</span><br><span class="line"><span class="comment">//block.isPresent()判断类对象是否存在，避免空指针异常</span></span><br><span class="line"><span class="keyword">if</span> (block.isPresent()) &#123;</span><br><span class="line">Block prev = block.get(); <span class="comment">//传入的区块是末尾区块，以该区块为前置区块创建新区快</span></span><br><span class="line"><span class="comment">//创建区块的header和body</span></span><br><span class="line">BlockHeader header = <span class="keyword">new</span> BlockHeader(prev.getHeader().getIndex()+<span class="number">1</span>, prev.getHeader().getHash()); <span class="comment">//传入index和前置hash</span></span><br><span class="line">BlockBody body = <span class="keyword">new</span> BlockBody();</span><br><span class="line">newBlock = <span class="keyword">new</span> Block(header, body);  <span class="comment">//创建新区块</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">//创建创世区块</span></span><br><span class="line">newBlock = createGenesisBlock();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//创建挖矿奖励交易</span></span><br><span class="line">Transaction transaction = <span class="keyword">new</span> Transaction();</span><br><span class="line"></span><br><span class="line">account = minerAccount.get();</span><br><span class="line">transaction.setTo(account.getAddress());</span><br><span class="line">transaction.setData(<span class="string">&quot;Miner Reward.&quot;</span>);</span><br><span class="line">transaction.setTxHash(transaction.hash());</span><br><span class="line">transaction.setAmount(Miner.MINING_REWARD);</span><br><span class="line"></span><br><span class="line"><span class="comment">//如果不是创世区块，则使用工作量证明挖矿</span></span><br><span class="line"><span class="keyword">if</span> (block.isPresent()) &#123;</span><br><span class="line">ProofOfWork proofOfWork = ProofOfWork.newProofOfWork(newBlock);</span><br><span class="line">PowResult result = proofOfWork.run();</span><br><span class="line">newBlock.getHeader().setDifficulty(result.getTarget());</span><br><span class="line">newBlock.getHeader().setNonce(result.getNonce());</span><br><span class="line">newBlock.getHeader().setHash(result.getHash());</span><br><span class="line">&#125;</span><br><span class="line">newBlock.getBody().addTransaction(transaction);</span><br><span class="line"></span><br><span class="line"><span class="comment">//更新最后一个区块索引</span></span><br><span class="line">dbAccess.putLastBlockIndex(newBlock.getHeader().getIndex());</span><br><span class="line"><span class="keyword">return</span> newBlock;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 创建创世区块</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> Block <span class="title">createGenesisBlock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">BlockHeader header = <span class="keyword">new</span> BlockHeader(<span class="number">1</span>, <span class="keyword">null</span>);</span><br><span class="line">header.setNonce(PowMiner.GENESIS_BLOCK_NONCE);</span><br><span class="line">header.setDifficulty(ProofOfWork.getTarget());</span><br><span class="line">header.setHash(header.hash());</span><br><span class="line">BlockBody body = <span class="keyword">new</span> BlockBody();</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> Block(header, body);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">validateBlock</span><span class="params">(Block block)</span> </span>&#123;</span><br><span class="line">ProofOfWork proofOfWork = ProofOfWork.newProofOfWork(block);</span><br><span class="line"><span class="keyword">return</span> proofOfWork.validate();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>PowResult对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * PoW 计算结果</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"> <span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PowResult</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 计数器</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Long nonce;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 新区块的哈希值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String hash;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 目标难度值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> BigInteger target;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;PowResult&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;nonce=&quot;</span> + nonce +</span><br><span class="line">                <span class="string">&quot;, hash=&#x27;&quot;</span> + hash + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, target=&quot;</span> + target +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>挖矿接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 挖矿接口</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Miner</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 挖矿奖励</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">BigDecimal MINING_REWARD = BigDecimal.valueOf(<span class="number">50</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 创世区块难度值</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">Long GENESIS_BLOCK_NONCE = <span class="number">100000L</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 挖出一个新的区块</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> block</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">Block <span class="title">newBlock</span><span class="params">(Optional&lt;Block&gt; block)</span> <span class="keyword">throws</span> Exception</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 检验一个区块</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> block</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">validateBlock</span><span class="params">(Block block)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="加密货币的交易流程"><a href="#加密货币的交易流程" class="headerlink" title="加密货币的交易流程"></a>加密货币的交易流程</h2><p>加密货币交易的流程中，最核心的两个概念就是数据加密以及数据签名，二者概念相近，但用法正好相反。数据签名和数据加密的过程都是使用公开的密钥系统，但实现的过程正好相反：</p><ul><li>数据加密使用的是接受方的密钥对，任何知道接受方公钥的都可以向接受方发送消息，但是只有拥有私钥的才能解密出来；</li><li>数据签名使用的是发送方的密钥对，任何接受方都可以用公钥解密，验证数据的正确性。</li></ul><p>首先为了保证交易数据中接收方的私密性，我们使用数据加密算法对交易的数据进行加密，使用接收方的公钥加密后，向全网络广播该交易，全网络中所有节点上的区块链经过验证后都会记录这笔交易，但只有交易的接收方能够通过私钥解密这笔交易，获得交易的信息。</p><p>其次为了保证发送方以及交易数据的安全性，发送方在发送前需要将交易信息取摘要，然后对交易信息的摘要利用自己的私钥进行签名，这样所有网络上的节点在接收该笔交易记录后会首先用发送方的公钥对摘要进行验证，如果通过验证，则保证了交易信息和发送方没有被篡改，可以将这笔交易存入交易池中等待打包到数据链上</p><p><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/%E5%8A%A0%E5%AF%86%E8%B4%A7%E5%B8%81%E4%BA%A4%E6%98%93%E6%B5%81%E7%A8%8B.jpg"></p><h3 id="数字加密"><a href="#数字加密" class="headerlink" title="数字加密"></a>数字加密</h3><p>比特币中的非对称加密使用的是ECDSA椭圆曲线加密算法，比特币中所用的椭圆曲线的参数由secp256k1定义，定义在Standard Efficient Cryptography(SEC)中，该算法在比特币出现之前几乎没有被人使用过，但是随着比特币的应用，现在越来越受到关注。secp256k1和传统的椭圆曲线算法相比具有如下特性：</p><ul><li>secp256k1是用非随机的方式生成，而传统的椭圆曲线则是用随机方式生成</li><li>因为secp256k1用非随机方式生成，因此效率很高，如果实现中优化的好，效率会比常用的椭圆曲线高30%</li></ul><p>比特币钱包地址的生成过程见图，其中就是用到了椭圆曲线算法进行加密，首先私钥利用椭圆曲线生成公钥，随后利用公钥进行哈希运算得到比特币的地址，理论上两个计算过程都是单项不可逆的<br><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/20180606105212877.jpg"></p><h3 id="数字签名"><a href="#数字签名" class="headerlink" title="数字签名"></a>数字签名</h3><p>非对称加密的一个主要应用场景就是数字签名，签名算法是使用私钥签名，公钥验证的方法，对一个消息的真伪进行确认。数字签名在比特币中的作用就是证明某人是比特币的合法所有人，简单说就是对消息的发送者验明正身。</p><p>签名的目的是为了证明，该消息确实是由持有私钥privateKet的人发出的，任何其他人都可以对签名进行验证。验证方法是，由私钥持有人公开对应的公钥publicKey，其他人用公钥publicKey对消息message和签名signature进行验证</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Boolean <span class="title">verify</span><span class="params">(message, signature, publicKey)</span></span>;</span><br></pre></td></tr></table></figure><p>数字签名算法在电子商务、在线支付这些领域有非常重要的作用，因为它能通过密码学理论证明：</p><ol><li>签名不可伪造，因为私钥只有签名人自己知道，所以其他人无法伪造签名；</li><li>消息不可篡改，如果原始消息被人篡改了，对签名进行验证将失败；</li><li>签名不可抵赖，如果对签名进行验证通过了，签名人不能抵赖自己曾经发过这一条消息。</li></ol><p>对消息进行签名，实际上是对消息的哈希进行签名，这样可以使任意长度的消息在签名前先转换为固定长度的哈希数据。对哈希进行签名相当于保证了原始消息的不可伪造性。</p><p>假设A的钱包有一笔未花费输出UTXO，包含5个BTC，现在A给B转账1BTC，那么比特币网络中的其他节点怎样证明A就是这笔UTXO的所有人，只有他才能动用这笔钱呢？假设A给B转账的交易为T：</p><ol><li>A的钱包对T进行hash生成数字摘要；</li><li>A的钱包用私钥对(1)中生成的交易的摘要进行签名；</li><li>交易T被广播到比特币网络中；</li><li>网络中的节点收到此交易，对交易进行各种验证，其中就包括验证A的签名。</li></ol><h3 id="交易对象的创建"><a href="#交易对象的创建" class="headerlink" title="交易对象的创建"></a>交易对象的创建</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 交易对象</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Transaction</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 付款人地址</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> String from;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 付款人签名</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> String sign;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 收款人地址</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> String to;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 收款人公钥</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> String publicKey;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 交易金额</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> BigDecimal amount;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 交易时间戳</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> Long timestamp;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 交易 Hash 值</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> String txHash;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 交易状态</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> TransactionStatusEnum status = TransactionStatusEnum.APPENDING;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 交易错误信息</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> String errorMessage;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 附加数据</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> String data;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 当前交易所属区块高度</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> blockNumber;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Transaction</span><span class="params">(String from, String to, BigDecimal amount)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.from = from;</span><br><span class="line"><span class="keyword">this</span>.to = to;</span><br><span class="line"><span class="keyword">this</span>.amount = amount;</span><br><span class="line"><span class="keyword">this</span>.timestamp = System.currentTimeMillis();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Transaction</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.timestamp = System.currentTimeMillis();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 计算交易信息的Hash值</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">hash</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> Hash.sha3(<span class="keyword">this</span>.toSignString());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 参与签名的字符串</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toSignString</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;Transaction&#123;&quot;</span> +</span><br><span class="line"><span class="string">&quot;from=&#x27;&quot;</span> + from + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line"><span class="string">&quot;, to=&#x27;&quot;</span> + to + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line"><span class="string">&quot;, publicKey=&quot;</span> + publicKey +</span><br><span class="line"><span class="string">&quot;, amount=&quot;</span> + amount +</span><br><span class="line"><span class="string">&quot;, timestamp=&quot;</span> + timestamp +</span><br><span class="line"><span class="string">&quot;, data=&#x27;&quot;</span> + data + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line"><span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;Transaction&#123;&quot;</span> +</span><br><span class="line"><span class="string">&quot;from=&#x27;&quot;</span> + from + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line"><span class="string">&quot;, sign=&#x27;&quot;</span> + sign + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line"><span class="string">&quot;, to=&#x27;&quot;</span> + to + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line"><span class="string">&quot;, publicKey=&#x27;&quot;</span> + publicKey + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line"><span class="string">&quot;, amount=&quot;</span> + amount +</span><br><span class="line"><span class="string">&quot;, timestamp=&quot;</span> + timestamp +</span><br><span class="line"><span class="string">&quot;, txHash=&#x27;&quot;</span> + txHash + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line"><span class="string">&quot;, status=&quot;</span> + status +</span><br><span class="line"><span class="string">&quot;, errorMessage=&#x27;&quot;</span> + errorMessage + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line"><span class="string">&quot;, data=&#x27;&quot;</span> + data + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line"><span class="string">&quot;, blockNumber=&quot;</span> + blockNumber +</span><br><span class="line"><span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="交易执行方法"><a href="#交易执行方法" class="headerlink" title="交易执行方法"></a>交易执行方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 交易执行器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TransactionExecutor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> DBAccess dbAccess;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> TransactionPool transactionPool;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 执行区块中的交易</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> block</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(Block block)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (Transaction transaction : block.getBody().getTransactions())</span><br><span class="line">&#123;</span><br><span class="line">Optional&lt;Account&gt; recipient = dbAccess.getAccount(transaction.getTo());</span><br><span class="line"><span class="comment">//如果收款地址账户不存在，则创建一个新账户</span></span><br><span class="line"><span class="keyword">if</span> (!recipient.isPresent()) &#123;</span><br><span class="line">recipient = Optional.of(<span class="keyword">new</span> Account(transaction.getTo(), BigDecimal.ZERO));</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//挖矿奖励</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">null</span> == transaction.getFrom()) &#123;</span><br><span class="line">recipient.get().setBalance(recipient.get().getBalance().add(transaction.getAmount()));</span><br><span class="line">dbAccess.putAccount(recipient.get());</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//账户转账</span></span><br><span class="line">Optional&lt;Account&gt; sender = dbAccess.getAccount(transaction.getFrom());</span><br><span class="line"><span class="comment">//验证签名</span></span><br><span class="line"><span class="keyword">boolean</span> verify = Sign.verify(</span><br><span class="line">Keys.publicKeyDecode(transaction.getPublicKey()),</span><br><span class="line">transaction.getSign(),</span><br><span class="line">transaction.toSignString());</span><br><span class="line"><span class="keyword">if</span> (!verify) &#123;</span><br><span class="line">transaction.setStatus(TransactionStatusEnum.FAIL);</span><br><span class="line">transaction.setErrorMessage(<span class="string">&quot;交易签名错误&quot;</span>);</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//验证账户余额</span></span><br><span class="line"><span class="keyword">if</span> (sender.get().getBalance().compareTo(transaction.getAmount()) == -<span class="number">1</span>) &#123;</span><br><span class="line">transaction.setStatus(TransactionStatusEnum.FAIL);</span><br><span class="line">transaction.setErrorMessage(<span class="string">&quot;账户余额不足&quot;</span>);</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 更新交易区块高度</span></span><br><span class="line">transaction.setBlockNumber(block.getHeader().getIndex());</span><br><span class="line"><span class="comment">// 缓存交易哈希对应的区块高度, 方便根据 hash 查询交易状态</span></span><br><span class="line">dbAccess.put(transaction.getTxHash(), block.getHeader().getIndex());</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将待打包交易池中包含此交易的记录删除，防止交易重复打包( fix bug for #IWSPJ)</span></span><br><span class="line"><span class="keyword">for</span> (Iterator i = transactionPool.getTransactions().iterator(); i.hasNext();) &#123;</span><br><span class="line">Transaction tx = (Transaction) i.next();</span><br><span class="line"><span class="keyword">if</span> (tx.getTxHash().equals(transaction.getTxHash())) &#123;</span><br><span class="line">i.remove();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//执行转账操作,更新账户余额</span></span><br><span class="line">sender.get().setBalance(sender.get().getBalance().subtract(transaction.getAmount()));</span><br><span class="line">recipient.get().setBalance(recipient.get().getBalance().add(transaction.getAmount()));</span><br><span class="line">dbAccess.putAccount(sender.get());</span><br><span class="line">dbAccess.putAccount(recipient.get());</span><br><span class="line">&#125;<span class="comment">// end for</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 更新区块信息</span></span><br><span class="line">dbAccess.putBlock(block);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="交易池"><a href="#交易池" class="headerlink" title="交易池"></a>交易池</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 交易池</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TransactionPool</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> List&lt;Transaction&gt; transactions = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 添加交易</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> transaction</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addTransaction</span><span class="params">(Transaction transaction)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">boolean</span> exists = <span class="keyword">false</span>;</span><br><span class="line"><span class="comment">//检验交易是否存在</span></span><br><span class="line"><span class="keyword">for</span> (Transaction tx : <span class="keyword">this</span>.transactions) &#123;</span><br><span class="line"><span class="keyword">if</span> (Objects.equal(tx.getTxHash(), transaction.getTxHash())) &#123;</span><br><span class="line">exists = <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (!exists) &#123;</span><br><span class="line"><span class="keyword">this</span>.transactions.add(transaction);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Transaction&gt; <span class="title">getTransactions</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> transactions;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 将交易移除交易池</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">removeTransaction</span><span class="params">(String txHash)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (Iterator i = transactions.iterator(); i.hasNext();) &#123;</span><br><span class="line">Transaction tx = (Transaction) i.next();</span><br><span class="line"><span class="keyword">if</span> (Objects.equal(tx.getTxHash(), txHash)) &#123;</span><br><span class="line">i.remove();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="发送交易方法"><a href="#发送交易方法" class="headerlink" title="发送交易方法"></a>发送交易方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 发送交易</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> credentials 交易发起者的凭证</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> to 交易接收者</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> amount</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> data 交易附言</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Transaction <span class="title">sendTransaction</span><span class="params">(Credentials credentials, String to, BigDecimal amount, String data)</span> <span class="keyword">throws</span></span></span><br><span class="line"><span class="function">Exception </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//校验付款和收款地址</span></span><br><span class="line">Preconditions.checkArgument(to.startsWith(<span class="string">&quot;0x&quot;</span>), <span class="string">&quot;收款地址格式不正确&quot;</span>);</span><br><span class="line">Preconditions.checkArgument(!credentials.getAddress().equals(to), <span class="string">&quot;收款地址不能和发送地址相同&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//构建交易对象</span></span><br><span class="line">Transaction transaction = <span class="keyword">new</span> Transaction(credentials.getAddress(), to, amount);</span><br><span class="line">transaction.setPublicKey(Keys.publicKeyEncode(credentials.getEcKeyPair().getPublicKey().getEncoded()));</span><br><span class="line">transaction.setStatus(TransactionStatusEnum.APPENDING);</span><br><span class="line">transaction.setData(data);</span><br><span class="line">transaction.setTxHash(transaction.hash());</span><br><span class="line"><span class="comment">//签名</span></span><br><span class="line">String sign = Sign.sign(credentials.getEcKeyPair().getPrivateKey(), transaction.toSignString());</span><br><span class="line">transaction.setSign(sign);</span><br><span class="line"></span><br><span class="line"><span class="comment">//先验证私钥是否正确</span></span><br><span class="line"><span class="keyword">if</span> (!Sign.verify(credentials.getEcKeyPair().getPublicKey(), sign, transaction.toSignString())) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;私钥签名验证失败，非法的私钥&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 加入交易池，等待打包</span></span><br><span class="line">transactionPool.addTransaction(transaction);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (appConfig.isNodeDiscover()) &#123;</span><br><span class="line"><span class="comment">//触发交易事件，向全网广播交易，并等待确认</span></span><br><span class="line">ApplicationContextProvider.publishEvent(<span class="keyword">new</span> NewTransactionEvent(transaction));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> transaction;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>本文所参考的文章地址或项目开源地址：</p><ul><li><a href="https://www.liaoxuefeng.com/wiki/1207298049439968">廖雪峰区块链教程</a></li><li><a href="https://blog.csdn.net/ztemt_sw2">比特币源码分析</a></li><li><a href="www.bitcoin.org">中本聪比特币白皮书</a></li><li><a href="https://gitee.com/blackfox/jblock">ppblock/jblock项目</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 区块链 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 区块链 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于tio实现P2P网络</title>
      <link href="/2021/05/15/%E5%9F%BA%E4%BA%8Etio%E5%AE%9E%E7%8E%B0P2P%E7%BD%91%E7%BB%9C/"/>
      <url>/2021/05/15/%E5%9F%BA%E4%BA%8Etio%E5%AE%9E%E7%8E%B0P2P%E7%BD%91%E7%BB%9C/</url>
      
        <content type="html"><![CDATA[<h1 id="基于tio实现P2P网络结构"><a href="#基于tio实现P2P网络结构" class="headerlink" title="基于tio实现P2P网络结构"></a>基于tio实现P2P网络结构</h1><h2 id="导入相关依赖"><a href="#导入相关依赖" class="headerlink" title="导入相关依赖"></a>导入相关依赖</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- swagger API框架--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger-ui<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- tio Network framework 基于JVM的网络编程框架--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.t-io<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>tio-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.7.0.v20201010-RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.16.22<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="创建数据包结构"><a href="#创建数据包结构" class="headerlink" title="创建数据包结构"></a>创建数据包结构</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 数据包</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyPacket</span> <span class="keyword">extends</span> <span class="title">Packet</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Integer PACKET_HEADER_LENGTH=<span class="number">4</span>; <span class="comment">//信息包头部长度</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Integer PORT=<span class="number">8999</span>; <span class="comment">//端口</span></span><br><span class="line">    <span class="keyword">byte</span>[] body; <span class="comment">//信息包中存储的数据</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="服务器结构"><a href="#服务器结构" class="headerlink" title="服务器结构"></a>服务器结构</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyServerAioHandler</span> <span class="keyword">implements</span> <span class="title">ServerAioHandler</span></span>&#123;</span><br><span class="line">    <span class="comment">//日志记录</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger=LoggerFactory.getLogger(MyServerAioHandler.class);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@SneakyThrows</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Packet <span class="title">decode</span><span class="params">(ByteBuffer byteBuffer, <span class="keyword">int</span> limit, <span class="keyword">int</span> position, <span class="keyword">int</span> readableLength, ChannelContext channelContext)</span> <span class="keyword">throws</span> TioDecodeException </span>&#123;</span><br><span class="line">        logger.debug(<span class="string">&quot;inside decode...&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(MyPacket.PACKET_HEADER_LENGTH&gt;readableLength)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> bodyLength=byteBuffer.getInt();</span><br><span class="line">        <span class="keyword">if</span>(bodyLength&lt;<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> TioDecodeException(<span class="string">&quot;body length [ &quot;</span>+bodyLength+<span class="string">&quot; ] is invalid remote: &quot;</span>+channelContext.getServerNode());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> len=bodyLength+ MyPacket.PACKET_HEADER_LENGTH;</span><br><span class="line">        <span class="keyword">if</span>(len&gt;readableLength)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">byte</span>[] bytes=<span class="keyword">new</span> <span class="keyword">byte</span>[len];</span><br><span class="line">            <span class="keyword">int</span> i=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(byteBuffer.remaining()==<span class="number">0</span>)&#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">byte</span> b =byteBuffer.get();</span><br><span class="line">                bytes[i++]=b;</span><br><span class="line">            &#125;</span><br><span class="line">            MyPacket myPacket =<span class="keyword">new</span> MyPacket();</span><br><span class="line">            myPacket.setBody(bytes);</span><br><span class="line">            String data=<span class="keyword">new</span> String(bytes,<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> myPacket;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ByteBuffer <span class="title">encode</span><span class="params">(Packet packet, TioConfig tioConfig, ChannelContext channelContext)</span> </span>&#123;</span><br><span class="line">        logger.debug(<span class="string">&quot;inside encode...&quot;</span>);</span><br><span class="line">        MyPacket myPacket = (MyPacket) packet;</span><br><span class="line">        <span class="keyword">byte</span>[] body= myPacket.getBody();</span><br><span class="line">        <span class="keyword">int</span> bodyLength=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(body!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            bodyLength=body.length;</span><br><span class="line">        &#125;</span><br><span class="line">        ByteBuffer byteBuffer=ByteBuffer.allocate(bodyLength+ MyPacket.PACKET_HEADER_LENGTH);</span><br><span class="line">        byteBuffer.order(tioConfig.getByteOrder());</span><br><span class="line">        byteBuffer.putInt(bodyLength);</span><br><span class="line">        <span class="keyword">if</span>(body!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            byteBuffer.put(body);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        String bodyStr = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            bodyStr = <span class="keyword">new</span> String(body, <span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (UnsupportedEncodingException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;bodyStr2:&quot;</span>+bodyStr);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> byteBuffer;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handler</span><span class="params">(Packet packet, ChannelContext channelContext)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        logger.debug(<span class="string">&quot;inside handler...&quot;</span>);</span><br><span class="line">        channelContext.setServerNode(<span class="keyword">new</span> Node(<span class="string">&quot;127.0.0.1&quot;</span>, MyPacket.PORT));</span><br><span class="line">        MyPacket myPacket = (MyPacket) packet;</span><br><span class="line">        <span class="keyword">byte</span>[] body= myPacket.getBody();</span><br><span class="line">        <span class="keyword">if</span>(body!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            String bodyStr=<span class="keyword">new</span> String(body,<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">            MyPacket myPacket1 =<span class="keyword">new</span> MyPacket();</span><br><span class="line">            myPacket1.setBody((<span class="string">&quot; receive from [ &quot;</span>+channelContext.getClientNode()+<span class="string">&quot; ]: &quot;</span>+bodyStr).getBytes(StandardCharsets.UTF_8));</span><br><span class="line">            Tio.send(channelContext, myPacket1);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyServerAioListener</span> <span class="keyword">implements</span> <span class="title">ServerAioListener</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onHeartbeatTimeout</span><span class="params">(ChannelContext channelContext, Long aLong, <span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAfterConnected</span><span class="params">(ChannelContext channelContext, <span class="keyword">boolean</span> b, <span class="keyword">boolean</span> b1)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAfterDecoded</span><span class="params">(ChannelContext channelContext, Packet packet, <span class="keyword">int</span> i)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAfterReceivedBytes</span><span class="params">(ChannelContext channelContext, <span class="keyword">int</span> i)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAfterSent</span><span class="params">(ChannelContext channelContext, Packet packet, <span class="keyword">boolean</span> b)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAfterHandled</span><span class="params">(ChannelContext channelContext, Packet packet, <span class="keyword">long</span> l)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onBeforeClose</span><span class="params">(ChannelContext channelContext, Throwable throwable, String s, <span class="keyword">boolean</span> b)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a>服务端</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTioServer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">startupTio</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ServerTioConfig serverTioConfig=<span class="keyword">new</span> ServerTioConfig(<span class="string">&quot;tio-server&quot;</span>,<span class="keyword">new</span> MyServerAioHandler(),<span class="keyword">new</span> MyServerAioListener());</span><br><span class="line">            TioServer server=<span class="keyword">new</span> TioServer(serverTioConfig);</span><br><span class="line">            TioServer tioServer=<span class="keyword">new</span> TioServer(serverTioConfig);</span><br><span class="line">            server.start(<span class="string">&quot;127.0.0.1&quot;</span>,<span class="number">8999</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;出现异常：&quot;</span>+e.getMessage());</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;error!&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Startup Server OK!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="客户端结构"><a href="#客户端结构" class="headerlink" title="客户端结构"></a>客户端结构</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyClientAioHandler</span> <span class="keyword">implements</span> <span class="title">ClientAioHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    Logger logger= LoggerFactory.getLogger(MyClientAioHandler.class);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Packet <span class="title">heartbeatPacket</span><span class="params">(ChannelContext channelContext)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Packet <span class="title">decode</span><span class="params">(ByteBuffer byteBuffer, <span class="keyword">int</span> limit, <span class="keyword">int</span> position, <span class="keyword">int</span> readableLength, ChannelContext channelContext)</span> <span class="keyword">throws</span> TioDecodeException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(MyPacket.PACKET_HEADER_LENGTH&gt;readableLength)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> bodyLength=byteBuffer.getInt();</span><br><span class="line">        <span class="keyword">if</span>(bodyLength&lt;<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> TioDecodeException(<span class="string">&quot;body length [ &quot;</span>+bodyLength+<span class="string">&quot; ] is invalid remote: &quot;</span>+channelContext.getServerNode());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> usefulLength=bodyLength+ MyPacket.PACKET_HEADER_LENGTH;</span><br><span class="line">        <span class="keyword">if</span>(usefulLength&gt;readableLength)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            MyPacket packet=<span class="keyword">new</span> MyPacket();</span><br><span class="line">            <span class="keyword">byte</span>[] body=<span class="keyword">new</span> <span class="keyword">byte</span>[bodyLength];</span><br><span class="line">            byteBuffer.get(body);</span><br><span class="line">            packet.setBody(body);</span><br><span class="line">            <span class="keyword">return</span> packet;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ByteBuffer <span class="title">encode</span><span class="params">(Packet packet, TioConfig tioConfig, ChannelContext channelContext)</span> </span>&#123;</span><br><span class="line">        MyPacket clientPacket= (MyPacket) packet;</span><br><span class="line">        <span class="keyword">byte</span>[] body=clientPacket.getBody();</span><br><span class="line">        <span class="keyword">int</span> bodyLength=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(body!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            bodyLength=body.length;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> len= MyPacket.PACKET_HEADER_LENGTH+bodyLength;</span><br><span class="line">        ByteBuffer byteBuffer=ByteBuffer.allocate(len);</span><br><span class="line">        byteBuffer.order(tioConfig.getByteOrder());</span><br><span class="line">        byteBuffer.putInt(bodyLength);</span><br><span class="line">        <span class="keyword">if</span>(body!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            byteBuffer.put(body);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> byteBuffer;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handler</span><span class="params">(Packet packet, ChannelContext channelContext)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        MyPacket clientPacket= (MyPacket) packet;</span><br><span class="line">        <span class="keyword">byte</span>[] body=clientPacket.getBody();</span><br><span class="line">        <span class="keyword">if</span>(body!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            String bodyStr=<span class="keyword">new</span> String(body,<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">            logger.debug(<span class="string">&quot;客户端收到信息：&quot;</span>+bodyStr);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyClientAioListener</span> <span class="keyword">implements</span> <span class="title">ClientAioListener</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    Logger logger= LoggerFactory.getLogger(MyClientAioListener.class);</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Integer count=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAfterConnected</span><span class="params">(ChannelContext channelContext, <span class="keyword">boolean</span> b, <span class="keyword">boolean</span> b1)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        logger.info(<span class="string">&quot;onAfterConnected...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAfterDecoded</span><span class="params">(ChannelContext channelContext, Packet packet, <span class="keyword">int</span> i)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        logger.info(<span class="string">&quot;onAfterDecoded...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAfterReceivedBytes</span><span class="params">(ChannelContext channelContext, <span class="keyword">int</span> i)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        logger.info(<span class="string">&quot;onAfterReceivedBytes---------------------------&quot;</span>+i);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAfterSent</span><span class="params">(ChannelContext channelContext, Packet packet, <span class="keyword">boolean</span> b)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        logger.info(<span class="string">&quot;onAfterSent...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAfterHandled</span><span class="params">(ChannelContext channelContext, Packet packet, <span class="keyword">long</span> l)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;onAfterHandled...&quot;</span>);</span><br><span class="line">        MyPacket clientPacket= (MyPacket) packet;</span><br><span class="line">        String resData=<span class="keyword">new</span> String(clientPacket.getBody(),<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">        logger.info(<span class="string">&quot;[ &quot;</span>+channelContext.getServerNode()+<span class="string">&quot; ] : &quot;</span>+resData);</span><br><span class="line">        count++;</span><br><span class="line">        ((MyPacket)packet).setBody((<span class="string">&quot;[ &quot;</span>+channelContext.getServerNode()+<span class="string">&quot; ]: &quot;</span>+count).getBytes(StandardCharsets.UTF_8));</span><br><span class="line">        Thread.sleep(<span class="number">5000</span>);</span><br><span class="line">        Tio.send(channelContext,packet);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onBeforeClose</span><span class="params">(ChannelContext channelContext, Throwable throwable, String s, <span class="keyword">boolean</span> b)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        logger.error(throwable.getMessage());</span><br><span class="line">        logger.info(s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTioClient</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">startupTio</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ClientTioConfig clientTioConfig=<span class="keyword">new</span> ClientTioConfig(<span class="keyword">new</span> MyClientAioHandler(),<span class="keyword">new</span> MyClientAioListener());</span><br><span class="line">            TioClient tioClient=<span class="keyword">new</span> TioClient(clientTioConfig);</span><br><span class="line">            System.out.println(<span class="string">&quot;tio连接开始...&quot;</span>);</span><br><span class="line">            MyPacket clientPacket=<span class="keyword">new</span> MyPacket();</span><br><span class="line">            clientPacket.setBody(<span class="string">&quot;hello,tio-ywrby&quot;</span>.getBytes(StandardCharsets.UTF_8));</span><br><span class="line">            ClientChannelContext clientChannelContext=tioClient.connect(<span class="keyword">new</span> Node(<span class="string">&quot;127.0.0.1&quot;</span>,<span class="number">8999</span>));</span><br><span class="line">            <span class="comment">//clientPacket.setBody(&quot;hello,tio-ywrby&quot;.getBytes(StandardCharsets.UTF_8));</span></span><br><span class="line">            <span class="comment">//System.out.println(&quot;tio连接关闭...&quot;);</span></span><br><span class="line">            Tio.send(clientChannelContext,clientPacket);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;出现异常：&quot;</span>+e.getMessage());</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;error!&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Startup Client OK!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">send</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="控制层"><a href="#控制层" class="headerlink" title="控制层"></a>控制层</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTioController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> MyTioServer tioServer;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> MyTioClient tioClient;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/server&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">server</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> tioServer.startupTio();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/client&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">client</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> tioClient.startupTio();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 区块链 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 区块链 </tag>
            
            <tag> tio </tag>
            
            <tag> P2P </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Swagger技术概述</title>
      <link href="/2021/05/13/Swagger%E6%8A%80%E6%9C%AF%E6%A6%82%E8%BF%B0/"/>
      <url>/2021/05/13/Swagger%E6%8A%80%E6%9C%AF%E6%A6%82%E8%BF%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="Swagger技术概述"><a href="#Swagger技术概述" class="headerlink" title="Swagger技术概述"></a>Swagger技术概述</h1><p>Swagger出现的原因，很大程度上是由于前后端开发人员对于接口文档，无法做到高效的同步。前端人员苦于接口文档老旧，更新不及时，后端人员苦于在任务外另外维护接口文档。故而随着项目开发时间的推移，就导致项目的接口文档老旧，使用性差等问题暴露出来。</p><p>为解决这一问题而出现的Swagger，通过总结规范，开发项目工具，实现生成各种格式的接口文档，生成多种语言的客户端和服务端的代码，以及在线接口调试页面等。按照新的开发模式，在开发新版本或者迭代版本的时候，只需要更新Swagger描述文件，就可以自动生成接口文档和客户端服务端代码，做到调用端代码、服务端代码以及接口文档的一致性。</p><h2 id="Swagger开发流程"><a href="#Swagger开发流程" class="headerlink" title="Swagger开发流程"></a>Swagger开发流程</h2><h3 id="1-在SpringBoot项目中引入相关依赖"><a href="#1-在SpringBoot项目中引入相关依赖" class="headerlink" title="1. 在SpringBoot项目中引入相关依赖"></a>1. 在SpringBoot项目中引入相关依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- swagger API框架--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger-ui<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>可以看到Swagger并不是SpringBoot官方提供的启动器，所以需要进行相关的配置</p><h3 id="2-编写配置类配置Swagger"><a href="#2-编写配置类配置Swagger" class="headerlink" title="2. 编写配置类配置Swagger"></a>2. 编写配置类配置Swagger</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span>  <span class="comment">//配置类</span></span><br><span class="line"><span class="meta">@EnableSwagger2</span>  <span class="comment">//开启Swagger</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SwaggerConfig</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里并没有进行更多的配置，只是创建了配置类并开启Swagger，Swagger本身具备一些基本默认配置</p><h3 id="3-编写一个Hello工程测试结果"><a href="#3-编写一个Hello工程测试结果" class="headerlink" title="3. 编写一个Hello工程测试结果"></a>3. 编写一个Hello工程测试结果</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Hello World!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-启动项目，测试SwaggerUI界面"><a href="#4-启动项目，测试SwaggerUI界面" class="headerlink" title="4. 启动项目，测试SwaggerUI界面"></a>4. 启动项目，测试SwaggerUI界面</h3><p>访问路径：<a href="http://localhost:8080/swagger-ui.html">http://localhost:8080/swagger-ui.html</a></p><p><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210513224249.png"></p><h2 id="Swagger配置"><a href="#Swagger配置" class="headerlink" title="Swagger配置"></a>Swagger配置</h2><h3 id="1-配置Swagger基本信息"><a href="#1-配置Swagger基本信息" class="headerlink" title="1. 配置Swagger基本信息"></a>1. 配置Swagger基本信息</h3><p>包括了页面的标题和作者信息等基本内容（Docket对象是操作Swagger的实例）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span>  <span class="comment">//配置类</span></span><br><span class="line"><span class="meta">@EnableSwagger2</span>  <span class="comment">//开启Swagger</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SwaggerConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 配置Swagger中的Docket的Bean实例</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Docket <span class="title">docket</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Docket(DocumentationType.SWAGGER_2)</span><br><span class="line">                .apiInfo(apiInfo());  <span class="comment">//添加基本信息</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 配置Swagger基本信息APIINFO</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ApiInfo <span class="title">apiInfo</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//作者信息</span></span><br><span class="line">        Contact contact = <span class="keyword">new</span> Contact(<span class="string">&quot;Ywrby&quot;</span>, <span class="string">&quot;https://ywrby.cn&quot;</span>, <span class="string">&quot;ywrby0214@gmail.com&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ApiInfo(</span><br><span class="line">                <span class="string">&quot;Ywrby SwaggerTest API&quot;</span>,</span><br><span class="line">                <span class="string">&quot;The test of Swagger&quot;</span>,</span><br><span class="line">                <span class="string">&quot;1.0&quot;</span>,</span><br><span class="line">                <span class="string">&quot;https://ywrby.cn&quot;</span>,</span><br><span class="line">                contact,</span><br><span class="line">                <span class="string">&quot;Apache 2.0&quot;</span>,</span><br><span class="line">                <span class="string">&quot;http://www.apache.org/licenses/LICENSE-2.0&quot;</span>,</span><br><span class="line">                <span class="keyword">new</span> ArrayList());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210513235042.png"></p><h3 id="2-配置扫描接口与开关"><a href="#2-配置扫描接口与开关" class="headerlink" title="2. 配置扫描接口与开关"></a>2. 配置扫描接口与开关</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 配置Swagger中的Docket的Bean实例</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Docket <span class="title">docket</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Docket(DocumentationType.SWAGGER_2)</span><br><span class="line">            <span class="comment">// 添加基本信息</span></span><br><span class="line">            .apiInfo(apiInfo())</span><br><span class="line">            <span class="comment">//配置Swagger是否启动，默认为true，若为false则Swagger不能在浏览器中访问</span></span><br><span class="line">            .enable(<span class="keyword">true</span>)</span><br><span class="line">            .select()</span><br><span class="line">            <span class="comment">// RequestHandlerSelectors，配置扫描接口的方式</span></span><br><span class="line">            <span class="comment">// basePackage: 指定要扫描的包</span></span><br><span class="line">            <span class="comment">// any: 扫描全部</span></span><br><span class="line">            <span class="comment">// none: 不扫描</span></span><br><span class="line">            <span class="comment">// withClassAnnotation: 指定要扫描的类上的注解（扫描具有指定注解的API），参数是一个注解的反射类，例如：GetMapping.class</span></span><br><span class="line">            <span class="comment">// withMethodAnnotation: 扫描方法上的注解</span></span><br><span class="line">            .apis(RequestHandlerSelectors.basePackage(<span class="string">&quot;cn.ywrby.controller&quot;</span>))</span><br><span class="line">            .build();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-Swagger实现多环境配置"><a href="#3-Swagger实现多环境配置" class="headerlink" title="3. Swagger实现多环境配置"></a>3. Swagger实现多环境配置</h3><p>在不同的环境下生成不同的接口文档</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Docket <span class="title">docket</span><span class="params">(Environment environment)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//设置要显示的项目环境(这里表示只在开发和测试环境下应用该配置)</span></span><br><span class="line">    Profiles profiles=Profiles.of(<span class="string">&quot;dev&quot;</span>,<span class="string">&quot;test&quot;</span>);</span><br><span class="line">    <span class="comment">//判断当前项目环境是否在目标环境中，并返回布尔值</span></span><br><span class="line">    <span class="keyword">boolean</span> flag = environment.acceptsProfiles(profiles);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Docket(DocumentationType.SWAGGER_2)</span><br><span class="line">            .apiInfo(apiInfo())</span><br><span class="line">            .enable(flag);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试后可以发现只有在开发和测试环境下才会显示接口文档，其他环境下不会显示接口文档</p><p><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210513235855.png"></p><h3 id="Swagger分组"><a href="#Swagger分组" class="headerlink" title="Swagger分组"></a>Swagger分组</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Docket <span class="title">docket1</span><span class="params">(Environment environment)</span></span>&#123; <span class="keyword">return</span> <span class="keyword">new</span> Docket(DocumentationType.SWAGGER_2).groupName(<span class="string">&quot;A&quot;</span>); &#125;</span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Docket <span class="title">docket2</span><span class="params">(Environment environment)</span></span>&#123; <span class="keyword">return</span> <span class="keyword">new</span> Docket(DocumentationType.SWAGGER_2).groupName(<span class="string">&quot;A&quot;</span>); &#125;</span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Docket <span class="title">docket3</span><span class="params">(Environment environment)</span></span>&#123; <span class="keyword">return</span> <span class="keyword">new</span> Docket(DocumentationType.SWAGGER_2).groupName(<span class="string">&quot;A&quot;</span>); &#125;</span><br></pre></td></tr></table></figure><p><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/QQ%E6%88%AA%E5%9B%BE20210514000932.png"></p><h3 id="Swagger2注解内容"><a href="#Swagger2注解内容" class="headerlink" title="Swagger2注解内容"></a>Swagger2注解内容</h3><h4 id="用于controller类上："><a href="#用于controller类上：" class="headerlink" title="用于controller类上："></a>用于controller类上：</h4><table><thead><tr><th>注解</th><th>说明</th></tr></thead><tbody><tr><td>@Api</td><td>对请求类的说明</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Api(tags=&quot;说明该类的作用&quot;,value=&quot;该参数没什么意义，所以不需要配置&quot;)</span></span><br></pre></td></tr></table></figure><h4 id="用于方法上面（说明参数的含义）："><a href="#用于方法上面（说明参数的含义）：" class="headerlink" title="用于方法上面（说明参数的含义）："></a>用于方法上面（说明参数的含义）：</h4><table><thead><tr><th>注解</th><th>说明</th><th>参数</th></tr></thead><tbody><tr><td>@ApiOperation</td><td>方法的说明</td><td>value=”说明方法的作用” notes=”方法的备注说明”</td></tr><tr><td>@ApiImplicitParams</td><td>用在请求的方法上，包含一组参数说明</td><td></td></tr><tr><td>@ApiImplicitParam</td><td>对单个参数的说明</td><td>name：参数名 value：参数的说明、描述 required：参数是否必须必填</td></tr></tbody></table><h4 id="用于方法上面（返回参数或对象的说明）："><a href="#用于方法上面（返回参数或对象的说明）：" class="headerlink" title="用于方法上面（返回参数或对象的说明）："></a>用于方法上面（返回参数或对象的说明）：</h4><table><thead><tr><th>注解</th><th>说明</th><th>参数</th></tr></thead><tbody><tr><td>@ApiResponses</td><td>方法返回对象的说明</td><td></td></tr><tr><td>@ApiResponse</td><td>每个参数的说明</td><td>code：数字，例如400 message：信息，例如”请求参数没填好” response：抛出异常的类</td></tr></tbody></table><h4 id="对象类："><a href="#对象类：" class="headerlink" title="对象类："></a>对象类：</h4><table><thead><tr><th>注解</th><th>说明</th><th>参数</th></tr></thead><tbody><tr><td>@ApiModel</td><td>用在JavaBean类上，说明JavaBean的 用途</td><td>description</td></tr><tr><td>@ApiModelProperty</td><td>用在JavaBean类的属性上面，说明此属性的的含议</td><td>value ，required</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
          <category> 后端框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
            <tag> Swagger </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>4-基于SpringBoot的Web开发</title>
      <link href="/2021/04/19/4-%E5%9F%BA%E4%BA%8ESpringBoot%E7%9A%84Web%E5%BC%80%E5%8F%91/"/>
      <url>/2021/04/19/4-%E5%9F%BA%E4%BA%8ESpringBoot%E7%9A%84Web%E5%BC%80%E5%8F%91/</url>
      
        <content type="html"><![CDATA[<h1 id="基于SpringBoot的Web开发流程"><a href="#基于SpringBoot的Web开发流程" class="headerlink" title="基于SpringBoot的Web开发流程"></a>基于SpringBoot的Web开发流程</h1><h2 id="静态资源的导入"><a href="#静态资源的导入" class="headerlink" title="静态资源的导入"></a>静态资源的导入</h2><p>SpringBoot项目中的静态资源有两种访问方式</p><h3 id="通过webjars访问"><a href="#通过webjars访问" class="headerlink" title="通过webjars访问"></a>通过webjars访问</h3><p>首先引入相关依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span><span class="comment">&lt;!--Webjars版本定位工具（前端）--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.webjars<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>webjars-locator-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span><span class="comment">&lt;!--Jquery组件（前端）--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.webjars<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jquery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>根据webjars路径访问静态资源，快速访问：<a href="http://localhost:8080/webjars/jquery/jquery.js">http://localhost:8080/webjars/jquery/jquery.js</a> </p><h3 id="通过根目录访问"><a href="#通过根目录访问" class="headerlink" title="通过根目录访问"></a>通过根目录访问</h3><p>根目录访问静态资源会通过resources下的三个路径</p><ul><li>resources：放在resources目录下的resources目录中</li><li>public：放在resources下的public目录中</li><li>static：放在resources下的static目录中</li></ul><p>三个路径的优先级：resources&gt;static(默认资源路径)&gt;public</p><p><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/resourceshuh.png"></p><h2 id="首页与图标定制"><a href="#首页与图标定制" class="headerlink" title="首页与图标定制"></a>首页与图标定制</h2><p>首页设置只需要在三个resources下的静态资源路径中存档index.html即可</p><p><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/ggghjhjhj.png"></p><p>图标定制需要将favicon.ico文件存放在static资源路径下</p><p><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/dgaugsaug.png"></p><h2 id="Thymeleaf模板引擎"><a href="#Thymeleaf模板引擎" class="headerlink" title="Thymeleaf模板引擎"></a>Thymeleaf模板引擎</h2><h3 id="模板引擎的概念"><a href="#模板引擎的概念" class="headerlink" title="模板引擎的概念"></a>模板引擎的概念</h3><p>模板引擎可以让（网站）程序实现界面与数据分离，业务代码与逻辑代码的分离，这就大大提升了开发效率，良好的设计也使得代码重用变得更加容易。模板引擎不只是可以让你实现代码分离（业务逻辑代码和用户界面代码），也可以实现数据分离（动态数据与静态数据），还可以实现代码单元共享（代码重用），甚至是多语言、动态页面与静态页面自动均衡（SDE）等等与用户界面可能没有关系的功能。</p><h3 id="Thymeleaf模板引擎特性"><a href="#Thymeleaf模板引擎特性" class="headerlink" title="Thymeleaf模板引擎特性"></a>Thymeleaf模板引擎特性</h3><ul><li>Thymeleaf 在有网络和无网络的环境下皆可运行，即它可以让美工在浏览器查看页面的静态效果，也可以让程序员在服务器查看带数据的动态页面效果。这是由于它支持 html 原型，然后在 html 标签里增加额外的属性来达到模板+数据的展示方式。浏览器解释 html 时会忽略未定义的标签属性，所以 thymeleaf 的模板可以静态地运行；当有数据返回到页面时，Thymeleaf 标签会动态地替换掉静态内容，使页面动态显示。</li><li>Thymeleaf 开箱即用的特性。</li><li>Thymeleaf 提供spring标准方言和一个与 SpringMVC 完美集成的可选模块，可以快速的实现表单绑定、属性编辑器、国际化等功能。</li></ul><h3 id="Thymeleaf使用"><a href="#Thymeleaf使用" class="headerlink" title="Thymeleaf使用"></a>Thymeleaf使用</h3><ol><li>引入相关依赖</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>在templates文件夹下创建测试页面（必须在该文件夹下才能自动解析）</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--引入thymeleaf命名空间--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Test页面<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--从后端取出对应的值--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;msg&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="3"><li>创建Controller</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/test&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">test</span><span class="params">(Model model)</span></span>&#123;</span><br><span class="line">        model.addAttribute(<span class="string">&quot;msg&quot;</span>,<span class="string">&quot;Ywrby&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;test&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li>测试页面访问</li></ol><p><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/dgiugiu.png"></p><p>可以看到页面成功展示并且传入的值被前端成功取出</p><h3 id="Thymeleaf基本语法"><a href="#Thymeleaf基本语法" class="headerlink" title="Thymeleaf基本语法"></a>Thymeleaf基本语法</h3><ol><li>th:text：文本替换；</li><li>th:utext：支持html的文本替换。</li><li>th:value：属性赋值  </li><li>th:each：遍历循环元素</li><li>th:if：判断条件，类似的还有th:unless，th:switch，th:case</li><li>th:insert：代码块引入，类似的还有th:replace，th:include，常用于公共代码块提取的场景</li><li>th:fragment：定义代码块，方便被th:insert引用</li><li>th:object：声明变量，一般和*{}一起配合使用，达到偷懒的效果。</li><li>th:attr：设置标签属性，多个属性可以用逗号分隔</li></ol><h2 id="SpringBoot整合SpringMVC拦截器"><a href="#SpringBoot整合SpringMVC拦截器" class="headerlink" title="SpringBoot整合SpringMVC拦截器"></a>SpringBoot整合SpringMVC拦截器</h2><p>根据SpringBoot官方文档的说明，SpringBoot已经实现了对SpringMVC基本的配置，如果我你们需要进行MVC的一些自定义配置（拦截器，格式化器，视图控制器，消息转换器等等），可以通过实现一个配置类，该配置类实现接口WebMvcConfigurer，并且天界@Configuration注解表明自身是一个配置类</p><p>如果需要自定义HandlerMapping,HandlerAdapter,ExcceptionResolver等组件，可以通过创建一个WebMvcRegistrationsAdapter实例，来提供以上组件</p><p>如果我们需要完全自定义SpringMVC，不保留SpringBoot所提供的一切默认特征，可以通过自定义类并且添加@Coonfiguration和@EnableWebMvc两个注解来实现</p><h3 id="步骤一：编写拦截器"><a href="#步骤一：编写拦截器" class="headerlink" title="步骤一：编写拦截器"></a>步骤一：编写拦截器</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 测试拦截器，测试SpringMVC配置类是否生效</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf4j</span> <span class="comment">//java日志框架</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestInterceptor</span> <span class="keyword">implements</span> <span class="title">HandlerInterceptor</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//每当经过前置拦截器，都已日志情况输出方法执行情况</span></span><br><span class="line">        log.debug(<span class="string">&quot;当前TestInterceptor类的preHandle方法正在执行&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, <span class="meta">@Nullable</span> ModelAndView modelAndView)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        log.debug(<span class="string">&quot;当前TestInterceptor类的postHandle方法正在执行&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterCompletion</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, <span class="meta">@Nullable</span> Exception ex)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        log.debug(<span class="string">&quot;当前TestInterceptor类的afterCompletion方法正在执行&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="步骤二：配置日志记录级别（不必须，只是上文使用了日志框架，效果更直观）"><a href="#步骤二：配置日志记录级别（不必须，只是上文使用了日志框架，效果更直观）" class="headerlink" title="步骤二：配置日志记录级别（不必须，只是上文使用了日志框架，效果更直观）"></a>步骤二：配置日志记录级别（不必须，只是上文使用了日志框架，效果更直观）</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 配置日志记录级别</span></span><br><span class="line"><span class="attr">logging:</span></span><br><span class="line">  <span class="attr">level:</span></span><br><span class="line">    <span class="attr">cn.ywrby:</span> <span class="string">debug</span></span><br><span class="line">    <span class="attr">org.springframework:</span> <span class="string">info</span></span><br></pre></td></tr></table></figure><h3 id="步骤三：实现配置类，复写添加拦截器方法"><a href="#步骤三：实现配置类，复写添加拦截器方法" class="headerlink" title="步骤三：实现配置类，复写添加拦截器方法"></a>步骤三：实现配置类，复写添加拦截器方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 标识该类为配置类</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MvcConfig</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span> </span>&#123; <span class="comment">//继承WebMvcConfigurer以实现对SpringMVC组件的控制</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//在SpringMVC容器中注册拦截器</span></span><br><span class="line">    <span class="meta">@Bean</span> <span class="comment">//使用在方法上，标注将该方法返回值存储到Spring容器中</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> TestInterceptor <span class="title">testInterceptor</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> TestInterceptor();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//将拦截器添加到SpringMVC拦截器链中，复写该方法</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> </span>&#123;</span><br><span class="line">        registry.addInterceptor(testInterceptor()).addPathPatterns(<span class="string">&quot;/*&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="SpringBoot整合事务和连接池"><a href="#SpringBoot整合事务和连接池" class="headerlink" title="SpringBoot整合事务和连接池"></a>SpringBoot整合事务和连接池</h2><h3 id="整合JDBC和事务"><a href="#整合JDBC和事务" class="headerlink" title="整合JDBC和事务"></a>整合JDBC和事务</h3><p>由于SpringBoot的开箱即用的概念，对于JDBC的整合也是十分简单的</p><p>首先还是在pom.xml中添加数据库驱动的依赖以及JDBC的启动器依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--jdbc启动器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--数据库驱动--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="配置数据库连接池"><a href="#配置数据库连接池" class="headerlink" title="配置数据库连接池"></a>配置数据库连接池</h3><p>只需要在核心配置文件application.yml下配置即可</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="comment"># 配置数据库连接池</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://cdb-cd3ybvc6.cd.tencentcdb.com:10056/test</span></span><br><span class="line">    <span class="attr">data-username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">data-password:</span> <span class="string">renboyu010214</span></span><br></pre></td></tr></table></figure><h3 id="编写数据库操作"><a href="#编写数据库操作" class="headerlink" title="编写数据库操作"></a>编写数据库操作</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component(&quot;userDao&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JdbcTemplate jdbcTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">findAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//执行数据库查询操作，获取所有用户信息并封装到集合中</span></span><br><span class="line">        List&lt;User&gt; userList = jdbcTemplate.query(<span class="string">&quot;select * from sys_user&quot;</span>, <span class="keyword">new</span> BeanPropertyRowMapper&lt;User&gt;(User.class));</span><br><span class="line">        <span class="keyword">return</span> userList;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="测试执行情况"><a href="#测试执行情况" class="headerlink" title="测试执行情况"></a>测试执行情况</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SpringBootTestApplicationTests</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserDaoImpl userDao;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">contextLoads</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;User&gt; users = userDao.findAll();</span><br><span class="line">        <span class="keyword">for</span>(User user:users)&#123;</span><br><span class="line">            System.out.println(user);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="SpringBoot整合MyBatis"><a href="#SpringBoot整合MyBatis" class="headerlink" title="SpringBoot整合MyBatis"></a>SpringBoot整合MyBatis</h2><h3 id="添加MyBatis启动器依赖"><a href="#添加MyBatis启动器依赖" class="headerlink" title="添加MyBatis启动器依赖"></a>添加MyBatis启动器依赖</h3><p>SpringBoot官方并没有提供MyBatis的启动器，但是MyBatis自己实现了启动器，只需要引入依赖即可</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置MyBatis依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="在pom-xml中配置mybatis相关信息"><a href="#在pom-xml中配置mybatis相关信息" class="headerlink" title="在pom.xml中配置mybatis相关信息"></a>在pom.xml中配置mybatis相关信息</h3><p>注意：这里的type-aliases-package不是配置mapper所在的路径，而是实体类所在的路径，mybatis会自动帮我们将该类下的实体类按照类名创建为别名</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">mybatis:</span></span><br><span class="line">  <span class="comment"># 配置实体类别名 包路径</span></span><br><span class="line">  <span class="attr">type-aliases-package:</span> <span class="string">cn.ywrby.domain</span></span><br><span class="line">  <span class="comment"># 配置映射文件路径</span></span><br><span class="line">  <span class="attr">mapper-locations:</span> <span class="string">classpath:cn.ywrby.mapper/*.xml</span></span><br><span class="line">  <span class="comment"># 配置日志文件</span></span><br><span class="line">  <span class="attr">configuration:</span></span><br><span class="line">    <span class="attr">log-impl:</span> <span class="string">org.apache.ibatis.logging.stdout.StdOutImpl</span></span><br></pre></td></tr></table></figure><h3 id="编写mapper层接口"><a href="#编写mapper层接口" class="headerlink" title="编写mapper层接口"></a>编写mapper层接口</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//用户数据访问层</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">findAll</span><span class="params">()</span> </span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="在启动器前利用注解扫描mapper层路径"><a href="#在启动器前利用注解扫描mapper层路径" class="headerlink" title="在启动器前利用注解扫描mapper层路径"></a>在启动器前利用注解扫描mapper层路径</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 扫描该包下所有mybatis业务mapper接口，传入参数是接口所在包路径</span></span><br><span class="line"><span class="meta">@MapperScan(&quot;cn.ywrby.mapper&quot;)</span></span><br><span class="line"><span class="comment">// @SpringBootApplication注解表明该类是一个SpringBoot应用</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringBootTestApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//run方法 启动SpringBoot应用</span></span><br><span class="line">        SpringApplication.run(SpringBootTestApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="测试mybatis"><a href="#测试mybatis" class="headerlink" title="测试mybatis"></a>测试mybatis</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SpringBootTestApplicationTests</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired(required = false)</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">contextLoads</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;User&gt; users = userMapper.findAll();</span><br><span class="line">        <span class="keyword">for</span>(User user:users)&#123;</span><br><span class="line">            System.out.println(user);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
          <category> 后端框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
            <tag> Spring </tag>
            
            <tag> SpringMVC </tag>
            
            <tag> MyBatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>3-Lombok应用</title>
      <link href="/2021/04/19/3-Lombok%E5%BA%94%E7%94%A8/"/>
      <url>/2021/04/19/3-Lombok%E5%BA%94%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="Lombok应用"><a href="#Lombok应用" class="headerlink" title="Lombok应用"></a>Lombok应用</h1><p>在SpringBoot中整合SSM项目的过程中，不可避免的涉及对数据库的操作，既然有对数据库的操作就必然包括依据数据库结构创建POJO，而POJO创建过程重复度高，并且使得代码看起来冗杂，这种情况下可以通过使用Lombok插件，通过注解的方式，简化POJO的创建过程</p><h2 id="使用过程"><a href="#使用过程" class="headerlink" title="使用过程"></a>使用过程</h2><h3 id="1-在IDEA中安装Lombok插件"><a href="#1-在IDEA中安装Lombok插件" class="headerlink" title="1. 在IDEA中安装Lombok插件"></a>1. 在IDEA中安装Lombok插件</h3><p><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/pluginsss.png"></p><h3 id="2-添加Lombok对应的依赖到项目pom-xml文件中"><a href="#2-添加Lombok对应的依赖到项目pom-xml文件中" class="headerlink" title="2. 添加Lombok对应的依赖到项目pom.xml文件中"></a>2. 添加Lombok对应的依赖到项目pom.xml文件中</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3-改造实体类，使用Lombok方式配置"><a href="#3-改造实体类，使用Lombok方式配置" class="headerlink" title="3. 改造实体类，使用Lombok方式配置"></a>3. 改造实体类，使用Lombok方式配置</h3><h4 id="基本注解"><a href="#基本注解" class="headerlink" title="基本注解"></a>基本注解</h4><ul><li>@Data：自动提供getter和setter，hashCode，equals，toString等方法</li><li>@Getter：自动提供Getter方法</li><li>@Setter：自动提供Setter方法</li><li>@Slf4j：自动在bean中提供log变量（本质还是使用slf4j的日志功能）</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="keyword">private</span> String phoneNum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-测试方法执行"><a href="#4-测试方法执行" class="headerlink" title="4. 测试方法执行"></a>4. 测试方法执行</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SpringBootTestApplicationTests</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    User user=<span class="keyword">new</span> User();</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">contextLoads</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        user.setUsername(<span class="string">&quot;Leslie&quot;</span>);</span><br><span class="line">        user.setId(<span class="number">1L</span>);</span><br><span class="line">        user.setEmail(<span class="string">&quot;2278@email.com&quot;</span>);</span><br><span class="line">        user.setPassword(<span class="string">&quot;123&quot;</span>);</span><br><span class="line">        user.setPhoneNum(<span class="string">&quot;123&quot;</span>);</span><br><span class="line">        System.out.println(user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
          <category> 后端框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
            <tag> Spring </tag>
            
            <tag> Lombok </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>14-关系代数Relation Algebra</title>
      <link href="/2021/04/19/14-%E5%85%B3%E7%B3%BB%E4%BB%A3%E6%95%B0Relation-Algebra/"/>
      <url>/2021/04/19/14-%E5%85%B3%E7%B3%BB%E4%BB%A3%E6%95%B0Relation-Algebra/</url>
      
        <content type="html"><![CDATA[<h1 id="关系代数Relation-Algebra"><a href="#关系代数Relation-Algebra" class="headerlink" title="关系代数Relation Algebra"></a>关系代数Relation Algebra</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><blockquote><p>关系代数是一种抽象的查询语言，用对关系的运算来表达查询，作为研究关系数据语言的数学工具。关系代数的运算对象是关系（集合），运算结果亦为关系（集合）。</p></blockquote><ul><li>传统的集合运算：广义笛卡尔积运算，并，交和差运算</li><li>专门的关系运算：选择，投影，连接和除运算</li></ul><h2 id="传统的集合运算"><a href="#传统的集合运算" class="headerlink" title="传统的集合运算"></a>传统的集合运算</h2><h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><p>设关系模式为$R(A_1,A_2,…,A_n)$</p><ul><li>R表示关系模式$R(A_1,A_2,…,A_n)$的一个关系</li><li>t表示元组，$t\in R$表示t是R的一个元组，可以理解为数据库某一表中一行实例</li><li>$t[A_i]$表示元组t中相对应于属性$A_i$的一个分量，即表中t元组中$A_i$属性所对应单元格的值</li><li>若$A=\lbrace A_{i1},A_{i2},A_{i3},…,A_{ik}\rbrace$，其中$A_{i1},A_{i2},….,A_{ik}$是$A_1,A_2,…,A_n$中的一部分，则称A为属性列或属性组，简单来说，属性组就是一个关系所有属性的一个子集</li><li>$t[A]=(t[A_{i1}],t[A_{i2}],…,t[A_{ik}])$表示元组t在属性列A上诸分量的集合，简言之就是按照属性组筛选后的一个元组</li><li>$\overline{A}$表示完整属性集合$\lbrace A_1,A_2,…,A_n\rbrace$中去除A属性组$\lbrace A_{i1},A_{i2},…,A_{ik}\rbrace$后剩余的属性组</li><li>$\overbrace{t_r\ \ t_s}$称为元组的连接<ul><li>R为n元关系，S为m元关系</li><li>$t_r\in R,t_s\in S$</li><li>元组的连接本质上就是直接将两个元组前后连接成一个元组，所以连接后的元组是一个n+m元的元组，前n个分量为R中的一个n元组，后m个分量为S中的一个m元组</li></ul></li><li>象集(Images Set)：<ul><li>给定一个关系R(X,Y),X和Y为属性组</li><li>当$t[X]=x$时，x在R中的象集为：$Y_x=\lbrace t[Y] | t\in R,t[X]=x\rbrace$</li><li>举例说明：给定一个关系R(学号，总成绩)，则当t[学号]=001时，x在R中的象集表示的就是学号为001的学生的总成绩，只不过实际使用中X和Y都是属性组，其中不仅只有一个属性</li></ul></li></ul><h3 id="并运算（Union）"><a href="#并运算（Union）" class="headerlink" title="并运算（Union）"></a>并运算（Union）</h3><p>并运算的基本要求</p><ul><li>R和S两个关系必须具有相同的n个元（即两个关系都有n个属性）</li><li>相应的属性必须取自同一个域下</li></ul><p>所以进行并运算后，原本的两个n元关系，仍未n元关系，由属于R或属于S的元组组成<br>$$R\cup S=\lbrace t|t\in R\vee t\in S\rbrace$$</p><p>简言之就是两个属性值完全一致并且属性取值域相同的两个表进行并运算，只是最后要去重</p><p>两个关系</p><p><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/xxxtable1.png"><br><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/xxxtable2.png"></p><p>进行并运算后</p><p><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/xxxtable3.png"></p><h3 id="交运算（Intersection）"><a href="#交运算（Intersection）" class="headerlink" title="交运算（Intersection）"></a>交运算（Intersection）</h3><p>交运算的基本要求</p><ul><li>R和S两个关系必须具有相同的n个元（即两个关系都有n个属性）</li><li>相应的属性必须取自同一个域下</li></ul><p>进行交运算后仍未一个n元关系，由所有既属于R又属于S的元组组成<br>$$R\cap S=\lbrace t|t\in R\wedge t\in S\rbrace$$<br>$$R\cap S=R-(R-S)$$</p><h3 id="差运算（Difference）"><a href="#差运算（Difference）" class="headerlink" title="差运算（Difference）"></a>差运算（Difference）</h3><p>差运算的基本要求</p><ul><li>R和S两个关系必须具有相同的n个元（即两个关系都有n个属性）</li><li>相应的属性必须取自同一个域下</li></ul><p>进行差运算后仍未一个n元关系，由所有属于R却不属于S的元组组成<br>$$R- S=\lbrace t|t\in R\wedge t\notin S\rbrace$$</p><h3 id="笛卡尔积（Cartesian-Product）"><a href="#笛卡尔积（Cartesian-Product）" class="headerlink" title="笛卡尔积（Cartesian Product）"></a>笛卡尔积（Cartesian Product）</h3><p>R为n元关系，包含$k_1$个分组，S为m元关系，包含$k_2$个分组</p><p>经过笛卡尔积的关系，具有n+m元，即n+m列的集合，元组的前n列是R的一个元组，元组的后m列是S的一个元组。一共具有$k_1*k_2$个元组</p><p>$$R\times S=\lbrace \overbrace{t_r\ \ t_s}|t_r\in R \wedge t_s\in S\rbrace$$</p><p><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/dikaerji.png"></p><h2 id="专门的关系运算"><a href="#专门的关系运算" class="headerlink" title="专门的关系运算"></a>专门的关系运算</h2><h3 id="选择运算（Selection）"><a href="#选择运算（Selection）" class="headerlink" title="选择运算（Selection）"></a>选择运算（Selection）</h3><p>选择又被称为限制（Restriction），选择运算符的含义是在关系R中选择满足给定条件的诸元组，即选择是对元组的选择，选择的结果属性个数不会发生改变<br>$$\sigma_{F}(R)=\lbrace t|t\in R\wedge F(t)=true\rbrace$$<br>上面的F表示选择条件，是一个逻辑表达式，结果是布尔值</p><p><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/selection.png"></p><p>例如：Student(name,age,score,dept)是一个学生信息表，属性分别是姓名，年龄，分数和专业，现在通过选择运算获取所有专业为CS的元组</p><p>$$\sigma_{dept=’CS’}(Student)$$</p><h3 id="投影运算（Projection）"><a href="#投影运算（Projection）" class="headerlink" title="投影运算（Projection）"></a>投影运算（Projection）</h3><p>投影运算符的含义是从R中选择出若干个属性列组成新的关系，简言之就是从关系中选择出完整属性列的子集组成一个新关系</p><p>$$\pi_A(R)=\lbrace t[A]|t\in R\rbrace$$<br>其中的A表示R中的属性列</p><p>这里需要注意的是经过投影之后，不仅原关系中的某些列取消了，部分元组也会取消，即不仅列数减少，行数也有可能减少，这是由于去除某些列后，原关系的限制关系解除，某些元组发生重复</p><p>例如上文的学生信息表，现在从其中只投影（筛选）专业这个属性，则必然重复专业的元组会被删除，只保留一个<br>$$\pi_{dept}(Student)$$</p><p>投影多个属性的情况下按照如下方式书写，或将多个属性定义为一个属性列<br>$$\pi_{name,score,dept}(Student)$$<br><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/projection.png"></p><h3 id="连接运算（Join）"><a href="#连接运算（Join）" class="headerlink" title="连接运算（Join）"></a>连接运算（Join）</h3><p>连接也被称为$\theta$连接，连接运算的含义表示从两个关系的笛卡尔积中选择出属性间满足一定条件的元组</p><p>$$R \operatorname*{\Join}\limits_{A\theta B} S=\lbrace \overbrace{t_r\ \ t_s}|t_r\in R \wedge t_s\in S\wedge t_r[A]\theta t_s[B]\rbrace$$</p><p>其中A和B分别表示的是R和S上度数相等且可比的两个属性组，$\theta$表示比较运算符</p><p>连接运算就是从R和S的笛卡尔积$R\times S$中选取A属性组上的值与B属性组上值满足比较关系$\theta$ 的元组</p><h4 id="等值连接"><a href="#等值连接" class="headerlink" title="等值连接"></a>等值连接</h4><p>等值连接就是比较关系是等于的连接运算（$\theta$ = “=”），等值连接就是从笛卡尔积中选取A和B属性值相等的元组，即<br>$$R \operatorname*{\Join}\limits_{A= B} S=\lbrace \overbrace{t_r\ \ t_s}|t_r\in R \wedge t_s\in S\wedge t_r[A]= t_s[B]\rbrace$$</p><h4 id="自然连接"><a href="#自然连接" class="headerlink" title="自然连接"></a>自然连接</h4><p>自然连接是特殊的等值连接，其在等值连接的基础上要求两个关系中进行比较的分量必须是相同的属性组，并且最后的运算结果中只保留两个属性中的一个即可（即在结果中去掉重复的属性列）</p><p>自然连接的含义是R和S的相同属性组的值相等<br>$$R \Join S=\lbrace \overbrace{t_r\ \ t_s}|t_r\in R \wedge t_s\in S\wedge t_r[A]= t_s[A]\rbrace$$</p><h4 id="内外连接"><a href="#内外连接" class="headerlink" title="内外连接"></a>内外连接</h4><p>可以看到两个关系在做自然连接时，满足比较关系的元组被保留，不满足比较关系的元组被舍弃，这就说明R和S两个关系中都可能会有元组被舍弃，这种连接方式被称为内连接</p><p>与之相对的一种连接方式称为外连接，外连接会将某个关系中不满足条件的元组保留下来，并在他的其他属性上填控制NULL，如果把左边关系R中要舍弃的元组保留下来，则称为左外连接，如果将右边关系S中要舍弃的元组保留下来，称为右外连接</p><p><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/djasio.png"></p><h3 id="除运算（Division）"><a href="#除运算（Division）" class="headerlink" title="除运算（Division）"></a>除运算（Division）</h3><p><a href="https://blog.csdn.net/weixin_42023723/article/details/80876568">除运算</a></p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2-Yaml文件</title>
      <link href="/2021/04/18/2-Yaml%E6%96%87%E4%BB%B6/"/>
      <url>/2021/04/18/2-Yaml%E6%96%87%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<h1 id="Yaml文件"><a href="#Yaml文件" class="headerlink" title="Yaml文件"></a>Yaml文件</h1><p>SpringBoot使用一个全局配置文件，配置文件的名称是固定的，但文件类型有两种</p><ul><li>application.properties<ul><li>语法结构：key=value</li></ul></li><li>application.yaml  (推荐)<ul><li>语法结构： key: value</li><li>注意冒号后边必须跟空格，否则语法结构错误（约定大于配置的体现）</li></ul></li></ul><p>YAML 是 “YAML Ain’t a Markup Language”（YAML 不是一种标记语言）的递归缩写。在开发的这种语言时，YAML 的意思其实是：”Yet Another Markup Language”（仍是一种标记语言）。</p><p>YAML 的语法和其他高级语言类似，并且可以简单表达清单、散列表，标量等数据形态。它使用空白符号缩进和大量依赖外观的特色，特别适合用来表达或编辑数据结构、各种配置文件、倾印调试内容、文件大纲（例如：许多电子邮件标题格式和YAML非常接近）。</p><p>YAML 的配置文件后缀为 .yml，如：application.yml </p><h2 id="Yaml文件基本语法"><a href="#Yaml文件基本语法" class="headerlink" title="Yaml文件基本语法"></a>Yaml文件基本语法</h2><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># yaml配置文件可以注入到配置类中</span></span><br><span class="line"><span class="comment"># 普通简直对（key=value）</span></span><br><span class="line"><span class="attr">name:</span> <span class="string">Leslie</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 存储对象</span></span><br><span class="line"><span class="attr">person:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">Jessica</span></span><br><span class="line">  <span class="attr">age:</span> <span class="number">18</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 对象的行内写法</span></span><br><span class="line"><span class="attr">person2:</span> &#123;<span class="attr">name:</span> <span class="string">Lily</span>,<span class="attr">age:</span> <span class="number">18</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 数组写法</span></span><br><span class="line"><span class="attr">fruit:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">apple</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">banana</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">orange</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 数组的行内写法，使用中括号[]</span></span><br><span class="line"><span class="attr">fruit2:</span> [<span class="string">apple</span>,<span class="string">banana</span>,<span class="string">orange</span>]</span><br></pre></td></tr></table></figure><h2 id="Yaml给实体类-属性赋值"><a href="#Yaml给实体类-属性赋值" class="headerlink" title="Yaml给实体类/属性赋值"></a>Yaml给实体类/属性赋值</h2><p>通过yaml可以直接为实体类赋值，这是之前的properties配置文件无法实现的</p><h3 id="赋值步骤"><a href="#赋值步骤" class="headerlink" title="赋值步骤"></a>赋值步骤</h3><p>创建实体类，@Component将其注入容器中，@ConfigurationProperties(prefix = “person”)该注解表示将该实体类与application.yml中的person对象绑定起来，即告诉SpringBoot将本类中的所有属性和配置文件中相关配置进行绑定，利用配置文件为其赋值</p><p>只有这个类是容器中的组件时，才能使用这种配置赋值方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;person&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> Date birth;</span><br><span class="line">    <span class="keyword">private</span> Boolean state;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;String,Object&gt; map;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Object&gt; list;</span><br><span class="line">    <span class="keyword">private</span> Pet pet;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name, Integer age, Date birth, Boolean state, Map&lt;String, Object&gt; map, List&lt;Object&gt; list, Pet pet)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">        <span class="keyword">this</span>.birth = birth;</span><br><span class="line">        <span class="keyword">this</span>.state = state;</span><br><span class="line">        <span class="keyword">this</span>.map = map;</span><br><span class="line">        <span class="keyword">this</span>.list = list;</span><br><span class="line">        <span class="keyword">this</span>.pet = pet;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line">...</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Pet</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Pet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Pet</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">...</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>编写application.yml</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">person:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">Leslie</span></span><br><span class="line">  <span class="attr">age:</span> <span class="number">18</span></span><br><span class="line">  <span class="attr">birth:</span> <span class="number">2021</span><span class="string">/2/14</span></span><br><span class="line">  <span class="attr">state:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">map:</span> &#123;<span class="attr">k1:</span> <span class="string">v1</span>,<span class="attr">k2:</span> <span class="string">v2</span>&#125;</span><br><span class="line">  <span class="attr">list:</span> [<span class="string">l1</span>,<span class="string">l2</span>,<span class="string">l3</span>]</span><br><span class="line">  <span class="attr">pet:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">Dog</span></span><br><span class="line">    <span class="attr">age:</span> <span class="number">3</span></span><br></pre></td></tr></table></figure><p>测试结果</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SpringBootTestApplicationTests</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    Person person;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">contextLoads</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(person);</span><br><span class="line">        <span class="comment">//Person&#123;name=&#x27;Leslie&#x27;, age=18, birth=Sun Feb 14 00:00:00 CST 2021, state=true, map=&#123;k1=v1, k2=v2&#125;, list=[l1, l2, l3], pet=Pet&#123;name=&#x27;Dog&#x27;, age=3&#125;&#125;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Yaml文件与properties为属性赋值的区别"><a href="#Yaml文件与properties为属性赋值的区别" class="headerlink" title="Yaml文件与properties为属性赋值的区别"></a>Yaml文件与properties为属性赋值的区别</h3><table><thead><tr><th>—</th><th>@ConfigurationProperties</th><th>@Value</th></tr></thead><tbody><tr><td>功能</td><td>批量注入配置文件中的属性</td><td>一个一个注入</td></tr><tr><td>松散绑定（松散语法）</td><td>支持</td><td>不支持</td></tr><tr><td>SpEL</td><td>不支持</td><td>支持</td></tr><tr><td>JSR303数据校验</td><td>支持</td><td>不支持</td></tr><tr><td>复杂类型封装</td><td>支持</td><td>不支持</td></tr></tbody></table><p>松散绑定就是方便我们在对象定义的Java代码中继续使用驼峰命名法（例如：lastName）但是在yml配置文件中可以使用下划线命名法（例如：last-name或last_name或LAST_NAME）来进行匹配</p><h3 id="JSR303校验"><a href="#JSR303校验" class="headerlink" title="JSR303校验"></a>JSR303校验</h3><p>JSR是Java Specification Requests的缩写，意思是Java 规范提案。是指向JCP(Java Community Process)提出新增一个标准化技术规范的正式请求。任何人都可以提交JSR，以向Java平台增添新的API和服务。JSR已成为Java界的一个重要标准。</p><p>JSR-303 是JAVA EE 6 中的一项子规范，叫做Bean Validation，Hibernate Validator 是 Bean Validation 的参考实现 . Hibernate Validator 提供了 JSR 303 规范中所有内置 constraint 的实现，除此之外还有一些附加的 constraint。</p><h4 id="基本内容"><a href="#基本内容" class="headerlink" title="基本内容"></a>基本内容</h4><p><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/20200525161753312.png"></p><p>扩展部分<br><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/20200525161900254.png"></p><h4 id="使用测试"><a href="#使用测试" class="headerlink" title="使用测试"></a>使用测试</h4><p>定义POJO，在类前使用@Validated表示使用JSR303校验，在参数前加注解@Email表示检查传入参数是否符合规定格式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;pet&quot;)</span></span><br><span class="line"><span class="meta">@Validated</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Pet</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String lastName;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="meta">@Email()</span></span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">...</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>编写yml文件传入参数(可以看到此时email参数不符合规定格式)</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">pet:</span></span><br><span class="line">  <span class="attr">LAST_NAME:</span> <span class="string">Cat</span></span><br><span class="line">  <span class="attr">age:</span> <span class="number">1</span></span><br><span class="line">  <span class="attr">email:</span> <span class="number">233</span></span><br></pre></td></tr></table></figure><p>测试类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SpringBootTestApplicationTests</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    Pet pet;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">contextLoads</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(pet);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 运行结果:</span></span><br><span class="line"><span class="comment">    Property: pet.email</span></span><br><span class="line"><span class="comment">    Value: 233</span></span><br><span class="line"><span class="comment">    Origin: class path resource [application.yaml] - 31:10</span></span><br><span class="line"><span class="comment">    Reason: 不是一个合法的电子邮件地址</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="配置文件优先级"><a href="#配置文件优先级" class="headerlink" title="配置文件优先级"></a>配置文件优先级</h2><p>项目路径下各个位置核心配置文件的优先级如下：</p><ol><li>file:./config/</li><li>file:./</li><li>classpath:/config/</li><li>classpath:/</li></ol><p>即file路径指的是项目根路径，classpath指的是资源路径即resources目录下，可以看到SpringBoot项目自动创建的核心配置文件是优先级最低的配置文件</p><p>当配置文件位于同一路径下时，按照扩展名的优先级顺序如下：properties&gt;yaml&gt;yml，即先加载yml文件，再加载yaml文件，最后加载properties文件</p><h3 id="多环境配置"><a href="#多环境配置" class="headerlink" title="多环境配置"></a>多环境配置</h3><p>实际企业开发过程中，可能需要在项目的不同阶段使用不同配置文件，这时，就可以在配置中指定不同的配置文件，但所有配置文件都需要以application开头，通过分号-表示不同环境下的配置文件</p><p><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/springboottest5.png"></p><p>默认情况下，依然执行application.yaml文件，只有当我们在application.yaml中指定要执行的配置文件时，才会切换环境配置</p><p>在application文件中配置时，不需要全部的文件名，只需要写清分号后缀即可</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span></span><br><span class="line">    <span class="attr">active:</span> <span class="string">test</span></span><br></pre></td></tr></table></figure><p>不过yaml支持多文档模块，即将一个文档下的语句通过分隔符分为多个模块，可以简化多文件的创建</p><p>yml以—为分隔符，每个分隔符创建一个模块，通过spring.profiles为模块命名</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8080</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span></span><br><span class="line">    <span class="attr">active:</span> <span class="string">test</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span> <span class="string">test</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8081</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span> <span class="string">dev</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8082</span></span><br></pre></td></tr></table></figure><p>建议配置量小的情况下可以使用多文档模块，配置量较大的情况下还是文件分离更加直观</p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
          <category> 后端框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
            <tag> Spring </tag>
            
            <tag> Yaml </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1-SpringBoot基础</title>
      <link href="/2021/04/17/1-SpringBoot%E5%9F%BA%E7%A1%80/"/>
      <url>/2021/04/17/1-SpringBoot%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h1 id="SpringBoot基础"><a href="#SpringBoot基础" class="headerlink" title="SpringBoot基础"></a>SpringBoot基础</h1><blockquote><p>SpringBoot是由Pivotal团队在2013年开始研发、2014年4月发布第一个版本的全新开源的轻量级框架。它基于Spring4.0设计，不仅继承了Spring框架原有的优秀特性，而且还通过简化配置来进一步简化了Spring应用的整个搭建和开发过程。另外SpringBoot通过集成大量的框架使得依赖包的版本冲突，以及引用的不稳定性等问题得到了很好的解决。</p></blockquote><p>SpringBoot所具备的特征有：</p><ol><li>可以创建独立的Spring应用程序，并且基于其Maven或Gradle插件，可以创建可执行的JARs和WARs；</li><li>内嵌Tomcat或Jetty等Servlet容器；</li><li>提供自动配置的“starter”项目对象模型（POMS）以简化Maven配置；</li><li>尽可能自动配置Spring容器；</li><li>提供准备好的特性，如指标、健康检查和外部化配置；</li><li>绝对没有代码生成，不需要XML配置。</li></ol><h2 id="IDEA快速部署SpringBoot项目"><a href="#IDEA快速部署SpringBoot项目" class="headerlink" title="IDEA快速部署SpringBoot项目"></a>IDEA快速部署SpringBoot项目</h2><p>通过SpringInitializr创建SpringBoot项目,配置相关信息<br><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/springboottest1.png"></p><p>自动配置SpringWeb<br><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/springboottest2.png"></p><p>完成项目部署<br><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/springboottest3.png"></p><p>编写Controller层，测试结果(Controller层，DAO层，Service层都需要与项目启动入口在同层下才能使用)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hello world&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>成功调用接口<br><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/springboottest4.png"></p><h2 id="SpringBoot自动装配原理"><a href="#SpringBoot自动装配原理" class="headerlink" title="SpringBoot自动装配原理"></a>SpringBoot自动装配原理</h2><h3 id="pom-xml配置文件"><a href="#pom-xml配置文件" class="headerlink" title="pom.xml配置文件"></a>pom.xml配置文件</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--引入父工程，spring-boot-dependencies核心依赖在父工程中--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--我们在引入或使用一些SpringBoot插件过程中不需要指定版本号，就是因为父工程中已经引入了对应的插件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.4.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.ywrby<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>SpringBootTest<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>SpringBootTest<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>Demo project for Spring Boot<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>11<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--启动器本质就是SpringBoot的启动场景，所有启动器都以spring-boot-starter为前缀</span></span><br><span class="line"><span class="comment">            这些启动器内部封装了实现该场景需要进行的全部操作</span></span><br><span class="line"><span class="comment">            SpringBoot存在很多开箱即用的Starter依赖，即SpringBoot会将所有功能场景变成一个个启动器方便使用</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--SpringBoot中的Web启动器，会帮项目导入Web环境所需的所有依赖--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--SpringBoot单元测试启动器--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="SpringBoot常见启动器"><a href="#SpringBoot常见启动器" class="headerlink" title="SpringBoot常见启动器"></a>SpringBoot常见启动器</h3><table><thead><tr><th>启动器名称</th><th>功能</th></tr></thead><tbody><tr><td>spring-boot-starter</td><td>这是Spring Boot的核心启动器，包含了自动配置、日志和YAML。</td></tr><tr><td>spring-boot-starter-actuator</td><td>帮助监控和管理应用。</td></tr><tr><td>spring-boot-starter-amqp</td><td>通过spring-rabbit来支持AMQP协议（Advanced Message Queuing Protocol）。</td></tr><tr><td>spring-boot-starter-aop</td><td>支持面向方面的编程即AOP，包括spring-aop和AspectJ。</td></tr><tr><td>spring-boot-starter-artemis</td><td>通过Apache Artemis支持JMS的API（Java Message Service API）。</td></tr><tr><td>spring-boot-starter-batch</td><td>支持Spring Batch，包括HSQLDB数据库。</td></tr><tr><td>spring-boot-starter-cache</td><td>支持Spring的Cache抽象。</td></tr><tr><td>spring-boot-starter-cloud-connectors</td><td>支持Spring Cloud Connectors，简化了在像Cloud Foundry或Heroku这样的云平台上连接服务。</td></tr><tr><td>spring-boot-starter-data-elasticsearch</td><td>支持ElasticSearch搜索和分析引擎，包括spring-data-elasticsearch。</td></tr><tr><td>spring-boot-starter-data-gemfire</td><td>支持GemFire分布式数据存储，包括spring-data-gemfire。</td></tr><tr><td>spring-boot-starter-data-jpa</td><td>支持JPA（Java Persistence API），包括spring-data-jpa、spring-orm、Hibernate。</td></tr><tr><td>spring-boot-starter-data-mongodb</td><td>支持MongoDB数据，包括spring-data-mongodb。</td></tr><tr><td>spring-boot-starter-data-rest</td><td>通过spring-data-rest-webmvc，支持通过REST暴露Spring Data数据仓库。</td></tr><tr><td>spring-boot-starter-data-solr</td><td>支持Apache Solr搜索平台，包括spring-data-solr。</td></tr><tr><td>spring-boot-starter-freemarker</td><td>支持FreeMarker模板引擎。</td></tr><tr><td>spring-boot-starter-groovy-templates</td><td>支持Groovy模板引擎。</td></tr><tr><td>spring-boot-starter-hateoas</td><td>通过spring-hateoas支持基于HATEOAS的RESTful Web服务。</td></tr><tr><td>spring-boot-starter-hornetq</td><td>通过HornetQ支持JMS。</td></tr><tr><td>spring-boot-starter-integration</td><td>支持通用的spring-integration模块。</td></tr><tr><td>spring-boot-starter-jdbc</td><td>支持JDBC数据库。</td></tr><tr><td>spring-boot-starter-jersey</td><td>支持Jersey RESTful Web服务框架。</td></tr><tr><td>spring-boot-starter-jta-atomikos</td><td>通过Atomikos支持JTA分布式事务处理。</td></tr><tr><td>spring-boot-starter-jta-bitronix</td><td>通过Bitronix支持JTA分布式事务处理。</td></tr><tr><td>spring-boot-starter-mail</td><td>支持javax.mail模块。</td></tr><tr><td>spring-boot-starter-mobile</td><td>支持spring-mobile。</td></tr><tr><td>spring-boot-starter-mustache</td><td>支持Mustache模板引擎。</td></tr><tr><td>spring-boot-starter-redis</td><td>支持Redis键值存储数据库，包括spring-redis。</td></tr><tr><td>spring-boot-starter-security</td><td>支持spring-security。</td></tr><tr><td>spring-boot-starter-social-facebook</td><td>支持spring-social-facebook</td></tr><tr><td>spring-boot-starter-social-linkedin</td><td>支持pring-social-linkedin</td></tr><tr><td>spring-boot-starter-social-twitter</td><td>支持pring-social-twitter</td></tr><tr><td>spring-boot-starter-test</td><td>支持常规的测试依赖，包括JUnit、Hamcrest、Mockito以及spring-test模块。</td></tr><tr><td>spring-boot-starter-thymeleaf</td><td>支持Thymeleaf模板引擎，包括与Spring的集成。</td></tr><tr><td>spring-boot-starter-velocity</td><td>支持Velocity模板引擎。</td></tr><tr><td>spring-boot-starter-web</td><td>支持全栈式Web开发，包括Tomcat和spring-webmvc。</td></tr><tr><td>spring-boot-starter-websocket</td><td>支持WebSocket开发。</td></tr><tr><td>spring-boot-starter-ws</td><td>支持Spring Web Services。</td></tr></tbody></table><p>Spring Boot应用启动器面向生产环境的还有2种，具体如下：</p><ol><li>spring-boot-starter-actuator：增加了面向产品上线相关的功能，比如测量和监控</li><li>spring-boot-starter-remote-shell：增加了远程ssh shell的支持。</li></ol><p>最后，Spring Boot应用启动器还有一些替换技术的启动器，具体如下：</p><ol><li>spring-boot-starter-jetty：引入了Jetty HTTP引擎（用于替换Tomcat）</li><li>spring-boot-starter-log4j：支持Log4J日志框架。</li><li>spring-boot-starter-logging：引入了Spring Boot默认的日志框架Logback。</li><li>spring-boot-starter-tomcat：引入了Spring Boot默认的HTTP引擎Tomcat。</li><li>spring-boot-starter-undertow：引入了Undertow HTTP引擎（用于替换Tomcat）。</li></ol><h3 id="SpringBoot主程序"><a href="#SpringBoot主程序" class="headerlink" title="SpringBoot主程序"></a>SpringBoot主程序</h3><p>SpringBootTest.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// @SpringBootApplication注解表明该类是一个SpringBoot应用</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringBootTestApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//run方法 启动SpringBoot应用</span></span><br><span class="line">        SpringApplication.run(SpringBootTestApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="自动装配原理"><a href="#自动装配原理" class="headerlink" title="自动装配原理"></a>自动装配原理</h3><p>通过主程序可以看出，SpringBoot通过启动主程序运行Spring Application的run方法启动SpringBoot应用</p><p>进一步查看run方法源码，可以看到注释表示该方法是一个静态帮助程序（Static helper），可以根据默认配置启动一个SpringApplication对象并返回一个ApplicationContext对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Static helper that can be used to run a &#123;<span class="doctag">@link</span> SpringApplication&#125; from the</span></span><br><span class="line"><span class="comment"> * specified source using default settings.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> primarySource the primary source to load</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> args the application arguments (usually passed from a Java main method)</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> the running &#123;<span class="doctag">@link</span> ApplicationContext&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ConfigurableApplicationContext <span class="title">run</span><span class="params">(Class&lt;?&gt; primarySource, String... args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> run(<span class="keyword">new</span> Class&lt;?&gt;[] &#123; primarySource &#125;, args);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个默认的配置就来源于主程序前的注解@SpringBootApplication，查看该注解源码可看到该注解是一个复合注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target(&#123;ElementType.TYPE&#125;)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Inherited</span></span><br><span class="line"><span class="meta">@SpringBootConfiguration</span></span><br><span class="line"><span class="meta">@EnableAutoConfiguration</span></span><br><span class="line"><span class="meta">@ComponentScan(</span></span><br><span class="line"><span class="meta">    excludeFilters = &#123;@Filter(</span></span><br><span class="line"><span class="meta">    type = FilterType.CUSTOM,</span></span><br><span class="line"><span class="meta">    classes = &#123;TypeExcludeFilter.class&#125;</span></span><br><span class="line"><span class="meta">), @Filter(</span></span><br><span class="line"><span class="meta">    type = FilterType.CUSTOM,</span></span><br><span class="line"><span class="meta">    classes = &#123;AutoConfigurationExcludeFilter.class&#125;</span></span><br><span class="line"><span class="meta">)&#125;</span></span><br><span class="line"><span class="meta">)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> SpringBootApplication &#123;...&#125;</span><br></pre></td></tr></table></figure><p>其中比较重要的三个注解分别是@SpringBootConfiguration，@ComponentScan 和 @EnableAutoConfiguration</p><ul><li>@SpringBootConfiguration，这个注解的底层是一个@Configuration注解，表示当前类是一个Spring的配置类，当创建容器时会从该类上加载注解</li><li>@ComponentScan，默认扫描当前类所在的包及其子包下包含的注解，将@Controller/@Service/@Component/@Repository等注解加载到IOC容器中；</li><li>@EnableAutoConfiguration：这个注解表明启动自动装配，里面包含两个重要的注解@AutoConfigurationPackage和@Import<ul><li>@AutoConfigurationPackage：和@ComponentScan一样，也是将主配置类所在的包及其子包里面的组件扫描到IOC容器中，但是区别是@AutoConfigurationPackage扫描@Enitity、@MapperScan等第三方依赖的注解，@ComponentScan只扫描@Controller/@Service/@Component/@Repository这些常见注解。所以这两个注解扫描的对象是不一样的。</li><li>@Import(AutoConfigurationImportSelector.class)是自动装配的核心注解，AutoConfigurationImportSelector.class中有个selectImports方法</li></ul></li></ul><p>selectImports方法调用了getAutoConfigurationEntry方法，该方法内部又调用了getCandidateConfigurations方法，这个方法是用来找META-INF/spring.factories文件的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> String[] selectImports(AnnotationMetadata annotationMetadata) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">this</span>.isEnabled(annotationMetadata)) &#123;</span><br><span class="line">        <span class="keyword">return</span> NO_IMPORTS;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        AutoConfigurationImportSelector.AutoConfigurationEntry autoConfigurationEntry = <span class="keyword">this</span>.getAutoConfigurationEntry(annotationMetadata);</span><br><span class="line">        <span class="keyword">return</span> StringUtils.toStringArray(autoConfigurationEntry.getConfigurations());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该文件位于spring-boot-configure的jar包中，该文件由键值对（key=value）形式的数据组成，其中包含自动装配全类名，以逗号分隔每个全类名</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># Auto Configure</span><br><span class="line">org.springframework.boot.autoconfigure.EnableAutoConfiguration=\</span><br><span class="line">org.springframework.boot.autoconfigure.admin.SpringApplicationAdminJmxAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.aop.AopAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.amqp.RabbitAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.batch.BatchAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.cache.CacheAutoConfiguration,\</span><br><span class="line">...</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>最终，@EnableAutoConfiguration注解通过@SpringBootApplication注解被间接的标记在了SpringBoot的启动类上，SpringApplicaton.run方法的内部就会执行selectImports方法，进而找到所有JavaConfig配置类全限定名对应的class，然后将所有自动配置类加载到IOC容器中。</p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
          <category> 后端框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>4-网络层（上）</title>
      <link href="/2021/04/17/4-%E7%BD%91%E7%BB%9C%E5%B1%82%EF%BC%88%E4%B8%8A%EF%BC%89/"/>
      <url>/2021/04/17/4-%E7%BD%91%E7%BB%9C%E5%B1%82%EF%BC%88%E4%B8%8A%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="网络层基础"><a href="#网络层基础" class="headerlink" title="网络层基础"></a>网络层基础</h1><p>在参考模型中网络层位于传输层之下，链路层之上。</p><p>网络层的功能主要是将源端产生的数据包/分组，送达至目的机</p><h4 id="完成这项工作需要："><a href="#完成这项工作需要：" class="headerlink" title="完成这项工作需要："></a>完成这项工作需要：</h4><ol><li>封装源数据</li><li>识别目的机</li><li>找到一条好的路径（路由）</li></ol><h4 id="可能遭遇的问题："><a href="#可能遭遇的问题：" class="headerlink" title="可能遭遇的问题："></a>可能遭遇的问题：</h4><ul><li>地址不够用</li><li>丢包</li><li>拥塞</li></ul><h3 id="网络层主要内容"><a href="#网络层主要内容" class="headerlink" title="网络层主要内容"></a>网络层主要内容</h3><h4 id="被路由协议：IP协议"><a href="#被路由协议：IP协议" class="headerlink" title="被路由协议：IP协议"></a>被路由协议：IP协议</h4><ul><li>IP地址：定位目的机</li><li>IP分组：解决信息封装</li><li>IPv6：新一代IP协议</li></ul><h4 id="路由选择协议：找到目的机和源机之间的最优路径"><a href="#路由选择协议：找到目的机和源机之间的最优路径" class="headerlink" title="路由选择协议：找到目的机和源机之间的最优路径"></a>路由选择协议：找到目的机和源机之间的最优路径</h4><ul><li>距离矢量路由选择协议（RIP）</li><li>链路状态路由选择协议（OSPF）</li></ul><h4 id="其他方面："><a href="#其他方面：" class="headerlink" title="其他方面："></a>其他方面：</h4><ul><li>ARP</li><li>ICMP</li><li>CIDR</li><li>NAT</li></ul><h2 id="源和目的机之间的网络分为："><a href="#源和目的机之间的网络分为：" class="headerlink" title="源和目的机之间的网络分为："></a>源和目的机之间的网络分为：</h2><h3 id="数据报网络："><a href="#数据报网络：" class="headerlink" title="数据报网络："></a>数据报网络：</h3><p>提供无连接的服务</p><p><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/%E6%95%B0%E6%8D%AE%E6%8A%A5%E7%BD%91%E7%BB%9C.jpg"></p><h3 id="虚电路网络："><a href="#虚电路网络：" class="headerlink" title="虚电路网络："></a>虚电路网络：</h3><p>提供面向连接的服务</p><p><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/%E8%99%9A%E7%94%B5%E8%B7%AF%E7%BD%91%E7%BB%9C.jpg"></p><table><thead><tr><th>比较项目</th><th>数据报子网（无连接服务）</th><th>虚电路子网（面向连接服务）</th></tr></thead><tbody><tr><td>建立电路</td><td>不需要</td><td>要求</td></tr><tr><td>地址信息</td><td>每个分组含完整的SA和DA</td><td>每个VC包含一个很短的VC号码</td></tr><tr><td>状态信息</td><td>路由器不保留任何连接状态信息</td><td>每个VC都要求路由器建立表项</td></tr><tr><td>路由</td><td>每个分组独立选择路由</td><td>每个分组沿建立VC时确定的路由</td></tr><tr><td>路由器失效影响</td><td>没有，只有系统崩溃时丢失分组</td><td>所有经过失效R的VC都终止</td></tr><tr><td>服务质量，拥塞控制</td><td>很难实现</td><td>总资源（带宽、缓存）足够的情况下，采用提前给每个VC分配资源的方法，很容易实现</td></tr></tbody></table><h1 id="IP地址"><a href="#IP地址" class="headerlink" title="IP地址"></a>IP地址</h1><h2 id="IP（Internet-Protocol）"><a href="#IP（Internet-Protocol）" class="headerlink" title="IP（Internet Protocol）"></a>IP（Internet Protocol）</h2><p><strong>互联网协议</strong>，是TCP/IP协议栈的核心之一</p><p><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/TCPIP%E5%8D%8F%E8%AE%AE%E6%A0%88.jpg"></p><h3 id="IP任务："><a href="#IP任务：" class="headerlink" title="IP任务："></a>IP任务：</h3><p>提供一种尽力而为（best-effort），把数据从源端运输到目的机的方法，IP就像是胶水，将整个互联网络连接起来</p><h3 id="IP为路由提供路由所需要的信息，所以IP也被称为被路由协议"><a href="#IP为路由提供路由所需要的信息，所以IP也被称为被路由协议" class="headerlink" title="IP为路由提供路由所需要的信息，所以IP也被称为被路由协议"></a>IP为路由提供路由所需要的信息，所以IP也被称为被路由协议</h3><p>包含两方面的内容，一方面包含IP地址，<strong>IP地址的作用就在于标识收发的数据机</strong>。另一方面是IP分组/数据报，这是信息封装的格式</p><h2 id="IP地址-1"><a href="#IP地址-1" class="headerlink" title="IP地址"></a>IP地址</h2><p>由32位二进制数表示，包含$2^{32}\approx43*10^8$即43亿个IP地址。缺点在于难于记忆。所以我们经常将IP地址的32位均等分为4组，中间用点分号隔开，每组八位用十进制表示，就形成了常见的IP地址格式</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">10000100100110010000110011000101</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">10000100.10011001.00001100.11000101</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">132.153.12.197</span><br></pre></td></tr></table></figure><h3 id="IP地址具有层次结构"><a href="#IP地址具有层次结构" class="headerlink" title="IP地址具有层次结构"></a>IP地址具有层次结构</h3><p>各个地址之间可能具有一定的从属关系</p><p><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/%E7%BB%93%E6%9E%84%E5%B1%82%E6%AC%A1.jpg"></p><p>这得益于IP地址天生就由两部分组成，IP地址中一部分表示网络部分，一部分表示主机部分，至于各部分占多少位，在不同类型的IP地址中有不同规定</p><h4 id="A类地址"><a href="#A类地址" class="headerlink" title="A类地址"></a>A类地址</h4><p>前一个字节标识网络部分，后三个字节都标识主机部分，<br>由于第一个字节的第一位固定用0标识，所以这个网络公有从（0000000-1111111）也就是0~127组网络，每个网络能容纳$2^{24}-2$台主机，具有A类网络特征的网络有128个，属于大型网络</p><table><thead><tr><th>0xxxxxxx</th><th>xxxxxxxx</th><th>xxxxxxxx</th><th>xxxxxxxx</th></tr></thead><tbody><tr><td><strong>网络部分</strong></td><td>主机部分</td><td>主机部分</td><td>主机部分</td></tr></tbody></table><h4 id="B类地址"><a href="#B类地址" class="headerlink" title="B类地址"></a>B类地址</h4><p>前两个字节用来标识网络部分，后两个字节用来标识主机部分，开头两位固定为10，所以这个网络第一字节从(10000000-10111111)也就是第一字节从128-191的网络，每个网络能容纳$2^{16}-2$台主机，具有B类特征的网络有$2^{14}$个，属于中型网络</p><table><thead><tr><th>10xxxxxx</th><th>xxxxxxxx</th><th>xxxxxxxx</th><th>xxxxxxxx</th></tr></thead><tbody><tr><td><strong>网络部分</strong></td><td><strong>网络部分</strong></td><td>主机部分</td><td>主机部分</td></tr></tbody></table><h4 id="C类地址"><a href="#C类地址" class="headerlink" title="C类地址"></a>C类地址</h4><p>前三个字节标识网络部分，最后一个字节用来标识主机部分，开头三位固定为110，第一字节从11000000~11011111也就是192-223范围内的网络，每个网络能容纳254台主机，具有C类地址特征的网络总数为$2^{21}$个。属于小型网络</p><table><thead><tr><th>110xxxxx</th><th>xxxxxxxx</th><th>xxxxxxxx</th><th>xxxxxxxx</th></tr></thead><tbody><tr><td><strong>网络部分</strong></td><td><strong>网络部分</strong></td><td><strong>网络部分</strong></td><td>主机部分</td></tr></tbody></table><h4 id="保留IP地址"><a href="#保留IP地址" class="headerlink" title="保留IP地址"></a>保留IP地址</h4><p><strong>D类地址</strong>：用作组播</p><p><strong>E类地址</strong>：用作科研</p><p><strong>网络地址</strong>：主机部分全部为0的地址</p><p><strong>广播地址</strong>：主机部分全部为1的地址</p><p><strong>32位全为0</strong>：0.0.0.0，标识这个主机，这个网络。路由表中默认路由的默认地址</p><p><strong>32位全为1</strong>：255.255.255.255，泛洪广播地址，指代互联网所有机器，如果一个分组目的地址是泛洪广播地址，它将发送给互联网上所有主机，但这种行为实际非常可怕，他可能引起很严重的广播风暴，所以这个广播地址实际退化成了本地广播地址，路由器在截获这个地址后，不会再转发这种地址</p><p><strong>环回地址</strong>：以127开头的地址，例如127.0.0.1代表本地主机</p><p><strong>非正常地址</strong>：169.254.x.x,不能与外界正常通信</p><h2 id="IP地址的分配"><a href="#IP地址的分配" class="headerlink" title="IP地址的分配"></a>IP地址的分配</h2><p>IP地址的分配是一种层级分配，全球的IP地址和域名分配，由<strong>ICANN</strong>负责，其下有诸多地区网络中心，如APNIC亚太地址网络信息中心，再往下就是各个国家网络中心，例如中国网络中心就从属于APNIC，国家网络中心下还有诸多运营商网络中心，<strong>普通用户就是从运营商处获取IP地址</strong></p><hr><h1 id="子网规划"><a href="#子网规划" class="headerlink" title="子网规划"></a>子网规划</h1><p>局域网不断发展，日益庞大以至于<strong>难以管理</strong>，所以必须要将庞大的局域网进行<strong>分割</strong>，分割成为不同的子网</p><p>一个局域网虽然被分割成几部分（子网），但在外界看来，还是在一个局域网内，这是由于这些局域网对应的<strong>外部路由器仍然只有一条</strong></p><p>同时允许不同的子网在一个组织内部连接起来</p><p><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/%E5%AD%90%E7%BD%91.jpg"></p><h2 id="主-边界路由器"><a href="#主-边界路由器" class="headerlink" title="主/边界路由器"></a>主/边界路由器</h2><p>负责与外部进行联系，从外部收到分组，向内部分组转发，路由器识别选择子网的方式通过<strong>子网掩码</strong>实现。</p><h3 id="子网掩码"><a href="#子网掩码" class="headerlink" title="子网掩码"></a>子网掩码</h3><p>一种了解网络规模的机制</p><p>可以用点分十进制（连续的0和连续的1）表示，例如：11111111111111111111111111100000（255.255.255.224），其中1表示网络位，0表示主机位。</p><p>还可以用/+网络位数+子网位数 表示，例如上文中的27个1和5个0表示的点分十进制形式的子网掩码还可以用 /27 表示</p><p>路由器采用按位与操作，将目的IP地址和子网掩码进行按位与计算。例如：</p><p>目的IP地址：128.125.23.102，当前路由器IP地址：128.125.0.0/16，前16位为网络地址，后16位中，前八位为子网位数，后八位为主机位数，所以，它的子网掩码就是/24，也就是前24位为1，后八位为0 </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">128.125.23.102</span><br><span class="line"></span><br><span class="line">10000000-01111101-00010111-01100110</span><br><span class="line"></span><br><span class="line">11111111-11111111-11111111-00000000</span><br></pre></td></tr></table></figure><h4 id="执行按位与操作得到："><a href="#执行按位与操作得到：" class="headerlink" title="执行按位与操作得到："></a>执行按位与操作得到：</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">10000000-01111101-00010111-00000000</span><br><span class="line"></span><br><span class="line">128.125.23.0</span><br></pre></td></tr></table></figure><p>最终得到的结果就是目的IP地址所属的网络（子网）的地址。</p><p>适用子网掩码的机制，使得路由器不必记录所有主机的地址，缩减了路由表的规模</p><h4 id="一些缺省的子网掩码"><a href="#一些缺省的子网掩码" class="headerlink" title="一些缺省的子网掩码"></a>一些缺省的子网掩码</h4><table><thead><tr><th>网络类型</th><th>点分十进制</th><th>网络前缀表示</th></tr></thead><tbody><tr><td>A：</td><td>255.0.0.0（8位网络位）</td><td>/8</td></tr><tr><td>B：</td><td>255.255.0.0（16位网络位）</td><td>/16</td></tr><tr><td>C：</td><td>255.255.255.0（24位网络位）</td><td>/24</td></tr></tbody></table><h3 id="主机借位"><a href="#主机借位" class="headerlink" title="主机借位"></a>主机借位</h3><p>IP地址长度不变，却从两级结构（网络位+主机位）变为了三级结构（网络位+子网位+主机位）。这个过程是通过向主机位借位形成子网位实现的</p><p>例如对于C类地址，后八位是主机位，假设现在从其中借两位用来表示子网位，那么可以表示三个子网（00，01，11）.剩余6位可以形成$2^6$即64个IP地址，除了其中的保留地址(网络地址：000000和广播地址：111111)其余62个均为可用IP地址</p><h4 id="借位原则："><a href="#借位原则：" class="headerlink" title="借位原则："></a>借位原则：</h4><ul><li>借位必须从主机域的高位开始借</li><li>主机域至少要求保留两位</li></ul><table><thead><tr><th>网络类型</th><th>主机位</th><th>最大借位/子网位</th></tr></thead><tbody><tr><td>A</td><td>24</td><td>22</td></tr><tr><td>B</td><td>16</td><td>14</td></tr><tr><td>C</td><td>8</td><td>6</td></tr></tbody></table><h4 id="确定子网位"><a href="#确定子网位" class="headerlink" title="确定子网位"></a>确定子网位</h4><p><strong>按照主机位规划</strong></p><p>$$<br>IP地址需求数量\le2^n<br>$$</p><p>(n表示主机位数),子网位数=8-n</p><p><strong>按照网络数要求规划</strong></p><p>根据子网数，确定借位数</p><p>$$<br>子网数\le2^n<br>$$</p><p>借位数=n</p><p><strong>还可以综合主机位与网络数两点因素共同规划确定子网位</strong></p><h1 id="IP寻址"><a href="#IP寻址" class="headerlink" title="IP寻址"></a>IP寻址</h1><h3 id="互联网与网络层的关系"><a href="#互联网与网络层的关系" class="headerlink" title="互联网与网络层的关系"></a>互联网与网络层的关系</h3><ul><li>在网络层上，可将整个互联网看作是一组互联的子网络的自治系统</li><li>将整个互联网联合起来的正是网络层协议：IP</li><li>IP的目的是提供一种尽力的传送方式，将数据从源传到目的</li></ul><h3 id="IP寻址：根据目的IP地址，找到目的网络的过程"><a href="#IP寻址：根据目的IP地址，找到目的网络的过程" class="headerlink" title="IP寻址：根据目的IP地址，找到目的网络的过程"></a>IP寻址：根据目的IP地址，找到目的网络的过程</h3><p><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/IP%E5%AF%BB%E5%9D%80.jpg"></p><p>在路由器之间进行的是IP寻址，根据路由器内部的路由表可以实现最短路径到达我们标记的目的地址，而在局域网内部是借助MAC寻址最终到达目的机</p><h3 id="两种寻址方式比较"><a href="#两种寻址方式比较" class="headerlink" title="两种寻址方式比较"></a>两种寻址方式比较</h3><table><thead><tr><th>区别\寻址方式</th><th>IP寻址</th><th>MAC寻址</th></tr></thead><tbody><tr><td>适用的网络范围不同</td><td>大型网络(互联网间)</td><td>小型网络(局域网)</td></tr><tr><td>所依赖的地址结构不同</td><td>结构化、层次化地址，其本身携带了位置信息</td><td>平面地址</td></tr><tr><td>所处的OSI模型层数不同</td><td>网络层</td><td>数据链路层</td></tr><tr><td>地址数目的限制</td><td>IP地址池正在枯竭</td><td>暂无耗尽的危险</td></tr><tr><td>地址格式区别</td><td>32位/十进制表示</td><td>48位/十六进制</td></tr></tbody></table><h2 id="路由器"><a href="#路由器" class="headerlink" title="路由器"></a>路由器</h2><p>在IP寻址过程中，一个路由器又被称为一跳（HOP）。当数据到达最后一跳，最后将数据重新封装好后传给所在的目的网络，随后在目的网络内部开始进行的就变成了MAC寻址</p><h3 id="主要功能"><a href="#主要功能" class="headerlink" title="主要功能"></a>主要功能</h3><ul><li>打开传来的分组</li><li>确定目标网络，查找路由表</li><li>将数据重新封装，转发</li></ul><h3 id="路由表（路由器转发数据的依据）"><a href="#路由表（路由器转发数据的依据）" class="headerlink" title="路由表（路由器转发数据的依据）"></a>路由表（路由器转发数据的依据）</h3><p>主要包括 </p><ul><li>目的网络地址network address </li><li>接口interface</li><li>代价metric (f.g. hop)</li><li>子网掩码subnet mask</li><li>网关gateway</li></ul><p><strong>除了路由表，路由器内部有一张ARP表（所有子网设备的IP-MAC映射（包括网关））</strong></p><h4 id="路由表可能因厂家的不同而不同"><a href="#路由表可能因厂家的不同而不同" class="headerlink" title="路由表可能因厂家的不同而不同"></a>路由表可能因厂家的不同而不同</h4><h4 id="终端可通过route-print查看本地的路由表"><a href="#终端可通过route-print查看本地的路由表" class="headerlink" title="终端可通过route print查看本地的路由表"></a>终端可通过route print查看本地的路由表</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line">===========================================================================</span><br><span class="line">接口列表</span><br><span class="line"> 23...e4 54 e8 14 47 a1 ......Realtek PCIe GbE Family Controller</span><br><span class="line"> 24...00 ff aa bb cc dd ......Gateway NC Adapter</span><br><span class="line"> 14...0a 00 27 00 00 0e ......VirtualBox Host-Only Ethernet Adapter</span><br><span class="line">  4...c2 b5 d7 79 6b bb ......Microsoft Wi-Fi Direct Virtual Adapter #3</span><br><span class="line"> 16...d2 b5 d7 79 6b bb ......Microsoft Wi-Fi Direct Virtual Adapter #4</span><br><span class="line">  5...00 50 56 c0 00 01 ......VMware Virtual Ethernet Adapter for VMnet1</span><br><span class="line">  9...00 50 56 c0 00 08 ......VMware Virtual Ethernet Adapter for VMnet8</span><br><span class="line"> 11...c0 b5 d7 79 6b bb ......Qualcomm QCA9377 802.11ac Wireless Adapter</span><br><span class="line">  1...........................Software Loopback Interface 1</span><br><span class="line">===========================================================================</span><br><span class="line"></span><br><span class="line">IPv4 路由表</span><br><span class="line">===========================================================================</span><br><span class="line">活动路由:</span><br><span class="line">网络目标        网络掩码          网关       接口   跃点数</span><br><span class="line">          0.0.0.0          0.0.0.0      192.168.1.1    192.168.1.107     50</span><br><span class="line">        127.0.0.0        255.0.0.0            在链路上         127.0.0.1    331</span><br><span class="line">        127.0.0.1  255.255.255.255            在链路上         127.0.0.1    331</span><br><span class="line">  127.255.255.255  255.255.255.255            在链路上         127.0.0.1    331</span><br><span class="line">      192.168.1.0    255.255.255.0            在链路上     192.168.1.107    306</span><br><span class="line">    192.168.1.107  255.255.255.255            在链路上     192.168.1.107    306</span><br><span class="line">    192.168.1.255  255.255.255.255            在链路上     192.168.1.107    306</span><br><span class="line">     192.168.56.0    255.255.255.0            在链路上      192.168.56.1    281</span><br><span class="line">     192.168.56.1  255.255.255.255            在链路上      192.168.56.1    281</span><br><span class="line">   192.168.56.255  255.255.255.255            在链路上      192.168.56.1    281</span><br><span class="line">    192.168.139.0    255.255.255.0            在链路上     192.168.139.1    291</span><br><span class="line">    192.168.139.1  255.255.255.255            在链路上     192.168.139.1    291</span><br><span class="line">  192.168.139.255  255.255.255.255            在链路上     192.168.139.1    291</span><br><span class="line">    192.168.190.0    255.255.255.0            在链路上     192.168.190.1    291</span><br><span class="line">    192.168.190.1  255.255.255.255            在链路上     192.168.190.1    291</span><br><span class="line">  192.168.190.255  255.255.255.255            在链路上     192.168.190.1    291</span><br><span class="line">        224.0.0.0        240.0.0.0            在链路上         127.0.0.1    331</span><br><span class="line">        224.0.0.0        240.0.0.0            在链路上      192.168.56.1    281</span><br><span class="line">        224.0.0.0        240.0.0.0            在链路上     192.168.139.1    291</span><br><span class="line">        224.0.0.0        240.0.0.0            在链路上     192.168.190.1    291</span><br><span class="line">        224.0.0.0        240.0.0.0            在链路上     192.168.1.107    306</span><br><span class="line">  255.255.255.255  255.255.255.255            在链路上         127.0.0.1    331</span><br><span class="line">  255.255.255.255  255.255.255.255            在链路上      192.168.56.1    281</span><br><span class="line">  255.255.255.255  255.255.255.255            在链路上     192.168.139.1    291</span><br><span class="line">  255.255.255.255  255.255.255.255            在链路上     192.168.190.1    291</span><br><span class="line">  255.255.255.255  255.255.255.255            在链路上     192.168.1.107    306</span><br><span class="line">===========================================================================</span><br><span class="line">永久路由:</span><br><span class="line">  无</span><br><span class="line"></span><br><span class="line">IPv6 路由表</span><br><span class="line">===========================================================================</span><br><span class="line">活动路由:</span><br><span class="line"> 接口跃点数网络目标                网关</span><br><span class="line">  1    331 ::1/128                  在链路上</span><br><span class="line"> 14    281 fe80::/64                在链路上</span><br><span class="line">  5    291 fe80::/64                在链路上</span><br><span class="line">  9    291 fe80::/64                在链路上</span><br><span class="line"> 11    306 fe80::/64                在链路上</span><br><span class="line"> 11    306 fe80::2016:6332:cc2f:b7a4/128</span><br><span class="line">                                    在链路上</span><br><span class="line">  5    291 fe80::2c4d:1555:e274:ab03/128</span><br><span class="line">                                    在链路上</span><br><span class="line"> 14    281 fe80::41a0:188a:c7c4:10ff/128</span><br><span class="line">                                    在链路上</span><br><span class="line">  9    291 fe80::fcf4:6fb0:8e57:33df/128</span><br><span class="line">                                    在链路上</span><br><span class="line">  1    331 ff00::/8                 在链路上</span><br><span class="line"> 14    281 ff00::/8                 在链路上</span><br><span class="line">  5    291 ff00::/8                 在链路上</span><br><span class="line">  9    291 ff00::/8                 在链路上</span><br><span class="line"> 11    306 ff00::/8                 在链路上</span><br><span class="line">===========================================================================</span><br><span class="line">永久路由:</span><br><span class="line">  无</span><br></pre></td></tr></table></figure><hr><h1 id="IP分组"><a href="#IP分组" class="headerlink" title="IP分组"></a>IP分组</h1><h4 id="IP协议的另一个重要内容"><a href="#IP协议的另一个重要内容" class="headerlink" title="IP协议的另一个重要内容"></a>IP协议的另一个重要内容</h4><p><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/%E6%95%B0%E6%8D%AE%E6%8A%A5%E6%A0%BC%E5%BC%8F.jpg"></p><h4 id="IP分组分为头部和数据两大部分，不含可选字段的头部有20个字节的长度，其中包含十二个字段。按照4个字节（32位）为一行排列，则一共有五行"><a href="#IP分组分为头部和数据两大部分，不含可选字段的头部有20个字节的长度，其中包含十二个字段。按照4个字节（32位）为一行排列，则一共有五行" class="headerlink" title="IP分组分为头部和数据两大部分，不含可选字段的头部有20个字节的长度，其中包含十二个字段。按照4个字节（32位）为一行排列，则一共有五行"></a>IP分组分为头部和数据两大部分，不含可选字段的头部有20个字节的长度，其中包含十二个字段。按照4个字节（32位）为一行排列，则一共有五行</h4><h3 id="协议版本"><a href="#协议版本" class="headerlink" title="协议版本"></a>协议版本</h3><p>长度为4位，用来表明IP协议版本号(IPv4:0100,IPv6:0110)</p><h3 id="报头长度"><a href="#报头长度" class="headerlink" title="报头长度"></a>报头长度</h3><p>表明IP分组报头的长度，<strong>长度</strong>为4位，<strong>单位</strong>是4字节(32bit)。这4位数变化的范围在0101-1111对应的十进制数就是5-15，也就是<strong>报头长度的变化范围在20-60字节</strong>(其中包括<strong>二十字节的固定报头长度</strong>，和不确定的可选项)</p><h3 id="服务类型"><a href="#服务类型" class="headerlink" title="服务类型"></a>服务类型</h3><p>区分服务(DS:Differentiated Service)，长度为8位，表示分组的优先级和丢弃级等，在现在的互联网中应用较少，可以用来提供一些服务质量的保证，拥塞控制等</p><h3 id="数据报总长度"><a href="#数据报总长度" class="headerlink" title="数据报总长度"></a>数据报总长度</h3><p>长度位16位，表明整个报文/分组的长度（报头+数据），<strong>单位是字节</strong>，能够表示的总长度=$2^16-1$,即65535字节</p><h3 id="数据报标识号"><a href="#数据报标识号" class="headerlink" title="数据报标识号"></a>数据报标识号</h3><p>也叫分组标识号，长度为16位，标识当前分组/数据报的序列号，这个序列号由源机（发送方）维护。接收方可以通过这个序列号进行数据报的重组</p><h3 id="标志字段，分片偏移字段"><a href="#标志字段，分片偏移字段" class="headerlink" title="标志字段，分片偏移字段"></a>标志字段，分片偏移字段</h3><p>标志字段占3位，分片偏移字段占13位。前者决定是否进行分片操作，后者决定分片之后，接收方如何还原原数据报</p><p>分组从源传输到目的机的过程可能会跨越一个很大的网络，这其间的网络的<strong>MTU</strong>(最大传输单元Maximum Transmission Unit)可能是不同的,当数据从一个大MTU的网络传输到一个小MTU的网络，就需要进行分片操作，将一个大数据报切割成多个小数据报。</p><h3 id="生存时间TTL"><a href="#生存时间TTL" class="headerlink" title="生存时间TTL"></a>生存时间TTL</h3><p>现行的生存时间的单位是<strong>跳数</strong>(HOP)，每经过一个路由器，跳数都需要减一，当<strong>跳数为0</strong>时，这个数据报就会被<strong>丢弃</strong>，丢弃数据报的路由会向发送方返回一个超时消息，说明这个数据报没有到达目的机，但生存时间已经为0，所以被丢弃了。TTL可以<strong>防止一个分组在网络里无限循环</strong></p><h3 id="用户协议"><a href="#用户协议" class="headerlink" title="用户协议"></a>用户协议</h3><p>长度为8位，用来指明上层传输层采用的协议，同时表明数据部分搭载的是哪种数据。常见的协议有：17表示UDP，6表示TCP</p><h3 id="报头校验和"><a href="#报头校验和" class="headerlink" title="报头校验和"></a>报头校验和</h3><p>长度为16位，搭载的是互联网校验和，检验分组头部在传输过程中有没有发生错误</p><h3 id="数据报选项"><a href="#数据报选项" class="headerlink" title="数据报选项"></a>数据报选项</h3><p>可选的选项，允许主机支持不同的选项（安全，源路由，时戳等到…）。很少被使用</p><h3 id="填充位"><a href="#填充位" class="headerlink" title="填充位"></a>填充位</h3><p>如果其余部分总长度不是32位的整数倍，则填充位会补齐剩余部分，使报头总长度保持为32位的整数倍</p><h2 id="Wireshark抓包工具"><a href="#Wireshark抓包工具" class="headerlink" title="Wireshark抓包工具"></a>Wireshark抓包工具</h2><p>Wireshark是一个免费开源的网络数据包分析软件，功能就是截取网络数据包，尽可能详细的截取网络数据报中的数据</p><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><ul><li>开源，强大</li><li>支持脚本</li><li>支持的数据包类型众多</li></ul><p><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/Wireshark.jpg"></p><p>可以看到，上图就是利用wireshark实际抓取到的一个网络数据包，可以详细查看数据包内容，以IP协议为例，已经将报头内容详细展示了出来</p><hr><h1 id="IPv6地址"><a href="#IPv6地址" class="headerlink" title="IPv6地址"></a>IPv6地址</h1><h2 id="IPv4危机"><a href="#IPv4危机" class="headerlink" title="IPv4危机"></a>IPv4危机</h2><h4 id="IPv4面临的诸多问题"><a href="#IPv4面临的诸多问题" class="headerlink" title="IPv4面临的诸多问题"></a>IPv4面临的诸多问题</h4><ul><li>地址危机(最主要的问题)</li><li>移动性支持不够</li><li>路由表的膨胀(进而带来延迟增加)</li><li>安全问题</li><li>配置复杂</li><li>QoS和性能问题</li><li>端到端业务模式受到破坏(由于地址池枯竭，所以出现大量私人地址，私人地址不具有唯一性，在接入互联网时需要经过NAT转换器进行转换，是的原来端到端的业务模式变成了“端-转换器-端”的模式)</li></ul><h4 id="IPv4地址危机"><a href="#IPv4地址危机" class="headerlink" title="IPv4地址危机"></a>IPv4地址危机</h4><p>IPv4拥有约43亿个的巨量地址，但由于网络飞速发展，以及过度分类浪费了大量地址，导致IPv4地址池逐渐枯竭</p><p>2011年2月，IPv4总地址池彻底枯竭</p><h2 id="解决方案-替换还是修补"><a href="#解决方案-替换还是修补" class="headerlink" title="解决方案-替换还是修补"></a>解决方案-替换还是修补</h2><h4 id="如果替换IPv4协议，表示网络中所有的系统均需要升级，所有设备也都需要升级或更换，这对大型组织来说是一场难以想象的过程"><a href="#如果替换IPv4协议，表示网络中所有的系统均需要升级，所有设备也都需要升级或更换，这对大型组织来说是一场难以想象的过程" class="headerlink" title="如果替换IPv4协议，表示网络中所有的系统均需要升级，所有设备也都需要升级或更换，这对大型组织来说是一场难以想象的过程"></a>如果替换IPv4协议，表示网络中所有的系统均需要升级，所有设备也都需要升级或更换，这对大型组织来说是一场难以想象的过程</h4><h4 id="如果是修补，可通过NAT、CIDR、VLSM等。但是，它们最终将阻碍未来Internet的发展，因为它们限制了可连接的网络数和主机数。"><a href="#如果是修补，可通过NAT、CIDR、VLSM等。但是，它们最终将阻碍未来Internet的发展，因为它们限制了可连接的网络数和主机数。" class="headerlink" title="如果是修补，可通过NAT、CIDR、VLSM等。但是，它们最终将阻碍未来Internet的发展，因为它们限制了可连接的网络数和主机数。"></a>如果是修补，可通过NAT、CIDR、VLSM等。但是，它们最终将阻碍未来Internet的发展，因为它们限制了可连接的网络数和主机数。</h4><h4 id="最终，经过讨论，人们决定替换IPv4协议"><a href="#最终，经过讨论，人们决定替换IPv4协议" class="headerlink" title="最终，经过讨论，人们决定替换IPv4协议"></a>最终，经过讨论，人们决定替换IPv4协议</h4><h2 id="新IP协议目标"><a href="#新IP协议目标" class="headerlink" title="新IP协议目标"></a>新IP协议目标</h2><ul><li>支持几十亿台主机</li><li>缩减路由表规模</li><li>简化协议，让路由器更快处理分组</li><li>提供比IPv4更好的安全性</li><li>更加关注服务类型(尤其是实时应用)</li><li>允许通过指定范围进行组播传输</li><li>允许主机在不改变地址的情况下进行漫游</li><li>允许协议具有扩展性</li><li><strong>允许新老协议共存多年</strong></li></ul><p><strong>最终形成了我们如今所说的IPv6网络协议(前身是SIPP-简单增强IP协议)</strong></p><h3 id="IPv6标准组织"><a href="#IPv6标准组织" class="headerlink" title="IPv6标准组织"></a>IPv6标准组织</h3><h4 id="IP-Version-6-Working-Group"><a href="#IP-Version-6-Working-Group" class="headerlink" title="IP Version 6 Working Group"></a>IP Version 6 Working Group</h4><ul><li>制订IPv6规范和标准</li></ul><h4 id="IPv6-Operations"><a href="#IPv6-Operations" class="headerlink" title="IPv6 Operations"></a>IPv6 Operations</h4><ul><li>为运营IPv4/IPv6共存的Internet和在已有的IPv4网络或者新的网络安装中部署IPv6提供指导</li></ul><h4 id="其它IPv6相关工作组"><a href="#其它IPv6相关工作组" class="headerlink" title="其它IPv6相关工作组"></a>其它IPv6相关工作组</h4><ul><li>6lowpan, mip6, mipshop, monami6, multi6, shim6…</li></ul><h2 id="IPv6地址-1"><a href="#IPv6地址-1" class="headerlink" title="IPv6地址"></a>IPv6地址</h2><p><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/IPv6%E5%9F%BA%E6%9C%AC%E6%9C%AF%E8%AF%AD.jpg"></p><h4 id="邻节点"><a href="#邻节点" class="headerlink" title="邻节点"></a>邻节点</h4><p>一条链路上的两台主机之间互为邻节点</p><h3 id="IPv6最先著的变化"><a href="#IPv6最先著的变化" class="headerlink" title="IPv6最先著的变化"></a>IPv6最先著的变化</h3><p>地址空间的变化，IPv4地址空间为$2^{32}≈4.3*10^9$</p><p>而IPv6的地址用128个二进制位表示，达到了惊人的$2^{128}≈3.4<em>10^{34}=340涧(1涧=10^{36})$ 。相当于全球十四亿人，人均可以分配到$5</em>10^{28}$个IPv6地址</p><h3 id="IPv6地址表示"><a href="#IPv6地址表示" class="headerlink" title="IPv6地址表示"></a>IPv6地址表示</h3><h4 id="由于IPv6地址过长，所以我们采用冒分十六进制来表示IPv6地址"><a href="#由于IPv6地址过长，所以我们采用冒分十六进制来表示IPv6地址" class="headerlink" title="由于IPv6地址过长，所以我们采用冒分十六进制来表示IPv6地址"></a>由于IPv6地址过长，所以我们采用冒分十六进制来表示IPv6地址</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">00100000000000010000010000010000000000000000000000000000000000010000000000000000000000000000000000000000000000000100010111111111</span><br></pre></td></tr></table></figure><h4 id="先将128位的二进制地址按照16位一组的格式分成8组"><a href="#先将128位的二进制地址按照16位一组的格式分成8组" class="headerlink" title="先将128位的二进制地址按照16位一组的格式分成8组"></a>先将128位的二进制地址按照16位一组的格式分成8组</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">0010000000000001</span><br><span class="line">0000010000010000</span><br><span class="line">0000000000000000</span><br><span class="line">0000000000000001</span><br><span class="line">0000000000000000</span><br><span class="line">0000000000000000</span><br><span class="line">0000000000000000</span><br><span class="line">0100010111111111</span><br></pre></td></tr></table></figure><h4 id="每组都采用十六进制表示"><a href="#每组都采用十六进制表示" class="headerlink" title="每组都采用十六进制表示"></a>每组都采用十六进制表示</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2001:0410:0000:0001:0000:0000:0000:45ff</span><br></pre></td></tr></table></figure><h4 id="规则1：省略前导0，每组前导0可被忽略"><a href="#规则1：省略前导0，每组前导0可被忽略" class="headerlink" title="规则1：省略前导0，每组前导0可被忽略"></a>规则1：省略前导0，每组前导0可被忽略</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2001:410:0:1:0:0:0:45ff</span><br></pre></td></tr></table></figure><h4 id="规则2：如果某组全为0可被全部忽略，中间用双冒号表示-但一个IPv6地址中只能存在一个双冒号，否则无法还原IP地址"><a href="#规则2：如果某组全为0可被全部忽略，中间用双冒号表示-但一个IPv6地址中只能存在一个双冒号，否则无法还原IP地址" class="headerlink" title="规则2：如果某组全为0可被全部忽略，中间用双冒号表示(但一个IPv6地址中只能存在一个双冒号，否则无法还原IP地址)"></a>规则2：如果某组全为0可被全部忽略，中间用双冒号表示(但一个IPv6地址中只能存在一个双冒号，否则无法还原IP地址)</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">2001:410:0:1::45ff</span><br><span class="line"></span><br><span class="line">或者根据规则，还可以写成如下：(只需保证不超过一个双冒号)</span><br><span class="line"></span><br><span class="line">2001:410::1:0:0:0:45ff</span><br></pre></td></tr></table></figure><h4 id="地址前缀长度用“-xx”来表示，如：-1-1-64"><a href="#地址前缀长度用“-xx”来表示，如：-1-1-64" class="headerlink" title="地址前缀长度用“/xx”来表示，如： 1::1/64"></a>地址前缀长度用“/xx”来表示，如： 1::1/64</h4><h3 id="IPv6地址分类"><a href="#IPv6地址分类" class="headerlink" title="IPv6地址分类"></a>IPv6地址分类</h3><ul><li>单播地址 （Unicast Address）</li><li>组播地址 （Multicast Address）</li><li>任播地址 （Anycast Address）</li><li>特殊地址 </li></ul><h4 id="特殊地址"><a href="#特殊地址" class="headerlink" title="特殊地址"></a>特殊地址</h4><table><thead><tr><th>地址类型</th><th>二进制前缀</th><th>IPv6标识</th></tr></thead><tbody><tr><td>未指定</td><td>00…0 (128 bits)</td><td>::/128</td></tr><tr><td>环回地址</td><td>00…1 (128 bits)</td><td>::1/128</td></tr><tr><td>组播</td><td>11111111</td><td>FF00::/8</td></tr><tr><td>链路本地地址</td><td>1111111010</td><td>FE80::/10</td></tr><tr><td>网点本地地址</td><td>1111111011</td><td>FEC0::/10</td></tr><tr><td>全局单播</td><td>（其他）</td><td></td></tr></tbody></table><h4 id="单播地址中的链路-本地地址"><a href="#单播地址中的链路-本地地址" class="headerlink" title="单播地址中的链路-本地地址"></a>单播地址中的链路-本地地址</h4><p>用在单一链路上，带有链路-本地源或目的地址的数据包不转发到其它链路</p><p>应用范围：只能在同一本地链路节点之间使用</p><p>节点启动时，自动配置一个本地链路地址</p><p><strong>链路本地地址组成</strong></p><p>高64位（前64位）：FE80:0:0:0</p><p>低64位（后64位）：EUI-64地址</p><p>EUI-64地址是将MAC地址(48位)从中间（前24位，后24位）拆开，然后在中间部分插入一段“11111111 11111110”，最后从这64位的高位数起，第七位修改为1，就完成了。合计64位</p><h4 id="（可在本地计算机DOS窗口通过“ipconfig”查看本地IPv6地址）"><a href="#（可在本地计算机DOS窗口通过“ipconfig”查看本地IPv6地址）" class="headerlink" title="（可在本地计算机DOS窗口通过“ipconfig”查看本地IPv6地址）"></a>（可在本地计算机DOS窗口通过“ipconfig”查看本地IPv6地址）</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">Windows IP 配置</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">以太网适配器 以太网:</span><br><span class="line"></span><br><span class="line">   媒体状态  . . . . . . . . . . . . : 媒体已断开连接</span><br><span class="line">   连接特定的 DNS 后缀 . . . . . . . :</span><br><span class="line"></span><br><span class="line">以太网适配器 以太网 2:</span><br><span class="line"></span><br><span class="line">   媒体状态  . . . . . . . . . . . . : 媒体已断开连接</span><br><span class="line">   连接特定的 DNS 后缀 . . . . . . . :</span><br><span class="line"></span><br><span class="line">以太网适配器 VirtualBox Host-Only Network:</span><br><span class="line"></span><br><span class="line">   连接特定的 DNS 后缀 . . . . . . . :</span><br><span class="line">   本地链接 IPv6 地址. . . . . . . . : fe80::41a0:188a:c7c4:10ff%14</span><br><span class="line">   IPv4 地址 . . . . . . . . . . . . : 192.168.56.1</span><br><span class="line">   子网掩码  . . . . . . . . . . . . : 255.255.255.0</span><br><span class="line">   默认网关. . . . . . . . . . . . . :</span><br><span class="line"></span><br><span class="line">无线局域网适配器 本地连接* 11:</span><br><span class="line"></span><br><span class="line">   媒体状态  . . . . . . . . . . . . : 媒体已断开连接</span><br><span class="line">   连接特定的 DNS 后缀 . . . . . . . :</span><br><span class="line"></span><br><span class="line">无线局域网适配器 本地连接* 12:</span><br><span class="line"></span><br><span class="line">   媒体状态  . . . . . . . . . . . . : 媒体已断开连接</span><br><span class="line">   连接特定的 DNS 后缀 . . . . . . . :</span><br><span class="line"></span><br><span class="line">以太网适配器 VMware Network Adapter VMnet1:</span><br><span class="line"></span><br><span class="line">   连接特定的 DNS 后缀 . . . . . . . :</span><br><span class="line">   本地链接 IPv6 地址. . . . . . . . : fe80::2c4d:1555:e274:ab03%5</span><br><span class="line">   IPv4 地址 . . . . . . . . . . . . : 192.168.139.1</span><br><span class="line">   子网掩码  . . . . . . . . . . . . : 255.255.255.0</span><br><span class="line">   默认网关. . . . . . . . . . . . . :</span><br><span class="line"></span><br><span class="line">以太网适配器 VMware Network Adapter VMnet8:</span><br><span class="line"></span><br><span class="line">   连接特定的 DNS 后缀 . . . . . . . :</span><br><span class="line">   本地链接 IPv6 地址. . . . . . . . : fe80::fcf4:6fb0:8e57:33df%9</span><br><span class="line">   IPv4 地址 . . . . . . . . . . . . : 192.168.190.1</span><br><span class="line">   子网掩码  . . . . . . . . . . . . : 255.255.255.0</span><br><span class="line">   默认网关. . . . . . . . . . . . . :</span><br><span class="line"></span><br><span class="line">无线局域网适配器 WLAN:</span><br><span class="line"></span><br><span class="line">   连接特定的 DNS 后缀 . . . . . . . :</span><br><span class="line">   本地链接 IPv6 地址. . . . . . . . : fe80::2016:6332:cc2f:b7a4%11</span><br><span class="line">   IPv4 地址 . . . . . . . . . . . . : 192.168.1.107</span><br><span class="line">   子网掩码  . . . . . . . . . . . . : 255.255.255.0</span><br><span class="line">   默认网关. . . . . . . . . . . . . : 192.168.1.1</span><br><span class="line">   </span><br><span class="line">   </span><br></pre></td></tr></table></figure><h4 id="可聚合全球单播地址"><a href="#可聚合全球单播地址" class="headerlink" title="可聚合全球单播地址"></a>可聚合全球单播地址</h4><p><strong>组成</strong></p><p><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/%E5%8F%AF%E8%81%9A%E5%90%88%E5%85%A8%E7%90%83%E5%8D%95%E6%92%AD%E5%9C%B0%E5%9D%80.jpg"></p><ul><li>001：前三位固定，表示全球IPv6地址目前只用了1/8，剩余7/8还没有使用</li><li>TLA：顶级聚类地址，分配给各大地区网络中心，例如亚太地区网络中心</li><li>RES：保留位</li><li>NLA：次级聚类</li><li>SLA：站点级聚类地址</li></ul><h4 id="运营商分配给单位网络的地址通常是-48"><a href="#运营商分配给单位网络的地址通常是-48" class="headerlink" title="运营商分配给单位网络的地址通常是/48"></a>运营商分配给单位网络的地址通常是/48</h4><p>也就是说后续的16位地址可以由单位自行根据需求进行子网规划</p><h4 id="时至今日，中国约申请到两万个-32地址，一个-32地址包含的IPv6地址数约等于全部的IPv4地址总数，所以是完全足够使用的"><a href="#时至今日，中国约申请到两万个-32地址，一个-32地址包含的IPv6地址数约等于全部的IPv4地址总数，所以是完全足够使用的" class="headerlink" title="时至今日，中国约申请到两万个/32地址，一个/32地址包含的IPv6地址数约等于全部的IPv4地址总数，所以是完全足够使用的"></a>时至今日，中国约申请到两万个/32地址，一个/32地址包含的IPv6地址数约等于全部的IPv4地址总数，所以是完全足够使用的</h4><h4 id="IPv6主机如何做到即插即用"><a href="#IPv6主机如何做到即插即用" class="headerlink" title="IPv6主机如何做到即插即用"></a>IPv6主机如何做到即插即用</h4><ul><li>启动时，生成链路本地地址</li><li>该地址主机可和默认网关这一节点进行通信，获得全球IP地址前缀</li><li>后缀(InterfaceID)可以利用人工(笨重，容易出错)，EUI-64直接生成(有安全隐患，容易被他人获知MAC地址)，或者随机生成</li><li>也可利用DHCP获得上网所需的资源</li></ul><h4 id="IPv6地址的子网规划"><a href="#IPv6地址的子网规划" class="headerlink" title="IPv6地址的子网规划"></a>IPv6地址的子网规划</h4><p>IPv4地址由于本身的稀缺性，所以在进行子网规划时需要精打细算，但IPv6地址不需要，它在进行子网规划时只需要考虑路由器数量以及所支持网络来规划即可</p><h1 id="IPv6分组"><a href="#IPv6分组" class="headerlink" title="IPv6分组"></a>IPv6分组</h1><h3 id="IPv6分组由头部，扩展头，数据三部分组成"><a href="#IPv6分组由头部，扩展头，数据三部分组成" class="headerlink" title="IPv6分组由头部，扩展头，数据三部分组成"></a>IPv6分组由头部，扩展头，数据三部分组成</h3><h2 id="IPv6头部"><a href="#IPv6头部" class="headerlink" title="IPv6头部"></a>IPv6头部</h2><p><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/IPv6%E5%88%86%E7%BB%84.jpg"></p><p>IPv6分组头部长度共四十个字节，也就是320比特，按照每行32比特排列后结构如图。</p><h3 id="版本号"><a href="#版本号" class="headerlink" title="版本号"></a>版本号</h3><p>长度4bit，表明协议版本，在IPv6中为固定值“0110”</p><h3 id="区分服务-业务等级"><a href="#区分服务-业务等级" class="headerlink" title="区分服务(业务等级)"></a>区分服务(业务等级)</h3><p>表明数据分组的服务类型，提供区分服务，表明分组的重要程度，优先级等因素</p><h3 id="流标签"><a href="#流标签" class="headerlink" title="流标签"></a>流标签</h3><p>长度为20比特，表示分组的业务需求标记，提供服务质量。(为源端和接收端提供了一种建立伪连接的方式，即源端和接收端，把一组具有同样需求，并希望收到网络同等对待的数据分组，打上相同的分组，以便区分并执行对应操作)</p><h3 id="净荷长度"><a href="#净荷长度" class="headerlink" title="净荷长度"></a>净荷长度</h3><p>也叫有效载荷长度，长为16比特，指明了跟在分组头部(固定头)后有多少个字节，可以表示$2^{16}-1=65535B=64KB$。</p><h3 id="下一个头-next-header"><a href="#下一个头-next-header" class="headerlink" title="下一个头 next header"></a>下一个头 next header</h3><p>这是IPv6最与众不同之处，指明了<strong>紧跟的扩展头</strong>，如果当前头是最后一个IP头，此处就退化为协议说明，指明用户协议（例如：6表示TCP。17表示UDP），指定上层传输层协议。</p><p>IPv6相较于IPv4之所以能大大减少头部的种类就是由于扩展头的存在，而next header就是负责指向下一个头的工具</p><h3 id="跳数限制"><a href="#跳数限制" class="headerlink" title="跳数限制"></a>跳数限制</h3><p>Hop Limit，跳数限制完全等同于IPv4协议中的TTL，都是为了避免一个分组在网络中一直存在，跳数归零后，路由依旧是舍弃这个分组，并返回一个错误信息，解释情况</p><h4 id="总体来说，IPv6分组头部是在IPv4分组头部的基础上，进行了增加，修改和删除操作最终得到的结果"><a href="#总体来说，IPv6分组头部是在IPv4分组头部的基础上，进行了增加，修改和删除操作最终得到的结果" class="headerlink" title="总体来说，IPv6分组头部是在IPv4分组头部的基础上，进行了增加，修改和删除操作最终得到的结果"></a>总体来说，IPv6分组头部是在IPv4分组头部的基础上，进行了增加，修改和删除操作最终得到的结果</h4><p>IPv6删除了IPv4中的分段/分片偏移，因为分片操作会占用分片路由器大量资源，无形中增加路由器负担，所以IPv6放弃了分片操作，选择在发出时利用PMTU算法推测整条路径上最小的MTU网络，在发出前就对数据大小做出处理。</p><p>IPv6协议对校验和这一部分也作出了删除，因为计算校验和会消耗CPU时间，同时它的下层数据链路层以及上层传输层都拥有各自的校验和方法，在IP协议处进行校验显得冗余</p><h2 id="扩展头"><a href="#扩展头" class="headerlink" title="扩展头"></a>扩展头</h2><p>扩展头是<strong>可选</strong>的，目前已经定义的<strong>有6种扩展头</strong>，一个分组可以有多个扩展头也可以没有，当有多个扩展头时，扩展头之间必须<strong>按照相对顺序</strong>排列</p><table><thead><tr><th>-</th><th>头部类型Header type</th><th>Next Header Code</th><th>用途purpose</th></tr></thead><tbody><tr><td>1</td><td>Basic IPv6 Header基本报文头部</td><td>-</td><td>位于报文最前端，包含必要信息，后接可选的扩展头或数据</td></tr><tr><td>2</td><td>Hop-by-Hop Options跳跃选项头部</td><td>0</td><td>包含数据包发送路径上的所有节点都必须处理的可选信息</td></tr><tr><td>3</td><td>Destination Options目的地选项头部</td><td>60</td><td>只包含接收方节点所需的可选信息</td></tr><tr><td>4</td><td>Routing Header路由选择头部</td><td>43</td><td>松散的路由器头列表，它允许Ｉｐｖ６起端通过列出所要访问的一个或多个节点来决定到达目的地的路由</td></tr><tr><td>5</td><td>Fragment Header分段头部</td><td>44</td><td>利用分段头部，IPv6源节点就可以向目的节点传送一个比路径MTU还大的分组</td></tr><tr><td>6</td><td>Authentication Header身份认证头部</td><td>51</td><td>提供无连接的完整性、数据源认证、和抗重放服务。无论接的完整性确保数据中的数据包中的数据在从发送者到接收者的传输过程中不会被修改，它是对付数据篡改的策略；数据源认证确保数据所由所期望的用户发送，而不是由假冒者来发送，它是对付ＩＰ欺骗的策略；抗重放服务是保证一旦数据包被接收，其会话编号不能被攻击者再次使用。</td></tr><tr><td>7</td><td>Encapsulation Security Payload Header封装安全性有效载荷头部</td><td>50</td><td>提供数据保密性、数据源认证、无连接完整性、抗重放服务和有限的数据流保密服务。</td></tr><tr><td>8</td><td>Mobility Header</td><td>135</td><td></td></tr><tr><td>上层协议</td><td>TCP</td><td>6</td><td>-</td></tr><tr><td>上层协议</td><td>UDP</td><td>17</td><td>-</td></tr><tr><td>上层协议</td><td>ICMPv6</td><td>58</td><td>-</td></tr></tbody></table><h4 id="以下就是用wireshark随机抓取的一段IPv6分组"><a href="#以下就是用wireshark随机抓取的一段IPv6分组" class="headerlink" title="以下就是用wireshark随机抓取的一段IPv6分组"></a>以下就是用wireshark随机抓取的一段IPv6分组</h4><p><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/IPv6%E6%8D%95%E8%8E%B7.jpg"><br><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/IPv6%E5%8D%8F%E8%AE%AE.jpg"></p><h4 id="可以看到清楚的给出了IPv6协议内的主要部分以及扩展头内容"><a href="#可以看到清楚的给出了IPv6协议内的主要部分以及扩展头内容" class="headerlink" title="可以看到清楚的给出了IPv6协议内的主要部分以及扩展头内容"></a>可以看到清楚的给出了IPv6协议内的主要部分以及扩展头内容</h4><hr><h1 id="IPv6过渡技术"><a href="#IPv6过渡技术" class="headerlink" title="IPv6过渡技术"></a>IPv6过渡技术</h1><p><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/IPv6%E5%8F%91%E5%B1%95%E8%BF%87%E7%A8%8B.jpg"></p><h3 id="IPv4与IPv6共存策略"><a href="#IPv4与IPv6共存策略" class="headerlink" title="IPv4与IPv6共存策略"></a>IPv4与IPv6共存策略</h3><ul><li>短时间内IPv4迁移到IPv6是不可能的</li><li>在较长一段时间内都要保证二者共存的状态</li></ul><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><ul><li>加快IPv6网络的成熟与稳定</li><li>解决IPv4与IPv6网络之间的相互通信问题</li></ul><h2 id="三种基类过渡技术"><a href="#三种基类过渡技术" class="headerlink" title="三种基类过渡技术"></a>三种基类过渡技术</h2><ol><li>双协议栈（Dual Stack）</li><li>隧道（Tunnel）</li><li>地址转换技术</li></ol><h3 id="双协议栈"><a href="#双协议栈" class="headerlink" title="双协议栈"></a>双协议栈</h3><ul><li>网络设备与主机必须全部支持双协议栈</li><li>主机端只需要支持IPv4或IPv6任一即可</li><li>主机端设备如果也是双栈的，优先使用IPv6，如果不通，则采用IPv4</li></ul><h3 id="隧道技术"><a href="#隧道技术" class="headerlink" title="隧道技术"></a>隧道技术</h3><ul><li>通过隧道技术，IPv6分组，被作为无结构，无意义的数据封装在IPv4分组中，被IPv4网络传输</li><li>同样的，也存在将IPv4分组看作无结构无意义的纯数据封装在IPv6中的情况</li><li>适用于第一阶段与第三阶段，也就是IPv4或IPv6是孤岛时的通信</li></ul><h3 id="翻译转换技术"><a href="#翻译转换技术" class="headerlink" title="翻译转换技术"></a>翻译转换技术</h3><ul><li>从IPv4转换到IPv6，或反过来，不仅发生在网络层，还有传输层和应用层。</li><li>当双栈和隧道都无法使用的时候，才使用；适用纯IPv4节点和纯IPv6节点间的通信。</li></ul><h3 id="IPv6试验网"><a href="#IPv6试验网" class="headerlink" title="IPv6试验网"></a>IPv6试验网</h3><h4 id="北美"><a href="#北美" class="headerlink" title="北美"></a>北美</h4><ul><li>美国: 6REN, 6TAP, ESnet, vBNS, Internet2, NASA</li><li>加拿大: CA*Net, Viagenie, Freenet6.net</li></ul><h4 id="欧洲"><a href="#欧洲" class="headerlink" title="欧洲"></a>欧洲</h4><ul><li>欧盟: 6INIT</li><li>法国: CNRS/UREC, INRIA, G6, Renater2, @IRS</li><li>德国: DFN, JOIN</li><li>意大利: CSELT</li></ul><h4 id="亚太地区"><a href="#亚太地区" class="headerlink" title="亚太地区"></a>亚太地区</h4><ul><li>日本: KAME, WIDE, NTT, TAHI</li><li>韩国: KRv6, ETRI</li><li>中国：CNGI，CERNET2</li></ul><hr><h1 id="路由表来源"><a href="#路由表来源" class="headerlink" title="路由表来源"></a>路由表来源</h1><h4 id="一个路由在收到IP分组后，会进行如下操作："><a href="#一个路由在收到IP分组后，会进行如下操作：" class="headerlink" title="一个路由在收到IP分组后，会进行如下操作："></a>一个路由在收到IP分组后，会进行如下操作：</h4><ol><li>打开分组(解封装)到第三层网络层，提取目的IP地址</li><li>利用按位与操作，计算确定出目的网络，查找路由表</li><li>重新封装好(封装过程中会进行TTL-1，置换源和目的的MAC地址，重新计算校验和，分片/分段操作（可选）等)，然后转发出去</li></ol><h2 id="路由表内容："><a href="#路由表内容：" class="headerlink" title="路由表内容："></a>路由表内容：</h2><table><thead><tr><th>目的网络/子网掩码</th><th>路径代价</th><th>下一跳（网关）</th><th>转出接口</th></tr></thead><tbody><tr><td>202.182.112.0/24</td><td>5</td><td>192.168.1.1</td><td>Fe0/0</td></tr><tr><td>…</td><td>…</td><td>…</td><td>…</td></tr></tbody></table><h2 id="路由表来源-1"><a href="#路由表来源-1" class="headerlink" title="路由表来源"></a>路由表来源</h2><ul><li>直连路由：通过学习感知</li><li>静态路由：通过人工配置</li><li>动态路由：自动生成，更新，维护</li></ul><h2 id="直连路由"><a href="#直连路由" class="headerlink" title="直连路由"></a>直连路由</h2><p><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/%E7%9B%B4%E8%BF%9E%E8%B7%AF%E7%94%B1.jpg"></p><p>当一台路由器开启它的接口后，路由器就会自动将这些接口所连接的子网加入到路由表中成为直连路由。</p><p>例如，图中的FE0/0接口所连的子网：192.168.1.0/24就会被放入路由表中</p><h2 id="静态路由"><a href="#静态路由" class="headerlink" title="静态路由"></a>静态路由</h2><p>由管理员手工配置的路由</p><h3 id="常用的静态路由-默认-缺省路由"><a href="#常用的静态路由-默认-缺省路由" class="headerlink" title="常用的静态路由-默认/缺省路由"></a>常用的静态路由-默认/缺省路由</h3><h4 id="是默认的路径，找不到路的时候可以从这里通过"><a href="#是默认的路径，找不到路的时候可以从这里通过" class="headerlink" title="是默认的路径，找不到路的时候可以从这里通过"></a>是默认的路径，找不到路的时候可以从这里通过</h4><ul><li>避免错误丢包</li><li>缩减路由表的规模</li><li>减少路由器的运行负担</li></ul><h3 id="静态路由优缺点"><a href="#静态路由优缺点" class="headerlink" title="静态路由优缺点"></a>静态路由优缺点</h3><table><thead><tr><th>优点</th><th>缺点</th></tr></thead><tbody><tr><td>在小型网络中容易实施</td><td>仅适用于小型网络或特殊用途（默认路由）</td></tr><tr><td>非常安全，不会发送通告</td><td>随着网络增多，配置复杂性增加</td></tr><tr><td>总是从同意路径到达同一目的，稳定可靠</td><td>需要人工更新维护</td></tr><tr><td>不需要CPU，RAM，带宽消耗</td><td></td></tr></tbody></table><h2 id="动态路由"><a href="#动态路由" class="headerlink" title="动态路由"></a>动态路由</h2><p>最常见的路由，适用于网络大，变化多时。在小型网络中也可以应用。开销较大，可以减少网络管理人员的负担</p><p>通过路由选择协议动态的建立，更新和维护的路由</p><p>路由表中动态路由占多数</p><p>路由选择协议会计算最优路径，装载最优路径到路由表中，引导IP分组转发</p><h3 id="路由选择协议如何量度路径是否最优（代价-开销-成本）"><a href="#路由选择协议如何量度路径是否最优（代价-开销-成本）" class="headerlink" title="路由选择协议如何量度路径是否最优（代价/开销/成本）"></a>路由选择协议如何量度路径是否最优（代价/开销/成本）</h3><ul><li>路径长度：从源端到目的端代价总和为路径长度，即hop跳数</li><li>带宽：链路的最大传输能力以及网络流量</li><li>延迟：数据包从源到宿需要花费的传输时间</li><li>带宽：链路的最大传输能力以及网络流量</li><li>负载：网络资源（例如路由器的CPU）的使用率</li><li>通信代价：占用通信线路的费用</li></ul><h3 id="动态路由的优点与缺点"><a href="#动态路由的优点与缺点" class="headerlink" title="动态路由的优点与缺点"></a>动态路由的优点与缺点</h3><table><thead><tr><th>优点</th><th>缺点</th></tr></thead><tbody><tr><td>适用于有多个路由器的网络</td><td>可能使实施更加复杂</td></tr><tr><td>通常不受网络规模限制</td><td>又安全隐患，因为通告在路由间传输</td></tr><tr><td>自动更新和维护路由信息</td><td>消耗CPU，RAM,带宽</td></tr></tbody></table><hr><h1 id="距离矢量路由选择协议"><a href="#距离矢量路由选择协议" class="headerlink" title="距离矢量路由选择协议"></a>距离矢量路由选择协议</h1><h3 id="（Distance-Vector）"><a href="#（Distance-Vector）" class="headerlink" title="（Distance Vector）"></a>（Distance Vector）</h3><h3 id="路由选择协议分类："><a href="#路由选择协议分类：" class="headerlink" title="路由选择协议分类："></a>路由选择协议分类：</h3><ul><li>距离矢量路由选择协议（Distance Vector 简称DV）</li><li>链路状态路由选择协议（Link State 简称LS）</li></ul><p>根据距离矢量路由选择协议，每个路由器维护两张表。表$D_i$存储当前到各个节点最短路径，表$S_i$存储到达最短路径的下一跳</p><p>D-V算法是一种动态和分布式的，常被应用于小型网络，RIP是一个典型的D-V算法 (RIP：Routing information protocol，路由选择信息协议)</p><p>DV算法是典型的<strong>分布式Bellman-Ford算法</strong></p><p>通过不断在邻居间更换交换信息实现路由表的更新</p><h3 id="优点-1"><a href="#优点-1" class="headerlink" title="优点"></a>优点</h3><ul><li>简单 </li></ul><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><ul><li>交换的信息太大了</li><li>路由信息传播慢，可能导致路</li><li>径信息不一致</li><li>收敛慢，度量计数到无穷</li><li>不适合大型的网络</li></ul><h4 id="收敛–整个网络寻找最佳路径的过程"><a href="#收敛–整个网络寻找最佳路径的过程" class="headerlink" title="收敛–整个网络寻找最佳路径的过程"></a>收敛–整个网络寻找最佳路径的过程</h4><h2 id="RIP-路由选择信息协议"><a href="#RIP-路由选择信息协议" class="headerlink" title="RIP (路由选择信息协议)"></a>RIP (路由选择信息协议)</h2><h3 id="特点："><a href="#特点：" class="headerlink" title="特点："></a>特点：</h3><p>收敛快（好消息传的快，也就是更短的路径很容易被传播到其他路由节点中去）</p><p>坏消息传的慢，存在无穷计数问题。当一个网络趋于稳定后，若其中某个节点发生故障导致该节点崩溃后，在修复过程中坏消息传播缓慢，并且可能形成路由环，进而导致无穷计数问题</p><p>（例如：一条路径X-&gt;A-&gt;B-&gt;C,假设各边权重为1<br/>此时B路由到X距离为2，假设A路由崩溃，B此时失去到X的路径<br/>但是在更新邻居节点时，发现邻居C路径可达X节点，且距离为3，所以B更新到X节点最短路径为4<br/>但实际上C中所储存的路径已经过时了，就是X-&gt;A-&gt;B-&gt;C这一条）<br/>所以由于坏消息传播慢，B更新了一个错误节点<br/>之后C开始更新节点，发现A路由崩溃不能到达X，就从邻居中搜索<br/>发现B路由可达（实际上仍是那条错误路径），所以更新到X距离为４＋１＝５<br/>由此路由环形成，后续只会不断增加路径，最终导致无穷计数问题产生</p><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><h4 id="定义路由表中的最大跳数，例如15"><a href="#定义路由表中的最大跳数，例如15" class="headerlink" title="定义路由表中的最大跳数，例如15"></a>定义路由表中的最大跳数，例如15</h4><p>在超过15跳后，认定路径不可达（这可能会导致时间消耗）</p><h4 id="加快收敛的方法"><a href="#加快收敛的方法" class="headerlink" title="加快收敛的方法"></a>加快收敛的方法</h4><ul><li>水平分割</li><li>毒性逆转</li><li>抑制定时器</li></ul><h3 id="RIP产生无穷计数问题的原因"><a href="#RIP产生无穷计数问题的原因" class="headerlink" title="RIP产生无穷计数问题的原因"></a>RIP产生无穷计数问题的原因</h3><p>收集信息来源单一，只从邻居处获得信息，并只能相信邻居的信息。也就是站的不够高，看的不够远(就像刚才的例子，在A崩溃之前，路由节点之间相互传递的信息还是完全真实的，但是A崩溃后，C传给了B第一个虚假的过时的信息，并在二者之间不断传递)</p><p>站得高，看得远的代价是消耗带宽，CPU等</p>]]></content>
      
      
      <categories>
          
          <category> 计算机基础 </category>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>4-Dockerfile And Docker Compose</title>
      <link href="/2021/04/07/4-Dockerfile/"/>
      <url>/2021/04/07/4-Dockerfile/</url>
      
        <content type="html"><![CDATA[<h1 id="Dockerfile"><a href="#Dockerfile" class="headerlink" title="Dockerfile"></a>Dockerfile</h1><h2 id="Docker镜像原理"><a href="#Docker镜像原理" class="headerlink" title="Docker镜像原理"></a>Docker镜像原理</h2><p>Linux文件系统由bootfs与rootfs两部分构成</p><p><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/Linuxfilesystem.png"></p><ul><li>bootfs：包含bootloader（引导加载程序）和kernel（内核）</li><li>rootfs：root文件系统，包含的就是典型的Linux系统中的/dev,/proc,/bin,/etc等标准文件与目录</li><li>不同的Linux发行版bootfs基本相同，主要区别在于rootfs</li></ul><p>而Docker镜像是由特殊的文件系统叠加而成，其最底端同样依赖bootfs，但是其不需要自己独立拥有bootfs，其可以直接使用宿主机的bootfs。<br>第二层是root文件系统rootfs，被称为base image即基础镜像。</p><p>在其上可以继续叠加其他镜像，而各个镜像之间的文件目录资源等可以相互共享，进一步提高了镜像利用率</p><ul><li>统一文件系统（UFS：Union File System）：该技术能够将不同层镜像整合为一个文件系统，为这些层提供一个统一的对外视角，这样就隐藏了多层存在，从用户角度来看，只暴露了最外层文件系统</li><li>一个镜像可以位于另一个镜像下层，位于下层的镜像被称为父镜像，最底部的镜像称为基础镜像</li><li>当从一个镜像启动容器时，Docker会在最顶层加载一个读写文件系统作为容器，开发人员可以利用这个容器对镜像进行个性化修改，这些修改可以更适应生产环境，并且避免了对原镜像的影响，使得原镜像功能不受影响</li></ul><p><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/docker%E9%95%9C%E5%83%8F%E5%8E%9F%E7%90%86.png"></p><h2 id="容器转换为镜像"><a href="#容器转换为镜像" class="headerlink" title="容器转换为镜像"></a>容器转换为镜像</h2><p>镜像的制作有两种方式，一种是直接利用容器转换为镜像，另一种是通过Dockerfile构建镜像，直接利用容器转换的步骤如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将容器转换为镜像</span></span><br><span class="line">docker commit 容器ID 镜像名称:版本号</span><br><span class="line"><span class="comment"># 将镜像作为压缩文件输出</span></span><br><span class="line">docker save -o 压缩文件名称 镜像名称:版本号</span><br><span class="line"><span class="comment"># 将压缩文件读取为镜像</span></span><br><span class="line">docker load -i 压缩文件名称</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 示例：</span></span><br><span class="line">docker commit bcd554d24cc5 ywrby_tomcat:1.0</span><br><span class="line">docker save -o ywrby_tomcat.tar ywrby_tomcat:1.0</span><br><span class="line">docker load -i ywrby_tomcat.tar</span><br></pre></td></tr></table></figure><p>需要注意的是，这种形式的镜像制作只能保存容器根目录下的内容，通过数据卷挂载到容器的数据不能被保存到镜像中</p><h2 id="Dockerfile概述"><a href="#Dockerfile概述" class="headerlink" title="Dockerfile概述"></a>Dockerfile概述</h2><p>Dockerfile 是一个用来构建镜像的文本文件，文本内容包含了一条条构建镜像所需的指令和说明。</p><p>其可以为开发团队提供完全一致的开发环境，方便测试与运维人员</p><h3 id="Dockerfile关键字"><a href="#Dockerfile关键字" class="headerlink" title="Dockerfile关键字"></a>Dockerfile关键字</h3><table><thead><tr><th>关键字</th><th>作用</th><th>备注</th></tr></thead><tbody><tr><td>FROM</td><td>指定父镜像</td><td>指定dockerfile基于那个image构建</td></tr><tr><td>MAINTAINER</td><td>作者信息</td><td>用来标明这个dockerfile谁写的</td></tr><tr><td>LABEL</td><td>标签</td><td>用来标明dockerfile的标签 可以使用Label代替Maintainer 最终都是在docker image基本信息中可以查看</td></tr><tr><td>RUN</td><td>执行命令</td><td>执行一段命令 默认是/bin/sh 格式: RUN command 或者 RUN [“command” , “param1”,“param2”]</td></tr><tr><td>CMD</td><td>容器启动命令</td><td>提供启动容器时候的默认命令 和ENTRYPOINT配合使用.格式 CMD command param1 param2 或者 CMD [“command” , “param1”,“param2”]</td></tr><tr><td>ENTRYPOINT</td><td>入口</td><td>一般在制作一些执行就关闭的容器中会使用</td></tr><tr><td>COPY</td><td>复制文件</td><td>build的时候复制文件到image中</td></tr><tr><td>ADD</td><td>添加文件</td><td>build的时候添加文件到image中 不仅仅局限于当前build上下文 可以来源于远程服务</td></tr><tr><td>ENV</td><td>环境变量</td><td>指定build时候的环境变量 可以在启动的容器的时候 通过-e覆盖 格式ENV name=value</td></tr><tr><td>ARG</td><td>构建参数</td><td>构建参数 只在构建的时候使用的参数 如果有ENV 那么ENV的相同名字的值始终覆盖arg的参数</td></tr><tr><td>VOLUME</td><td>定义外部可以挂载的数据卷</td><td>指定build的image那些目录可以启动的时候挂载到文件系统中 启动容器的时候使用 -v 绑定 格式 VOLUME [“目录”]</td></tr><tr><td>EXPOSE</td><td>暴露端口</td><td>定义容器运行的时候监听的端口 启动容器的使用-p来绑定暴露端口 格式: EXPOSE 8080 或者 EXPOSE 8080/udp</td></tr><tr><td>WORKDIR</td><td>工作目录</td><td>指定容器内部的工作目录 如果没有创建则自动创建 如果指定/ 使用的是绝对地址 如果不是/开头那么是在上一条workdir的路径的相对路径</td></tr><tr><td>USER</td><td>指定执行用户</td><td>指定build或者启动的时候 用户 在RUN CMD ENTRYPONT执行的时候的用户</td></tr><tr><td>HEALTHCHECK</td><td>健康检查</td><td>指定监测当前容器的健康监测的命令 基本上没用 因为很多时候 应用本身有健康监测机制</td></tr><tr><td>ONBUILD</td><td>触发器</td><td>当存在ONBUILD关键字的镜像作为基础镜像的时候 当执行FROM完成之后 会执行 ONBUILD的命令 但是不影响当前镜像 用处也不怎么大</td></tr><tr><td>STOPSIGNAL</td><td>发送信号量到宿主机</td><td>该STOPSIGNAL指令设置将发送到容器的系统调用信号以退出。</td></tr><tr><td>SHELL</td><td>指定执行脚本的shell</td><td>指定RUN CMD ENTRYPOINT 执行命令的时候 使用的shell</td></tr></tbody></table><h2 id="Dockerfile使用案例"><a href="#Dockerfile使用案例" class="headerlink" title="Dockerfile使用案例"></a>Dockerfile使用案例</h2><h3 id="案例一：自定义centos7镜像"><a href="#案例一：自定义centos7镜像" class="headerlink" title="案例一：自定义centos7镜像"></a>案例一：自定义centos7镜像</h3><p>官方所提供的centos7镜像，默认在创建启动容器后进入根目录下，并且没有vim编辑器，现在通过Dockerfile实现一个镜像，使利用该镜像创建centos7容器时自动进入/usr路径下，并且默认安装vim编辑器</p><h4 id="1-编辑Dockerfile文件（centos-dockerfile）"><a href="#1-编辑Dockerfile文件（centos-dockerfile）" class="headerlink" title="1. 编辑Dockerfile文件（centos_dockerfile）"></a>1. 编辑Dockerfile文件（centos_dockerfile）</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 定义父镜像</span></span><br><span class="line">FROM centos:7 </span><br><span class="line"><span class="comment"># 定义镜像作者信息</span></span><br><span class="line">MAINTAINER ywrby&lt;ywrby0214@gmail.com&gt;</span><br><span class="line"><span class="comment"># 执行安装vim命令</span></span><br><span class="line">RUN yum install -y vim </span><br><span class="line"><span class="comment"># 定义默认的工作目录</span></span><br><span class="line">WORKDIR /usr </span><br><span class="line"><span class="comment"># 定义容器的启动方式</span></span><br><span class="line">CMD /bin/bash </span><br></pre></td></tr></table></figure><h4 id="2-执行dockerfile文件，创建镜像"><a href="#2-执行dockerfile文件，创建镜像" class="headerlink" title="2. 执行dockerfile文件，创建镜像"></a>2. 执行dockerfile文件，创建镜像</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -f参数表示dockerfile文件路径，-t参数表示镜像文件名称与版本，最后的.表示默认安装路径</span></span><br><span class="line">docker build -f ./centos_dockerfile -t ywrby_centos:1 .</span><br><span class="line"><span class="comment"># 运行后docker会逐行执行相关命令</span></span><br></pre></td></tr></table></figure><h4 id="3-查看当前镜像文件并创建容器测试"><a href="#3-查看当前镜像文件并创建容器测试" class="headerlink" title="3. 查看当前镜像文件并创建容器测试"></a>3. 查看当前镜像文件并创建容器测试</h4><p><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/thauihufiha.png"></p><h1 id="Docker-Compose"><a href="#Docker-Compose" class="headerlink" title="Docker Compose"></a>Docker Compose</h1><h2 id="服务编排概念"><a href="#服务编排概念" class="headerlink" title="服务编排概念"></a>服务编排概念</h2><p>微服务架构的应用系统中，一般包含若干个微服务，每个微服务一般都会部署多个实例，如果每个微服务都需要手动启动停止，维护的工作量是巨大的</p><p>服务编排就是为了解决这种矛盾，服务编排是按照一定业务规则编排管理容器</p><p>Docker Compose是一个编排多容器分布式部署的工具，提供命令集管理容器化应用完整的开发周期，包括服务的构建，启动和停止</p><h2 id="Docker-Compose使用步骤"><a href="#Docker-Compose使用步骤" class="headerlink" title="Docker Compose使用步骤"></a>Docker Compose使用步骤</h2><ol><li>利用Dockerfile定义运行环境镜像</li><li>使用docker-compose.yml定义组成应用的各服务</li><li>运行docker compose up命令启动应用</li></ol><h2 id="安装Docker-Compose"><a href="#安装Docker-Compose" class="headerlink" title="安装Docker Compose"></a>安装Docker Compose</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1. 从 Github 上下载它的二进制包来使用</span></span><br><span class="line">curl -L <span class="string">&quot;https://github.com/docker/compose/releases/download/1.24.1/docker-compose-<span class="subst">$(uname -s)</span>-<span class="subst">$(uname -m)</span>&quot;</span> -o /usr/<span class="built_in">local</span>/bin/docker-compose</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 将可执行权限应用于二进制文件</span></span><br><span class="line">chmod +x /usr/<span class="built_in">local</span>/bin/docker-compose</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. 创建软链</span></span><br><span class="line">ln -s /usr/<span class="built_in">local</span>/bin/docker-compose /usr/bin/docker-compose</span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试是否安装成功</span></span><br><span class="line">docker-compose --version</span><br></pre></td></tr></table></figure><h2 id="卸载Docker-Compose"><a href="#卸载Docker-Compose" class="headerlink" title="卸载Docker Compose"></a>卸载Docker Compose</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rm /usr/<span class="built_in">local</span>/bin/docker-compose</span><br></pre></td></tr></table></figure><h2 id="使用Docker-Compose"><a href="#使用Docker-Compose" class="headerlink" title="使用Docker Compose"></a>使用Docker Compose</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建目录</span></span><br><span class="line">mkdir ~/docker-compose</span><br><span class="line"><span class="built_in">cd</span> ~/docker-compose</span><br><span class="line"><span class="comment"># 编写docker compose文件</span></span><br><span class="line">vim docker-compose.yml</span><br><span class="line"></span><br><span class="line">version: <span class="string">&#x27;3&#x27;</span></span><br><span class="line">services:</span><br><span class="line">    c_nginx:</span><br><span class="line">        image: nginx</span><br><span class="line">        ports:</span><br><span class="line">            - 80:80</span><br><span class="line">        links:</span><br><span class="line">            - c_tomcat</span><br><span class="line">        volumes:</span><br><span class="line">            - ./nginx/conf.d:/etc/nginx/conf.d</span><br><span class="line">    c_tomcat:</span><br><span class="line">        image: tomcat</span><br><span class="line">        expose:</span><br><span class="line">            - <span class="string">&quot;8080&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 在docker compose目录下，使用docker-compose启动容器</span></span><br><span class="line">docker compose up</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 其他 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>3-Docker应用部署</title>
      <link href="/2021/04/06/3-Docker%E5%BA%94%E7%94%A8%E9%83%A8%E7%BD%B2/"/>
      <url>/2021/04/06/3-Docker%E5%BA%94%E7%94%A8%E9%83%A8%E7%BD%B2/</url>
      
        <content type="html"><![CDATA[<h1 id="Docker应用部署"><a href="#Docker应用部署" class="headerlink" title="Docker应用部署"></a>Docker应用部署</h1><h2 id="一般部署步骤"><a href="#一般部署步骤" class="headerlink" title="一般部署步骤"></a>一般部署步骤</h2><ol><li>搜索镜像</li><li>拉取镜像</li><li>创建容器</li><li>操作容器</li></ol><h2 id="部署MySQL"><a href="#部署MySQL" class="headerlink" title="部署MySQL"></a>部署MySQL</h2><p>前文说到，Docker容器本身不能直接与外部机器通信，其只能与宿主机直接通信，而宿主机又可以直接与外部机器通信，所以想要访问Docker容器，就可以将Docker容器的端口映射到宿主机的端口上（一般都对应到相同端口），这样就可以利用宿主机的端口间接访问Docker容器，即<strong>端口映射</strong></p><p><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/dockerwaibutongxin.png"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 搜索镜像</span></span><br><span class="line">docker search mysql</span><br><span class="line"><span class="comment"># 拉取镜像</span></span><br><span class="line">docker pull mysql</span><br><span class="line"><span class="comment"># 创建容器,注意创建容器前，在根目录下创建mysql文件夹并进入该目录下，后续数据卷的安装在/root/mysql下进行</span></span><br><span class="line">docker run -id \</span><br><span class="line">-p 3306:3306 \ <span class="comment"># 配置端口映射</span></span><br><span class="line">--name c_mysql \</span><br><span class="line">-v <span class="variable">$PWD</span>/conf:/etc/mysql/conf.d \ <span class="comment"># 配置配置文件数据卷，$PWD表示当前所在文件夹路径</span></span><br><span class="line">-v <span class="variable">$PWD</span>/logs:/logs \ <span class="comment"># 配置日志数据卷</span></span><br><span class="line">-v <span class="variable">$PWD</span>/data:/var/lib/mysql \ <span class="comment"># 配置存放数据的数据卷</span></span><br><span class="line">-e MYSQL_ROOT_PASSWORD=123456 \ <span class="comment"># 配置ROOT用户密码（此处等号不可省）</span></span><br><span class="line">mysql:latest <span class="comment"># 指定容器镜像</span></span><br></pre></td></tr></table></figure><p>创建完成后，Docker容器的3306端口已经映射到宿主机的3306端口，可以通过外网访问3306端口对mysql进行操作</p><p><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/tencentdockertestss.png"></p><h2 id="部署Tomcat"><a href="#部署Tomcat" class="headerlink" title="部署Tomcat"></a>部署Tomcat</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 根目录下创建tomcat文件夹存储数据卷</span></span><br><span class="line">mkdir ~/tomcat</span><br><span class="line"><span class="comment"># 切换到指定目录下创建容器</span></span><br><span class="line"><span class="built_in">cd</span> tomcat</span><br><span class="line"><span class="comment"># 创建镜像</span></span><br><span class="line">docker run -id --name c_tomcat \</span><br><span class="line">-v <span class="variable">$PWD</span>:/usr/<span class="built_in">local</span>/tomcat/webapps \  <span class="comment"># 配置数据卷</span></span><br><span class="line">-p 8080:8080 \  <span class="comment"># 配置映射端口</span></span><br><span class="line">tomcat:latest</span><br><span class="line"><span class="comment"># Tomcat部署并启动后默认会启动服务器</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建测试文件并在外网利用8080端口访问</span></span><br><span class="line">mkdir <span class="built_in">test</span></span><br><span class="line"><span class="built_in">cd</span> <span class="built_in">test</span></span><br><span class="line">vim index.html  <span class="comment"># 创建并编辑网页文件</span></span><br></pre></td></tr></table></figure><p>外网访问<br><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/gafsgiusg.png"></p>]]></content>
      
      
      <categories>
          
          <category> 其他 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2-Docker容器数据卷</title>
      <link href="/2021/04/06/2-Docker%E5%AE%B9%E5%99%A8%E6%95%B0%E6%8D%AE%E5%8D%B7/"/>
      <url>/2021/04/06/2-Docker%E5%AE%B9%E5%99%A8%E6%95%B0%E6%8D%AE%E5%8D%B7/</url>
      
        <content type="html"><![CDATA[<h1 id="Docker容器数据卷"><a href="#Docker容器数据卷" class="headerlink" title="Docker容器数据卷"></a>Docker容器数据卷</h1><h2 id="数据卷概述"><a href="#数据卷概述" class="headerlink" title="数据卷概述"></a>数据卷概述</h2><p>实际开发中，数据的持久化以及数据交互都是十分重要的功能，所以Docker需要处理以下问题</p><ul><li>Docker容器删除后，容器中的应用数据是否被删除</li><li>Docker容器与外部机器（宿主机与网络机器）间如何进行文件交互</li><li>Docker容器之间如何进行文件的交换</li></ul><p>面对以上问题，Docker提供了数据卷的概念，数据卷是宿主机中的一个目录或文件，当容器与数据卷目录绑定（挂载）后，双方对数据卷的修改会立即同步，数据卷与容器不是一一对应的关系，一个数据卷可以挂载多个容器，一个容器也可以被挂载多个数据卷</p><h3 id="数据卷的作用"><a href="#数据卷的作用" class="headerlink" title="数据卷的作用"></a>数据卷的作用</h3><ul><li>保证容器数据的持久化</li><li>实现容器与宿主机之间的文件交换</li><li>实现Docker容器之间的文件交换</li></ul><h2 id="配置数据卷"><a href="#配置数据卷" class="headerlink" title="配置数据卷"></a>配置数据卷</h2><p>配置数据卷只需要在创建容器时利用-v参数指定宿主机路径与容器路径的挂载关系</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建容器时，使用-v参数设置数据卷</span></span><br><span class="line">docker run -it --name test1 -v 宿主机目录(或文件):容器内目录(或文件) ...</span><br><span class="line"><span class="comment"># 例如：</span></span><br><span class="line">docker run -it --name centosTest1 -v /root/data:/root/data_container centos:latest</span><br></pre></td></tr></table></figure><ul><li>目录必须是绝对路径(root可用~代替)</li><li>如果指定目录不存在，会自动创建</li><li>一个容器可以挂载多个数据卷，只需要指定多个-v参数即可</li></ul><p>两个容器需要交换文件时，可以挂载到同一个数据卷下</p><h2 id="数据卷容器"><a href="#数据卷容器" class="headerlink" title="数据卷容器"></a>数据卷容器</h2><p>多个容器之间进行文件共享有多种方法，其中一种是将所有容器都挂载到一个数据卷上，但这样比较繁琐，并且不便于管理，除了这种方式还可以通过数据卷容器的方式进行多个文件之间的共享</p><p>方法就是创建一个容器，挂载到一个数据卷上，随后让其他容器继承自该容器，这个容器被称为数据卷容器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建容器，挂载到一个数据卷上(这里只给了数据卷的路径，则容器路径会自动分配)</span></span><br><span class="line">docker run -it --name c1 -v /volume centos:latest </span><br><span class="line"><span class="comment"># 其他容器创建时挂载到该容器上，通过--volumes-from指定数据卷容器</span></span><br><span class="line">docker run -it --name c2 --volumes-from c1 centos:latest</span><br><span class="line">docker run -it --name c3 --volumes-from c1 centos:latest</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 其他 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1-Docker概述</title>
      <link href="/2021/04/06/1-Docker%E6%A6%82%E8%BF%B0/"/>
      <url>/2021/04/06/1-Docker%E6%A6%82%E8%BF%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="Docker概述"><a href="#Docker概述" class="headerlink" title="Docker概述"></a>Docker概述</h1><blockquote><p>Docker 是一个开放源代码软件，是一个开放平台，用于开发应用、交付（shipping）应用、运行应用。 Docker允许用户将基础设施（Infrastructure）中的应用单独分割出来，形成更小的颗粒（容器），从而提高交付软件的速度。</p></blockquote><blockquote><p>Docker容器与虚拟机类似，但二者在原理上不同。容器是将操作系统层虚拟化，虚拟机则是虚拟化硬件，因此容器更具有便携性、高效地利用服务器。 容器更多的用于表示 软件的一个标准化单元。由于容器的标准化，因此它可以无视基础设施（Infrastructure）的差异，部署到任何一个地方。另外，Docker也为容器提供更强的业界的隔离兼容。</p></blockquote><h2 id="Docker安装步骤"><a href="#Docker安装步骤" class="headerlink" title="Docker安装步骤"></a>Docker安装步骤</h2><p>（centos）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1. 更新所有yum包到最新</span></span><br><span class="line">yum update</span><br><span class="line"><span class="comment"># 2. 安装所需软件包，yum-utils提供yum-config-manager功能另两个是devicemapper驱动所依赖的</span></span><br><span class="line">yum install -y yum-utils \</span><br><span class="line">  device-mapper-persistent-data \</span><br><span class="line">  lvm2</span><br><span class="line"><span class="comment"># 3. 设置yum源（这里使用的国内的阿里云）</span></span><br><span class="line">yum-config-manager \</span><br><span class="line">    --add-repo \</span><br><span class="line">    http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br><span class="line"><span class="comment"># 4. 安装docker， -y表示出现询问确认的界面都输入y</span></span><br><span class="line">yum install -y docker-ce</span><br><span class="line"><span class="comment"># 5. 查看docker版本，验证是否安装成功</span></span><br><span class="line">docker -v</span><br></pre></td></tr></table></figure><h2 id="Docker架构"><a href="#Docker架构" class="headerlink" title="Docker架构"></a>Docker架构</h2><p><img src="https://www.runoob.com/wp-content/uploads/2016/04/576507-docker1.png"><br>上图中的daemon表示守护进程</p><h3 id="Docker中的三个基本概念"><a href="#Docker中的三个基本概念" class="headerlink" title="Docker中的三个基本概念"></a>Docker中的三个基本概念</h3><ul><li>镜像（Image）：Docker 镜像（Image），就相当于是一个 root 文件系统。比如官方镜像 ubuntu:16.04 就包含了完整的一套 Ubuntu16.04 最小系统的 root 文件系统。</li><li>容器（Container）：镜像（Image）和容器（Container）的关系，就像是面向对象程序设计中的类和实例一样，镜像是静态的定义，容器是镜像运行时的实体。容器可以被创建、启动、停止、删除、暂停等。</li><li>仓库（Repository）：仓库可看成一个代码控制中心，用来保存镜像</li></ul><p>Docker 使用客户端-服务器 (C/S) 架构模式，使用远程API来管理和创建Docker容器。</p><p>Docker 容器通过 Docker 镜像来创建。</p><h2 id="Docker服务相关命令-与守护进程相关的"><a href="#Docker服务相关命令-与守护进程相关的" class="headerlink" title="Docker服务相关命令(与守护进程相关的)"></a>Docker服务相关命令(与守护进程相关的)</h2><p>Docker Daemon是Docker的守护进程，Docker Client通过命令行与Docker Damon通信，完成Docker相关操作</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1. 启动Docker服务</span></span><br><span class="line">systemctl start docker</span><br><span class="line"><span class="comment"># 2. 查看Docker启动状态</span></span><br><span class="line">systemctl status docker</span><br><span class="line"><span class="comment"># 3. 停止Docker服务</span></span><br><span class="line">systemctl stop docker</span><br><span class="line"><span class="comment"># 4. 重启Docker服务</span></span><br><span class="line">systemctl restart docker</span><br><span class="line"><span class="comment"># 5. 开机启动Docker服务</span></span><br><span class="line">systemctl <span class="built_in">enable</span> docker</span><br></pre></td></tr></table></figure><h2 id="Docker镜像相关命令"><a href="#Docker镜像相关命令" class="headerlink" title="Docker镜像相关命令"></a>Docker镜像相关命令</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1. 查看镜像：查看本地所有镜像</span></span><br><span class="line">docker images</span><br><span class="line"><span class="comment"># 查看所有镜像的ID</span></span><br><span class="line">docker images -q</span><br><span class="line"><span class="comment"># 2. 搜索镜像，从网络中查找所需要的镜像</span></span><br><span class="line">docker search 镜像名称</span><br><span class="line"><span class="comment"># 例如：</span></span><br><span class="line">docker search mysql</span><br><span class="line"><span class="comment"># 3. 拉取镜像：从Docker仓库拉取镜像到本地，镜像名称的格式为 镜像:版本号，如果不指定版本号，则默认安装最新版本</span></span><br><span class="line">docker pull 镜像名称</span><br><span class="line"><span class="comment"># 例如：</span></span><br><span class="line">docker pull mysql</span><br><span class="line">docker pull mysql:5.0.0</span><br><span class="line"><span class="comment"># 4. 删除镜像</span></span><br><span class="line">docker rmi 镜像ID或镜像名与版本号</span><br><span class="line"><span class="comment"># 例如：</span></span><br><span class="line">docker rmi mysql:5.0.0</span><br><span class="line">docker rmi e646c6533b0b</span><br><span class="line">docker rmi `docker images -q` <span class="comment"># 删除所有镜像</span></span><br></pre></td></tr></table></figure><h2 id="Docker容器相关命令"><a href="#Docker容器相关命令" class="headerlink" title="Docker容器相关命令"></a>Docker容器相关命令</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看容器</span></span><br><span class="line">docker ps <span class="comment"># 查看所有运行中的容器</span></span><br><span class="line">docker ps -a <span class="comment"># 查看所有历史容器</span></span><br><span class="line"><span class="comment"># 创建并启动容器</span></span><br><span class="line">docker run 参数</span><br><span class="line"><span class="comment"># 参数；</span></span><br><span class="line">-i <span class="comment"># 保持容器运行，常与-t一起使用（一起使用可省略为-it），使用-it后容器创建后自动进入容器，推出容器后自动销毁</span></span><br><span class="line">-t <span class="comment"># 为容器分配一个伪输入终端</span></span><br><span class="line">-d <span class="comment"># 以守护（后台）模式运行容器，创建一个容器后容器在后台运行，需要使用docker exec命令进入，推出后容器不会销毁</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># -it创建的容器一般称为交互式容器，-id创建的容器一般称为守护式容器 </span></span><br><span class="line">--name <span class="comment"># 为创建的容器取名</span></span><br><span class="line"><span class="comment"># 示例</span></span><br><span class="line">docker run -it --name test1 mysql:latest /bin/bash</span><br><span class="line">docker run -id --name test2 mysql:latest /bin/bash</span><br><span class="line"><span class="comment"># 进入容器</span></span><br><span class="line"><span class="comment"># -it会自动进入，-id进入容器示例：(这里的-it是为了分配一个伪终端)</span></span><br><span class="line">docker <span class="built_in">exec</span> -it test2 /bin/bash</span><br><span class="line"><span class="comment"># 退出容器</span></span><br><span class="line"><span class="built_in">exit</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 启动容器</span></span><br><span class="line">docker start 容器名</span><br><span class="line"><span class="comment"># 停止容器</span></span><br><span class="line">docker stop 容器名</span><br><span class="line"><span class="comment"># 删除容器</span></span><br><span class="line">docker rm 容器名</span><br><span class="line"><span class="comment"># 查看容器信息</span></span><br><span class="line">docker inspect 容器名</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 其他 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>13-DCL用户管理语言</title>
      <link href="/2021/04/05/13-DCL%E7%94%A8%E6%88%B7%E7%AE%A1%E7%90%86%E8%AF%AD%E8%A8%80/"/>
      <url>/2021/04/05/13-DCL%E7%94%A8%E6%88%B7%E7%AE%A1%E7%90%86%E8%AF%AD%E8%A8%80/</url>
      
        <content type="html"><![CDATA[<h1 id="DCL-用户管理语言"><a href="#DCL-用户管理语言" class="headerlink" title="DCL-用户管理语言"></a>DCL-用户管理语言</h1><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> DATABASES;</span><br><span class="line"></span><br><span class="line"># 切换到mysql数据库</span><br><span class="line">use mysql;</span><br><span class="line"># 查看<span class="keyword">user</span>表</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">user</span>;</span><br><span class="line"># 创建用户语法</span><br><span class="line"># <span class="keyword">CREATE</span> <span class="keyword">USER</span> <span class="string">&#x27;用户名&#x27;</span>@<span class="string">&#x27;主机名&#x27;</span> IDENTIFIED <span class="keyword">BY</span> <span class="string">&#x27;密码&#x27;</span>;</span><br><span class="line"># localhost表示本地主机 通配符<span class="operator">%</span>表示任意主机（可远程访问）</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">USER</span> <span class="string">&#x27;renboyu&#x27;</span>@<span class="string">&#x27;%&#x27;</span> IDENTIFIED <span class="keyword">BY</span> <span class="string">&#x27;renboyu01&#x27;</span>;</span><br><span class="line"># 修改密码</span><br><span class="line"># UPDATE <span class="keyword">USER</span> <span class="keyword">SET</span> authentication_string<span class="operator">=</span>PASSWORD(<span class="string">&#x27;新密码&#x27;</span>)<span class="keyword">WHERE</span> <span class="keyword">USER</span><span class="operator">=</span><span class="string">&#x27;用户名&#x27;</span>;</span><br><span class="line"># PASSWORD()函数为加密函数</span><br><span class="line">UPDATE <span class="keyword">user</span> <span class="keyword">SET</span> authentication_string <span class="operator">=</span> PASSWORD(<span class="string">&#x27;010214&#x27;</span>) <span class="keyword">WHERE</span> <span class="keyword">User</span><span class="operator">=</span><span class="string">&#x27;renboyu&#x27;</span>;</span><br><span class="line"># 删除用户</span><br><span class="line"># <span class="keyword">DROP</span> <span class="keyword">USER</span> <span class="string">&#x27;用户名&#x27;</span>@<span class="string">&#x27;主机名&#x27;</span>;</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">USER</span> <span class="string">&#x27;renboyu&#x27;</span>@<span class="string">&#x27;%&#x27;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 忘记MySQL数据库中的root密码后如何修改密码并登录</span><br><span class="line"># https:<span class="operator">/</span><span class="operator">/</span>www.bilibili.com<span class="operator">/</span>video<span class="operator">/</span>BV1uJ411k7wy?p<span class="operator">=</span><span class="number">537</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 权限管理</span><br><span class="line"></span><br><span class="line"># 查询权限</span><br><span class="line"># <span class="keyword">SHOW</span> GRANTS <span class="string">&#x27;用户名&#x27;</span>@<span class="string">&#x27;主机名&#x27;</span>;</span><br><span class="line"><span class="keyword">SHOW</span> GRANTS <span class="keyword">FOR</span> <span class="string">&#x27;renboyu&#x27;</span>@<span class="string">&#x27;%&#x27;</span>;</span><br><span class="line"></span><br><span class="line"># 授予权限</span><br><span class="line"># <span class="keyword">GRANT</span> 权限列表 <span class="keyword">ON</span> 数据库名.表名 <span class="keyword">TO</span> <span class="string">&#x27;用户名&#x27;</span>@<span class="string">&#x27;主机名&#x27;</span>;</span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">SELECT</span>,<span class="keyword">DELETE</span>,UPDATE <span class="keyword">ON</span> jdbcTest.bank <span class="keyword">TO</span> <span class="string">&#x27;renboyu&#x27;</span>@<span class="string">&#x27;%&#x27;</span>;</span><br><span class="line"># 授予所有权限给所有表，可以采用通配符的方式</span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">ALL</span> <span class="keyword">ON</span> <span class="operator">*</span>.<span class="operator">*</span> <span class="keyword">TO</span> <span class="string">&#x27;renboyu&#x27;</span>@<span class="string">&#x27;%&#x27;</span>;</span><br><span class="line"></span><br><span class="line"># 撤销权限</span><br><span class="line"># <span class="keyword">REVOKE</span> 权限列表 <span class="keyword">ON</span> 数据库名.表名 <span class="keyword">FROM</span> <span class="string">&#x27;用户名&#x27;</span>@<span class="string">&#x27;主机名&#x27;</span>;</span><br><span class="line"><span class="keyword">REVOKE</span> <span class="keyword">SELECT</span>,<span class="keyword">DELETE</span>,UPDATE <span class="keyword">ON</span> jdbcTest.bank <span class="keyword">FROM</span> <span class="string">&#x27;renboyu&#x27;</span>@<span class="string">&#x27;%&#x27;</span>;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>12-分支结构，循环结构</title>
      <link href="/2021/04/05/12-%E5%88%86%E6%94%AF%E7%BB%93%E6%9E%84%EF%BC%8C%E5%BE%AA%E7%8E%AF%E7%BB%93%E6%9E%84/"/>
      <url>/2021/04/05/12-%E5%88%86%E6%94%AF%E7%BB%93%E6%9E%84%EF%BC%8C%E5%BE%AA%E7%8E%AF%E7%BB%93%E6%9E%84/</url>
      
        <content type="html"><![CDATA[<h1 id="分支结构"><a href="#分支结构" class="headerlink" title="分支结构"></a>分支结构</h1><h2 id="IF函数"><a href="#IF函数" class="headerlink" title="IF函数"></a>IF函数</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"># 流程控制结构</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">顺序结构：程序自上而下依次执行</span></span><br><span class="line"><span class="comment">分支结构：程序从两条或多条路径中选择一条去执行</span></span><br><span class="line"><span class="comment">循环结构：程序在满足一定条件基础上，重复执行一段代码</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"># 分支结构</span><br><span class="line"># IF(expr1,expr2,expr3)函数</span><br><span class="line">功能：实现简单的双分支</span><br><span class="line">语法：</span><br><span class="line"><span class="keyword">SELECT</span> IF(expr1,expr2,expr3)</span><br><span class="line">执行顺序：</span><br><span class="line">如果表达式<span class="number">1</span>成立，则执行表达式<span class="number">2</span>，否则执行表达式<span class="number">3</span></span><br><span class="line">可以存储在程序任何地方</span><br></pre></td></tr></table></figure><h2 id="CASE结构"><a href="#CASE结构" class="headerlink" title="CASE结构"></a>CASE结构</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"># <span class="keyword">CASE</span>结构</span><br><span class="line">语法：</span><br><span class="line"><span class="keyword">CASE</span> case_value</span><br><span class="line"><span class="keyword">WHEN</span> when_value <span class="keyword">THEN</span></span><br><span class="line">statement_list</span><br><span class="line"><span class="keyword">WHEN</span> when_value <span class="keyword">THEN</span></span><br><span class="line">statement_list</span><br><span class="line">...</span><br><span class="line"><span class="keyword">ELSE</span></span><br><span class="line">statement_list</span><br><span class="line"><span class="keyword">END</span> <span class="keyword">CASE</span>;</span><br><span class="line"></span><br><span class="line"># 情况<span class="number">1</span>：类似于Java中的switch语句，一般用于实现等值判断</span><br><span class="line"># 情况<span class="number">2</span>：类似于Java中的多重IF语句，一般用于实现区间判断</span><br><span class="line"></span><br><span class="line"># 特点：</span><br><span class="line">可以作为表达式，嵌套在其他语句中使用，可以放在任何地方，<span class="keyword">BEGIN</span> <span class="keyword">END</span>中或外面</span><br><span class="line">也可以作为独立的语句去使用，只能放在<span class="keyword">begin</span> <span class="keyword">end</span>中</span><br><span class="line"># 注意这里的<span class="keyword">case</span>语句和C，Java中仍有一定区别，它在满足条件后会跳出，而不是继续执行<span class="keyword">case</span>结构</span><br><span class="line"></span><br><span class="line"># 案例</span><br><span class="line"># 创建存储过程，根据传入的成绩来显示等级比如：<span class="number">90</span><span class="number">-100</span>显示A...</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> test_case(<span class="keyword">IN</span> score <span class="type">INT</span>)</span><br><span class="line"><span class="keyword">BEGIN</span> </span><br><span class="line"><span class="keyword">CASE</span> </span><br><span class="line"><span class="keyword">WHEN</span> score<span class="operator">&gt;=</span><span class="number">90</span> <span class="keyword">THEN</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="string">&#x27;A&#x27;</span> level_stu;</span><br><span class="line"><span class="keyword">WHEN</span> score<span class="operator">&gt;=</span><span class="number">80</span> <span class="keyword">THEN</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="string">&#x27;B&#x27;</span> level_stu;</span><br><span class="line"><span class="keyword">WHEN</span> score<span class="operator">&gt;=</span><span class="number">60</span> <span class="keyword">THEN</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="string">&#x27;C&#x27;</span> level_stu;</span><br><span class="line"><span class="keyword">ELSE</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="string">&#x27;D&#x27;</span> level_stu;</span><br><span class="line"><span class="keyword">END</span> <span class="keyword">CASE</span>;</span><br><span class="line"><span class="keyword">END</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">CALL</span> test_case(<span class="number">75</span>);</span><br></pre></td></tr></table></figure><h2 id="IF结构"><a href="#IF结构" class="headerlink" title="IF结构"></a>IF结构</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"># IF结构</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">功能：实现多重分支</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">语法：</span></span><br><span class="line"><span class="comment">IF 条件1 THEN 语句1;</span></span><br><span class="line"><span class="comment">ELSEIF 条件2 THEN 语句2;</span></span><br><span class="line"><span class="comment">ELSEIF 条件3 THEN 语句3;</span></span><br><span class="line"><span class="comment">...</span></span><br><span class="line"><span class="comment">【ELSE 语句2;】</span></span><br><span class="line"><span class="comment">END IF</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">只能应用在begin end中</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"># 案例：仍利用上文的成绩分类</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">FUNCTION</span> test_case2(score <span class="type">INT</span>) <span class="keyword">RETURNS</span> <span class="type">CHAR</span>(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">BEGIN</span> </span><br><span class="line">IF score<span class="operator">&gt;=</span><span class="number">90</span> <span class="keyword">THEN</span> <span class="keyword">RETURN</span> <span class="string">&#x27;A&#x27;</span>;</span><br><span class="line">ELSEIF score<span class="operator">&gt;=</span><span class="number">80</span> <span class="keyword">THEN</span> <span class="keyword">RETURN</span> <span class="string">&#x27;B&#x27;</span>;</span><br><span class="line">ELSEIF score<span class="operator">&gt;=</span><span class="number">60</span> <span class="keyword">THEN</span> <span class="keyword">RETURN</span> <span class="string">&#x27;C&#x27;</span>;</span><br><span class="line"><span class="keyword">ELSE</span> <span class="keyword">RETURN</span> <span class="string">&#x27;D&#x27;</span>;</span><br><span class="line"><span class="keyword">END</span> IF;</span><br><span class="line"><span class="keyword">END</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> test_case2(<span class="number">85</span>) <span class="keyword">result</span>;</span><br></pre></td></tr></table></figure><h1 id="循环结构"><a href="#循环结构" class="headerlink" title="循环结构"></a>循环结构</h1><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"># 循环结构</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">分类：</span></span><br><span class="line"><span class="comment">WHILE,LOOP,REPEAT</span></span><br><span class="line"><span class="comment">循环控制：</span></span><br><span class="line"><span class="comment">ITERATE 类似于 CONTINUE 继续，结束本次循环，继续下一次</span></span><br><span class="line"><span class="comment">LEAVE 类似于break ,跳出，结束当前所在的循环</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"># while循环</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">语法：</span></span><br><span class="line"><span class="comment">WHILE 循环条件 DO </span></span><br><span class="line"><span class="comment">循环体</span></span><br><span class="line"><span class="comment">END WHILE</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">如果要为循环定义名称：</span></span><br><span class="line"><span class="comment">标签:WHILE 循环条件 DO </span></span><br><span class="line"><span class="comment">循环体</span></span><br><span class="line"><span class="comment">END WHILE 标签;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"># LOOP循环</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">【标签:】LOOP</span></span><br><span class="line"><span class="comment">循环体;</span></span><br><span class="line"><span class="comment">END LOOP 【标签】;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">可以用来模拟简单的死循环</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"># repeat循环</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">【标签:】REPEAT</span></span><br><span class="line"><span class="comment">循环体</span></span><br><span class="line"><span class="comment">UNTIL 循环结束条件</span></span><br><span class="line"><span class="comment">END REPEAT 【标签】;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 案例：批量插入，根据次数插入到admin表中多条记录</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> while_test(<span class="keyword">IN</span> num <span class="type">INT</span>) </span><br><span class="line"><span class="keyword">BEGIN</span> </span><br><span class="line"><span class="keyword">DECLARE</span> n <span class="type">INT</span> <span class="keyword">DEFAULT</span> <span class="number">1</span>;</span><br><span class="line">WHILE n<span class="operator">&lt;=</span>num DO</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> admin(username,`password`) <span class="keyword">VALUES</span>(CONCAT(<span class="string">&#x27;Rose_&#x27;</span>,n),<span class="number">8888</span>);</span><br><span class="line"><span class="keyword">SET</span> n<span class="operator">=</span>n<span class="operator">+</span><span class="number">1</span>;</span><br><span class="line"><span class="keyword">END</span> WHILE;</span><br><span class="line"><span class="keyword">END</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">CALL</span> while_test(<span class="number">50</span>);</span><br><span class="line"></span><br><span class="line"># 案例二：批量插入，但是当次数超过<span class="number">20</span>时就停止</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">PROCEDURE</span> leave_test;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> leave_test(<span class="keyword">IN</span> num <span class="type">INT</span>) </span><br><span class="line"><span class="keyword">BEGIN</span> </span><br><span class="line"><span class="keyword">DECLARE</span> n <span class="type">INT</span> <span class="keyword">DEFAULT</span> <span class="number">1</span>;</span><br><span class="line">a:WHILE n<span class="operator">&lt;=</span>num DO</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> admin(username,`password`) <span class="keyword">VALUES</span>(CONCAT(<span class="string">&#x27;Leslie_&#x27;</span>,n),<span class="number">5555</span>);</span><br><span class="line">IF n<span class="operator">&gt;=</span><span class="number">20</span> <span class="keyword">THEN</span> LEAVE a;</span><br><span class="line"><span class="keyword">END</span> IF;</span><br><span class="line"><span class="keyword">SET</span> n<span class="operator">=</span>n<span class="operator">+</span><span class="number">1</span>;</span><br><span class="line"><span class="keyword">END</span> WHILE a;</span><br><span class="line"><span class="keyword">END</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">CALL</span> leave_test(<span class="number">100</span>);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>11-存储过程和函数</title>
      <link href="/2021/04/05/11-%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B%E5%92%8C%E5%87%BD%E6%95%B0/"/>
      <url>/2021/04/05/11-%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B%E5%92%8C%E5%87%BD%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="存储过程"><a href="#存储过程" class="headerlink" title="存储过程"></a>存储过程</h1><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br></pre></td><td class="code"><pre><span class="line"># 存储过程和函数</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">存储过程和函数：类似Java中的方法</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">好处：</span></span><br><span class="line"><span class="comment">1. 提高代码重用性</span></span><br><span class="line"><span class="comment">2. 简化操作</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 存储过程</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">含义：一组预先编译好的SQL语句集合</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">好处：</span></span><br><span class="line"><span class="comment">1. 提高代码重用性</span></span><br><span class="line"><span class="comment">2. 简化操作</span></span><br><span class="line"><span class="comment">3. 减少编译次数</span></span><br><span class="line"><span class="comment">4. 减少数据库服务器的连接次数，提高效率</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"># 存储过程创建</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> 存储过程名(参数列表)</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">存储过程体(一组合法的<span class="keyword">SQL</span>语句)</span><br><span class="line"><span class="keyword">END</span></span><br><span class="line"></span><br><span class="line"># 注意</span><br><span class="line"><span class="number">1.</span> 参数列表包含三部分：参数模式 参数名 参数类型</span><br><span class="line"><span class="number">2.</span> 参数模式有 <span class="keyword">IN</span>,<span class="keyword">OUT</span>,<span class="keyword">INOUT</span>三种</span><br><span class="line"><span class="keyword">IN</span>:该参数可以作为输入，也就是说该参数需要调用方传入值</span><br><span class="line"><span class="keyword">OUT</span>:该参数可以作为输出，也就是该参数可以作为返回值</span><br><span class="line"><span class="keyword">INOUT</span>:该参数既可以作为输入，也可以作为输出，急需要传入值也可以返回值</span><br><span class="line"><span class="number">3.</span> 如果存储过程体中仅有一句话，<span class="keyword">BEGIN</span> <span class="keyword">END</span> 可以省略</span><br><span class="line"><span class="number">4.</span> 存储过程体中每条<span class="keyword">SQL</span>语句结尾要求必须加分号</span><br><span class="line"><span class="number">5.</span> 存储过程的结尾可以用DELIMITER重新配置</span><br><span class="line">语法：</span><br><span class="line">DELIMITER 结束标记</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 调用语法</span><br><span class="line"><span class="keyword">CALL</span> 存储过程名(实参列表);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 空参的存储过程</span><br><span class="line"># 案例：插入到admin表中三条记录</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> admin;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> admin(</span><br><span class="line">id <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY auto_increment,</span><br><span class="line">username <span class="type">VARCHAR</span>(<span class="number">20</span>),</span><br><span class="line">password <span class="type">VARCHAR</span>(<span class="number">15</span>)</span><br><span class="line">);</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> admin;</span><br><span class="line"># 题目完成</span><br><span class="line">DELIMITER $  # 修改终止符号，只能在DOS窗口里应用，图形化界面无效，修改后，后续都需要用这个符号作为终止符</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> p1()</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> admin </span><br><span class="line"><span class="keyword">VALUES</span>(<span class="keyword">NULL</span>,<span class="string">&#x27;Leslie&#x27;</span>,<span class="string">&#x27;0000&#x27;</span>),(<span class="keyword">NULL</span>,<span class="string">&#x27;JJ&#x27;</span>,<span class="string">&#x27;0111&#x27;</span>),(<span class="keyword">NULL</span>,<span class="string">&#x27;Lily&#x27;</span>,<span class="string">&#x27;0011&#x27;</span>);</span><br><span class="line"><span class="keyword">END</span> $</span><br><span class="line"># 调用函数(在DOS窗口中用<span class="keyword">CALL</span> p1()$调用)</span><br><span class="line"><span class="keyword">CALL</span> p1();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 创建带<span class="keyword">IN</span>类型参数的存储过程</span><br><span class="line"># 案例：根据女友姓名，查询男友信息</span><br><span class="line">USE girls;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> p2(<span class="keyword">IN</span> girlName <span class="type">VARCHAR</span>(<span class="number">20</span>))</span><br><span class="line"><span class="keyword">BEGIN</span> </span><br><span class="line"><span class="keyword">SELECT</span> bo.<span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> boys bo</span><br><span class="line"><span class="keyword">RIGHT</span> <span class="keyword">JOIN</span> beauty b <span class="keyword">ON</span> bo.`id`<span class="operator">=</span>b.`boyfriend_id`</span><br><span class="line"><span class="keyword">WHERE</span> b.`name`<span class="operator">=</span>girlName;</span><br><span class="line"><span class="keyword">END</span> </span><br><span class="line"># 调用</span><br><span class="line"><span class="keyword">CALL</span> p2(<span class="string">&#x27;小昭&#x27;</span>);</span><br><span class="line"></span><br><span class="line"># 案例<span class="number">2</span>：创建存储过程实现，用户是否登录成功</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> p3(<span class="keyword">IN</span> username <span class="type">VARCHAR</span>(<span class="number">20</span>),<span class="keyword">IN</span> password <span class="type">VARCHAR</span>(<span class="number">20</span>))</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line"># 定义变量用于输出结果</span><br><span class="line"><span class="keyword">DECLARE</span> <span class="keyword">result</span> <span class="type">INT</span> <span class="keyword">DEFAULT</span> <span class="number">0</span>;</span><br><span class="line"># 检查登录</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">INTO</span> <span class="keyword">result</span></span><br><span class="line"><span class="keyword">FROM</span> admin</span><br><span class="line"><span class="keyword">WHERE</span> username<span class="operator">=</span>admin.username</span><br><span class="line"><span class="keyword">AND</span> password<span class="operator">=</span>admin.`password`;</span><br><span class="line"># 输出结果</span><br><span class="line"><span class="keyword">SELECT</span> IF(<span class="keyword">result</span><span class="operator">&gt;</span><span class="number">0</span>,<span class="string">&#x27;成功&#x27;</span>,<span class="string">&#x27;失败&#x27;</span>) 结果;</span><br><span class="line"><span class="keyword">END</span></span><br><span class="line"># 调用</span><br><span class="line"><span class="keyword">CALL</span> p3(<span class="string">&#x27;john&#x27;</span>,<span class="string">&#x27;8888&#x27;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 创建待<span class="keyword">out</span>模式的存储</span><br><span class="line"># 实际就是其他语言的返回值，Mysql支持多个<span class="keyword">out</span>模式即多个返回值</span><br><span class="line"></span><br><span class="line"># 根据女生名返回男生姓名</span><br><span class="line">USE girls;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> p4(<span class="keyword">IN</span> girlName <span class="type">VARCHAR</span>(<span class="number">20</span>),<span class="keyword">OUT</span> boyName <span class="type">VARCHAR</span>(<span class="number">20</span>))</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line"><span class="keyword">SELECT</span> bo.boyName <span class="keyword">INTO</span> boyName</span><br><span class="line"><span class="keyword">FROM</span> boys bo</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> beauty b <span class="keyword">ON</span> bo.`id`<span class="operator">=</span>b.`boyfriend_id`</span><br><span class="line"><span class="keyword">WHERE</span> b.`name`<span class="operator">=</span>girlName;</span><br><span class="line"><span class="keyword">END</span></span><br><span class="line"># 调用</span><br><span class="line"><span class="keyword">CALL</span> p4(<span class="string">&#x27;小昭&#x27;</span>,<span class="variable">@boyName</span>);</span><br><span class="line"><span class="keyword">SELECT</span> <span class="variable">@boyName</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 案例<span class="number">2</span>：根据女士姓名，返回男士姓名和数值（一次返回多个值）</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> p5(<span class="keyword">IN</span> girlName <span class="type">VARCHAR</span>(<span class="number">20</span>),<span class="keyword">OUT</span> boyName <span class="type">VARCHAR</span>(<span class="number">20</span>),<span class="keyword">OUT</span> userCP <span class="type">INT</span>)</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line"><span class="keyword">SELECT</span> bo.boyName ,bo.userCP <span class="keyword">INTO</span> boyName,userCP</span><br><span class="line"><span class="keyword">FROM</span> boys bo</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> beauty b <span class="keyword">ON</span> bo.`id`<span class="operator">=</span>b.`boyfriend_id`</span><br><span class="line"><span class="keyword">WHERE</span> b.`name`<span class="operator">=</span>girlName;</span><br><span class="line"><span class="keyword">END</span></span><br><span class="line"></span><br><span class="line"># 调用</span><br><span class="line"><span class="keyword">CALL</span> p5(<span class="string">&#x27;小昭&#x27;</span>,<span class="variable">@boyName</span>,<span class="variable">@boyCP</span>);</span><br><span class="line"><span class="keyword">SELECT</span> <span class="variable">@boyName</span>,<span class="variable">@boyCP</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 带<span class="keyword">inout</span>模式的存储模式</span><br><span class="line"># 传入a和b两个值，最终a和b都被双倍返回</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> p6(<span class="keyword">INOUT</span> a <span class="type">INT</span> ,<span class="keyword">INOUT</span> b <span class="type">INT</span>)</span><br><span class="line"><span class="keyword">BEGIN</span> </span><br><span class="line"><span class="keyword">SET</span> a<span class="operator">=</span>a<span class="operator">*</span><span class="number">2</span>;</span><br><span class="line"><span class="keyword">SET</span> b<span class="operator">=</span>b<span class="operator">*</span><span class="number">2</span>;</span><br><span class="line"><span class="keyword">END</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SET</span> <span class="variable">@aNum</span><span class="operator">=</span><span class="number">10</span>;</span><br><span class="line"><span class="keyword">SET</span> <span class="variable">@bNum</span><span class="operator">=</span><span class="number">6</span>;</span><br><span class="line"><span class="keyword">CALL</span> p6(<span class="variable">@aNum</span>,<span class="variable">@bNum</span>);</span><br><span class="line"><span class="keyword">SELECT</span> <span class="variable">@aNum</span>,<span class="variable">@bNum</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 存储过程的删除</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">PROCEDURE</span> p2;</span><br><span class="line"></span><br><span class="line"># 查看存储过程结构信息</span><br><span class="line"><span class="keyword">SHOW</span> <span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> p3;</span><br><span class="line"></span><br><span class="line"># 存储过程一般不修改</span><br></pre></td></tr></table></figure><h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"># 函数</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">存储过程与函数区别：</span></span><br><span class="line"><span class="comment">存储过程可以有任意个返回值（零或多个），适合于批量插入或修改</span></span><br><span class="line"><span class="comment">函数有且仅有一个返回值，适合处理数据后返回一个结果</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"># 创建语法</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">FUNCTION</span> 方法名(参数列表) <span class="keyword">RETURNS</span> 返回类型</span><br><span class="line"><span class="keyword">BEGIN</span> </span><br><span class="line">函数体</span><br><span class="line"><span class="keyword">END</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">参数列表包含两部分：参数名  参数类型</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">函数体：肯定有return语句</span></span><br><span class="line"><span class="comment">如果return语句不会报错，但没有实际效果</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">函数体中只有一句话时，BEGIN END可以省略</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">在DOS窗口下仍然使用DELIMITER设置终止符</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"># 调用语法,执行函数体内所有语句，并最终显示返回值</span><br><span class="line"><span class="keyword">SELECT</span> 函数名(参数列表);</span><br><span class="line"></span><br><span class="line"># 案例：无参有返回值，返回公司员工格式</span><br><span class="line">use myemployees;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">FUNCTION</span> f1() <span class="keyword">RETURNS</span> <span class="type">INT</span></span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line"><span class="keyword">DECLARE</span> c <span class="type">INT</span> ; # 声明返回值变量</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">INTO</span> c  # 赋值</span><br><span class="line"><span class="keyword">FROM</span> employees;</span><br><span class="line"><span class="keyword">RETURN</span> c; # 返回值</span><br><span class="line"><span class="keyword">END</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> f1() <span class="keyword">result</span>;</span><br><span class="line"></span><br><span class="line"># 案例二：含参有返回，根据员工名，返回对应工资</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">FUNCTION</span> f2(username <span class="type">VARCHAR</span>(<span class="number">20</span>)) <span class="keyword">RETURNS</span> <span class="type">INT</span></span><br><span class="line"><span class="keyword">BEGIN</span> </span><br><span class="line"><span class="keyword">DECLARE</span> s <span class="type">INT</span>;</span><br><span class="line"><span class="keyword">SELECT</span> salary <span class="keyword">INTO</span> s</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> last_name<span class="operator">=</span>username;</span><br><span class="line"><span class="keyword">RETURN</span> s;</span><br><span class="line"><span class="keyword">END</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> f2(<span class="string">&#x27;Chen&#x27;</span>) salary;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 查看函数</span><br><span class="line"><span class="keyword">SHOW</span> <span class="keyword">CREATE</span> <span class="keyword">FUNCTION</span> f1;</span><br><span class="line"># 删除函数</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">FUNCTION</span> f1;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>10-变量</title>
      <link href="/2021/04/05/10-%E5%8F%98%E9%87%8F/"/>
      <url>/2021/04/05/10-%E5%8F%98%E9%87%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="系统变量"><a href="#系统变量" class="headerlink" title="系统变量"></a>系统变量</h1><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"># 变量</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">系统变量</span></span><br><span class="line"><span class="comment">全局变量</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">会话变量</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">自定义变量</span></span><br><span class="line"><span class="comment">用户变量</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">局部变量</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"># 一。系统变量</span><br><span class="line"># 变量由系统提供，不由用户定义，属于服务器层面</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">使用语法：（不写global,session默认使用会话变量）</span></span><br><span class="line"><span class="comment">1. 查看所有系统变量</span></span><br><span class="line"><span class="comment">SHOW GLOBAL VARIABLES;   # 查看全局变量</span></span><br><span class="line"><span class="comment">SHOW 【SESSION】 VARIABLES;   # 查看会话变量</span></span><br><span class="line"><span class="comment">2. 查看满足条件的部分系统变量</span></span><br><span class="line"><span class="comment">SHOW GLOBAL VARIABLES LIKE &#x27;CHAR&#x27;;</span></span><br><span class="line"><span class="comment">SHOW 【SESSION】 VARIABLES LIKE &#x27;CHAR&#x27;;</span></span><br><span class="line"><span class="comment">3. 查看指定的某个系统变量</span></span><br><span class="line"><span class="comment">SELECT @@global.系统变量名;</span></span><br><span class="line"><span class="comment">SELECT @@【SESSION.】系统变量名;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">4. 为某个具体的系统变量赋值</span></span><br><span class="line"><span class="comment"># 方式1</span></span><br><span class="line"><span class="comment">SET 【session.】系统变量名=值;  # 为会话变量赋值</span></span><br><span class="line"><span class="comment">SET GLOBAL.系统变量名=值  # 为系统变量赋值</span></span><br><span class="line"><span class="comment">#方式2</span></span><br><span class="line"><span class="comment">SET GLOBAL.系统变量名=值;</span></span><br><span class="line"><span class="comment">SET 【SESSION.】系统变量名=值;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SHOW</span> <span class="keyword">GLOBAL</span> VARIABLES;   # 查看全局变量</span><br><span class="line"><span class="keyword">SHOW</span> SESSION VARIABLES;   # 查看会话变量</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">全局变量作用域：服务器每次启动时将为所有的全局变量赋初始值，</span></span><br><span class="line"><span class="comment">赋值对所有会话（连接）都有效，但不能跨重启</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">会话变量作用域：仅仅针对于当前会话有效，，修改时也仅修改当前会话/连接的值</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h1 id="自定义变量"><a href="#自定义变量" class="headerlink" title="自定义变量"></a>自定义变量</h1><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"># 自定义变量</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">说明：变量由用户自定义，不由系统直接提供，</span></span><br><span class="line"><span class="comment">使用方式相对灵活，使用较多</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">使用步骤：</span></span><br><span class="line"><span class="comment">1. 声明</span></span><br><span class="line"><span class="comment">2. 赋值</span></span><br><span class="line"><span class="comment">3. 使用（查看，比较，运算等）</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 用户变量</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">作用域：针对当前会话/连接有效，同于会话变量的作用域</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">可以应用在任何地方</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"># 用户变量声明时必须同时初始化（赋初值）</span><br><span class="line"># 三种初始化方法</span><br><span class="line"><span class="keyword">SET</span> @用户变量名<span class="operator">=</span>值;</span><br><span class="line"><span class="keyword">SET</span> @用户变量名:<span class="operator">=</span>值;</span><br><span class="line"><span class="keyword">SELECT</span> @用户变量名:<span class="operator">=</span>值;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SET</span> <span class="variable">@v1</span><span class="operator">=</span><span class="number">20</span>;</span><br><span class="line"></span><br><span class="line"># 赋值或更新用户变量的值</span><br><span class="line"><span class="keyword">SET</span> @用户变量名<span class="operator">=</span>值;</span><br><span class="line"><span class="keyword">SET</span> @用户变量名:<span class="operator">=</span>值;</span><br><span class="line"><span class="keyword">SELECT</span> @用户变量名:<span class="operator">=</span>值;</span><br><span class="line"># 下面这种方式也可以用来赋值，只要保证选则出的结果是一个值而不是列表即可</span><br><span class="line"><span class="keyword">SELECT</span> 字段 <span class="keyword">INTO</span> @变量名</span><br><span class="line"><span class="keyword">FROM</span> 表;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SET</span> <span class="variable">@v1</span>:<span class="operator">=</span><span class="number">35</span>;</span><br><span class="line"></span><br><span class="line"># 使用<span class="operator">/</span>查看用户变量值</span><br><span class="line"><span class="keyword">SELECT</span> @用户变量名;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="variable">@v1</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 局部变量</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">作用域：只在局部有效，即定义它的begin end中有效</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">应用在begin end中，并且只能在其中的第一句位置</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"># 声明：</span><br><span class="line"><span class="keyword">DECLARE</span> 变量名 数据类型;</span><br><span class="line"># 声明并初始化</span><br><span class="line"><span class="keyword">DECLARE</span> 变量名 数据类型 <span class="keyword">DEFAULT</span> 值;</span><br><span class="line"></span><br><span class="line"># 赋值，与用户变量的区别在于不需要在变量名前加@了(<span class="keyword">SELECT</span>除外)</span><br><span class="line"><span class="keyword">SET</span> 局部变量名<span class="operator">=</span>值;</span><br><span class="line"><span class="keyword">SET</span> 局部变量名:<span class="operator">=</span>值;</span><br><span class="line"><span class="keyword">SELECT</span> @局部变量名:<span class="operator">=</span>值;</span><br><span class="line"># 下面这种方式也可以用来赋值，只要保证选则出的结果是一个值而不是列表即可（不需要加@）</span><br><span class="line"><span class="keyword">SELECT</span> 字段 <span class="keyword">INTO</span> 局部变量名</span><br><span class="line"><span class="keyword">FROM</span> 表;</span><br><span class="line"></span><br><span class="line"># 使用</span><br><span class="line"><span class="keyword">SELECT</span> 局部变量名;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>9-视图</title>
      <link href="/2021/04/02/9-%E8%A7%86%E5%9B%BE/"/>
      <url>/2021/04/02/9-%E8%A7%86%E5%9B%BE/</url>
      
        <content type="html"><![CDATA[<h1 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h1><h2 id="含义"><a href="#含义" class="headerlink" title="含义"></a>含义</h2><p>虚拟表，可以和普通表一样使用。MySQL5.1版本出现的新特性，是通过表动态生成的数据，也就是说行和列的数据都来自定义识图的查询中使用的表，只保存sql逻辑，不保存查询结果</p><p>类似于Java中包装一个方法/函数</p><h3 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h3><ul><li>多个地方用到同样的查询结果</li><li>该查询结果使用的sql语句较为复杂</li></ul><h2 id="视图的创建"><a href="#视图的创建" class="headerlink" title="视图的创建"></a>视图的创建</h2><h3 id="视图的好处"><a href="#视图的好处" class="headerlink" title="视图的好处"></a>视图的好处</h3><ul><li>有利于重用sql语句</li><li>简化复杂的sql操作，不必知道它的查询细节</li><li>保护数据，提高安全性</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"># 视图的创建</span><br><span class="line"></span><br><span class="line">USE myemployees;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">语法：</span></span><br><span class="line"><span class="comment">CREATE VIEW 视图名</span></span><br><span class="line"><span class="comment">AS </span></span><br><span class="line"><span class="comment">查询语句;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 查询邮箱中包含a字符的员工名，部门名，和工种信息</span><br><span class="line"></span><br><span class="line"># 创建视图（这里使用的sql92连接查询方法，还可以使用sql99 <span class="keyword">JOIN</span> <span class="keyword">ON</span>）</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> v1</span><br><span class="line"><span class="keyword">AS</span></span><br><span class="line"><span class="keyword">SELECT</span> CONCAT(first_name,<span class="string">&#x27; &#x27;</span>,last_name) 姓名, department_name 部门名,job_title 工种,email </span><br><span class="line"><span class="keyword">FROM</span> employees e,jobs j, departments d</span><br><span class="line"><span class="keyword">WHERE</span> e.`job_id`<span class="operator">=</span>j.`job_id` <span class="keyword">AND</span> e.`department_id`<span class="operator">=</span>d.`department_id` ;</span><br><span class="line"># 使用视图</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> v1 <span class="keyword">WHERE</span> email <span class="keyword">LIKE</span> <span class="string">&#x27;%a%&#x27;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 查询各部门的平均工资级别</span><br><span class="line"># 首先创建视图查看每个部门的平均工资</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> v2</span><br><span class="line"><span class="keyword">AS</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">AVG</span>(salary) ag,department_id id</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> department_id;</span><br><span class="line"># 利用视图查询各个部门的平均工资等级</span><br><span class="line"><span class="keyword">SELECT</span> department_name 部门名称,ag 平均工资 <span class="keyword">FROM</span> v2</span><br><span class="line"><span class="keyword">JOIN</span> departments <span class="keyword">ON</span> id<span class="operator">=</span>department_id</span><br></pre></td></tr></table></figure><h2 id="视图的修改"><a href="#视图的修改" class="headerlink" title="视图的修改"></a>视图的修改</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"># 视图的修改</span><br><span class="line"></span><br><span class="line"># 方式一</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">这种方法表示如果视图存在，就根据后续的语句进行修改，如果不存在就新建视图</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">CREATE OR REPLACE VIEW 视图名</span></span><br><span class="line"><span class="comment">AS</span></span><br><span class="line"><span class="comment">查询语句;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> v2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">OR</span> REPLACE <span class="keyword">VIEW</span> v2</span><br><span class="line"><span class="keyword">AS</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">AVG</span>(salary),job_id</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> job_id;</span><br><span class="line"></span><br><span class="line"># 方式二</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">语法：</span></span><br><span class="line"><span class="comment">ALTER VIEW 视图名</span></span><br><span class="line"><span class="comment">AS</span></span><br><span class="line"><span class="comment">查询语句;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">VIEW</span> v2 </span><br><span class="line"><span class="keyword">AS</span> </span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">AVG</span>(salary),department_id</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> department_id;</span><br></pre></td></tr></table></figure><h2 id="视图删除-查看"><a href="#视图删除-查看" class="headerlink" title="视图删除,查看"></a>视图删除,查看</h2><p>注意，这里视图的更新表示的是向已经创建好的视图中插入，修改或删除数据，而不是对视图的格式进行修改。视图格式的修改在之前已经提到过了</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"># 视图的删除</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">语法：</span></span><br><span class="line"><span class="comment">DROP VIEW 视图名,视图名,...</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">允许一次删除多个，但删除需要具备权限</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">VIEW</span> v1,v2;</span><br><span class="line"></span><br><span class="line"># 查看视图结构</span><br><span class="line"><span class="keyword">DESC</span> v1; </span><br><span class="line"># 或者</span><br><span class="line"><span class="keyword">SHOW</span> <span class="keyword">CREATE</span> <span class="keyword">VIEW</span> v1;</span><br></pre></td></tr></table></figure><h2 id="视图的更新"><a href="#视图的更新" class="headerlink" title="视图的更新"></a>视图的更新</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"># 视图的更新</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">OR</span> REPLACE <span class="keyword">VIEW</span> v3</span><br><span class="line"><span class="keyword">AS</span> </span><br><span class="line"><span class="keyword">SELECT</span> last_name,email</span><br><span class="line"><span class="keyword">FROM</span> employees;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> v3;</span><br><span class="line"></span><br><span class="line"># 简单视图支持增删改,并且增删改视图之后，会对利用到的原表进行更新</span><br><span class="line"># 显然这是不安全的，所以我们一般会为视图设置权限，避免对其进行增删改操作，而是只查模式</span><br><span class="line"># 添加</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> v3 <span class="keyword">VALUES</span>(<span class="string">&#x27;Leslie&#x27;</span>,<span class="string">&#x27;2333@gmail.com&#x27;</span>);</span><br><span class="line"># 修改</span><br><span class="line">UPDATE v3 <span class="keyword">SET</span> email<span class="operator">=</span><span class="string">&#x27;@qq.com&#x27;</span> <span class="keyword">WHERE</span> last_name<span class="operator">=</span><span class="string">&#x27;Leslie&#x27;</span>;</span><br><span class="line"># 删除</span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> v3 <span class="keyword">WHERE</span> last_name<span class="operator">=</span><span class="string">&#x27;Leslie&#x27;</span>;</span><br><span class="line"></span><br><span class="line"># 具备以下特点的视图不允许更新</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">1. 包含以下关键字的sql语句：分组函数，DISTINCT.GROUP BY,HAVING,UNION</span></span><br><span class="line"><span class="comment">2. 常量视图</span></span><br><span class="line"><span class="comment">3. SELECT 中包含子查询</span></span><br><span class="line"><span class="comment">4. JOIN</span></span><br><span class="line"><span class="comment">5. FROM一个不能更新的视图</span></span><br><span class="line"><span class="comment">6. WHERE字句的子查询引用了FROM字句中的表</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>8-TCL事务控制语言</title>
      <link href="/2021/04/02/8-TCL%E4%BA%8B%E5%8A%A1%E6%8E%A7%E5%88%B6%E8%AF%AD%E8%A8%80/"/>
      <url>/2021/04/02/8-TCL%E4%BA%8B%E5%8A%A1%E6%8E%A7%E5%88%B6%E8%AF%AD%E8%A8%80/</url>
      
        <content type="html"><![CDATA[<h1 id="TCL语言-事务控制语言"><a href="#TCL语言-事务控制语言" class="headerlink" title="TCL语言 事务控制语言"></a>TCL语言 事务控制语言</h1><p><strong>Transaction Control Language 事务控制语言</strong></p><h2 id="事务："><a href="#事务：" class="headerlink" title="事务："></a>事务：</h2><p>一个或一组sql语句组成的一个执行单元，这个执行单元要么全部执行，要么全部不执行。每条sql语句都是相互依赖的<br>整个单元作为一个不可分割的整体，如果单元中某条sql语句执行失败或者产生错误，则整个单元将会回滚。所有收到影响<br>的数据将会返回到事务开始以前的状态。如果单元内所有语句均正常执行，则事务被成功执行</p><h3 id="案例：转账事务"><a href="#案例：转账事务" class="headerlink" title="案例：转账事务"></a>案例：转账事务</h3><p>转账过程分为：1. 付款方余额修改 2. 收款方余额修改<br>整个事务中两条语句必须全部正常执行，或者都不执行，否则就会发生逻辑上的错误</p><h3 id="事务的ACID实现"><a href="#事务的ACID实现" class="headerlink" title="事务的ACID实现"></a>事务的ACID实现</h3><ol><li>Atomicity 原子性：原子性是指事务是一个不可分割的工作单元，事务中的操作要么都发生，要么都不发生</li><li>Consistency 一致性：事务必须使数据库从一个一致性状态变换到另外一个一致性状态</li><li>Isolation 隔离性：事务的隔离性是指一个事务的执行不能被其他事务干扰，即一个事务内部的操作及使用的数据对并发的其他事务是隔离的，并发执行的各个事务之间不能互相干扰</li><li>Durability 持久性：持久性指一个事务一旦被提交，它对数据库中数据的改变就是永久性的，接下来的其他操作和数据库故障不应该对其有任何影响</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"># TCL语言 事务控制语言</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Transaction Control Language 事务控制语言</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">事务：</span></span><br><span class="line"><span class="comment">一个或一组sql语句组成的一个执行单元，这个执行单元要么全部执行，要么全部不执行。每条sql语句都是相互依赖的</span></span><br><span class="line"><span class="comment">整个单元作为一个不可分割的整体，如果单元中某条sql语句执行失败或者产生错误，则整个单元将会回滚。所有收到影响</span></span><br><span class="line"><span class="comment">的数据将会返回到事务开始以前的状态。如果单元内所有语句均正常执行，则事务被成功执行</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">案例：转账事务</span></span><br><span class="line"><span class="comment">转账过程分为：1. 付款方余额修改 2. 收款方余额修改</span></span><br><span class="line"><span class="comment">整个事务中两条语句必须全部正常执行，或者都不执行，否则就会发生逻辑上的错误</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">事务的ACID实现</span></span><br><span class="line"><span class="comment">1. Atomicity 原子性：原子性是指事务是一个不可分割的工作单元，事务中的操作要么都发生，要么都不发生</span></span><br><span class="line"><span class="comment">2. Consistency 一致性：事务必须使数据库从一个一致性状态变换到另外一个一致性状态</span></span><br><span class="line"><span class="comment">3. Isolation 隔离性：事务的隔离性是指一个事务的执行不能被其他事务干扰，即一个事务内部</span></span><br><span class="line"><span class="comment"> 的操作及使用的数据对并发的其他事务是隔离的，并发执行的各个事务之间不能互相干扰</span></span><br><span class="line"><span class="comment">4. Durability 持久性：持久性指一个事务一旦被提交，它对数据库中数据的改变就是永久性的，接下来的其他操作和数据库故障</span></span><br><span class="line"><span class="comment">不应该对其有任何影响</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 存储引擎概念</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">概念：再MySQL中的数据用各种不同的技术存储再文件（或内存）中</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">可以通过show engines;查看支持的存储引擎</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">不是所有的存储引擎都支持事务，主流的存储引擎有：INNODB,MYISAM,MEMORY</span></span><br><span class="line"><span class="comment">其中INNODB支持事务，另外两种不支持</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">show</span> engines;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 事务的创建</span><br><span class="line"># 隐式事务：事务没有明显的开启和结束标记（例如：<span class="keyword">INSERT</span>,UPDATE,<span class="keyword">DELETE</span>语句）</span><br><span class="line"># 隐式事务在执行过程中自动提交功能是始终开启的</span><br><span class="line"><span class="keyword">SHOW</span> VARIABLES <span class="keyword">LIKE</span> <span class="string">&#x27;autocommit&#x27;</span>;  # 查看自动提交功能的状态</span><br><span class="line"></span><br><span class="line"># 显式事务：事务具有明显的开启和结束标记，前提是已经关闭<span class="operator">/</span>禁用自动提交功能，否则该事务内部有多个分立的事务不符合条件</span><br><span class="line"># 前提：禁用自动提交</span><br><span class="line"><span class="keyword">SET</span> autocommit<span class="operator">=</span><span class="number">0</span>;  # 禁用自动提交功能</span><br><span class="line"># 步骤一：开启事务</span><br><span class="line"><span class="keyword">START</span> TRANSACTION;  # 在禁用自动提交功能时，就已经默认开启事务了，所以这条语句可以省略</span><br><span class="line"># 步骤二：编写事务中的<span class="keyword">sql</span>语句（<span class="keyword">SELECT</span>,<span class="keyword">INSERT</span>,UPDATE,<span class="keyword">DELETE</span>等DML，DQL语言。 DDL语言没有事务之说）</span><br><span class="line">语句<span class="number">1</span>；</span><br><span class="line">语句<span class="number">2</span>；</span><br><span class="line">...</span><br><span class="line"># 步骤三：结束事务</span><br><span class="line"><span class="keyword">COMMIT</span>; # 提交事务</span><br><span class="line"><span class="keyword">ROLLBACK</span>;  # 回滚事务</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 实例:银行转账事务</span><br><span class="line"></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> bank;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> bank(</span><br><span class="line">userName <span class="type">VARCHAR</span>(<span class="number">20</span>) ,</span><br><span class="line">balance <span class="type">INTEGER</span> UNSIGNED </span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> bank <span class="keyword">VALUES</span>(<span class="string">&#x27;Lily&#x27;</span>,<span class="number">1800</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> bank <span class="keyword">VALUES</span>(<span class="string">&#x27;Bob&#x27;</span>,<span class="number">350</span>);</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> bank;</span><br><span class="line"># 转账事件</span><br><span class="line"><span class="keyword">SET</span> autocommit<span class="operator">=</span><span class="number">0</span>; </span><br><span class="line"><span class="keyword">START</span> TRANSACTION;</span><br><span class="line">UPDATE bank <span class="keyword">SET</span> balance<span class="operator">=</span><span class="number">1300</span> <span class="keyword">WHERE</span> userName<span class="operator">=</span><span class="string">&#x27;Lily&#x27;</span>;</span><br><span class="line">UPDATE bank <span class="keyword">SET</span> balance<span class="operator">=</span><span class="number">850</span> <span class="keyword">WHERE</span> userName<span class="operator">=</span><span class="string">&#x27;Bob&#x27;</span>;</span><br><span class="line"><span class="keyword">COMMIT</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> bank;</span><br></pre></td></tr></table></figure><h2 id="数据库隔离级别"><a href="#数据库隔离级别" class="headerlink" title="数据库隔离级别"></a>数据库隔离级别</h2><p>对于同时运行的多个事务，当这些事务访问数据库中相同的数据时，如果没有采取必要的隔离机制，就会导致各种并发问题</p><ul><li>脏读：对于两个事务T1，T2。T1读取了已经被T2更新但还<strong>没有被提交</strong>的字段之后，若T2回滚，T1读取的内容就是临时且无效的</li><li>不可重复读：对于两个事务T1，T2。 T1读取了一个字段，然后T2<strong>更新</strong>了该字段，之后T1再次读取同一字段，值就不同了</li><li>幻读：对于两个事务T1，T2。T1从一个表中读取一个字段，然后T2在该表中<strong>插入</strong>了一些新的行，如果T1再次读取同一个表，就会多出几行</li></ul><h3 id="数据库事务的隔离性："><a href="#数据库事务的隔离性：" class="headerlink" title="数据库事务的隔离性："></a>数据库事务的隔离性：</h3><p>数据库系统必须具有隔离并发运行的各个事务的能力，使他们不会相互影响，避免各种并发问题</p><h3 id="隔离级别"><a href="#隔离级别" class="headerlink" title="隔离级别"></a>隔离级别</h3><p>一个事务与其他事务的隔离程度称为隔离级别。数据库规定了多种事务隔离级别，不同隔离级别对应不同的干扰程度，隔离级别越高，数据一致性就越好，但并发性就越弱</p><h3 id="数据库提供的四种事务隔离级别"><a href="#数据库提供的四种事务隔离级别" class="headerlink" title="数据库提供的四种事务隔离级别"></a>数据库提供的四种事务隔离级别</h3><table><thead><tr><th>隔离级别</th><th>描述</th></tr></thead><tbody><tr><td>READ UNCOMMITTED（读未提交数据）</td><td>允许事务读取未被其他事务提交的变更。脏读，不可重复读，幻读问题都会出现</td></tr><tr><td>READ COMMITTED（读已提交数据）</td><td>只允许事务读取已经被其他事务提交的变更，可以避免脏读，但不可重复读，幻读问题仍可能产生</td></tr><tr><td>REPEATABLE READ（可重复读）</td><td>确保事务可以多次从一个字段中读取相同的值，在这个事务持续期间，禁止其他事务对这个字段进行更新，可以避免脏读和不可重复度，但幻读问题仍然存在</td></tr><tr><td>SERIALIZABLE（串行化）</td><td>确保事务可以从一个表中读取相同的行，在这个事务持续期间，禁止其他事务对该表执行插入，更新和删除操作，所有并发问题都可以解决，但性能十分低下</td></tr></tbody></table><p>Oracle支持两种隔离级别：READ COMMITED，SERIALIZABLE。默认情况下事务隔离级别为：READ COMMITTED</p><p>MySQL支持全部四种事务隔离级别，默认事务隔离级别为REPEATABLE READ</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># 事务隔离相关的语句</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> 每启动一个MySQL程序，就会获得一个单独的数据库连接，每个数据库连接都有一个全局变量</span></span><br><span class="line"><span class="comment"> @@tx_isolation,表示当前的事务隔离级别</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"># 查看当前事务隔离级别：</span><br><span class="line"><span class="keyword">SELECT</span> @<span class="variable">@tx</span>_isolation;</span><br><span class="line"># 设置当前MySQL连接的事务隔离级别</span><br><span class="line"><span class="keyword">SET</span> TRANSACTION ISOLATION LEVEL READ COMMITTED;</span><br><span class="line"># 设置数据库系统的全局的隔离级别</span><br><span class="line"><span class="keyword">SET</span> <span class="keyword">GLOBAL</span> TRANSACTION ISOLATION LEVEL READ COMMITTED;</span><br></pre></td></tr></table></figure><h1 id="回滚点"><a href="#回滚点" class="headerlink" title="回滚点"></a>回滚点</h1><h4 id="savepoint"><a href="#savepoint" class="headerlink" title="savepoint"></a>savepoint</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"># 回滚点<span class="operator">/</span>保存点  <span class="keyword">SAVEPOINT</span> </span><br><span class="line"></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> classone;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> classone(</span><br><span class="line">id <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY auto_increment,</span><br><span class="line">stu_name <span class="type">VARCHAR</span>(<span class="number">20</span>),</span><br><span class="line">score <span class="type">INT</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> classone <span class="keyword">VALUES</span>(<span class="keyword">NULL</span>,<span class="string">&#x27;Lily&#x27;</span>,<span class="number">95</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> classone <span class="keyword">VALUES</span>(<span class="keyword">NULL</span>,<span class="string">&#x27;Leslie&#x27;</span>,<span class="number">45</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> classone <span class="keyword">VALUES</span>(<span class="keyword">NULL</span>,<span class="string">&#x27;Hugo&#x27;</span>,<span class="number">78</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> classone <span class="keyword">VALUES</span>(<span class="keyword">NULL</span>,<span class="string">&#x27;Jax&#x27;</span>,<span class="number">29</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> classone <span class="keyword">VALUES</span>(<span class="keyword">NULL</span>,<span class="string">&#x27;Herry&#x27;</span>,<span class="number">76</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> classone;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 回滚点应用</span><br><span class="line"><span class="keyword">SET</span> autocommit<span class="operator">=</span><span class="number">0</span>;</span><br><span class="line"><span class="keyword">START</span> TRANSACTION;</span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> classone <span class="keyword">WHERE</span> id<span class="operator">=</span><span class="number">2</span>;</span><br><span class="line"><span class="keyword">SAVEPOINT</span> a; # 设置回滚<span class="operator">/</span>保存点</span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> classone <span class="keyword">WHERE</span> id<span class="operator">=</span><span class="number">4</span>;</span><br><span class="line"><span class="keyword">ROLLBACK</span> <span class="keyword">TO</span> a;  # 回滚到保存点</span><br><span class="line"></span><br><span class="line"># 可以看到<span class="number">2</span>成功被删除，但是<span class="number">4</span>已经被回滚了，所以仍然在数据库内</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> classone;</span><br></pre></td></tr></table></figure><h2 id="delete和truncate在事务中的区别"><a href="#delete和truncate在事务中的区别" class="headerlink" title="delete和truncate在事务中的区别"></a>delete和truncate在事务中的区别</h2><p>DELETE支持回滚，在回滚后删除的数据仍然在数据库中，但是TRUNCATE不支持回滚，即使最后采用回滚的方式，数据依然会被删除</p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>7-标识列或自增长列</title>
      <link href="/2021/03/28/7-%E6%A0%87%E8%AF%86%E5%88%97%E6%88%96%E8%87%AA%E5%A2%9E%E9%95%BF%E5%88%97/"/>
      <url>/2021/03/28/7-%E6%A0%87%E8%AF%86%E5%88%97%E6%88%96%E8%87%AA%E5%A2%9E%E9%95%BF%E5%88%97/</url>
      
        <content type="html"><![CDATA[<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"># 标识列</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">又称为自增长列</span></span><br><span class="line"><span class="comment">含义：可以不用手动插入值，系统提供默认的序列值</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">特点：</span></span><br><span class="line"><span class="comment">1. 标识列必须和键搭配（主键，唯一，外键等）</span></span><br><span class="line"><span class="comment">2. 一个表中只能有一个标识列</span></span><br><span class="line"><span class="comment">3. 标识列的类型只能是数值型（整型+浮点型）</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"># 创建表时，设置某列为标识列</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> tab_identify;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> tab_identify(</span><br><span class="line">id <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY AUTO_INCREMENT,</span><br><span class="line">NAME <span class="type">VARCHAR</span>(<span class="number">20</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">TRUNCATE</span> <span class="keyword">TABLE</span> tab_identify;</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> tab_identify <span class="keyword">VALUES</span>(<span class="keyword">NULL</span>,<span class="string">&#x27;Leslie&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> tab_identify <span class="keyword">VALUES</span>(<span class="keyword">NULL</span>,<span class="string">&#x27;Jesie&#x27;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> tab_identify;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SET</span> auto_increment_increment<span class="operator">=</span><span class="number">3</span>;  # 设置步长，修改为每次增加<span class="number">3</span>个</span><br><span class="line"><span class="keyword">SHOW</span> VARIABLES <span class="keyword">LIKE</span> <span class="string">&#x27;%auto_increment%&#x27;</span>;  # 查看当前系统步长和起始值</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 修改表时设置标识列,起始本质还是修改表的类型</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> tab_identify MODIFY <span class="keyword">COLUMN</span> id <span class="type">INT</span> <span class="keyword">UNIQUE</span> AUTO_INCREMENT;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>6-数据类型与常见约束</title>
      <link href="/2021/03/28/6-%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E4%B8%8E%E5%B8%B8%E8%A7%81%E7%BA%A6%E6%9D%9F/"/>
      <url>/2021/03/28/6-%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E4%B8%8E%E5%B8%B8%E8%A7%81%E7%BA%A6%E6%9D%9F/</url>
      
        <content type="html"><![CDATA[<h1 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h1><h2 id="整型"><a href="#整型" class="headerlink" title="整型"></a>整型</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"># 常见数据类型</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">数值型：</span></span><br><span class="line"><span class="comment">整型</span></span><br><span class="line"><span class="comment">小数：</span></span><br><span class="line"><span class="comment">定点数</span></span><br><span class="line"><span class="comment">浮点数</span></span><br><span class="line"><span class="comment">字符型：</span></span><br><span class="line"><span class="comment">较短文本：CHAR,VARCHAR</span></span><br><span class="line"><span class="comment">较长文本：TEXT,BLOB(较长的二进制数据)</span></span><br><span class="line"><span class="comment">日期型：</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"># 一，整型</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">分类：</span></span><br><span class="line"><span class="comment">TINYINT,SMALLINT,MEDIUMINT,INT/INTEGER,BIGINT</span></span><br><span class="line"><span class="comment">字节数从左至右以此增大，分别是1，2，3，4，8字节 </span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">特点：</span></span><br><span class="line"><span class="comment">1. 不设置无符号类型，默认采用有符号类型。如果想设置无符号类型，需要添加UNSIGNED关键字</span></span><br><span class="line"><span class="comment">2. 如果插入数值超出范围会报out of range 异常，并且插入临界值</span></span><br><span class="line"><span class="comment">3. 如果不设置长度，会添加默认长度</span></span><br><span class="line"><span class="comment">4. 注意，这里设置的长度只是显示的长度，文本实际占用字节数并没有改变</span></span><br><span class="line"><span class="comment">仍然是按照规定大小创建，设置了长度后，如果输入内容超出长度限制，内容没有变化</span></span><br><span class="line"><span class="comment">，如果长度不足，剩余位数会用0填充</span></span><br><span class="line"><span class="comment">5. 即使用0填充后，输出内容我们直接也是看不到0的，想要看到0作为填充位，需要使用</span></span><br><span class="line"><span class="comment">ZEROFILL关键字，并且这个关键字会默认设置整型为无符号整型</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># <span class="number">1.</span> 如何设置无符号和有符号</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> tab_int;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> tab_int(</span><br><span class="line">t1 <span class="type">INT</span>,</span><br><span class="line">t2 <span class="type">INT</span> UNSIGNED,</span><br><span class="line">t3 <span class="type">INT</span>(<span class="number">8</span>),</span><br><span class="line">t4 <span class="type">INT</span>(<span class="number">5</span>) ZEROFILL</span><br><span class="line">);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> tab_int <span class="keyword">VALUES</span>(<span class="number">-15498</span>,<span class="number">45454</span>,<span class="number">-445</span>,<span class="number">123</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">DESC</span> tab_int;</span><br><span class="line"><span class="keyword">SELECT</span><span class="operator">*</span> <span class="keyword">FROM</span> tab_int;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 二，小数</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">类型：</span></span><br><span class="line"><span class="comment">    浮点数类型：</span></span><br><span class="line"><span class="comment">        FLOAT(M,D) 4byte</span></span><br><span class="line"><span class="comment">        DOUBLE(M,D) 8byte </span></span><br><span class="line"><span class="comment">    定点数类型：</span></span><br><span class="line"><span class="comment">        DEC(M,D)/DECIMAL(M,D)   （M+2）byte</span></span><br><span class="line"><span class="comment">        （最大取值范围和DOUBLE相同，给定decimal的有效值范围</span></span><br><span class="line"><span class="comment">        由M和D决定，精确度较高与DOUBLE）</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">特点：</span></span><br><span class="line"><span class="comment">1. M表示的是小数点和整数位数的和，小数为是2，所以整数位最多只能是3，所以超过后用最大值999.99代替</span></span><br><span class="line"><span class="comment">2. D表示的含义就是小数点保留位数，不足会自动补全，超出会四舍五入</span></span><br><span class="line"><span class="comment">3. M和D都可以省略</span></span><br><span class="line"><span class="comment">省略M和D后，DECIMAL默认填充(10,0)</span></span><br><span class="line"><span class="comment">FLOAT和DOUBLE会根据插入数据自动调整</span></span><br><span class="line"><span class="comment">4. 定点型精确度较高，如果插入数据要求较高精确度例如:货币运算可以采用</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> tab_float;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> tab_float(</span><br><span class="line">f1 <span class="type">FLOAT</span>(<span class="number">5</span>,<span class="number">2</span>),</span><br><span class="line">f2 <span class="keyword">DOUBLE</span>(<span class="number">5</span>,<span class="number">2</span>),</span><br><span class="line">f3 <span class="type">DECIMAL</span>(<span class="number">5</span>,<span class="number">2</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> tab_float <span class="keyword">VALUES</span>(<span class="number">123.45</span>,<span class="number">123.45</span>,<span class="number">123.45</span>);   # 能够正常插入</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> tab_float <span class="keyword">VALUES</span>(<span class="number">123.4</span>,<span class="number">123.4</span>,<span class="number">123.4</span>);  # D表示的含义就是小数点保留位数，不足会自动补全，超出会四舍五入</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> tab_float <span class="keyword">VALUES</span>(<span class="number">123.456</span>,<span class="number">123.456</span>,<span class="number">123.456</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> tab_float <span class="keyword">VALUES</span>(<span class="number">1234.45</span>,<span class="number">1234.45</span>,<span class="number">1234.45</span>);  </span><br><span class="line"># M表示的是小数点和整数位数的和，小数为是<span class="number">2</span>，所以整数位最多只能是<span class="number">3</span>，所以超过后用最大值<span class="number">999.99</span>代替</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 选择类型的原则</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">所选择的类型越简单越好</span></span><br><span class="line"><span class="comment">所选择的类型越小越好</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="字符型"><a href="#字符型" class="headerlink" title="字符型"></a>字符型</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"># 串数据（文本类型<span class="operator">+</span>二进制数据）</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">较短的文本：</span></span><br><span class="line"><span class="comment">CHAR(M)  表示固定长度字符</span></span><br><span class="line"><span class="comment">VARCHAR(M)  表示可变长度的字符</span></span><br><span class="line"><span class="comment">M 表示最长的字符数,CHAR可以省略，默认为1.VARCHAR不可以省略</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">较长的文本：</span></span><br><span class="line"><span class="comment">TEXT</span></span><br><span class="line"><span class="comment">BLOB(较大的二进制)</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">还有binary和varbinary用于保存较短的二进制</span></span><br><span class="line"><span class="comment">enum用于保存枚举</span></span><br><span class="line"><span class="comment">set用于保存集合</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">特点</span></span><br><span class="line"><span class="comment">CHAR比较耗费空间，但是效率较高</span></span><br><span class="line"><span class="comment">VARCHAR更节省空间，效率略低于CHAR</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> tab_char;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> tab_char(</span><br><span class="line">c1 ENUM(<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;d&#x27;</span>)  # 枚举类型，同样是字符型，只能插入枚举的内容</span><br><span class="line"># 不区分大小写</span><br><span class="line"></span><br><span class="line">);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> tab_char <span class="keyword">VALUES</span>(<span class="string">&#x27;a&#x27;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># <span class="keyword">SET</span>类型类似枚举类型，但是能一次向一个单元插入多个值</span><br><span class="line"># 同样不区分大小写</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> tab_set;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> tab_set(</span><br><span class="line">s1 <span class="keyword">SET</span>(<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;d&#x27;</span>)</span><br><span class="line">);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> tab_set <span class="keyword">VALUES</span>(<span class="string">&#x27;a&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> tab_set <span class="keyword">VALUES</span>(<span class="string">&#x27;b&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> tab_set <span class="keyword">VALUES</span>(<span class="string">&#x27;a,b,c&#x27;</span>);</span><br></pre></td></tr></table></figure><h2 id="日期型"><a href="#日期型" class="headerlink" title="日期型"></a>日期型</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"># 日期型</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">DATE 4字节  只能保存日期</span></span><br><span class="line"><span class="comment">TIME 3字节  只能保存时间</span></span><br><span class="line"><span class="comment">YEAR 1字节  只能保存年</span></span><br><span class="line"><span class="comment">DATETIME 8字节 保存日期和时间 1000-9999</span></span><br><span class="line"><span class="comment">TIMESTAMP 4字节 时间戳 1970-2038</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">TIMESTAMP支持的时间范围较小，但是受实际的时区和MySQL版本影响，更能反映出实际的日期</span></span><br><span class="line"><span class="comment">DATETIME 则只能反映插入时的当时地区</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> tab_date;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> tab_date(</span><br><span class="line">t1 DATETIME,</span><br><span class="line">t2 <span class="type">TIMESTAMP</span></span><br><span class="line">);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> tab_date <span class="keyword">VALUES</span>(NOW(),NOW());</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> tab_date;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">SHOW</span> VARIABLES <span class="keyword">LIKE</span> <span class="string">&#x27;time_zone&#x27;</span>;  # 显示当前时区</span><br><span class="line"><span class="keyword">SET</span> time_zone<span class="operator">=</span><span class="string">&#x27;+9:00&#x27;</span>;  # 修改当前时区，可以看到修改完时区后，<span class="type">TIMESTAMP</span>数据跟随时区变化，DATETIME数据不变化</span><br></pre></td></tr></table></figure><hr><h1 id="常见约束介绍"><a href="#常见约束介绍" class="headerlink" title="常见约束介绍"></a>常见约束介绍</h1><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br></pre></td><td class="code"><pre><span class="line"># 常见的约束介绍</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">约束含义：一种限制，用于限制表中的数据,为了保证表中数据的准确和可靠性（一致性）</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">CREATE TABLE text(</span></span><br><span class="line"><span class="comment">字段名 字段类型 约束</span></span><br><span class="line"><span class="comment">);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">六大约束：</span></span><br><span class="line"><span class="comment">NOT NULL:非空约束，保证该字段的值不能为空</span></span><br><span class="line"><span class="comment">DEFAULT:默认约束，用于该字段有默认值</span></span><br><span class="line"><span class="comment">PRIMARY KEY:主键，用于保证该字段的值具有唯一性并且非空</span></span><br><span class="line"><span class="comment">UNIQUE:保证该字段的值具有唯一性，但是可以为空值</span></span><br><span class="line"><span class="comment">CHECK:【Mysql不支持】检查约束，比如年龄，性别可以用来限制</span></span><br><span class="line"><span class="comment">FOREIGN KEY:外键，用于限制两个表的关系，用于保证该字段的值必须来自主表的关联列的值</span></span><br><span class="line"><span class="comment">（在从表添加外键约束，用于引用主表中的某列的值）</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">添加约束的时机：</span></span><br><span class="line"><span class="comment">1. 新建表时</span></span><br><span class="line"><span class="comment">2. 修改表时</span></span><br><span class="line"><span class="comment">约束的添加分类：</span></span><br><span class="line"><span class="comment">列级约束：六大约束语法都支持，但外键约束没有实际效果</span></span><br><span class="line"><span class="comment">表级约束：除了非空，默认约束，其他都支持</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 创建表时添加约束</span><br><span class="line"></span><br><span class="line"># 创建列级约束</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">直接在字段名和类型后面追加，约束类型即可</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">只支持：默认，非空，主键，唯一</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">CREATE</span> DATABASE students;</span><br><span class="line">USE students;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> stu_info(</span><br><span class="line">id <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY,  # 添加主键约束</span><br><span class="line">stuName <span class="type">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,  # 非空约束</span><br><span class="line">gender <span class="type">CHAR</span>(<span class="number">1</span>) <span class="keyword">CHECK</span>(gender<span class="operator">=</span><span class="string">&#x27;男&#x27;</span> <span class="keyword">OR</span> gender<span class="operator">=</span><span class="string">&#x27;女&#x27;</span>),  # 检查约束，在Mysql中没有效果</span><br><span class="line">seat <span class="type">INT</span> <span class="keyword">UNIQUE</span>,  # 唯一约束</span><br><span class="line">age <span class="type">INT</span> <span class="keyword">DEFAULT</span> <span class="number">18</span>,  # 默认约束</span><br><span class="line">majorID <span class="type">INT</span> <span class="keyword">REFERENCES</span> major(id)  # 外键约束，没有实际效果</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> major(</span><br><span class="line">id <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">majorName <span class="type">VARCHAR</span>(<span class="number">20</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 查看stuinfo表中所有的索引，包括主键，外键，唯一</span><br><span class="line"><span class="keyword">SHOW</span> INDEX <span class="keyword">FROM</span> stu_info;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 添加表级约束</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">语法：</span></span><br><span class="line"><span class="comment">在各个字段的最下面添加</span></span><br><span class="line"><span class="comment">【CONSTRAINT 约束名】 约束类型(字段名)</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">一般情况下，为了简便，我们只把外键放在表级约束中</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> stu_info;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> stu_info(</span><br><span class="line">id <span class="type">INT</span>,</span><br><span class="line">stuName <span class="type">VARCHAR</span>(<span class="number">20</span>) ,</span><br><span class="line">gender <span class="type">CHAR</span>(<span class="number">1</span>) ,</span><br><span class="line">seat <span class="type">INT</span> ,</span><br><span class="line">age <span class="type">INT</span> ,</span><br><span class="line">majorID <span class="type">INT</span>,</span><br><span class="line"></span><br><span class="line"><span class="keyword">CONSTRAINT</span> pk <span class="keyword">PRIMARY</span> KEY(id),  # 主键</span><br><span class="line"><span class="keyword">CONSTRAINT</span> uq <span class="keyword">UNIQUE</span>(seat),   # 唯一键</span><br><span class="line"><span class="keyword">CONSTRAINT</span> fk_stuinfo_major <span class="keyword">FOREIGN</span> KEY(majorid) <span class="keyword">REFERENCES</span> major(id)  # 外键</span><br><span class="line"></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 主键和唯一键的区别</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">1. 主键不允许为空，唯一键允许为空</span></span><br><span class="line"><span class="comment">2. 都允许组合键(只要列中有一项信息不同即可，完全相同仍旧不可以插入)不推荐使用</span></span><br><span class="line"><span class="comment">3. 主键需要用drop删除，modify不可以删除主键</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 外键</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">要求在从表设置外键关系</span></span><br><span class="line"><span class="comment">从表的外键列的类型和主表的关联列的类型要求一致或兼容</span></span><br><span class="line"><span class="comment">主表的关联列必须是一个KEY（主键/唯一键）</span></span><br><span class="line"><span class="comment">插入数据时，先插入主表，再插入从表</span></span><br><span class="line"><span class="comment">删除数据时，先删除从表，再删除主表</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 修改表时添加约束</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">列级约束：</span></span><br><span class="line"><span class="comment">ALTER TABLE 表名 MODIFY COLUMN 字段名 字段类型 新约束;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">表级约束</span></span><br><span class="line"><span class="comment">ALTER TABLE 表名 ADD 【CONSTRAINT 约束名】 约束类型(字段名);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> stu_info;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> stu_info(</span><br><span class="line">id <span class="type">INT</span>,</span><br><span class="line">stuName <span class="type">VARCHAR</span>(<span class="number">20</span>) ,</span><br><span class="line">gender <span class="type">CHAR</span>(<span class="number">1</span>) ,</span><br><span class="line">seat <span class="type">INT</span>,</span><br><span class="line">age <span class="type">INT</span> ,</span><br><span class="line">majorID <span class="type">INT</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"># 用列级约束修改</span><br><span class="line"># 与直接修改表的格式一样，都是重新定义表的类型然后直接再后面增加约束即可</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> stu_info MODIFY <span class="keyword">COLUMN</span> stuName <span class="type">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>;</span><br><span class="line"></span><br><span class="line"># 主键和唯一键等还可以用表级约束修改</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> stu_info <span class="keyword">ADD</span> <span class="keyword">PRIMARY</span> KEY(id);</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> stu_info <span class="keyword">ADD</span> <span class="keyword">UNIQUE</span>(id);</span><br><span class="line"></span><br><span class="line"># 外键只有用表记约束才有效果</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> stu_info <span class="keyword">ADD</span> <span class="keyword">CONSTRAINT</span> fk_stuinfo_major <span class="keyword">FOREIGN</span> KEY(majorid) <span class="keyword">REFERENCES</span> major(id);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 修改表时删除约束</span><br><span class="line"># 删除列级约束仍然向上面修改时一样，只需要不写，或者用<span class="keyword">NULL</span>代替即可</span><br><span class="line"># 修改表级约束需要用到<span class="keyword">DROP</span>关键字</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> stu_info <span class="keyword">DROP</span> <span class="keyword">PRIMARY</span> KEY;</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> stu_info <span class="keyword">DROP</span> INDEX seat;</span><br><span class="line"># 删除外键</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> stu_info <span class="keyword">DROP</span> <span class="keyword">FOREIGN</span> KEY fk_stuinfo_major;</span><br></pre></td></tr></table></figure><h4 id="设置级联更新-级联删除"><a href="#设置级联更新-级联删除" class="headerlink" title="设置级联更新/级联删除"></a>设置级联更新/级联删除</h4><p>添加外键时在最后加上<code>ON UPDATE CASCADE</code> , <code>ONDELETE CASCADE</code></p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>5-DDL数据定义语言</title>
      <link href="/2021/03/28/5-DDL%E6%95%B0%E6%8D%AE%E5%AE%9A%E4%B9%89%E8%AF%AD%E8%A8%80/"/>
      <url>/2021/03/28/5-DDL%E6%95%B0%E6%8D%AE%E5%AE%9A%E4%B9%89%E8%AF%AD%E8%A8%80/</url>
      
        <content type="html"><![CDATA[<h1 id="数据定义语言DDL"><a href="#数据定义语言DDL" class="headerlink" title="数据定义语言DDL"></a>数据定义语言DDL</h1><h3 id="用于库和表的管理"><a href="#用于库和表的管理" class="headerlink" title="用于库和表的管理"></a>用于库和表的管理</h3><ol><li>库的管理: 创建，修改，删除</li><li>表的管理: 创建 修改，删除</li></ol><p>创建：CREATE</p><p>修改：ALTER</p><p>删除：DROP</p><h1 id="库的管理"><a href="#库的管理" class="headerlink" title="库的管理"></a>库的管理</h1><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"># DDL语言</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">数据定义语言</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">用于库和表的管理</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">1. 库的管理</span></span><br><span class="line"><span class="comment">创建，修改，删除</span></span><br><span class="line"><span class="comment">2. 表的管理</span></span><br><span class="line"><span class="comment">创建 修改，删除</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">创建：CREATE</span></span><br><span class="line"><span class="comment">修改：ALTER</span></span><br><span class="line"><span class="comment">删除：DROP</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 一，库的管理</span><br><span class="line"># <span class="number">1.</span> 库的创建</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">语法：</span></span><br><span class="line"><span class="comment">CREATE DATABASE 库名;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> DATABASE text1;</span><br><span class="line"></span><br><span class="line"># 如果不存在就创建，如果存在就不执行</span><br><span class="line"><span class="keyword">CREATE</span> DATABASE IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> text1;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># <span class="number">2.</span> 库的修改（一般情况下不直接修改库。很容易导致数据丢失）</span><br><span class="line"># 更改库的字符集</span><br><span class="line"><span class="keyword">ALTER</span> DATABASE text1 <span class="type">CHARACTER</span> <span class="keyword">SET</span> gbk;</span><br><span class="line"></span><br><span class="line"># <span class="number">3.</span> 库的删除</span><br><span class="line"><span class="keyword">DROP</span> DATABASE text1;</span><br></pre></td></tr></table></figure><h1 id="表的管理"><a href="#表的管理" class="headerlink" title="表的管理"></a>表的管理</h1><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"># DDL表的管理</span><br><span class="line"></span><br><span class="line"># 表的创建</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">语法：</span></span><br><span class="line"><span class="comment">CREATE TABLE 表名(</span></span><br><span class="line"><span class="comment">列名1 列的类型(类型长度，可选) 【约束】</span></span><br><span class="line"><span class="comment">列名2 列的类型(类型长度，可选) 【约束】</span></span><br><span class="line"><span class="comment">...</span></span><br><span class="line"><span class="comment">列名3 列的类型(类型长度，可选) 【约束】</span></span><br><span class="line"><span class="comment">);</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> book(</span><br><span class="line">id <span class="type">INT</span>,</span><br><span class="line">bookname <span class="type">VARCHAR</span>(<span class="number">20</span>),</span><br><span class="line">price <span class="keyword">DOUBLE</span>,</span><br><span class="line">author_id <span class="type">INT</span>,</span><br><span class="line">publicDate DATETIME</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> author(</span><br><span class="line">id <span class="type">INT</span>,</span><br><span class="line">au_name <span class="type">VARCHAR</span>(<span class="number">20</span>),</span><br><span class="line">nation <span class="type">VARCHAR</span>(<span class="number">20</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 表的修改</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">语法：</span></span><br><span class="line"><span class="comment">ALTER TABLE 表名 ADD/DROP/MODIFY/CHANGE COLUMN 列名 【列类型 约束】;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"># 修改列名</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> book CHANGE <span class="keyword">COLUMN</span> publicDate pubDate DATETIME;  # <span class="keyword">COLUMN</span>可以省略</span><br><span class="line"># 修改类型</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> book MODIFY <span class="keyword">COLUMN</span> pubDate <span class="type">TIMESTAMP</span>;  # 修改pubDate列的类型为<span class="type">TIMESTAMP</span></span><br><span class="line"># 添加列</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> book <span class="keyword">ADD</span> <span class="keyword">COLUMN</span> annual <span class="keyword">DOUBLE</span>;  # 增加一个类型为<span class="keyword">DOUBLE</span>的annual列</span><br><span class="line"># 删除列</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> book <span class="keyword">DROP</span> <span class="keyword">COLUMN</span> annual;</span><br><span class="line"># 修改表名</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> author RENAME <span class="keyword">TO</span> book_author;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 表的删除</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">DROP TABLE 表名;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> auhor;</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> author;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 表的复制</span><br><span class="line"># 仅复制表的结构</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> copy_author <span class="keyword">LIKE</span> book_author;</span><br><span class="line"># 复制表的结构与数据</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> copy2_author</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> book_author;</span><br><span class="line"># 复制部分数据只需要添加筛选条件</span><br><span class="line"></span><br><span class="line"># 只复制一部分结构</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> copy3</span><br><span class="line"><span class="keyword">SELECT</span> id,au_name</span><br><span class="line"><span class="keyword">FROM</span> book_author</span><br><span class="line"><span class="keyword">WHERE</span> <span class="literal">FALSE</span>;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>4-DML数据操控语言</title>
      <link href="/2021/03/28/4-DML%E6%95%B0%E6%8D%AE%E6%93%8D%E6%8E%A7%E8%AF%AD%E8%A8%80/"/>
      <url>/2021/03/28/4-DML%E6%95%B0%E6%8D%AE%E6%93%8D%E6%8E%A7%E8%AF%AD%E8%A8%80/</url>
      
        <content type="html"><![CDATA[<h1 id="插入语句"><a href="#插入语句" class="headerlink" title="插入语句"></a>插入语句</h1><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"># 插入语句</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">语法：</span></span><br><span class="line"><span class="comment">INSERT INTO 表名(列名,...) VALUES(值1,...);</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"># 插入值类型需要与列的类型一致或兼容</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> student(name,age,score,birth) <span class="keyword">VALUES</span>(<span class="string">&#x27;Leslie&#x27;</span>,<span class="number">19</span>,<span class="number">100</span>,<span class="string">&#x27;2001/02/14&#x27;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 可以为<span class="keyword">null</span>的列如何给值（nullable的列），不可以为空的列必须插入值</span><br><span class="line"># 方式一：直接赋给<span class="keyword">null</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> student(name,age,score,birth) <span class="keyword">VALUES</span>(<span class="string">&#x27;John&#x27;</span>,<span class="number">18</span>,<span class="keyword">NULL</span>,<span class="string">&#x27;2001/05/21&#x27;</span>);</span><br><span class="line"># 方式二：直接在给定列名时跳过该列</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> student(name,age,birth) <span class="keyword">VALUES</span>(<span class="string">&#x27;Lala&#x27;</span>,<span class="number">18</span>,<span class="string">&#x27;2003/03/22&#x27;</span>);</span><br><span class="line"></span><br><span class="line"># 列的顺序可以调换，但是列和值必须匹配 </span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> student(name,score,age,birth) <span class="keyword">VALUES</span>(<span class="string">&#x27;Lily&#x27;</span>,<span class="number">56</span>,<span class="number">18</span>,<span class="string">&#x27;2001/03/18&#x27;</span>);</span><br><span class="line"></span><br><span class="line"># 可以省略列名，表示默认添加所有列名，并且列的顺序和表的顺序一致</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> student() <span class="keyword">VALUES</span>(<span class="string">&#x27;Hugo&#x27;</span>,<span class="number">19</span>,<span class="number">92</span>,<span class="string">&#x27;2001/09/16&#x27;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 第二种插入方式</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> student</span><br><span class="line"><span class="keyword">SET</span> name<span class="operator">=</span><span class="string">&#x27;Jax&#x27;</span>,age<span class="operator">=</span><span class="string">&#x27;20&#x27;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 第一种插入方式支持多行插入，第二种不支持</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> student</span><br><span class="line"><span class="keyword">VALUES</span>(<span class="string">&#x27;boy1&#x27;</span>,<span class="number">19</span>,<span class="number">92</span>,<span class="string">&#x27;2001/09/16&#x27;</span>)</span><br><span class="line">,(<span class="string">&#x27;boys&#x27;</span>,<span class="number">19</span>,<span class="number">92</span>,<span class="string">&#x27;2001/09/16&#x27;</span>)</span><br><span class="line">,(<span class="string">&#x27;boy3&#x27;</span>,<span class="number">19</span>,<span class="number">92</span>,<span class="string">&#x27;2001/09/16&#x27;</span>);</span><br><span class="line"></span><br><span class="line"># 方式一支持子查询，方式二不支持</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> student(name)</span><br><span class="line"><span class="keyword">SELECT</span> <span class="string">&#x27;Leslie&#x27;</span>;</span><br></pre></td></tr></table></figure><h1 id="修改语句"><a href="#修改语句" class="headerlink" title="修改语句"></a>修改语句</h1><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"># DML修改语句</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">语法：</span></span><br><span class="line"><span class="comment">1. 修改单表的记录</span></span><br><span class="line"><span class="comment">UPDATE 表名</span></span><br><span class="line"><span class="comment">SET 列=新值,列2=新值2,...</span></span><br><span class="line"><span class="comment">WHERE 筛选条件;</span></span><br><span class="line"><span class="comment">2. 修改多表记录</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">sql92语法：</span></span><br><span class="line"><span class="comment">UPDATE 表1 别名,表2 别名,表3 别名</span></span><br><span class="line"><span class="comment">SET 列=值...</span></span><br><span class="line"><span class="comment">WHERE 连接条件</span></span><br><span class="line"><span class="comment">AND 筛选条件;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">sql99语法：</span></span><br><span class="line"><span class="comment">UPDATE 表1 别名</span></span><br><span class="line"><span class="comment">INNER JOIN 表2 别名</span></span><br><span class="line"><span class="comment">ON 连接条件</span></span><br><span class="line"><span class="comment">SET 列=值...</span></span><br><span class="line"><span class="comment">WHERE 筛选条件;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"># 修改单表记录</span><br><span class="line">UPDATE student</span><br><span class="line"><span class="keyword">SET</span> score<span class="operator">=</span><span class="number">99</span>,age<span class="operator">=</span><span class="number">17</span></span><br><span class="line"><span class="keyword">WHERE</span> name <span class="keyword">LIKE</span> <span class="string">&#x27;%boy%&#x27;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 修改多表记录</span><br><span class="line">UPDATE boys bo</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> beauty b <span class="keyword">ON</span> bo.`id`<span class="operator">=</span>b.`boyfriend_id`</span><br><span class="line"><span class="keyword">SET</span> b.`phone`<span class="operator">=</span><span class="string">&#x27;114&#x27;</span></span><br><span class="line"><span class="keyword">WHERE</span> bo.`boyName`<span class="operator">=</span><span class="string">&#x27;张无忌&#x27;</span>;</span><br></pre></td></tr></table></figure><h1 id="删除语句"><a href="#删除语句" class="headerlink" title="删除语句"></a>删除语句</h1><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"># DML删除语句</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">方法一：使用delete关键字</span></span><br><span class="line"><span class="comment">单表删除：</span></span><br><span class="line"><span class="comment">DELETE FROM 表名 WHERE 筛选条件 </span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">多表删除</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">sql92语法：</span></span><br><span class="line"><span class="comment">DELETE 表1的别名,表2的别名</span></span><br><span class="line"><span class="comment">FROM 表1 别名,表2 别名</span></span><br><span class="line"><span class="comment">WHERE 连接条件</span></span><br><span class="line"><span class="comment">AND 筛选条件</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">sql99语法：</span></span><br><span class="line"><span class="comment">DELETE 表1的别名,表2的别名  # (要删除内容所在的表)</span></span><br><span class="line"><span class="comment">FROM 表1 别名</span></span><br><span class="line"><span class="comment">INNER JOIN 表2 别名 ON 连接条件</span></span><br><span class="line"><span class="comment">WHERE 筛选条件;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">方法二：使用truncate关键字</span></span><br><span class="line"><span class="comment">语法：</span></span><br><span class="line"><span class="comment">TRUNCATE TABLE 表名;</span></span><br><span class="line"><span class="comment">直接删除整个表的数据，不能进行筛选</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># <span class="keyword">DELETE</span>关键字</span><br><span class="line"># 单表删除</span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> age<span class="operator">=</span><span class="number">18</span>;</span><br><span class="line"></span><br><span class="line"># 多表删除</span><br><span class="line"><span class="keyword">DELETE</span> b </span><br><span class="line"><span class="keyword">FROM</span> beauty b</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> boys bo <span class="keyword">ON</span> b.`boyfriend_id`<span class="operator">=</span>bo.`id`</span><br><span class="line"><span class="keyword">WHERE</span> bo.`boyName`<span class="operator">=</span><span class="string">&#x27;张无忌&#x27;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># <span class="keyword">TRUNCATE</span>删除,直接清空表中数据</span><br><span class="line"><span class="keyword">TRUNCATE</span> <span class="keyword">TABLE</span> boys;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">TRUNCATE 与 DELETE 区别：</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment">1. DELETE可以加WHERE 条件，TRUNCATE不可以</span></span><br><span class="line"><span class="comment">    2. TRUNCATE语句省略了筛选的步骤，更加高效</span></span><br><span class="line"><span class="comment">    3. 假如要删除的表中有自增长列，利用DELETE删除后，再插入时自增长列的值从断点开始,而TRUNCATE的值从1重新开始</span></span><br><span class="line"><span class="comment">4. TRUNCATE删除没有返回值，DELETE删除有返回值（返回删除行数）</span></span><br><span class="line"><span class="comment">5. TRUNCATE删除不能回滚，DELETE 删除可以回滚</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2-SQL语言中的函数</title>
      <link href="/2021/03/28/3-SQL%E8%AF%AD%E8%A8%80%E4%B8%AD%E7%9A%84%E5%87%BD%E6%95%B0/"/>
      <url>/2021/03/28/3-SQL%E8%AF%AD%E8%A8%80%E4%B8%AD%E7%9A%84%E5%87%BD%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="SQL语言–函数"><a href="#SQL语言–函数" class="headerlink" title="SQL语言–函数"></a>SQL语言–函数</h1><h3 id="概念："><a href="#概念：" class="headerlink" title="概念："></a>概念：</h3><p>将一组逻辑语句封装在方法体内，对外暴露方法名</p><h3 id="优点："><a href="#优点：" class="headerlink" title="优点："></a>优点：</h3><p>隐藏了实现细节，提高了代码的重用性</p><h3 id="调用语法："><a href="#调用语法：" class="headerlink" title="调用语法："></a>调用语法：</h3><p>SELECT 函数名(实参列表) 【FROM 表】;</p><p>特点：<br>函数名与函数功能</p><h3 id="分类："><a href="#分类：" class="headerlink" title="分类："></a>分类：</h3><ol><li>单行函数，例如:CONCAT(str1,str2,…),LENGTH(str)等等</li><li>分组函数（也叫统计函数，聚合函数，组函数），做统计使用</li></ol><hr><h3 id="字符函数"><a href="#字符函数" class="headerlink" title="字符函数"></a>字符函数</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"># 常见函数</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">概念：将一组逻辑语句封装在方法体内，对外暴露方法名</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">优点：隐藏了实现细节，提高了代码的重用性</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">调用语法：</span></span><br><span class="line"><span class="comment">SELECT 函数名(实参列表) 【FROM 表】;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">特点：</span></span><br><span class="line"><span class="comment">函数名与函数功能</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">分类：</span></span><br><span class="line"><span class="comment">1. 单行函数，例如:CONCAT(str1,str2,...),LENGTH(str)等等</span></span><br><span class="line"><span class="comment">2. 分组函数（也叫统计函数，聚合函数，组函数），做统计使用</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"># 单行函数又分为：字符函数，数学函数，日期函数，其他函数，流程控制函数</span><br><span class="line"></span><br><span class="line"># 字符函数</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># LENGTH(str)函数返回字节长度，字节长度取决于编码方式</span><br><span class="line"># utf8中一个字母占一个字节，一个汉字占<span class="number">3</span>个字节</span><br><span class="line"><span class="keyword">SELECT</span> LENGTH(<span class="string">&#x27;John&#x27;</span>);</span><br><span class="line"><span class="keyword">SELECT</span> LENGTH(<span class="string">&#x27;张三&#x27;</span>);  </span><br><span class="line"></span><br><span class="line">#CONCAT(str1,str2,...) 用于拼接字符串</span><br><span class="line"><span class="keyword">SELECT</span> CONCAT(last_name,<span class="string">&#x27; &#x27;</span>,first_name) 姓名 <span class="keyword">FROM</span> employees;</span><br><span class="line"></span><br><span class="line"># 转大小写</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">UPPER</span>(<span class="string">&#x27;Leslie&#x27;</span>);</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">LOWER</span>(<span class="string">&#x27;Leslie&#x27;</span>);</span><br><span class="line"></span><br><span class="line"># SUBSTR(str <span class="keyword">FROM</span> pos <span class="keyword">FOR</span> len),截取部分字符串(<span class="keyword">SQL</span>语言中索引从<span class="number">1</span>开始)</span><br><span class="line"><span class="keyword">SELECT</span> SUBSTR(<span class="string">&#x27;Hello World&#x27;</span>,<span class="number">7</span>) <span class="keyword">AS</span> <span class="keyword">result</span>;</span><br><span class="line"></span><br><span class="line"># 注意这里第二个参数是截取开始的位置，第三个参数是字符长度，不是结束截取的位置</span><br><span class="line"><span class="keyword">SELECT</span> SUBSTR(<span class="string">&#x27;Hello World&#x27;</span>,<span class="number">1</span>,<span class="number">5</span>) <span class="keyword">AS</span> <span class="keyword">result</span>;  </span><br><span class="line"></span><br><span class="line"># INSTR(str,substr)  ,返回子字符串在原字符串中的索引</span><br><span class="line"><span class="keyword">SELECT</span> INSTR(<span class="string">&#x27;Hello World&#x27;</span>,<span class="string">&#x27;Wor&#x27;</span>) <span class="keyword">AS</span> <span class="keyword">result</span>;</span><br><span class="line"></span><br><span class="line"># <span class="built_in">TRIM</span>([&#123;<span class="keyword">BOTH</span> <span class="operator">|</span> <span class="keyword">LEADING</span> <span class="operator">|</span> <span class="keyword">TRAILING</span>&#125; [remstr] <span class="keyword">FROM</span>] str) 取出左右空格</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">TRIM</span>(<span class="string">&#x27;    Hello     &#x27;</span>) <span class="keyword">AS</span> <span class="keyword">result</span>;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">TRIM</span>(<span class="string">&#x27;a&#x27;</span> <span class="keyword">FROM</span> <span class="string">&#x27;aaaaaaaHELaaaaaaLOaaaaaaaa&#x27;</span>) <span class="keyword">AS</span> <span class="keyword">result</span>;  # 指定要去掉的字符，并且只去掉左右两端</span><br><span class="line"></span><br><span class="line"># LPAD(str,len,padstr)  ,左填充函数，第一个参数是目标字符串，第二个参数是最终长度，第三个参数是填充字符</span><br><span class="line"># 填充字符可以是多个字符，与此对应同样有右填充RPAD</span><br><span class="line"><span class="keyword">SELECT</span> LPAD(<span class="string">&#x27;HELLO&#x27;</span>,<span class="number">10</span>,<span class="string">&#x27;*&#x27;</span>) <span class="keyword">AS</span> <span class="keyword">result</span>;</span><br><span class="line"></span><br><span class="line"># REPLACE(str,from_str,to_str)  替换函数（替换所有）</span><br><span class="line"><span class="keyword">SELECT</span> REPLACE(<span class="string">&#x27;Hello World&#x27;</span>,<span class="string">&#x27;World&#x27;</span>,<span class="string">&#x27;Leslie&#x27;</span>) <span class="keyword">AS</span> <span class="keyword">result</span>;</span><br></pre></td></tr></table></figure><h3 id="数学函数"><a href="#数学函数" class="headerlink" title="数学函数"></a>数学函数</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"># 数学函数</span><br><span class="line"></span><br><span class="line"># ROUND(X)  四舍五入</span><br><span class="line"><span class="keyword">SELECT</span> ROUND(<span class="number">4.555</span>);</span><br><span class="line"><span class="keyword">SELECT</span> ROUND(<span class="number">1.567</span>,<span class="number">2</span>);  # 小数点后保留两位</span><br><span class="line"></span><br><span class="line"># <span class="built_in">CEIL</span>(X) 向上取整</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">CEIL</span>(<span class="number">1.05</span>);</span><br><span class="line"># <span class="built_in">FLOOR</span>(X) 向下取整</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">FLOOR</span>(<span class="number">1.05</span>);</span><br><span class="line"></span><br><span class="line"># <span class="keyword">TRUNCATE</span>(X,D)  截断函数</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">TRUNCATE</span>(<span class="number">1.69999</span>,<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"># <span class="built_in">MOD</span>(N,M)  取余函数  等价于<span class="operator">%</span> 本质是 <span class="built_in">MOD</span>(a,b)等价于a<span class="operator">-</span>a<span class="operator">/</span>b<span class="operator">*</span>a;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">MOD</span>(<span class="number">10</span>,<span class="number">1</span>);</span><br></pre></td></tr></table></figure><h3 id="日期函数"><a href="#日期函数" class="headerlink" title="日期函数"></a>日期函数</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"># 日期函数</span><br><span class="line"></span><br><span class="line"># NOW() 返回当前系统日期<span class="operator">+</span>时间</span><br><span class="line"><span class="keyword">SELECT</span> NOW();</span><br><span class="line"></span><br><span class="line"># CURDATE() 返回当前系统日期，不包含时间</span><br><span class="line"><span class="keyword">SELECT</span> CURDATE();</span><br><span class="line"></span><br><span class="line"># CURTIME() 返回当前系统时间，不返回日期</span><br><span class="line"><span class="keyword">SELECT</span> CURTIME();</span><br><span class="line"></span><br><span class="line"># 获取指定部分的日，月，年等信息(小时，分钟，秒)</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">YEAR</span>(NOW());</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">MONTH</span>(<span class="string">&#x27;1998-1-1&#x27;</span>);</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DAY</span>(<span class="string">&#x27;2020-12-21&#x27;</span>);</span><br><span class="line"></span><br><span class="line"># STR_TO_DATE(str,format) 将日期格式字符转换为指定个式的日期</span><br><span class="line"><span class="keyword">SELECT</span> STR_TO_DATE(<span class="string">&#x27;03-11-2019&#x27;</span>,<span class="string">&#x27;%d-%m-%Y&#x27;</span>) <span class="keyword">AS</span> 日期;</span><br><span class="line"></span><br><span class="line"># 查询入职日期为<span class="number">1992</span><span class="number">-4</span><span class="number">-3</span>的员工信息</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> employees <span class="keyword">WHERE</span> hiredate<span class="operator">=</span>STR_TO_DATE(<span class="string">&#x27;4-3 1992&#x27;</span>,<span class="string">&#x27;%m-%d %Y&#x27;</span>);</span><br><span class="line"></span><br><span class="line"># DATE_FORMAT(<span class="type">date</span>,format)  将日期转换成字符</span><br><span class="line"><span class="keyword">SELECT</span> DATE_FORMAT(NOW(),<span class="string">&#x27;%Y年%m月%d日--%H时%i分钟%s秒&#x27;</span>) <span class="keyword">AS</span> 当前日期;</span><br></pre></td></tr></table></figure><table><thead><tr><th>格式符</th><th>功能</th></tr></thead><tbody><tr><td>%Y</td><td>四位的年份</td></tr><tr><td>%y</td><td>两位的年份</td></tr><tr><td>%m</td><td>月份（01，02，03…,12）</td></tr><tr><td>%c</td><td>月份（1，2，3…12）</td></tr><tr><td>%d</td><td>日（01，02，03…）</td></tr><tr><td>%H</td><td>小时（二十四小时制）</td></tr><tr><td>%h</td><td>小时（十二小时制）</td></tr><tr><td>%i</td><td>分钟（00，01…59）</td></tr><tr><td>%s</td><td>秒（00，01…59）</td></tr></tbody></table><hr><h3 id="其他函数"><a href="#其他函数" class="headerlink" title="其他函数"></a>其他函数</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 其他函数</span><br><span class="line"></span><br><span class="line"># VERSION() 查看当前版本号</span><br><span class="line"><span class="keyword">SELECT</span> VERSION();</span><br><span class="line"># DATABASE() 查看当前所在的库</span><br><span class="line"><span class="keyword">SELECT</span> DATABASE();</span><br><span class="line"># <span class="keyword">USER</span>() 查询当前用户</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">USER</span>();</span><br></pre></td></tr></table></figure><h3 id="流程控制函数"><a href="#流程控制函数" class="headerlink" title="流程控制函数"></a>流程控制函数</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"># 流程控制函数</span><br><span class="line"></span><br><span class="line"># IF(expr1,expr2,expr3) 实现类似if...else的效果</span><br><span class="line"># 类似于三元运算符，表达式<span class="number">1</span>的值成立返回表达式<span class="number">2</span>的值，否则返回表达式<span class="number">3</span>的值</span><br><span class="line"><span class="keyword">SELECT</span> IF(<span class="string">&#x27;10&gt;5&#x27;</span>,<span class="string">&#x27;大于&#x27;</span>,<span class="string">&#x27;小于&#x27;</span>) <span class="keyword">AS</span> <span class="keyword">result</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># <span class="keyword">CASE</span>函数，实现类似于switch...case效果</span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">格式</span></span><br><span class="line"><span class="comment">CASE case_value</span></span><br><span class="line"><span class="comment">WHEN when_value THEN</span></span><br><span class="line"><span class="comment">statement_list</span></span><br><span class="line"><span class="comment">ELSE</span></span><br><span class="line"><span class="comment">statement_list</span></span><br><span class="line"><span class="comment">END CASE;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"># 查询员工工资，要求部门号<span class="operator">=</span><span class="number">30</span>的显示的工资为<span class="number">1.1</span>倍</span><br><span class="line"># 部门号为<span class="number">40</span>的，显示的工资为<span class="number">1.2</span>倍，其他部门原价显示</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">last_name,</span><br><span class="line">department_id,</span><br><span class="line">salary 工资,</span><br><span class="line"><span class="keyword">CASE</span> department_id</span><br><span class="line"><span class="keyword">WHEN</span> <span class="number">30</span> <span class="keyword">THEN</span></span><br><span class="line">salary<span class="operator">*</span><span class="number">1.1</span></span><br><span class="line"><span class="keyword">WHEN</span> <span class="number">40</span> <span class="keyword">THEN</span></span><br><span class="line">salary<span class="operator">*</span><span class="number">1.2</span></span><br><span class="line"><span class="keyword">ELSE</span> salary</span><br><span class="line"><span class="keyword">END</span> <span class="keyword">AS</span> 新工资 </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">employees;</span><br><span class="line"></span><br><span class="line"># <span class="keyword">case</span>函数的使用二</span><br><span class="line"># 工资大于<span class="number">20000</span>，显示A级别</span><br><span class="line"># 工资大于<span class="number">15000</span>，显示B级别</span><br><span class="line"># 工资大于<span class="number">10000</span>，显示C级别</span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">last_name,</span><br><span class="line">salary,</span><br><span class="line"><span class="keyword">CASE</span> </span><br><span class="line"><span class="keyword">WHEN</span> salary<span class="operator">&gt;</span><span class="number">20000</span> <span class="keyword">THEN</span> <span class="string">&#x27;A&#x27;</span></span><br><span class="line"><span class="keyword">WHEN</span> salary<span class="operator">&gt;</span><span class="number">15000</span> <span class="keyword">THEN</span> <span class="string">&#x27;B&#x27;</span></span><br><span class="line"><span class="keyword">WHEN</span> salary<span class="operator">&gt;</span><span class="number">10000</span> <span class="keyword">THEN</span> <span class="string">&#x27;C&#x27;</span></span><br><span class="line"><span class="keyword">ELSE</span> <span class="string">&#x27;D&#x27;</span></span><br><span class="line"><span class="keyword">END</span> <span class="keyword">AS</span> 工资等级</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">employees;</span><br></pre></td></tr></table></figure><hr><hr><h2 id="分组函数"><a href="#分组函数" class="headerlink" title="分组函数"></a>分组函数</h2><h3 id="分类：-1"><a href="#分类：-1" class="headerlink" title="分类："></a>分类：</h3><p>sum 求和，avg 平均值，max 最大值，min 最小值</p><h3 id="特点："><a href="#特点：" class="headerlink" title="特点："></a>特点：</h3><ol><li>sum,avg可以处理数值型数据，max,min,count可以处理任何类型数据</li><li>以上几个分组函数都会自动忽略null值</li><li>可以和distinct搭配使用</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"># 分组函数</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">分类：sum 求和，avg 平均值，max 最大值，min 最小值</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">特点：</span></span><br><span class="line"><span class="comment">1. sum,avg可以处理数值型数据，max,min,count可以处理任何类型数据</span></span><br><span class="line"><span class="comment">2. 以上几个分组函数都会自动忽略null值</span></span><br><span class="line"><span class="comment">3. 可以和distinct搭配使用</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># sum求和</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">SUM</span>(salary) <span class="keyword">FROM</span> employees;</span><br><span class="line"># avg求平均值</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">AVG</span>(salary) <span class="keyword">FROM</span> employees;</span><br><span class="line"># max最大值</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">MAX</span>(salary) <span class="keyword">FROM</span> employees;</span><br><span class="line"># min最小值</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">MIN</span>(salary) <span class="keyword">FROM</span> employees;</span><br><span class="line"></span><br><span class="line"># count统计有效数据个数（非<span class="keyword">null</span>值）</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(salary) <span class="keyword">FROM</span> employees;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 和<span class="keyword">distinct</span>搭配使用,取出重复内容</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">SUM</span>(<span class="keyword">DISTINCT</span> salary),<span class="built_in">SUM</span>(salary) <span class="keyword">FROM</span> employees;</span><br><span class="line"></span><br><span class="line"># <span class="built_in">count</span>()函数</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">FROM</span> employees;  # 可以用来统计实际有效行数</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="number">1</span>) <span class="keyword">FROM</span> employees;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="分组查询"><a href="#分组查询" class="headerlink" title="分组查询"></a>分组查询</h2><h3 id="语法："><a href="#语法：" class="headerlink" title="语法："></a>语法：</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> 分组函数,列（要求出现在group_by后面）</span><br><span class="line"><span class="keyword">FROM</span> 表</span><br><span class="line">【<span class="keyword">WHERE</span> 筛选条件】</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> 分组列表</span><br><span class="line">【<span class="keyword">ORDER</span> <span class="keyword">BY</span> 子句】</span><br></pre></td></tr></table></figure><h3 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h3><p>查询列表比较特殊，要求是分组函数和group_by后出现的字段</p><h3 id="分组查询中的筛选可以分为两类"><a href="#分组查询中的筛选可以分为两类" class="headerlink" title="分组查询中的筛选可以分为两类"></a>分组查询中的筛选可以分为两类</h3><ol><li><strong>分组前的筛选</strong>：分组前的筛选也就是筛选的内容在数据库中就存在，<br>可以直接利用对应列筛选，利用where语句筛选，位置在group_by字句的前面</li><li><strong>分组后的筛选</strong>：分组后的筛选是利用已经重新分配的组内的信息进行筛选，这些信息不直接存储于数据库中。利用having语句筛选，位置在group_by字句的后面</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"># 分组查询</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">语法：</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">SELECT 分组函数,列（要求出现在group_by后面）</span></span><br><span class="line"><span class="comment">FROM 表</span></span><br><span class="line"><span class="comment">【WHERE 筛选条件】</span></span><br><span class="line"><span class="comment">GROUP BY 分组列表</span></span><br><span class="line"><span class="comment">【ORDER BY 子句】</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">注意：查询列表比较特殊，要求是分组函数和group_by后出现的字段</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">分组查询中的筛选可以分为两类</span></span><br><span class="line"><span class="comment">1. 分组前的筛选：分组前的筛选也就是筛选的内容在数据库中就存在，</span></span><br><span class="line"><span class="comment">可以直接利用对应列筛选，利用where语句筛选，位置在group_by字句的前面</span></span><br><span class="line"><span class="comment">2. 分组后的筛选：分组后的筛选是利用已经重新分配的组内的信息进行筛选，</span></span><br><span class="line"><span class="comment">这些信息不直接存储于数据库中。利用having语句筛选，位置在group_by字句的后面</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"># 查询每个部门平均工资</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">AVG</span>(salary) <span class="keyword">AS</span> 平均工资,job_id <span class="keyword">AS</span> 部门</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> job_id;</span><br><span class="line"></span><br><span class="line"># 查询每个位置上的部门个数</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>) ,location_id</span><br><span class="line"><span class="keyword">FROM</span> departments</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> location_id; </span><br><span class="line"></span><br><span class="line"># 添加筛选条件</span><br><span class="line"># 查询邮箱中包含A字符的，每个部门的平均工资</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">AVG</span>(salary),department_id</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> email <span class="keyword">LIKE</span> <span class="string">&#x27;%A%&#x27;</span></span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> department_id;</span><br><span class="line"></span><br><span class="line"># 查询哪个部门员工个数大于<span class="number">2</span>（添加分组后的筛选）</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">这里不是利用employees表中的原数据进行筛选，</span></span><br><span class="line"><span class="comment">而是根据筛选后的结果进行二次筛选，</span></span><br><span class="line"><span class="comment">所以不能再用where关键字，而是在最后追加having关键字</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>) ,department_id</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> department_id</span><br><span class="line"><span class="keyword">HAVING</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>)<span class="operator">&gt;</span><span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 查询每个部门有奖金的最高工资</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">MAX</span>(salary) ,job_id</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> commission_pct <span class="keyword">IS</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span></span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> job_id;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 查询领导编号大于<span class="number">102</span>，并且其手下最低工资大于<span class="number">5000</span>的领导</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">MIN</span>(salary) ,manager_id</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> manager_id<span class="operator">&gt;</span><span class="number">102</span></span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> manager_id</span><br><span class="line"><span class="keyword">HAVING</span> <span class="built_in">MIN</span>(salary)<span class="operator">&gt;</span><span class="number">5000</span>;</span><br></pre></td></tr></table></figure><h2 id="连接查询"><a href="#连接查询" class="headerlink" title="连接查询"></a>连接查询</h2><h3 id="含义："><a href="#含义：" class="headerlink" title="含义："></a>含义：</h3><p>又称为多表查询，当查询的字段来自于多个表时，就会用到连接查询</p><h3 id="分类：-2"><a href="#分类：-2" class="headerlink" title="分类："></a>分类：</h3><h4 id="按年代分类："><a href="#按年代分类：" class="headerlink" title="按年代分类："></a>按年代分类：</h4><ul><li>sql92标准（仅支持内连接）</li><li>sql99标准（除了全外连接外都支持）【推荐】<h4 id="按功能分类："><a href="#按功能分类：" class="headerlink" title="按功能分类："></a>按功能分类：</h4></li><li>内连接（包括等值连接，非等值连接，子连接）</li><li>外连接（包括左外连接，右外连接，全外连接）</li><li>交叉连接</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br></pre></td><td class="code"><pre><span class="line"># DQL函数语句<span class="comment">--连接查询</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">含义：又称为多表查询，当查询的字段来自于多个表时，就会用到连接查询</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">分类：</span></span><br><span class="line"><span class="comment">按年代分类：sql92标准（仅支持内连接），sql99标准（除了全外连接外都支持）【推荐】</span></span><br><span class="line"><span class="comment">按功能分类：内连接（包括等值连接，非等值连接，子连接）</span></span><br><span class="line"><span class="comment">外连接（包括左外连接，右外连接，全外连接）</span></span><br><span class="line"><span class="comment">交叉连接</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">笛卡尔乘积现象</span></span><br><span class="line"><span class="comment">不利用连接查询，而贸然利用两个表格数据匹配结果，不添加连接条件。最终得到的结果是表一和表二的完全匹配</span></span><br><span class="line"><span class="comment">例如想要通过boys表和beauty表匹配对象，假如写作下式</span></span><br><span class="line"><span class="comment">SELECT NAME,boyName FROM boys,beauty;</span></span><br><span class="line"><span class="comment">最终得到4*12=48条数据，这与我们想要的结果不符，而只是单纯的完全匹配</span></span><br><span class="line"><span class="comment">所以我们需要连接查询</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line">#错误格式</span><br><span class="line"><span class="keyword">SELECT</span> NAME,boyName <span class="keyword">FROM</span> boys,beauty;</span><br><span class="line">#正确格式</span><br><span class="line"><span class="keyword">SELECT</span> NAME,boyName </span><br><span class="line"><span class="keyword">FROM</span> boys,beauty</span><br><span class="line"><span class="keyword">WHERE</span> beauty.boyfriend_id<span class="operator">=</span>boys.id;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 等值连接</span><br><span class="line"><span class="keyword">SELECT</span> NAME,boyName </span><br><span class="line"><span class="keyword">FROM</span> boys,beauty</span><br><span class="line"><span class="keyword">WHERE</span> beauty.boyfriend_id<span class="operator">=</span>boys.id;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 起别名后进行等值连接</span><br><span class="line"># 起别名后在<span class="keyword">select</span>语句中的表名也需要修改为别名</span><br><span class="line"><span class="keyword">SELECT</span> last_name,e.job_id,job_title</span><br><span class="line"><span class="keyword">FROM</span> employees e,jobs j</span><br><span class="line"><span class="keyword">WHERE</span> e.`job_id`<span class="operator">=</span>j.`job_id` ;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 等值查询后可以进行模糊查询等，用<span class="keyword">AND</span>语句连接即可</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 非等值连接</span><br><span class="line"># 相较于等值查询的主要区别就是替换了查询语句的等于为其他判断符号</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 自连接</span><br><span class="line"># 本质就是只在自己表内部的等值连接</span><br><span class="line"># 查询 员工名和上级名称</span><br><span class="line"><span class="keyword">SELECT</span> e.employee_id,e.last_name,m.employee_id,m.last_name</span><br><span class="line"><span class="keyword">FROM</span> employees e,employees m</span><br><span class="line"><span class="keyword">WHERE</span> e.`manager_id`<span class="operator">=</span>m.`employee_id`;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># sql99语法</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">语法：</span></span><br><span class="line"><span class="comment">SELECT 查询列表</span></span><br><span class="line"><span class="comment">FROM 表1 别名 【连接类型】</span></span><br><span class="line"><span class="comment">JOIN 表2 别名</span></span><br><span class="line"><span class="comment">ON 连接条件</span></span><br><span class="line"><span class="comment">【WHERE 筛选条件】</span></span><br><span class="line"><span class="comment">【GROUP BY 分组】</span></span><br><span class="line"><span class="comment">【HAVING 筛选条件】</span></span><br><span class="line"><span class="comment">【ORDER BY 排序列表】</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">sql99语法包括（连接类型）：</span></span><br><span class="line"><span class="comment">内连接(INNER)</span></span><br><span class="line"><span class="comment">外连接</span></span><br><span class="line"><span class="comment">左外(LEFT 【OUTER】)</span></span><br><span class="line"><span class="comment">右外(LEFT 【OUTER】)</span></span><br><span class="line"><span class="comment">全外(FULL 【OUTER】)</span></span><br><span class="line"><span class="comment">交叉连接(CROSS)</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 内连接</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">SELECT 查询列表</span></span><br><span class="line"><span class="comment">FROM 表1 别名</span></span><br><span class="line"><span class="comment">INNER JOIN 表2 别名</span></span><br><span class="line"><span class="comment">ON 连接条件;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">INNER可以省略</span></span><br><span class="line"><span class="comment">筛选条件放在where后面，连接条件放在on后面，提高分离性，便于阅读</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"># 等值连接</span><br><span class="line"></span><br><span class="line"># 查询部门名与员工名</span><br><span class="line"><span class="keyword">SELECT</span> last_name,department_name</span><br><span class="line"><span class="keyword">FROM</span> employees e</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> departments d  </span><br><span class="line"><span class="keyword">ON</span> e.`department_id`<span class="operator">=</span>d.`department_id`;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 外连接</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">用于查询一个表中有，另一个表中没有的记录</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">特点：</span></span><br><span class="line"><span class="comment">外连接的查询结果为主表中的所有记录</span></span><br><span class="line"><span class="comment">如果表中有和它匹配，则显示匹配的值</span></span><br><span class="line"><span class="comment">如果没有匹配值，则显示null</span></span><br><span class="line"><span class="comment">左外连接，left左边的是主表</span></span><br><span class="line"><span class="comment">右外连接，left右边的是主表</span></span><br><span class="line"><span class="comment">左外和右外交换顺序，可以达到相同的效果</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 左外连接</span><br><span class="line"><span class="keyword">SELECT</span> b.name,boy.<span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> beauty b</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">OUTER</span> <span class="keyword">JOIN</span> boys boy</span><br><span class="line"><span class="keyword">ON</span> b.`boyfriend_id`<span class="operator">=</span>boy.`id`;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 交叉连接</span><br><span class="line"># 本质就是笛卡尔乘积</span><br><span class="line"><span class="keyword">SELECT</span> b.<span class="operator">*</span>,boy.<span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> beauty b</span><br><span class="line"><span class="keyword">CROSS</span> <span class="keyword">JOIN</span> boys boy;</span><br></pre></td></tr></table></figure><p><a href="https://www.bilibili.com/video/BV1uJ411k7wy?p=523">外连接</a></p><h2 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h2><h3 id="含义：-1"><a href="#含义：-1" class="headerlink" title="含义："></a>含义：</h3><p>出现在其他语句中的select语句，称为子查询或内查询<br>外部出现的查询语句，称为主查或外查询</p><h3 id="分类：-3"><a href="#分类：-3" class="headerlink" title="分类："></a>分类：</h3><h4 id="按子查询出现的位置："><a href="#按子查询出现的位置：" class="headerlink" title="按子查询出现的位置："></a>按子查询出现的位置：</h4><ul><li>SELECT 后面(仅支持标量子查询)</li><li>FROM 后面（支持表子查询）</li><li>WHERE或HAVING后面（标量子查询，列子查询，行子查询）</li><li>EXISTS 后面（表子查询）<h4 id="按结果集的行列数不同："><a href="#按结果集的行列数不同：" class="headerlink" title="按结果集的行列数不同："></a>按结果集的行列数不同：</h4></li><li>标量子查询（结果集只有一行一列）</li><li>列子查询（结果集只有一列多行）</li><li>行子查询（结果集有一行多列）</li><li>表子查询（结果集一般多行多列）</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br></pre></td><td class="code"><pre><span class="line"># 子查询</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">含义：</span></span><br><span class="line"><span class="comment">出现在其他语句中的select语句，称为子查询或内查询</span></span><br><span class="line"><span class="comment">外部出现的查询语句，称为主查或外查询</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">分类：</span></span><br><span class="line"><span class="comment">按子查询出现的位置：</span></span><br><span class="line"><span class="comment">SELECT 后面(仅支持标量子查询)</span></span><br><span class="line"><span class="comment">FROM 后面（支持表子查询）</span></span><br><span class="line"><span class="comment">WHERE或HAVING 后面（标量子查询，列子查询，行子查询）</span></span><br><span class="line"><span class="comment">EXISTS 后面（表子查询）</span></span><br><span class="line"><span class="comment">按结果集的行列数不同：</span></span><br><span class="line"><span class="comment">标量子查询（结果集只有一行一列）</span></span><br><span class="line"><span class="comment">列子查询（结果集只有一列多行）</span></span><br><span class="line"><span class="comment">行子查询（结果集有一行多列）</span></span><br><span class="line"><span class="comment">表子查询（结果集一般多行多列）</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># <span class="keyword">WHERE</span>或<span class="keyword">HAVING</span> 后面</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">1. 标量子查询（单行子查询）</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">2. 列子查询（多行子查询）</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">3. 行子查询（多行多列）</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">特点：</span></span><br><span class="line"><span class="comment">子查询放在小括号内</span></span><br><span class="line"><span class="comment">子查询一般放在条件右侧</span></span><br><span class="line"><span class="comment">标量子查询一般搭配单行操作符使用（&gt;,&lt;,=,&gt;=,&lt;=,&lt;&gt;等等）</span></span><br><span class="line"><span class="comment">列子查询一般搭配多行操作符使用（in,any/some,all）</span></span><br><span class="line"><span class="comment">子查询的执行优先于主查询，主查询的条件用到了子查询的结果</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 标量子查询</span><br><span class="line"></span><br><span class="line"># 查询谁的工资比Abel高</span><br><span class="line"># <span class="number">1.</span> 查询Abel工资（单行查询）</span><br><span class="line"><span class="keyword">SELECT</span> salary</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> last_name<span class="operator">=</span> <span class="string">&#x27;Abel&#x27;</span>;</span><br><span class="line"># <span class="number">2.</span>查询员工信息，满足salary大于<span class="number">1</span>中结果的</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> salary<span class="operator">&gt;</span>(</span><br><span class="line"><span class="keyword">SELECT</span> salary</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> last_name<span class="operator">=</span> <span class="string">&#x27;Abel&#x27;</span></span><br><span class="line">);</span><br><span class="line"># 子查询内部不需要;作为结束标志</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 非法使用标量子查询</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">MIN</span>(salary),department_id </span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> department_id</span><br><span class="line"><span class="keyword">HAVING</span> <span class="built_in">MIN</span>(salary)<span class="operator">&gt;</span>(</span><br><span class="line"><span class="keyword">SELECT</span> salary</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> department_id<span class="operator">=</span><span class="number">50</span></span><br><span class="line">);</span><br><span class="line"># 以上语句会报错，因为子查询语句的结果不为一行一列，所以不能用标量子查询（多行多列或<span class="number">0</span>行<span class="number">0</span>列都不可以）</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 列子查询（多行子查询，因为子查询结果是一列多行）</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">多行操作符：</span></span><br><span class="line"><span class="comment">IN/NOT IN   等于/不等于列表中的任意一个</span></span><br><span class="line"><span class="comment">ANY/SOME 和子查询中的某个值作比较，例如15&gt;ANY(40,10,25)，因为15&gt;10所以上式成立</span></span><br><span class="line"><span class="comment">ALL 和子查询返回的所有值比较，例如15&gt;ANY(40,10,25)，因为40&gt;15所以上式不成立</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 返回location_id是<span class="number">1400</span>或<span class="number">1700</span>的部门中的员工姓名</span><br><span class="line"># <span class="number">1.</span> location_id是<span class="number">1400</span>或<span class="number">1700</span>的部门号</span><br><span class="line"><span class="keyword">SELECT</span> department_id</span><br><span class="line"><span class="keyword">FROM</span> departments</span><br><span class="line"><span class="keyword">WHERE</span> location_id <span class="keyword">IN</span>(<span class="number">1400</span>,<span class="number">1700</span>);</span><br><span class="line"></span><br><span class="line"># <span class="number">2.</span> 查询符合条件的员工姓名</span><br><span class="line"><span class="keyword">SELECT</span> last_name</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> </span><br><span class="line">department_id <span class="keyword">IN</span>(</span><br><span class="line"><span class="keyword">SELECT</span> department_id</span><br><span class="line"><span class="keyword">FROM</span> departments</span><br><span class="line"><span class="keyword">WHERE</span> location_id <span class="keyword">IN</span>(<span class="number">1400</span>,<span class="number">1700</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 行子查询（一行多列或多行多列）</span><br><span class="line"></span><br><span class="line"># 查询员工编号最小并且工资最高的员工信息（不一定存在同时满足两个条件的员工）</span><br><span class="line"># <span class="number">1.</span> 查询最小的员工编号</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">MIN</span>(employee_id)</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"># <span class="number">2.</span> 查询最高工资</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">MAX</span>(salary)</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"># <span class="number">3.</span> 查询同时满足这两个条件的员工</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> employee_id<span class="operator">=</span>(</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">MIN</span>(employee_id)</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line">)<span class="keyword">AND</span>(</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">MAX</span>(salary)</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line">);</span><br><span class="line"># 利用行子查询代替上式</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> (employee_id,salary)<span class="operator">=</span>(</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">MIN</span>(employee_id),<span class="built_in">MAX</span>(salary)</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 放在<span class="keyword">SELECT</span>后面</span><br><span class="line"></span><br><span class="line"># 查询每个部门员工个数</span><br><span class="line"><span class="keyword">SELECT</span> d.<span class="operator">*</span>,(</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>)</span><br><span class="line"><span class="keyword">FROM</span> employees e</span><br><span class="line"><span class="keyword">WHERE</span> e.`department_id`<span class="operator">=</span>d.`department_id`</span><br><span class="line">)</span><br><span class="line"><span class="keyword">FROM</span> departments d;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 放在<span class="keyword">from</span>后面</span><br><span class="line"></span><br><span class="line"># 查询每个部门的平均工资等级</span><br><span class="line"># <span class="number">1.</span> 查询每个部门的平均工资</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">AVG</span>(salary),department_id</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> department_id;</span><br><span class="line"># <span class="number">2.</span> 查询工资等级</span><br><span class="line"><span class="keyword">SELECT</span> ag_dep.<span class="operator">*</span>,g.`grade_leve`</span><br><span class="line"><span class="keyword">FROM</span> (</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">AVG</span>(salary) ag,department_id</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> department_id</span><br><span class="line">) ag_dep  # 起别名</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> job_grades g</span><br><span class="line"><span class="keyword">ON</span> ag_dep.ag <span class="keyword">BETWEEN</span> lowest_sal <span class="keyword">AND</span> highest_sal; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># <span class="keyword">exists</span>后面（相关子查询）</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">语法：EXISTS(完整查询语句)</span></span><br><span class="line"><span class="comment">结果只有0或1</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"># 判断employees中是否存在employee_id这一列</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">EXISTS</span>(<span class="keyword">SELECT</span> employee_id <span class="keyword">FROM</span> employees);</span><br><span class="line"># 判断是否存在工资为<span class="number">30000</span>的人</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">EXISTS</span>(<span class="keyword">SELECT</span> employee_id <span class="keyword">FROM</span> employees <span class="keyword">WHERE</span> salary<span class="operator">=</span><span class="number">30000</span>);</span><br></pre></td></tr></table></figure><h2 id="分页查询"><a href="#分页查询" class="headerlink" title="分页查询"></a>分页查询</h2><h3 id="应用场景："><a href="#应用场景：" class="headerlink" title="应用场景："></a>应用场景：</h3><p>当要显示的数据，一夜显示不全，需要分页提交sql请求</p><p>LIMIT 语句放在查询语句的最后</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"># 分页查询</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">应用场景：</span></span><br><span class="line"><span class="comment">当要显示的数据，一夜显示不全，需要分页提交sql请求</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">语法：</span></span><br><span class="line"><span class="comment">SELECT 查询列表</span></span><br><span class="line"><span class="comment">FROM 表名</span></span><br><span class="line"><span class="comment">【JOIN TYPE join 表2</span></span><br><span class="line"><span class="comment">ON 连接条件</span></span><br><span class="line"><span class="comment">WHERE 筛选条件</span></span><br><span class="line"><span class="comment">GROUP BY 分组字段</span></span><br><span class="line"><span class="comment">HAVING 分组后的筛选</span></span><br><span class="line"><span class="comment">ORDER BY 排序的字段】</span></span><br><span class="line"><span class="comment">LIMIT offset,zize;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">offset表示条目的起始索引（起始索引从0开始）</span></span><br><span class="line"><span class="comment">size表示要显示的条目个数</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">LIMIT 语句放在查询语句的最后</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> employees LIMIT <span class="number">0</span>,<span class="number">5</span>;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> employees LIMIT <span class="number">10</span>,<span class="number">15</span>;</span><br></pre></td></tr></table></figure><h2 id="联合查询"><a href="#联合查询" class="headerlink" title="联合查询"></a>联合查询</h2><h3 id="union查询："><a href="#union查询：" class="headerlink" title="union查询："></a>union查询：</h3><p>将多条查询语句的结果合并成一个结果</p><h3 id="应用场景：-1"><a href="#应用场景：-1" class="headerlink" title="应用场景："></a>应用场景：</h3><p>要查询结果来自多个表，且多个表没有直接的连接关系，单查询的信息一致</p><h3 id="特点：-1"><a href="#特点：-1" class="headerlink" title="特点："></a>特点：</h3><p>要求多条查询语句的查询列数是一致的<br>要求多条查询语句每一列的类型和顺序最好是一致的<br>UNION关键字会自动去重，如果不想去重可以使用UNION ALL关键字</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"># 联合查询</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">union查询：将多条查询语句的结果合并成一个结果</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">语法：</span></span><br><span class="line"><span class="comment">查询语句</span></span><br><span class="line"><span class="comment">union</span></span><br><span class="line"><span class="comment">查询语句</span></span><br><span class="line"><span class="comment">...</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">应用场景：要查询结果来自多个表，且多个表没有直接的连接关系，单查询的信息一致</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">特点：</span></span><br><span class="line"><span class="comment">要求多条查询语句的查询列数是一致的</span></span><br><span class="line"><span class="comment">要求多条查询语句每一列的类型和顺序最好是一致的</span></span><br><span class="line"><span class="comment">UNION关键字会自动去重，如果不想去重可以使用UNION ALL关键字</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"># 查询部门编号<span class="operator">&gt;</span><span class="number">90</span>或邮箱中包含a的员工信息</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> employees <span class="keyword">WHERE</span> email <span class="keyword">LIKE</span> <span class="string">&#x27;%a%&#x27;</span> <span class="keyword">OR</span> department_id<span class="operator">&gt;</span><span class="number">90</span>;</span><br><span class="line"># 用联合查询来完成</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> employees <span class="keyword">WHERE</span> email <span class="keyword">LIKE</span> <span class="string">&#x27;%a%&#x27;</span> </span><br><span class="line"><span class="keyword">UNION</span> <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> employees <span class="keyword">WHERE</span> department_id<span class="operator">&gt;</span><span class="number">90</span>;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2-DQL数据查询语言</title>
      <link href="/2021/03/28/2-DQL%E6%95%B0%E6%8D%AE%E6%9F%A5%E8%AF%A2%E8%AF%AD%E8%A8%80/"/>
      <url>/2021/03/28/2-DQL%E6%95%B0%E6%8D%AE%E6%9F%A5%E8%AF%A2%E8%AF%AD%E8%A8%80/</url>
      
        <content type="html"><![CDATA[<h1 id="DQL查询语言"><a href="#DQL查询语言" class="headerlink" title="DQL查询语言"></a>DQL查询语言</h1><h2 id="DQL基础查询语句–SELECT"><a href="#DQL基础查询语句–SELECT" class="headerlink" title="DQL基础查询语句–SELECT"></a>DQL基础查询语句–SELECT</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"># DQL基础查询语句</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">语法：</span></span><br><span class="line"><span class="comment">SELECT 查询列表 FROM 表名;</span></span><br><span class="line"><span class="comment">FROM可省</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">特点：</span></span><br><span class="line"><span class="comment">1. 查询列表可以是：表中的字段，常量，表达式，函数</span></span><br><span class="line"><span class="comment">2. 查询的结果是一个虚拟表格</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"># 选中指定库</span><br><span class="line">USE myemployees;</span><br><span class="line"></span><br><span class="line"># 查询表中的单个字段</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> last_name <span class="keyword">FROM</span> employees;</span><br><span class="line"></span><br><span class="line"># 查询表中的多个字段，中间用逗号隔开，对顺序无要求</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> last_name,first_name,email <span class="keyword">FROM</span> employees;</span><br><span class="line"></span><br><span class="line"># 查询所有字段</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> employees;</span><br><span class="line"></span><br><span class="line"># `列名`,注意可以用反单引号标注列名（不是单引号！），主要是避免列名和关键字相同的情况</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">`salary`</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">employees;</span><br><span class="line"></span><br><span class="line"># 查询常量值</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="number">100</span>;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="string">&#x27;Steven&#x27;</span>;</span><br><span class="line"></span><br><span class="line"># 查询表达式</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="number">98</span><span class="operator">*</span><span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"># 查询函数</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> VERSION();</span><br><span class="line"></span><br><span class="line"># 起别名，类似定义变量名</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 1. 便于理解</span></span><br><span class="line"><span class="comment"> * 2. 如果查询字段有重复情况，使用别名可以便于区分</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"> </span><br><span class="line"> # 方式<span class="number">1</span> 使用<span class="keyword">AS</span>关键字</span><br><span class="line"><span class="keyword">SELECT</span> <span class="number">100</span><span class="operator">*</span><span class="number">5</span> <span class="keyword">AS</span> <span class="keyword">result</span>;</span><br><span class="line"><span class="keyword">SELECT</span> last_name <span class="keyword">AS</span> 姓,first_name <span class="keyword">AS</span> 名 <span class="keyword">FROM</span> employees;</span><br><span class="line"></span><br><span class="line"># 方式<span class="number">2</span> 使用空格，别名中有特殊空格就加上双引号避免歧义</span><br><span class="line"><span class="keyword">SELECT</span> last_name 姓,first_name 名 <span class="keyword">FROM</span> employees;</span><br><span class="line"></span><br><span class="line"># 去重 利用<span class="keyword">DISTINCT</span>关键字</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> department_id <span class="keyword">FROM</span> employees;</span><br><span class="line"></span><br><span class="line"># <span class="operator">+</span>号的作用</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 在sql语言中+号只有一个功能就是作为运算符，不具备连接两个字段的能力</span></span><br><span class="line"><span class="comment"> * 两个操作数都为数值型可以用来作运算</span></span><br><span class="line"><span class="comment"> * 其中一方为字符型，首先会试图将字符型转换为数值型，转换成功继续运算，转换失败，则将字符型转换为0</span></span><br><span class="line"><span class="comment"> * 如果一方为null，则结果必为null</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"># 加入想要拼接两个字段，需要采用concat()方法</span><br><span class="line"><span class="keyword">SELECT</span> CONCAT(last_name,<span class="string">&#x27; &#x27;</span>,first_name) <span class="keyword">AS</span> 姓名 <span class="keyword">FROM</span> employees;</span><br></pre></td></tr></table></figure><h3 id="DQL条件查询语句"><a href="#DQL条件查询语句" class="headerlink" title="DQL条件查询语句"></a>DQL条件查询语句</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br></pre></td><td class="code"><pre><span class="line"># DQL条件查询语句</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">语法：</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">SELECT</span></span><br><span class="line"><span class="comment">查询列表</span></span><br><span class="line"><span class="comment">FROM</span></span><br><span class="line"><span class="comment">表名</span></span><br><span class="line"><span class="comment">WHERE</span></span><br><span class="line"><span class="comment">筛选条件</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">注意：</span></span><br><span class="line"><span class="comment">这里语句的执行顺序与我们直观上的书写顺序并不一致</span></span><br><span class="line"><span class="comment">在上面的语句中首先执行FROM语句获取读取的表</span></span><br><span class="line"><span class="comment">然后执行WHERE语句，确定筛选的条件，最后才执行SELECT语句进行查询</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">分类：</span></span><br><span class="line"><span class="comment">1. 利用条件表达式筛选：基本的条件运算符有&gt;,&lt;,=,!=,&lt;&gt;,&gt;=,&lt;=  (!=和&lt;&gt;是等价的，但推荐采用&lt;&gt;表示不等)</span></span><br><span class="line"><span class="comment">2. 按逻辑表达式查询：逻辑运算符有： &amp;&amp;,||,!,AND,OR,NOT  (推荐采用后三种)</span></span><br><span class="line"><span class="comment">3. 模糊查询：关键词有：LIKE,BETWEEN AND,IN,IS NULL</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 按条件表达式进行筛选</span><br><span class="line"></span><br><span class="line"># 筛选工资大于<span class="number">12000</span>的人</span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line"><span class="operator">*</span> </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">employees</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">salary<span class="operator">&gt;</span><span class="number">12000</span>;</span><br><span class="line"></span><br><span class="line"># 查询部门编号不等于<span class="number">90</span>号的员工姓名和部门编号</span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">CONCAT(first_name,<span class="string">&#x27; &#x27;</span>,last_name) 姓名,department_id 部门编号</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">employees</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">department_id<span class="operator">&lt;&gt;</span><span class="number">90</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 按逻辑表达式筛选</span><br><span class="line"></span><br><span class="line"># 查询工资再<span class="number">10000</span><span class="number">-20000</span>之间的员工部分信息</span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">first_name,</span><br><span class="line">last_name,</span><br><span class="line">salary,</span><br><span class="line">commission_pct </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">employees </span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">salary <span class="operator">&gt;</span> <span class="number">10000</span> <span class="keyword">AND</span> salary <span class="operator">&lt;</span> <span class="number">20000</span>;</span><br><span class="line"></span><br><span class="line"># 查询工资高于<span class="number">15000</span>，或者部门编号不为<span class="number">90</span>的员工</span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">last_name,</span><br><span class="line">salary,</span><br><span class="line">department_id</span><br><span class="line"><span class="keyword">FROM</span> </span><br><span class="line">employees</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">salary<span class="operator">&gt;</span><span class="number">15000</span> <span class="keyword">OR</span> department_id<span class="operator">&lt;&gt;</span><span class="number">90</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 模糊查询</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> like:和通配符搭配使用</span></span><br><span class="line"><span class="comment"> 通配符包括：</span></span><br><span class="line"><span class="comment"> %：任意多个字符，包含0个字符</span></span><br><span class="line"><span class="comment"> _：任意单个字符</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> <span class="keyword">SELECT</span></span><br><span class="line">last_name,</span><br><span class="line">salary</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">employees</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">last_name <span class="keyword">LIKE</span> <span class="string">&#x27;_o__h%&#x27;</span>;</span><br><span class="line"></span><br><span class="line">#假设要查询的内容中包含通配符，可以用转义字符解释内容,或用转义关键字</span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">last_name,</span><br><span class="line">job_id,</span><br><span class="line">salary</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">employees</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">job_id <span class="keyword">LIKE</span> <span class="string">&#x27;__\_%&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">last_name,</span><br><span class="line">job_id,</span><br><span class="line">salary</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">employees</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">job_id <span class="keyword">LIKE</span> <span class="string">&#x27;__$_%&#x27;</span> <span class="keyword">ESCAPE</span> <span class="string">&#x27;$&#x27;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">BETWEEN AND</span></span><br><span class="line"><span class="comment">在。。。之间</span></span><br><span class="line"><span class="comment">使用BETWEEN AND可以提高语句简介程度</span></span><br><span class="line"><span class="comment">搜索结果包含两个端点值</span></span><br><span class="line"><span class="comment">两个临界值顺序不可以颠倒</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">BETWEEN AND实际等价于a&lt;=X&lt;=b,所以顺序不可颠倒</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line">#查询员工号在<span class="number">100</span><span class="number">-120</span>之间</span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line"><span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">employees</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">employee_id <span class="keyword">BETWEEN</span> <span class="number">100</span> <span class="keyword">AND</span> <span class="number">120</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">IN 关键字</span></span><br><span class="line"><span class="comment">判断某字段的值是否属于in列表中的某一项</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">使用in提高语句整洁度</span></span><br><span class="line"><span class="comment">in列表中的值必须是同一类型或相互兼容</span></span><br><span class="line"><span class="comment">in列表中不支持通配符</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">IN实际等价于X=a OR X=b or X=c,但是通配符在like关键字下使用</span></span><br><span class="line"><span class="comment">所以IN列表中不允许出现通配符</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">last_name,</span><br><span class="line">job_id</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">employees</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">job_id <span class="keyword">IN</span>(<span class="string">&#x27;IT_PROG&#x27;</span>,<span class="string">&#x27;AD_VP&#x27;</span>,<span class="string">&#x27;AD_PRES&#x27;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">IS NULL关键字  (IS NOT NULL)</span></span><br><span class="line"><span class="comment">判断是否为NULL值</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">(在SQL语言中＝号或者&lt;&gt;不能判断是否为NULL值)</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">last_name,</span><br><span class="line">commission_pct</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">employees</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">commission_pct <span class="keyword">IS</span> <span class="keyword">NULL</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">安全等与 &lt;=&gt;</span></span><br><span class="line"><span class="comment">安全等于可以用来判断NULL值，也可以用来判断普通类型的值</span></span><br><span class="line"><span class="comment">缺点是可读性较低</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">last_name,</span><br><span class="line">commission_pct,</span><br><span class="line">job_id</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">employees</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">job_id <span class="operator">&lt;=&gt;</span> <span class="string">&#x27;SA_REP&#x27;</span> <span class="keyword">OR</span> commission_pct <span class="operator">&lt;=&gt;</span> <span class="keyword">NULL</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="DQL排序查询语句"><a href="#DQL排序查询语句" class="headerlink" title="DQL排序查询语句"></a>DQL排序查询语句</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"># DQL排序查询语句</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">语法：(【】表示可省)</span></span><br><span class="line"><span class="comment">SELECT</span></span><br><span class="line"><span class="comment">查询列表</span></span><br><span class="line"><span class="comment">FROM</span></span><br><span class="line"><span class="comment">表名</span></span><br><span class="line"><span class="comment">【WHERE 筛选条件】</span></span><br><span class="line"><span class="comment">ORDER BY</span></span><br><span class="line"><span class="comment">排序列表 【asc|desc】</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">特点：</span></span><br><span class="line"><span class="comment">ASC代表升序，DESC代表降序。不写的情况下默认升序</span></span><br><span class="line"><span class="comment">ORDER BY字句一般放在整个查询语句的最后（LIMIT字句除外）</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"># 工资由高到低排序</span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line"><span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">employees</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span></span><br><span class="line">salary <span class="keyword">DESC</span>;</span><br><span class="line"></span><br><span class="line"># 由低到高</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> employees <span class="keyword">ORDER</span> <span class="keyword">BY</span> salary <span class="keyword">ASC</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 排序<span class="operator">+</span>筛选  查询部门编号<span class="operator">&gt;=</span><span class="number">90</span>的员工信息，按入职时间的先后进行排序</span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">last_name,</span><br><span class="line">department_id,</span><br><span class="line">hiredate </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">employees </span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">department_id <span class="operator">&gt;=</span> <span class="number">90</span> </span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span></span><br><span class="line">hiredate;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 按表达式排序  年薪降序</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">last_name,</span><br><span class="line">salary<span class="operator">*</span><span class="number">12</span><span class="operator">*</span>(<span class="number">1</span><span class="operator">+</span>IFNULL(commission_pct,<span class="number">0</span>)) 年薪</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">employees</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span></span><br><span class="line">salary<span class="operator">*</span><span class="number">12</span><span class="operator">*</span>(<span class="number">1</span><span class="operator">+</span>IFNULL(commission_pct,<span class="number">0</span>)) <span class="keyword">DESC</span> ;</span><br><span class="line"></span><br><span class="line"># 用别名排序</span><br><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">last_name,</span><br><span class="line">salary<span class="operator">*</span><span class="number">12</span><span class="operator">*</span>(<span class="number">1</span><span class="operator">+</span>IFNULL(commission_pct,<span class="number">0</span>)) 年薪</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">employees</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span></span><br><span class="line">年薪 <span class="keyword">DESC</span> ;</span><br><span class="line"></span><br><span class="line"># 用函数排序</span><br><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">last_name,</span><br><span class="line">salary,</span><br><span class="line">LENGTH(last_name) <span class="keyword">AS</span> 长度</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">employees</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span></span><br><span class="line">LENGTH(last_name) ;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 按多个字段排序</span><br><span class="line"># 先按工资升序，再按员工编号降序</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">last_name,</span><br><span class="line">salary,</span><br><span class="line">employee_id</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">employees</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span></span><br><span class="line">salary <span class="keyword">ASC</span>,</span><br><span class="line">employee_id <span class="keyword">DESC</span>;</span><br></pre></td></tr></table></figure><h3 id="排序查询"><a href="#排序查询" class="headerlink" title="排序查询"></a>排序查询</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"># DQL排序查询语句</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">语法：(【】表示可省)</span></span><br><span class="line"><span class="comment">SELECT</span></span><br><span class="line"><span class="comment">查询列表</span></span><br><span class="line"><span class="comment">FROM</span></span><br><span class="line"><span class="comment">表名</span></span><br><span class="line"><span class="comment">【WHERE 筛选条件】</span></span><br><span class="line"><span class="comment">ORDER BY</span></span><br><span class="line"><span class="comment">排序列表 【asc|desc】</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">特点：</span></span><br><span class="line"><span class="comment">ASC代表升序，DESC代表降序。不写的情况下默认升序</span></span><br><span class="line"><span class="comment">ORDER BY字句一般放在整个查询语句的最后（LIMIT字句除外）</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"># 工资由高到低排序</span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line"><span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">employees</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span></span><br><span class="line">salary <span class="keyword">DESC</span>;</span><br><span class="line"></span><br><span class="line"># 由低到高</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> employees <span class="keyword">ORDER</span> <span class="keyword">BY</span> salary <span class="keyword">ASC</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 排序<span class="operator">+</span>筛选  查询部门编号<span class="operator">&gt;=</span><span class="number">90</span>的员工信息，按入职时间的先后进行排序</span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">last_name,</span><br><span class="line">department_id,</span><br><span class="line">hiredate </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">employees </span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">department_id <span class="operator">&gt;=</span> <span class="number">90</span> </span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span></span><br><span class="line">hiredate;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 按表达式排序  年薪降序</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">last_name,</span><br><span class="line">salary<span class="operator">*</span><span class="number">12</span><span class="operator">*</span>(<span class="number">1</span><span class="operator">+</span>IFNULL(commission_pct,<span class="number">0</span>)) 年薪</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">employees</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span></span><br><span class="line">salary<span class="operator">*</span><span class="number">12</span><span class="operator">*</span>(<span class="number">1</span><span class="operator">+</span>IFNULL(commission_pct,<span class="number">0</span>)) <span class="keyword">DESC</span> ;</span><br><span class="line"></span><br><span class="line"># 用别名排序</span><br><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">last_name,</span><br><span class="line">salary<span class="operator">*</span><span class="number">12</span><span class="operator">*</span>(<span class="number">1</span><span class="operator">+</span>IFNULL(commission_pct,<span class="number">0</span>)) 年薪</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">employees</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span></span><br><span class="line">年薪 <span class="keyword">DESC</span> ;</span><br><span class="line"></span><br><span class="line"># 用函数排序</span><br><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">last_name,</span><br><span class="line">salary,</span><br><span class="line">LENGTH(last_name) <span class="keyword">AS</span> 长度</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">employees</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span></span><br><span class="line">LENGTH(last_name) ;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 按多个字段排序</span><br><span class="line"># 先按工资升序，再按员工编号降序</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">last_name,</span><br><span class="line">salary,</span><br><span class="line">employee_id</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">employees</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span></span><br><span class="line">salary <span class="keyword">ASC</span>,</span><br><span class="line">employee_id <span class="keyword">DESC</span>;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1-MySQL简述</title>
      <link href="/2021/03/28/1-MySQL%E7%AE%80%E8%BF%B0/"/>
      <url>/2021/03/28/1-MySQL%E7%AE%80%E8%BF%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="MySQL简述"><a href="#MySQL简述" class="headerlink" title="MySQL简述"></a>MySQL简述</h1><blockquote><p>数据库是“按照数据结构来组织、存储和管理数据的仓库”。是一个长期存储在计算机内的、有组织的、可共享的、统一管理的大量数据的集合。</p></blockquote><h4 id="保存数据的容器"><a href="#保存数据的容器" class="headerlink" title="保存数据的容器"></a>保存数据的容器</h4><p>常用的保存数据的容器有数组，集合，文件以及数据库。<strong>数组，集合</strong>将数据存储在内存中，但内存中的数据具有易失性，很容易丢失。<strong>文件</strong>可以实现永久存储，但文件不适用于大量文件的存储，难于检索查询。</p><h3 id="数据库优点"><a href="#数据库优点" class="headerlink" title="数据库优点"></a>数据库优点</h3><ul><li>实现数据持久化</li><li>使用完整的管理系统统一管理，易于查询</li></ul><h2 id="数据库相关概念"><a href="#数据库相关概念" class="headerlink" title="数据库相关概念"></a>数据库相关概念</h2><h4 id="DB（database）"><a href="#DB（database）" class="headerlink" title="DB（database）"></a>DB（database）</h4><p>数据库，存储数据的“仓库”。保存了一系列有组织的数据</p><h4 id="DBMS（Database-Management-System）"><a href="#DBMS（Database-Management-System）" class="headerlink" title="DBMS（Database Management System）"></a>DBMS（Database Management System）</h4><p>数据库管理系统，数据库通过数据库管理系统创建和操作容器（常见的DBMS有：MySQL，Oracle，DB2，Sql Server）</p><h4 id="SQL（Structure-Query-Language）"><a href="#SQL（Structure-Query-Language）" class="headerlink" title="SQL（Structure Query Language）"></a>SQL（Structure Query Language）</h4><p><strong>结构化查询语言</strong>，专门用来与数据库通信的语言。SQL具有诸多优点：它<strong>不是</strong>某个特定数据库供应商<strong>专有的语言</strong>，几乎所有主流DBMS都支持SQL。SQL语言<strong>简单易学</strong>，虽然简单，但是一种强有力的语言，可以灵活运用其他语言进行诸多<strong>复杂和高级的数据库操作</strong></p><h2 id="数据库的特点"><a href="#数据库的特点" class="headerlink" title="数据库的特点"></a>数据库的特点</h2><ul><li>将数据放到表中，再将表放入数据库中</li><li>一个数据库中可以有多张表，每张表都有自己的名字用于标识自己，表名具有唯一性，即不可以重复</li><li>表具有一些特性，定义了数据在表中如何存储，类似于Java中类的设计</li><li>表由列组成，或者称为“字段”，所有表都是由一个或多个列组成的，每一列类似Java中的“属性”</li><li>表中数据按行存储，每行类似Java中的一个对象</li></ul><h3 id="DBMS分类"><a href="#DBMS分类" class="headerlink" title="DBMS分类"></a>DBMS分类</h3><ul><li>基于共享文件系统的DBMS（Access）</li><li>基于客户机–服务器的DBMS（MySQL,Oracle,Sql Server）</li></ul><h2 id="MySQL优点："><a href="#MySQL优点：" class="headerlink" title="MySQL优点："></a>MySQL优点：</h2><p><strong>成本低</strong>：开放源代码，一般可以免费试用。<strong>性能高</strong>：执行很快。<strong>简单</strong>：易安装和使用</p><hr><h2 id="基本操作语法"><a href="#基本操作语法" class="headerlink" title="基本操作语法"></a>基本操作语法</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// 开启MySQL服务</span><br><span class="line">net start mysql0214</span><br><span class="line">//关闭MySQL服务</span><br><span class="line">net stop mysql0214</span><br></pre></td></tr></table></figure><h4 id="root用户登录可以直接利用MySQL自带的Command-Line-Client登录，其他用户可以利用命令行如下操作进入"><a href="#root用户登录可以直接利用MySQL自带的Command-Line-Client登录，其他用户可以利用命令行如下操作进入" class="headerlink" title="root用户登录可以直接利用MySQL自带的Command Line Client登录，其他用户可以利用命令行如下操作进入"></a>root用户登录可以直接利用MySQL自带的Command Line Client登录，其他用户可以利用命令行如下操作进入</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">mysql -h localhost -P 3306 -u root -p</span><br><span class="line"></span><br><span class="line">//之后输入对应用户密码即可登录</span><br><span class="line">//第一个mysql不再是容器名称，而是mysql命令的意思</span><br><span class="line">//-h表示主机</span><br><span class="line">//-P表示端口</span><br><span class="line">//-u表示用户</span><br><span class="line">//-p表示密码</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//本机用户可以直接简写成如下格式：</span><br><span class="line">mysql -u root -p</span><br><span class="line"></span><br><span class="line">//密码可以直接显示在该语句中，而不是换行输入</span><br><span class="line">mysql -u root -prenboyu010214</span><br><span class="line"></span><br><span class="line">//注意，-p和密码之间不允许有空格存在</span><br></pre></td></tr></table></figure><h3 id="常见命令"><a href="#常见命令" class="headerlink" title="常见命令"></a>常见命令</h3><h4 id="展示当前数据库-show-databases"><a href="#展示当前数据库-show-databases" class="headerlink" title="展示当前数据库  show databases;"></a>展示当前数据库  show databases;</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show databases;</span><br><span class="line">+--------------------+</span><br><span class="line">| Database           |</span><br><span class="line">+--------------------+</span><br><span class="line">| information_schema |</span><br><span class="line">| mysql              |</span><br><span class="line">| performance_schema |</span><br><span class="line">| test               |</span><br><span class="line">+--------------------+</span><br><span class="line">4 rows in set (0.01 sec)</span><br></pre></td></tr></table></figure><h4 id="查看某数据库内容的两种方式"><a href="#查看某数据库内容的两种方式" class="headerlink" title="查看某数据库内容的两种方式"></a>查看某数据库内容的两种方式</h4><ul><li> 方式一</li></ul><p>利用  <strong>use 库名;</strong>  先进入对应库中<br/><br>利用  <strong>show tables;</strong>  语句展示库中内容。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; use information_schema;</span><br><span class="line">Database changed</span><br><span class="line">mysql&gt; show tables;</span><br><span class="line">+---------------------------------------+</span><br><span class="line">| Tables_in_information_schema          |</span><br><span class="line">+---------------------------------------+</span><br><span class="line">| CHARACTER_SETS                        |</span><br><span class="line">| COLLATIONS                            |</span><br><span class="line">| COLLATION_CHARACTER_SET_APPLICABILITY |</span><br><span class="line">| COLUMNS                               |</span><br><span class="line">| COLUMN_PRIVILEGES                     |</span><br><span class="line">| ENGINES                               |</span><br><span class="line">| EVENTS                                |</span><br><span class="line">| FILES                                 |</span><br><span class="line">| GLOBAL_STATUS                         |</span><br><span class="line">| GLOBAL_VARIABLES                      |</span><br><span class="line">| KEY_COLUMN_USAGE                      |</span><br><span class="line">| PARAMETERS                            |</span><br><span class="line">| PARTITIONS                            |</span><br><span class="line">| PLUGINS                               |</span><br><span class="line">| PROCESSLIST                           |</span><br><span class="line">| PROFILING                             |</span><br><span class="line">| REFERENTIAL_CONSTRAINTS               |</span><br><span class="line">| ROUTINES                              |</span><br><span class="line">| SCHEMATA                              |</span><br><span class="line">| SCHEMA_PRIVILEGES                     |</span><br><span class="line">| SESSION_STATUS                        |</span><br><span class="line">| SESSION_VARIABLES                     |</span><br><span class="line">| STATISTICS                            |</span><br><span class="line">| TABLES                                |</span><br><span class="line">| TABLESPACES                           |</span><br><span class="line">| TABLE_CONSTRAINTS                     |</span><br><span class="line">| TABLE_PRIVILEGES                      |</span><br><span class="line">| TRIGGERS                              |</span><br><span class="line">| USER_PRIVILEGES                       |</span><br><span class="line">| VIEWS                                 |</span><br><span class="line">| INNODB_CMP_RESET                      |</span><br><span class="line">| INNODB_TRX                            |</span><br><span class="line">| INNODB_CMPMEM_RESET                   |</span><br><span class="line">| INNODB_LOCK_WAITS                     |</span><br><span class="line">| INNODB_CMPMEM                         |</span><br><span class="line">| INNODB_CMP                            |</span><br><span class="line">| INNODB_LOCKS                          |</span><br><span class="line">+---------------------------------------+</span><br><span class="line">37 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure><ul><li>方式二</li></ul><p>利用 <strong>show tables from 库名;</strong>  直接查看库中数据内容，不需要进入（也就是说没有走出原来的库）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show tables from mysql;</span><br><span class="line">+---------------------------+</span><br><span class="line">| Tables_in_mysql           |</span><br><span class="line">+---------------------------+</span><br><span class="line">| columns_priv              |</span><br><span class="line">| db                        |</span><br><span class="line">| event                     |</span><br><span class="line">| func                      |</span><br><span class="line">| general_log               |</span><br><span class="line">| help_category             |</span><br><span class="line">| help_keyword              |</span><br><span class="line">| help_relation             |</span><br><span class="line">| help_topic                |</span><br><span class="line">| host                      |</span><br><span class="line">| ndb_binlog_index          |</span><br><span class="line">| plugin                    |</span><br><span class="line">| proc                      |</span><br><span class="line">| procs_priv                |</span><br><span class="line">| proxies_priv              |</span><br><span class="line">| servers                   |</span><br><span class="line">| slow_log                  |</span><br><span class="line">| tables_priv               |</span><br><span class="line">| time_zone                 |</span><br><span class="line">| time_zone_leap_second     |</span><br><span class="line">| time_zone_name            |</span><br><span class="line">| time_zone_transition      |</span><br><span class="line">| time_zone_transition_type |</span><br><span class="line">| user                      |</span><br><span class="line">+---------------------------+</span><br><span class="line">24 rows in set (0.01 sec)</span><br></pre></td></tr></table></figure><h4 id="查看当前所在的库-select-database"><a href="#查看当前所在的库-select-database" class="headerlink" title="查看当前所在的库 select database();"></a>查看当前所在的库 select database();</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select database();</span><br><span class="line">+--------------------+</span><br><span class="line">| database()         |</span><br><span class="line">+--------------------+</span><br><span class="line">| information_schema |</span><br><span class="line">+--------------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure><h4 id="在库中创建表格-create-table-表名"><a href="#在库中创建表格-create-table-表名" class="headerlink" title="在库中创建表格 create table 表名();"></a>在库中创建表格 create table 表名();</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; create table stuinfo(</span><br><span class="line">    -&gt; id int,</span><br><span class="line">    -&gt; name varchar(20));</span><br><span class="line">Query OK, 0 rows affected (0.35 sec)</span><br></pre></td></tr></table></figure><h4 id="查看表的结构-desc-表名"><a href="#查看表的结构-desc-表名" class="headerlink" title="查看表的结构  desc 表名;"></a>查看表的结构  desc 表名;</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; desc stuinfo;</span><br><span class="line">+-------+-------------+------+-----+---------+-------+</span><br><span class="line">| Field | Type        | Null | Key | Default | Extra |</span><br><span class="line">+-------+-------------+------+-----+---------+-------+</span><br><span class="line">| id    | int(11)     | YES  |     | NULL    |       |</span><br><span class="line">| name  | varchar(20) | YES  |     | NULL    |       |</span><br><span class="line">+-------+-------------+------+-----+---------+-------+</span><br><span class="line">2 rows in set (0.04 sec)</span><br></pre></td></tr></table></figure><h4 id="向表中插入数据-insert-into-表名-id-name-values-1-’Leslie’"><a href="#向表中插入数据-insert-into-表名-id-name-values-1-’Leslie’" class="headerlink" title="向表中插入数据   insert into 表名 (id,name) values(1,’Leslie’);"></a>向表中插入数据   insert into 表名 (id,name) values(1,’Leslie’);</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; insert into stuinfo (id,name) values(1,&#x27;Leslie&#x27;);</span><br><span class="line">Query OK, 1 row affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt;  insert into stuinfo (id,name) values(2,&#x27;John&#x27;);</span><br><span class="line">Query OK, 1 row affected (0.01 sec)</span><br></pre></td></tr></table></figure><h4 id="查看表中数据-select-from-表名"><a href="#查看表中数据-select-from-表名" class="headerlink" title="查看表中数据  select * from 表名;"></a>查看表中数据  select * from 表名;</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select * from stuinfo;</span><br><span class="line">+------+--------+</span><br><span class="line">| id   | name   |</span><br><span class="line">+------+--------+</span><br><span class="line">|    1 | Leslie |</span><br><span class="line">|    2 | John   |</span><br><span class="line">+------+--------+</span><br><span class="line">2 rows in set (0.01 sec)</span><br></pre></td></tr></table></figure><h4 id="删除表中数据-delete-from-表名-where-id-1"><a href="#删除表中数据-delete-from-表名-where-id-1" class="headerlink" title="删除表中数据   delete from 表名 where id=1;"></a>删除表中数据   delete from 表名 where id=1;</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; delete from stuinfo where id=1;</span><br><span class="line">Query OK, 1 row affected (0.01 sec)</span><br></pre></td></tr></table></figure><h4 id="查看当前MySQL版本"><a href="#查看当前MySQL版本" class="headerlink" title="查看当前MySQL版本"></a>查看当前MySQL版本</h4><p>在MySQL窗口中：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt;  select version();</span><br><span class="line">+-----------+</span><br><span class="line">| version() |</span><br><span class="line">+-----------+</span><br><span class="line">| 5.5.27    |</span><br><span class="line">+-----------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure><p>在DOS窗口中：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">C:\Windows\system32&gt;mysql --V</span><br><span class="line">mysql  Ver 14.14 Distrib 5.5.27, for Win64 (x86)</span><br></pre></td></tr></table></figure><h3 id="MySQL语法规范"><a href="#MySQL语法规范" class="headerlink" title="MySQL语法规范"></a>MySQL语法规范</h3><ol><li>不区分大小写，但建议关键字大写，表名，列名小写</li><li>每条命令以分号结尾</li><li>每条命令根据需要，可以缩进或换行</li><li>注释<ul><li>单行注释：#注释文字</li><li>单行注释：– 注释文字(注意中间必须有空格)</li><li>多行注释：/* 注释文字 */</li></ul></li></ol><hr><h2 id="结构化查询语言SQL"><a href="#结构化查询语言SQL" class="headerlink" title="结构化查询语言SQL"></a>结构化查询语言SQL</h2><p>(Structured Query Language)简称SQL，是一种特殊目的的编程语言，是一种数据库查询和程序设计语言，用于存取数据以及查询、更新和管理关系数据库系统。</p><h3 id="SQL语言分类"><a href="#SQL语言分类" class="headerlink" title="SQL语言分类"></a>SQL语言分类</h3><h4 id="DQL语言"><a href="#DQL语言" class="headerlink" title="DQL语言"></a>DQL语言</h4><p>（Data Query Language）数据查询语言，主要用于查询功能</p><h4 id="DML语言"><a href="#DML语言" class="headerlink" title="DML语言"></a>DML语言</h4><p>（Data Manipulation Language）数据操作语言，主要用于增加，删除与修改</p><h4 id="DDL语言"><a href="#DDL语言" class="headerlink" title="DDL语言"></a>DDL语言</h4><p>（Data Define Language）数据定义语言，有关库和表的定义</p><h4 id="TCL语言"><a href="#TCL语言" class="headerlink" title="TCL语言"></a>TCL语言</h4><p>（Transaction Control Language）事务控制语言，事务和事务处理</p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>3-传输层</title>
      <link href="/2021/03/25/3-%E4%BC%A0%E8%BE%93%E5%B1%82/"/>
      <url>/2021/03/25/3-%E4%BC%A0%E8%BE%93%E5%B1%82/</url>
      
        <content type="html"><![CDATA[<h1 id="传输层"><a href="#传输层" class="headerlink" title="传输层"></a>传输层</h1><h2 id="传输层概述"><a href="#传输层概述" class="headerlink" title="传输层概述"></a>传输层概述</h2><p>传输层是整个TCP/IP协议栈核心之一，位于网络层之上，应用层之下。利用网络层的服务，为上层应用层提供服务。与网络层类似，传输层也拥有面向连接的服务与无连接的服务两种，<strong>用途在于提供高效的可靠的，性价比高的数据传输</strong></p><p>传输层的作用在于为运行在不同主机上的应用进程提供逻辑通信（这里的逻辑通信指的是在传输层角度看来两个进程间直接进行通信，实际上还是通过下层提供的服务，不都安将数据向下层传递并在对方处向上传递后才实现通信），简言之，<strong>传输层提供的是进程到进程间的通信</strong></p><h3 id="传输实体"><a href="#传输实体" class="headerlink" title="传输实体"></a>传输实体</h3><p>完成传输层任务的硬件或软件</p><ul><li>传输实体可以在操作系统的内核</li><li>可以以一个链接库的形式绑定到网络应用中</li><li>可以以一个独立的用户进程运行</li><li>甚至可以实现在网络接口卡（网卡）上</li></ul><h3 id="传输层与网络层的区别"><a href="#传输层与网络层的区别" class="headerlink" title="传输层与网络层的区别"></a>传输层与网络层的区别</h3><p>网络层运行在由承运商操作的路由器上，因此用户无法真正控制网络层。对于丢包，高延迟等问题只能选择被动接受。传输层架设在网络层之上，允许用户控制服务质量</p><p>传输层原语独立于网络层原语，而网络层原语会因为网络的不同而不同。传输层的原语在向应用层传输的原语可以屏蔽掉这些不同，只提供标准，统一的原语。</p><blockquote><p>原语：计算机进程的控制通常由原语完成。所谓原语，一般是指由若干条指令组成的程序段，用来实现某个特定功能，在执行过程中不可被中断。在操作系统中，某些被进程调用的操作，如队列操作、对信号量的操作、检查启动外设操作等，一旦开始执行，就不能被中断，否则就会出现操作错误，造成系统混乱。所以，这些操作都要用原语来实现 原语是操作系统核心（不是由进程，而是由一组程序模块组成）的一个组成部分，并且常驻内存，通常在管态下执行。原语一旦开始执行，就要连续执行完，不允许中断</p></blockquote><p>传输层和网络层的作用范围不同，网络层负责把数据从源机送达到目的机（主机到主机 Host to Host）。传输层负责把数据送达到具体的应用进程或端口（End to End 端到端，end point端点即套接字socket和某个具体的应用程序绑定）</p><h3 id="数据段TPDU"><a href="#数据段TPDU" class="headerlink" title="数据段TPDU"></a>数据段TPDU</h3><p>传输层处理的协议数据单元是TPDU(Transport Protocol Data Unit)即数据段(segment)，是从传输实体发到对应端传输实体的信息</p><p>TPDU作为数据（载荷）被封装在分组（packet）中，通过网络层进行传输交换</p><h3 id="常用协议"><a href="#常用协议" class="headerlink" title="常用协议"></a>常用协议</h3><ol><li>用户数据报协议（UDP：User Datagram Protocol）</li><li>传输控制协议（TCP：Transmission Control Protocol）</li></ol><h3 id="多路复用与解复用"><a href="#多路复用与解复用" class="headerlink" title="多路复用与解复用"></a>多路复用与解复用</h3><h4 id="多路复用"><a href="#多路复用" class="headerlink" title="多路复用"></a>多路复用</h4><p>在发送报文的主机一端完成，从多个套接字接收来自多个进程的报文，根据套接字获取对应报文的IP地址和目标端口，并将目标端口传给传输层进行报文段的封装，IP地址传给网络层进行数据报的封装。这些头部信息用于进行以后的解封装</p><h4 id="多路解复用"><a href="#多路解复用" class="headerlink" title="多路解复用"></a>多路解复用</h4><p>在位于接收报文一端的主机处完成，根据报文段头部信息中的端口号与数据报中提供的IP地址将接收到的报文段传送给正确的套接字</p><blockquote><p>这里比较难以理解的一点是，传输层直接与套接字相联系，而传输层上的报文段只包含了源端口与目标端口，并没有主机IP地址信息，那么IP地址是如何传送给相应套接字进行匹配的？  事实上，只需要认清TCP/IP中的各层结构是人们认为规定的标准结构，是存在于虚拟环境下的结构（至少对于传输层和网络层是如此）通过套接字编程就可以看出，无论是报文，报文段还是数据报都是通过参数向下一层逐层传递的，所以虽然IP地址在从网络层向传输层传递之前就已经被取出，其也可以通过参数的形式向传输层传递并最终传递给套接字进行套接字的匹配或更新。</p></blockquote><h4 id="无连接（UDP）多路解复用"><a href="#无连接（UDP）多路解复用" class="headerlink" title="无连接（UDP）多路解复用"></a>无连接（UDP）多路解复用</h4><p>UDP套接字用二元组标识(目标IP地址、目标端口号)，即通过目标IP地址与目标端口号可以唯一标识一个UDP Socket,这就说明源IP或源端口不同但目标IP与端口一致的两个请求会指向同一个套接字</p><p>无连接多路解复用的过程一般是：</p><ol><li>主机收到UDP报文段</li><li>检查报文段的目的端口（由于已经传送到目的主机上，所以目的端口唯一标识一个套接字）</li><li>存在与该端口对应的套接字则将该报文段传送给套接字</li><li>不存在则创建套接字并传给其报文段</li></ol><h4 id="面向连接（TCP）的多路解复用"><a href="#面向连接（TCP）的多路解复用" class="headerlink" title="面向连接（TCP）的多路解复用"></a>面向连接（TCP）的多路解复用</h4><p>TCP套接字:四元组本地标识：源IP地址，源端口号，目的IP地址，目的端口号</p><p>TCP套接字由四元组唯一标识，也就是说四元组中哪怕只有一个参数不相同，都会指向不同的套接字。</p><p>这使得刚才在UDP多路解复用中出现的不同源端由于目的相同使用同一个套接字的情况不会出现，Web服务器对每个连接客户端有不同的套接字</p><h2 id="通信模型"><a href="#通信模型" class="headerlink" title="通信模型"></a>通信模型</h2><h3 id="端点"><a href="#端点" class="headerlink" title="端点"></a>端点</h3><p>端点就是所说的套接字（Socket），一个套接字包括；两个内容：IP地址和端口号。可以写成(IP,Port)。</p><h3 id="通信模型-通信五元组"><a href="#通信模型-通信五元组" class="headerlink" title="通信模型-通信五元组"></a>通信模型-通信五元组</h3><p>通信五元组由源端点，目的端点和协议组成，其中源端点和目的端点包含IP地址和端口，协议可以是TCP或UDP</p><p><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/%E9%80%9A%E4%BF%A1%E4%BA%94%E5%85%83%E7%BB%84.jpg" alt="通信五元组"></p><h3 id="一些已分配的知名端口"><a href="#一些已分配的知名端口" class="headerlink" title="一些已分配的知名端口"></a>一些已分配的知名端口</h3><table><thead><tr><th>Port</th><th>Protocol</th><th>Use</th></tr></thead><tbody><tr><td>21</td><td>FTP</td><td>File Transfer</td></tr><tr><td>23</td><td>Telnet</td><td>Remote login</td></tr><tr><td>25</td><td>SMTP</td><td>E-mail</td></tr><tr><td>69</td><td>TFTP</td><td>Trivial file transfer protocol</td></tr><tr><td>79</td><td>Finger</td><td>Looking information about a user</td></tr><tr><td>80</td><td>HTTP</td><td>World Wide Web</td></tr><tr><td>110</td><td>POP-3</td><td>Remote email access</td></tr><tr><td>119</td><td>NNTP</td><td>USENET news</td></tr></tbody></table><h2 id="用户数据报协议-UDP"><a href="#用户数据报协议-UDP" class="headerlink" title="用户数据报协议 UDP"></a>用户数据报协议 UDP</h2><p><strong>（User Dataprogram Protocol）</strong></p><p>UDP是一个无连接的传输层协议,UDP传输的是数据段(报文段)，无需建立连接（UDP发送端和接收端之间不进行握手，每个UDP报文都被单独的处理），不提供数据的可靠传输。很多网络应用，例如DNS都采用了UDP。UDP传输的是UDP数据段</p><p>UDP提供的是尽力而为的服务：</p><ul><li>可能出现数据段的丢失</li><li>可能由于网络原因导致应用进程的报文段乱序</li></ul><p>使用UDP的原因：</p><ul><li>不建立连接（降低延时）</li><li>简单，在发送端和接收端都没有连接状态</li><li>报文段头部小（TCP20字节，UDP8字节）减小开销，存放更多数据</li><li>没有拥塞控制和流量控制，UDP可以尽可能快的发送报文段</li></ul><p>因为以上的原因，UDP常被应用于实时流媒体播放，DNS或SNMP</p><p>如果想要在UDP上进行可靠的数据传输，只能从应用层入手，在应用层增加相应的检测机制以及差错恢复</p><h3 id="UDP数据段"><a href="#UDP数据段" class="headerlink" title="UDP数据段"></a>UDP数据段</h3><p>数据段包括<strong>总长为64bits，共4部分，每部分16bits的数据段头</strong>和数据两个部分。</p><h4 id="数据段头结构"><a href="#数据段头结构" class="headerlink" title="数据段头结构"></a>数据段头结构</h4><p><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/hdaushdaushd.jpg"></p><p>第三个字段数据段长度表示包括段头和数据的总长度，UDP中校验和可能存在也可能不存在，不存在时校验和长度设为0.</p><p>UDP数据段头最重要的内容就是前两个字段源端口和目的端口，二者长度均为16bits，能表示的最大长度是65536，也就是能表示的端口数量是65536个，范围从0~65535。</p><h4 id="端口定义"><a href="#端口定义" class="headerlink" title="端口定义"></a>端口定义</h4><table><thead><tr><th>端口号</th><th>-</th></tr></thead><tbody><tr><td>小于等于1023（知名端口）</td><td>用于公共应用（保留，全局分配，用于标准服务器），只能用于特权用户，比如UNIX的root用户启动标准80服务。由IANA分配，目前已经使用700多个</td></tr><tr><td>1024~49151</td><td>用户端口/非特权用户端口，可以通过IANA注册（例如BT使用了6881-6887的端口）</td></tr><tr><td>大于等于49152</td><td>动态端口，私人端口（其中包括自由端口：free port,由本地分配，并且动态随机生成的端口号，访问网站时操作系统会随机产生一个自由端口用于访问）</td></tr></tbody></table><h4 id="UDP校验和"><a href="#UDP校验和" class="headerlink" title="UDP校验和"></a>UDP校验和</h4><p>UDP校验和计算方式是将IP伪头部，UDP头部和数据按照二进制每行16位的格式排列，然后对这些排列好的数据进行补码相加求和(注意：当数字相加时，在最高位的进位要回卷，再加到结果上)，再对得到的结果进行求反码，最终得到的结果就是校验和</p><p><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/UDP%E6%A0%A1%E9%AA%8C%E5%92%8C.jpg" alt="UDP校验和"></p><p><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/huijuan.png"></p><h4 id="TCP-UDP伪头部（pseudo-header）"><a href="#TCP-UDP伪头部（pseudo-header）" class="headerlink" title="TCP/UDP伪头部（pseudo header）"></a>TCP/UDP伪头部（pseudo header）</h4><p>这里需要注意UDP伪头部是在计算校验和时临时与UDP数据报拼接到一起，二者临时相连只是为了计算校验和</p><p><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/TCP_UDP%E4%BC%AA%E5%A4%B4%E9%83%A8.jpg" alt="TCP_UDP伪头部"></p><p>接收方在接收到数据段后利用其中的校验和以及其他部分数据经过计算最终得到的结果每个位应该全部为1，如果出现0，证明传输过程中发生错误。(这里应该注意即便正确，也有可能是多次比特翻转导致最终结果错等于校验和，不代表一定不出错)</p><p>在计算校验和的过程中使用了属于网络层的IP地址，这破坏了分层原则</p><p>UDP提供端点标识，端到端的数据传输，不提供差错检测和可靠传输，但简洁高效</p><h2 id="可靠数据传输原理RDT"><a href="#可靠数据传输原理RDT" class="headerlink" title="可靠数据传输原理RDT"></a>可靠数据传输原理RDT</h2><p>RDT是网络中最重要的问题之一，其所要解决的是“如何利用下层提供的并不可靠的服务，为其上层提供可靠服务”，下层可能出现的问题包括比特反转带来的传输数据错误，或是由于网络原因导致的报文段乱序，以及报文段丢失等问题</p><h3 id="停等协议"><a href="#停等协议" class="headerlink" title="停等协议"></a>停等协议</h3><p>要解决上文所属的可能出现的错误，首先可以被应用的就是停等协议，即在对方报文段到达之前，不进行下一步操作。要解决可能由于比特翻转带来的数据传输错误，需要发送方在报文段头部加入检错码（校验和），而接收方在接收后利用校验和对报文段进行检验，随后通过发送确认报文段的方式，将校验结果返回给发送方，结果可以使用两种：</p><ul><li>确认(ACK)：接收方显式地告诉发送方分组已被正确接收</li><li>否定确认(NAK): 接收方显式地告诉发送方分组发生了差错，发送方收到NAK后，发送方重传分组</li></ul><p>上文所述方法解决了在报文段内容出错时的情况，但没有考虑到，作为重要结果因素的校验结果报文段（ACK/NAK）也有可能出错，一种情况下发生比特翻转导致接收报文段的一方无法识别报文段内容，也无法理解校验结果，一种情况下，ACK/NAK直接丢失，由于停等协议本身的限制条件，对方不做反应或没有接收到对方反应的情况下，双方会陷入死锁状态。而如果只是单纯在没有接收到响应报文段的情况下采取直接重传的措施，则可能导致报文段的重复发送</p><p>为了解决上述问题，需要做出如下改进，为发送方发送的报文段加入序号机制，表明每个分组的序号，加入计时器机制（发送方等待一段合理的时间，一般是一次数据发送到确认分组返回的几倍的时间），在一段时间未收到响应后，对上一个分组进行重传。如果ACK/NAK出错导致不可读，则重传该分组（考虑最坏情况），接收方如果收到重复分组，则直接丢弃该分组并重传上一个分组的确认。（链路层timeout时间是确定的，传输层的timeout时间是自适应的，会根据网络情况进行调整）</p><p><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/rdt21.png"></p><p>无NAK协议指仅使用ACK表明分组接收状态的协议，此时接收方每次只发送最后一个正常接收到的分组，对于错误分组，则直接返回其上一个分组的分组的确认，而发送方在接到确认分组后，就会发送其确认分组对应的数据分组的下一个分组，实现数据的重传。</p><p>这样处理使得确认信息减少一半，使得协议更加简单，并且可以一次性传送多个分组，为下文做准备</p><p>上文所述的方式可以工作，也就是常见的停等协议，但这种方式的效率十分低下（链路容量比较大时，一次发一个PDU 的不能够充分利用链路的传输能力）</p><h4 id="例题："><a href="#例题：" class="headerlink" title="例题："></a>例题：</h4><p><strong>1 Gbps的链路，15 ms端-端传播延时，分组大小为1kB，求其利用率</strong><br>$$<br>T_{transmit}=\frac{L(分组长度，比特)}{R(传输速率，bps)}=\frac{1kB*8}{10^9bps}=8μs<br>$$</p><p>$$<br>RTT=往返时间=15ms+15ms=30ms<br>$$</p><p>$$<br>U_{sender}=\frac{L/R}{RTT+L/R}=\frac{0.008ms}{30ms+0.08ms}=0.00027=0.027%<br>$$</p><p>$U_{sender}$表示当前信道的利用率，即该信道一段时间内用于数据传输的比例，可见效率极低，而其瓶颈在于网络协议限制了物理资源的利用，即由于停等协议导致数据无法发送</p><p>为解决上述存在的利用率低的情况，可以使用流水线协议的方式发送数据，允许发送方在未得到对方确认的情况下一次发送多个分组</p><ul><li>必须增加序号的范围:用多个bit表示分组的序号</li><li>在发送方/接收方要有缓冲区<ul><li>发送方缓冲：未得到确认，可能需要重传；</li><li>接收方缓存：上层用户取用数据的速率≠接收到的数据速率；接收到的数据可能乱序，排序交付（可靠）</li></ul></li></ul><h3 id="滑动窗口协议"><a href="#滑动窗口协议" class="headerlink" title="滑动窗口协议"></a>滑动窗口协议</h3><h4 id="发送缓冲区"><a href="#发送缓冲区" class="headerlink" title="发送缓冲区"></a>发送缓冲区</h4><ul><li>形式：内存中的一个区域，落入缓冲区的分组可以发送</li><li>功能：用于存放已发送，但是没有得到确认的分组</li><li>必要性：需要重发时可用</li><li>发送缓冲区的大小：一次最多可以发送多少个未经确认的分组<ul><li>停止等待协议=1</li><li>流水线协议&gt;1，合理的值，不能很大，链路利用率不能够超100%</li></ul></li><li>发送缓冲区中的分组<ul><li>未发送的：落入发送缓冲区的分组，可以连续发送出去；</li><li>已经发送出去的、等待对方确认的分组：发送缓冲区的分组只有得到确认才能删除</li></ul></li></ul><h4 id="发送窗口"><a href="#发送窗口" class="headerlink" title="发送窗口"></a>发送窗口</h4><ul><li>概念：发送缓冲区内容的一个范围，那些已发送但是未经确认分组的序号构成的空间</li><li>发送窗口的最大值&lt;=发送缓冲区的值</li><li>开始状态：没有发送任何一个分组<ul><li>后沿=前沿</li><li>之间为发送窗口的尺寸=0</li></ul></li><li>每发送一个分组，前沿前移一个单位</li><li>发送窗口前沿移动的极限：不能够超过发送缓冲区</li></ul><h4 id="接收窗口-接收缓冲区"><a href="#接收窗口-接收缓冲区" class="headerlink" title="接收窗口/接收缓冲区"></a>接收窗口/接收缓冲区</h4><ul><li>接收窗口=接收缓冲区，二者范围一致</li><li>接收窗口用于控制哪些分组可以接收；<ul><li>只有收到的分组序号落入接收窗口内才允许接收</li><li>若序号在接收窗口之外，则丢弃</li></ul></li><li>接收窗口尺寸Wr=1，则只能顺序接收；</li><li>接收窗口尺寸Wr&gt;1，则可以乱序接收<ul><li>但提交给上层的分组，要按序</li></ul></li></ul><p><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3huh.png"></p><p><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/%E6%BB%91%E5%8A%A8%E6%8E%A5%E6%94%B6%E7%AA%97%E5%8F%A3.png"></p><h4 id="正常情况下两个窗口之间的动作"><a href="#正常情况下两个窗口之间的动作" class="headerlink" title="正常情况下两个窗口之间的动作"></a>正常情况下两个窗口之间的动作</h4><ul><li>发送窗口<ul><li>有新的分组落入发送缓冲区（或原来发送缓冲区中就存在未发送的分组），则进行分组的发送，并且若发送缓冲区未满则将缓冲区前沿向前移动</li><li>接收到<strong>目标序号</strong>的分组的确认（不是所有已发送分组的确认都可以，必须是未确认分组中的第一个），则缓冲区后沿向前滑动，使更多分组落入缓冲区中</li></ul></li><li>接收窗口<ul><li>收到分组，且落在发送缓冲区范围内，则接收分组</li><li>若收到的是<strong>目标序号</strong>的分组，则返回确认给发送方</li></ul></li></ul><h4 id="异常情况下GBN的窗口动作"><a href="#异常情况下GBN的窗口动作" class="headerlink" title="异常情况下GBN的窗口动作"></a>异常情况下GBN的窗口动作</h4><p>GBN：回退N步协议</p><ul><li>发送窗口<ul><li>有新的分组落入发送缓冲区（或原来发送缓冲区中就存在未发送的分组），则进行分组的发送，并且若发送缓冲区未满则将缓冲区前沿向前移动</li><li>倒数计时器在时间到后，仍未收到目标序号的分组确认，则将当前缓冲区中的所有分组按序重发</li><li>收到重复的旧分组确认，则窗口不进行滑动，没有新分组在缓冲区中能够发送，进而诱发计时器</li></ul></li><li>接收窗口<ul><li>收到乱序窗口，没有在接收窗口范围内，则抛弃</li><li>然后发送旧分组的确认</li></ul></li></ul><h4 id="异常情况下SR的窗口动作"><a href="#异常情况下SR的窗口动作" class="headerlink" title="异常情况下SR的窗口动作"></a>异常情况下SR的窗口动作</h4><p>SR：选择性重传协议</p><ul><li>发送窗口<ul><li>有新的分组落入发送缓冲区（或原来发送缓冲区中就存在未发送的分组），则进行分组的发送，并且若发送缓冲区未满则将缓冲区前沿向前移动</li><li>倒数计时器在时间到后，仍未收到目标序号的分组确认，则将当前缓冲区中的所有分组按序重发</li><li>收到乱序的分组确认，则窗口不进行滑动，没有新分组在缓冲区中能够发送，进而诱发计时器</li></ul></li><li>接收窗口<ul><li>收到乱序分组，落入到接收窗口范围内，接收</li><li>发送该分组的确认，单独确认</li></ul></li></ul><p>简言之，GBN与SR都能一次发送多个未经确认的分组，提高线路的利用率，但GBN接收窗口尺寸为1，只能顺序接收分组，如果乱序，则整个发送窗口内都要被重传，SR接收窗口尺寸大于1，不需要顺序接收分组，每个分组确认单独发送，但只有目标序号分组被确认后，接收窗口才会滑动。GBN只需要维护一个倒数计时器，记录最先发送的未确认分组的时间，在时间结束后，重传所有发送窗口中的分组，SR需要维护所有已发送但未确认分组的倒数计时器，并在指定计时器结束后，重传特定的分组</p><p><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/%E8%BF%90%E8%A1%8C%E4%B8%AD%E7%9A%84GBN.png"><br><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/%E8%BF%90%E8%A1%8C%E4%B8%AD%E7%9A%84SR.png"></p><h3 id="对比GBN与SR"><a href="#对比GBN与SR" class="headerlink" title="对比GBN与SR"></a>对比GBN与SR</h3><table><thead><tr><th>区别</th><th>GBN</th><th>SR</th></tr></thead><tbody><tr><td>优点</td><td>简单，所需资源少（接收方一个缓存单元）</td><td>出错时，重传一个代价小</td></tr><tr><td>缺点</td><td>一旦出错，回退N步代价大</td><td>复杂，所需要资源多（接收方多个缓存单元）</td></tr><tr><td>适用范围</td><td>出错率低：比较适合GBN，出错非常罕见，没有必要用复杂的SR，为罕见的事件做日常的准备和复杂处理</td><td>链路容量大（延迟大、带宽大）：比较适合SR而不是GBN，一点出错代价太大</td></tr><tr><td>窗口尺寸</td><td>$2^n-1$</td><td>$2^{n-1}$</td></tr></tbody></table><h2 id="TCP数据段"><a href="#TCP数据段" class="headerlink" title="TCP数据段"></a>TCP数据段</h2><h3 id="TCP-传输控制协议"><a href="#TCP-传输控制协议" class="headerlink" title="TCP-传输控制协议"></a>TCP-传输控制协议</h3><p><strong>（Transmission Control Protocol）</strong></p><p>是专门为了<strong>在不可靠的网络上提供可靠的端到端的字节流</strong>而设计的（应用进程到进程）。TCP必须动态地适应不同的拓扑、带宽、延迟、分组大小和其它的参数，并且当有错误的时候，能够足够健壮</p><p>支持TCP的机器都有一个TCP实体，或者是用户进程，或者是操作系统内核。都可以管理TCP流跟IP层接口，TCP是一个全双工的协议，在同一个连接下，数据可以双向传输，双方均可以作为发送方或接收方，并且这种发送和接收可以同时进行。采用管道化（流水线）技术进行报文段的发送，即可以在未经接收方确认的情况下发送多个报文段。发送方与接收方都有缓存空间，发送方的缓存空间是为了方便数据出错或计时器结束时进行报文段的重发，接收方的缓存空间是为了处理接收的数据，对数据进行排序。</p><p>TCP发送的数据是可靠的，有序的字节流，但会根据情况对完整的报文进行切分，报文的还原工作完全由应用层负责，同时负责区分报文的边界</p><ul><li>发方：封装 <ul><li>TCP实体接收本地进程的用户数据流，将其分割成不过64kB的分片（实践中，通常分割成1460字节，以通过以太网传输）</li></ul></li><li>收方：解封装<ul><li>当包含TCP数据段的报文到达某台机器的时候，被提交给传输实体，传输实体将其重构出原始的字节流</li></ul></li></ul><ul><li>TCP连接上的每个字节都有它自己独有的32位序列号</li><li>收发双方的TCP实体以数据段的形式交换数据</li><li>一个数据段包括20字节的头部（不包括可选项）和数据域（0或更多字节） </li></ul><p>TCP软件决定数据段的大小，有两个因素限制了数据段的长度：</p><ul><li>TCP数据段必须适合IP的65515（65535B-20B）的载荷限制(65535B是IP分组最大长度，20是IP分组头部固定长度，65515就是IP分组净载荷)</li><li>每个TCP数据段必须适合于下层网络的 MTU （如，1500 字节以太网载荷大小）</li><li>TCP使用的基本协议具有动态窗口大小的滑动窗口协议<br>（sliding window protocol）</li></ul><h3 id="TPDU-TCP数据段"><a href="#TPDU-TCP数据段" class="headerlink" title="TPDU TCP数据段"></a>TPDU TCP数据段</h3><p><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/TPDU.jpg" alt="TPDU"></p><h4 id="源端口和目的端口字段"><a href="#源端口和目的端口字段" class="headerlink" title="源端口和目的端口字段"></a>源端口和目的端口字段</h4><p>标明了一个连接的两个端点，是通信五元组中的两个重要元素，用来跟踪同一时间内通过网络的不同会话。一般每个端口对应一个应用程序</p><h4 id="序列号-–-字节号-32-位"><a href="#序列号-–-字节号-32-位" class="headerlink" title="序列号 – 字节号 (32 位)"></a>序列号 – 字节号 (32 位)</h4><p>报文段首字节的在字节流的编号，标识了该报文段中数据的首字节在整段报文中的顺序，其中最特殊的是初始序列号ISNs(initial sequence numbers )：随机产生的</p><h4 id="确认号"><a href="#确认号" class="headerlink" title="确认号"></a>确认号</h4><p>期望从另一方收到的下一个字节的序号(32位)，在TCP中为了保证可靠传输，采用了肯定确认重传技术，确认号就是用于肯定确认重传</p><h4 id="TCP段头长度"><a href="#TCP段头长度" class="headerlink" title="TCP段头长度"></a>TCP段头长度</h4><p>单位32位（4字节），含义与IP的段头长度完全一致</p><h4 id="保留域-字段"><a href="#保留域-字段" class="headerlink" title="保留域/字段"></a>保留域/字段</h4><p>即图中灰色部分，现在也开始逐步使用（进行拥塞控制等）</p><h4 id="控制比特"><a href="#控制比特" class="headerlink" title="控制比特"></a>控制比特</h4><p>URG，ACK，PSH，RST，SYN，FIN共6部分，每部分1byte，称作控制比特</p><ul><li>URG：当紧急指针使用的时候，URG被置为1。紧急指针是一个对于当前序列号的字节偏移量，标明紧急数据从哪里开始<ul><li>当URG=1时，表明有紧急数据，必须首先处理</li><li>与紧急指针配合使用</li><li>收方收到这样的数据后，马上处理，处理完后恢复正常操作</li><li>即使win=0，也可以发送这样的紧急数据段</li></ul></li><li>ACK：1表示确认号有效，0表示确认号无效</li><li>PSH：表示这是带有PUSH标志的数据接收方收到这样的数据，应该立刻送到上层，而不需要缓存它</li><li>RST：被用来重置一个已经混乱的连接</li><li>SYN 用在连接建立的过程<ul><li>SYN=1，ACK=0：连接请求</li><li>SYN=1，ACK=1：连接接受</li></ul></li><li>FIN：被用来释放连接，它表示发送方已经没有数据要传输了，但是可以继续接收数据</li></ul><h4 id="窗口尺寸"><a href="#窗口尺寸" class="headerlink" title="窗口尺寸"></a>窗口尺寸</h4><p>愿意接收的字节数量，为了避免收方被大量涌入数据所淹没，TCP实体进行了流控（Flow Control）。通常使用可变长的滑动窗口来完成流控。所以第十二个字段用16位来表示窗口尺寸</p><p>告诉对方可以发送的数据字节数（从确认字节号开始（决定于接收方）</p><h4 id="校验和"><a href="#校验和" class="headerlink" title="校验和"></a>校验和</h4><p>与UDP中的校验和是一样的，唯一区别在于协议位置的编号不一样</p><h4 id="紧急指针"><a href="#紧急指针" class="headerlink" title="紧急指针"></a>紧急指针</h4><p>和URG数据段配合使用，指明了紧急数据</p><h4 id="选项域-可选"><a href="#选项域-可选" class="headerlink" title="选项域(可选)"></a>选项域(可选)</h4><p>提供了一种增加基本头没有包含内容的方法</p><h2 id="TCP三次握手建立连接"><a href="#TCP三次握手建立连接" class="headerlink" title="TCP三次握手建立连接"></a>TCP三次握手建立连接</h2><p>TCP提供的是面向连接的服务，TCP数据段的传输是在TCP连接上进行的。而TCP连接是三次握手建立的，三次连接主要是为了使双方互相同意连接的建立，并且互相同意连接的参数（双方的起始序号）</p><h3 id="TCP连接的建立"><a href="#TCP连接的建立" class="headerlink" title="TCP连接的建立"></a>TCP连接的建立</h3><ul><li>一方（server）被动地等待一个进来的连接请求</li><li>另一方（the client）通过发送连接请求，设置一些参数（第一次握手）</li><li>服务器方回发确认应答（第二次握手）</li><li>应答到达请求方，请求方最后确认，连接建立（第三次握手）</li></ul><p><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B.jpg" alt="三次握手"></p><p>在经过三次握手后，就成功建立了TCP连接，任何采用TCP的应用在正式传输数据前都会先建立这条连接。</p><p>三次握手建立TCP连接也被称为同步。这个过程中双方交换的最重要参数就是初始序列号，初始序列号可以用来跟踪后续交换的每一个字节</p><p>建立TCP连接的双方没有主从之分，它们可以相互收发数据，也就是说TCP数据段的传输是全双工的</p><h3 id="DoS攻击"><a href="#DoS攻击" class="headerlink" title="DoS攻击"></a>DoS攻击</h3><p>三次握手连接可能导致一些安全问题，例如著名的：SYN泛洪导致DoS攻击</p><p><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/DoS.jpg" alt="DoS"></p><p>服务器通过大量的代理服务器，向被攻击的机器不断发送大量（泛洪）的第一次握手信息SYN，被攻击机器在收到第一次握手信息后会回发第二次握手信息，并且等待接收第三次握手信息，但是由于发送的第一次握手信息使用了伪造的IP地址，所以被攻击的机器永远无法收到第三次握手信息，这让被攻击者挂起很多进程在等待，最终因为资源耗尽而瘫痪</p><h2 id="TCP连接释放"><a href="#TCP连接释放" class="headerlink" title="TCP连接释放"></a>TCP连接释放</h2><p>经过三次握手建立TCP连接之后，就可以开始进行数据的传输，在数据传输完后，就需要释放掉这条TCP连接</p><ul><li>任何一方在没有数据要传送的时候，都可以发送一个FIN置位了的 TCP 数据段</li><li>当FIN被确认的时候，该方向的连接被关闭</li><li>当双向连接都关闭了的时候，连接释放</li></ul><p>由于决定何时两边都释放这个问题具有一定难度，它极易形成两军队问题</p><blockquote><p>两军队攻击敌人，单独出击必败，两军出击必胜，如何战胜敌人？最好的方法就是相互通信决定攻击时间，但一方发出消息后无法确定对方是否成功收到消息，因此对方会发出确认消息，由此双方会不断互发确认消息，无法结束,即最后信息的发送者，永远无法知道这个信息是否到达</p></blockquote><ul><li>为了避免两军队（two-army）问题，使用定时器：<ul><li>如果一方发送了FIN数据段出去却在一个设定的时间没有收到应答，释放连接。另一方最终会注意到连接的对方已经不在了，超时后连接释放</li></ul></li><li>理论上讲，如果初始DR的和重传都丢了，协议失败<ul><li>发送者将放弃发送且释放连接，但是，另外一端却不知道这些情况，仍然处于活跃的状态，这种情形导致半开放连接（half-open）</li></ul></li><li>杀死半开放连接的方式<ul><li>如果在一定的时间内，没有TPDUs到达的话，连接自动释放</li><li>如果这样，传输实体在发送一个TPDU的时候必须启动定时<br>器，定时器超期，将发动一个哑TPDU（dummy TPDU），以免被断掉</li></ul></li></ul><h3 id="三次握手正常释放连接"><a href="#三次握手正常释放连接" class="headerlink" title="三次握手正常释放连接"></a>三次握手正常释放连接</h3><p><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/%E6%AD%A3%E5%B8%B8%E9%87%8A%E6%94%BE.jpg" alt="正常释放"></p><h3 id="TCP四次挥手终止会话"><a href="#TCP四次挥手终止会话" class="headerlink" title="TCP四次挥手终止会话"></a>TCP四次挥手终止会话</h3><p><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/%E5%9B%9B%E6%AC%A1%E6%8C%A5%E6%89%8B.jpg" alt="四次挥手"></p><h3 id="最后的确认TPDU丢失"><a href="#最后的确认TPDU丢失" class="headerlink" title="最后的确认TPDU丢失"></a>最后的确认TPDU丢失</h3><p><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/%E4%B8%A2%E5%A4%B1%E9%87%8A%E6%94%BE.jpg" alt="丢失释放"></p><h2 id="TCP传输策略-TCP流量控制"><a href="#TCP传输策略-TCP流量控制" class="headerlink" title="TCP传输策略-TCP流量控制"></a>TCP传输策略-TCP流量控制</h2><p>在数据的接收端拥有缓冲区用于存储未被取走的报文数据，应用层中的各个应用进程负责取走各自的数据，传输层负责取出数据放入缓冲区，但应用取走缓冲数据并不是实时的，其可能在需要时才取走数据，这就导致了缓冲区数据有溢出的可能</p><p>TCP传输采用了基本的肯定确认重传技术，TCP以数据段形式传输数据，一个数据段包含很多字节，相当于批量传输。为避免大量数据淹没接收方，采用流控技术。利用到了数据段当中的一个字段窗口尺寸（Window Size）。</p><p><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/%E4%BC%A0%E8%BE%93%E7%AD%96%E7%95%A5.jpg" alt="传输策略"></p><p>可以看到整个流程中发送方首先向接收方传输了一个数据段，这个数据段大小2K，SEQ为0，表示从0开始填充字节</p><p>接收方大小为4K，此时接收方为空，接收方在成功接收数据段后剩余2K空余位置，然后向发送方回发确认，确认中包括了ACK=2048表示成功接收到了2048以前的字段，期望接受从2048往后的字段，以及WIN=2048表示接收方还剩余2K位空余位置，下次传输数据的大小不能超过2K</p><p>发送方在接收到确认后会继续发送剩余数据，可以看到，发送方在下次发送时，会根据确认调整传输数据大小以及初始序列号（SEQ）</p><p>在第二次传输数据完成后，接收方被占满，没有了空余位置，接收方收到确认后就会开始等待，等接收方重新获得空余位置并再次返回确认后再继续发送数据，知道所有数据全部传输完成</p><p>当窗口数为 0 时，发送者不能正常发送数据段，除非:</p><ul><li>Urgent数据。比如，用户想杀掉远端机器上的进程的时候，可以发送数据</li><li>发送者可以发送一个字节的数据段，以便让接收者再次发送期待接收的字节号和窗口数（避免死锁）</li></ul><p>发送者不需要马上发送应用程序产生的数据,接收者也不需要马上发送应答（当收到数据的时候）</p><p>考虑一个指向某交互式编辑器（远程）的TELNET 连接，该编辑器对用户的每次击键都作出响应，在最坏的情况下：</p><ul><li>当用户敲入一个字符的时候，被送到传输实体，创建一个21字节的数据段，在传到网络层，变成了41字节的IP分组</li><li>接收方（运行着编辑器的远端机）收到这个信息后，会立刻发送一个40字节的确认分组（20字节的TCP段头和20字节的IP头）</li><li>随后，当编辑器读取出这个字节，TCP实体发送一个窗口更新，这个分组也是40字节</li><li>最后，当编辑器处理了这个字符，它发送一个41字节的分组作为该字符的回显</li><li>总共累计起来，对于每个敲入的字符，需要至少 162 字节的带宽（还没有考虑到链路层的开销），发送4个数据段</li></ul><p><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/telnet%E6%9C%80%E5%9D%8F%E6%83%85%E5%86%B5.jpg" alt="telnet最坏情况"></p><h3 id="优化接收端"><a href="#优化接收端" class="headerlink" title="优化接收端"></a>优化接收端</h3><p>接收端可以推迟500ms发送确认分组和窗口更新窗口，以便可以免费搭载在处理后的回显分组内（free ride）</p><h3 id="优化发送端"><a href="#优化发送端" class="headerlink" title="优化发送端"></a>优化发送端</h3><h4 id="Nagle算法"><a href="#Nagle算法" class="headerlink" title="Nagle算法"></a>Nagle算法</h4><ul><li>当数据以一次一字节的速度到达的时候，只发送第一个字节，然后将后续的字节缓存起来，直到发出的字节得到确认</li><li>将缓存起来的字节在一个数据段中发出，再继续缓存，直到发出的数据得到确认</li></ul><p>Nagle算法在很多TCP上实现，但是有些时候最好禁用，比如：当一个X-Windows应用在互联网运行的时候，鼠标的移动事件必须发送给远程计算机，把这些移动事件收集起来一批一批发送出去，使得鼠标的移动极不连贯</p><h3 id="傻瓜窗口综合症"><a href="#傻瓜窗口综合症" class="headerlink" title="傻瓜窗口综合症"></a>傻瓜窗口综合症</h3><p>另一个使TCP性能退化的问题是傻瓜窗口综合症（silly window syndrome problem）：当有大块数据被传递给发送端TCP实体，但接收端的交互式应用每次只读取一个字节的时候，就会出现问题：</p><p>发送方每向接收方发送一个连接数据段，就会占满整个接收方的空间，然后接收方就会返回一个剩余大小为0的确认，导致发送方等待一段时间，直到新的确认返回后继续发送消息，但只要一发送数据段就会占满，导致数据无法从输入端传递到输出端。</p><h4 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h4><p><strong>Clark解决方案</strong> ：阻止接收方发送只有1个字节的窗口更新，<br>相反，它必须等待一段时间，当有了一定数量的空间之后再<br>告诉发送方，接收方可以可以维护一个内部缓冲，且阻塞上层应用的READ 请求，直到它有大块的数据提供</p><h3 id="总述："><a href="#总述：" class="headerlink" title="总述："></a>总述：</h3><ul><li>发送方<ul><li>尽量不发送数据含量小的数据段</li><li>缓存应用层的数据，达到一定量再发送</li></ul></li><li>接收方<ul><li>不请求对方发送短数据段(window size)</li><li>延迟窗口变更信息，使接收缓冲区足够大</li></ul></li></ul><h2 id="拥塞控制原理"><a href="#拥塞控制原理" class="headerlink" title="拥塞控制原理"></a>拥塞控制原理</h2><blockquote><p>网络的吞吐量与通信子网负荷(即通信子网中正在传输的分组数)有着密切的关系。当通信子网负荷比较小时,网络的吞吐量(分组数/秒)随网络负荷(每个节点中分组的平均数)的增加而线性增加。当网络负荷增加到某一值后,若网络吞吐量反而下降，则表征网络中出现了拥塞现象(由于此时排队延时趋于无穷，快速增大)。在一个出现拥塞现象的网络中，到达某个节点的分组将会遇到无缓冲区可用的情况，从而使这些分组不得不由前一节点重传,或者需要由源节点或源端系统重传。当拥塞比较严重时，通信子网中相当多的传输能力和节点缓冲器都用于这种无谓的重传，从而使通信子网的有效吞吐量下降。由此引起恶性循环，使通信子网的局部甚至全部处于死锁状态，最终导致网络有效吞吐量接近为零。</p></blockquote><p>拥塞的表现有：</p><ul><li>分组丢失(路由器缓冲区溢出)</li><li>分组经历比较长的延迟(在路由器的队列中排队)</li></ul><h3 id="引起拥塞的主要原因"><a href="#引起拥塞的主要原因" class="headerlink" title="引起拥塞的主要原因"></a>引起拥塞的主要原因</h3><h4 id="1-路由器缓冲区容量有限"><a href="#1-路由器缓冲区容量有限" class="headerlink" title="1. 路由器缓冲区容量有限"></a>1. 路由器缓冲区容量有限</h4><p>多个分组短时间内同时到达路由器同一个端口尝试输出时，路由器需要建立输出队列控制分组通过端口的输出顺序，同时，需要将暂时不能输出的分组缓存在路由器的缓存空间中，如果分组数量超过缓存空间大小，则超出部分的分组会被路由器丢弃，同时由于排队输出的原因导致拥塞产生。</p><p>适当增加路由器缓存空间大小可以一定程度上减轻这种情况，但一味的增加缓存空间大小，只会导致拥塞情况更加严重，过多的分组堆积在路由器处，不能在规定时间到达接收方触发确认返回，导致计时器结束后分组被重传，可实际上，此时的原分组只是阻塞在链路上，并不是丢失，一次次引发重传使得网络资源被浪费，并且进一步加重了网络的拥塞</p><h4 id="2-传输线路的带宽有限"><a href="#2-传输线路的带宽有限" class="headerlink" title="2. 传输线路的带宽有限"></a>2. 传输线路的带宽有限</h4><p>过多的分组同时通过输出线路进行传输，逼近传输链路的带宽极限，导致排队时延陡增，整条线路产生拥塞</p><h4 id="3-路由器的处理能力有限"><a href="#3-路由器的处理能力有限" class="headerlink" title="3. 路由器的处理能力有限"></a>3. 路由器的处理能力有限</h4><p>如果路由器处理器处理排队,更新路由表等操作时,速度跟不上高速链路,就会发生网络拥塞</p><h3 id="常见的拥塞控制方法"><a href="#常见的拥塞控制方法" class="headerlink" title="常见的拥塞控制方法"></a>常见的拥塞控制方法</h3><h4 id="1-端到端的拥塞控制"><a href="#1-端到端的拥塞控制" class="headerlink" title="1. 端到端的拥塞控制"></a>1. 端到端的拥塞控制</h4><ul><li>没有来自网络的显式反馈</li><li>端系统根据延迟和丢失事件推断是否有拥塞</li><li>是TCP采用的方法</li></ul><h4 id="2-网络辅助的拥塞控制"><a href="#2-网络辅助的拥塞控制" class="headerlink" title="2. 网络辅助的拥塞控制"></a>2. 网络辅助的拥塞控制</h4><ul><li>路由器提供给端系统以反馈信息</li><li>单个bit置位，显示有拥塞(SNA, DECbit, TCP/IP ECN, ATM)</li><li>显式提供发送端可以采用的速率</li></ul><h3 id="ATM-ABR拥塞控制方法"><a href="#ATM-ABR拥塞控制方法" class="headerlink" title="ATM ABR拥塞控制方法"></a>ATM ABR拥塞控制方法</h3><p>发送端与接收端通过信元（cell）进行数据传输</p><ul><li>数据信元（data cell）负责进行数据的传输</li><li>资源管理信元（RM cell）由发送端发送，在数据信元间间隔插入<ul><li>RM信元上设有网络辅助比特，这些辅助比特由链路中的交换机进行修改</li><li>NI bit:no increase in rate (轻微拥塞)速率不要增加了</li><li>CI bit:congestion indication 拥塞指示</li><li>发送端发送的RM信元被接收端返回, 接收端不做任何改变</li><li>在RM信元中还设有两个字节的ER (explicit rate)字段，处于拥塞的交换机可能会降低信元中ER字段的值（若比当前字段值还拥塞则降低该值，若持平或由于该值的拥塞情况则不修改），所以该值可以表征当前链路中最低的可支持速率<br><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/ATM_ABR.png"></li></ul></li></ul><h2 id="TCP拥塞控制"><a href="#TCP拥塞控制" class="headerlink" title="TCP拥塞控制"></a>TCP拥塞控制</h2><p>TCP进行拥塞控制的机制是端到端的拥塞控制机制，即路由器并不向主机反馈有关拥塞的信息，这样可以减轻路由器的压力，并且符合TCP/IP架构所遵循的网络核心简单的原则。端系统根据自身得到的信息，判断网络拥塞情况，进而采取动作</p><p>虽然网络层也试图管理拥塞，但是，大多数繁重的任务是由<br>TCP来完成的，因为针对拥塞的真正解决方案是<strong>减慢数据率</strong>，所以TCP遵循<strong>分组守恒</strong>即当有一个老的分组离开之后才允许新的分组注入网络。 TCP希望通过动态维护窗口大小来实现这个目标</p><h3 id="TCP拥塞检测（Congestion-detection）"><a href="#TCP拥塞检测（Congestion-detection）" class="headerlink" title="TCP拥塞检测（Congestion detection）"></a>TCP拥塞检测（Congestion detection）</h3><p>所有的互联网TCP算法都假定<strong>超时是由拥塞引起</strong>的，并且通过<strong>监视超时</strong>的情况来判断是否出现问题</p><p>另外，网络中还存在轻微拥塞的概念，端系统在收到三个冗余的ACK（一个正常ACK后收到三个冗余ACK）的情况下，会判定网络处于轻微拥塞的状态</p><h4 id="拥塞控制-（Congestion-prevention）"><a href="#拥塞控制-（Congestion-prevention）" class="headerlink" title="拥塞控制 （Congestion prevention）"></a>拥塞控制 （Congestion prevention）</h4><ul><li>当一个连接建立的时候，双方选择一个合适的<strong>窗口大小</strong>，接收方根据自己的<strong>缓冲区大小</strong>来指定窗口的大小。</li><li>如果发送者遵守此窗口大小的限制，则接收端不会出现缓冲区溢出的问题，但可能由于<strong>网络内部的拥塞</strong>而发生问题（网络内部的瓶颈）</li></ul><p><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/TCP%E6%8B%A5%E5%A1%9E%E6%8E%A7%E5%88%B6.jpg" alt="TCP拥塞控制"></p><p>如图中（a）快速的网络向小容量的接收方传输数据（接收者容量问题），（b）慢速的网络向大容量的接受方传输数据（网络容量问题）</p><p>互联网解决方案应该是认识到两个潜在的问题的：网络容量，接收者容量，然后单独地处理这两个问题</p><ul><li><strong>接收窗口</strong> 大小反映了目前窗口的容量 （<strong>容易控制</strong>）</li><li><strong>拥塞窗口</strong> 大小反映了网络目前的容量（<strong>难于控制</strong>）</li></ul><p>为此要保证发送者发送的数据字节数是两个窗口中小的那个窗口数，这样就既不会因为接收者窗口大小导致拥塞，也不会因为网络容量大小导致拥塞，实际上，接收窗口反映了网络中的流量控制问题，拥塞窗口反映了网络中的拥塞控制问题。所以在实际控制中需要采取联合控制的方法，发送端控制发送但是未确认的量同时也不能够超过接收窗口，满足流量控制要求</p><p>$$SendWin(发送窗口)=min{CongWin(拥塞窗口), RecvWin(接收窗口)}$$</p><h3 id="TCP拥塞控制策略"><a href="#TCP拥塞控制策略" class="headerlink" title="TCP拥塞控制策略"></a>TCP拥塞控制策略</h3><h4 id="1-慢启动算法Slow-Start"><a href="#1-慢启动算法Slow-Start" class="headerlink" title="1. 慢启动算法Slow Start"></a>1. 慢启动算法Slow Start</h4><p>（决定拥塞窗口的大小）</p><ul><li>当连接建立的时候，发送者用当前使用的最大数据段长度（MSS）初始化拥塞窗口（设置CongWin=1MSS），然后发送一个最大的数据段<ul><li>速率：$rate≈\frac{CongWin}{RTT}bytes/sec$</li><li>例如：MSS = 1460bytes 并且 RTT = 200 msec 则初始速率= 58.4kbps</li></ul></li><li>如果在定时器超期之前收到确认，则将拥塞窗口翻倍，然后发送两个数据段……直至超时（或达到接收方窗口的大小）</li><li>确定出拥塞窗口的大小</li></ul><p>因此在达到接收窗口大小或超时前，慢启动算法下的拥塞窗口大小都是以指数形式增长的，特点是启动初值很低，但是增长速度很快</p><p><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/%E6%85%A2%E5%90%AF%E5%8A%A8%E7%AE%97%E6%B3%95.jpg" alt="慢启动算法"></p><h4 id="2-AIMD-加性增，乘性减"><a href="#2-AIMD-加性增，乘性减" class="headerlink" title="2. AIMD 加性增，乘性减"></a>2. AIMD 加性增，乘性减</h4><ul><li>乘性减<ul><li>丢失事件后将CongWin降为1，将CongWin/2作为阈值，进入慢启动阶段（倍增直到CongWin/2）</li></ul></li><li>加性增<ul><li>当CongWin&gt;阈值时，一个RTT内如没有发生丢失事件,将CongWin加1MSS进行探测，逐渐逼近当前网络容量</li></ul></li></ul><p><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/sdhuduiah.jpg"></p><ul><li>收到三个冗余ACK的情况下，表示网络进入轻微拥塞，但还具有一定的段传输能力<ul><li>CongWin减半</li><li>窗口（缓冲区大小）之后线性增长</li></ul></li><li>超时时间发生后，表示网络进入拥塞状态<ul><li>CongWin被设置成1 MSS，进入SS（慢启动）阶段，之后窗口指数增长</li><li>增长到一个阈值（上次发生拥塞的窗口的一半）时，再线性增加</li></ul></li></ul><h4 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h4><ul><li>线性增长，可以将越来越粗放的窗口尝试力度变小，以获得更准确的拥塞窗口值</li><li>TCP慢启动算法就是这样不断超时，不断重启，尝试出的拥塞控制窗口值也随着网络状况的变化而变化，达到拥塞控制的目的</li><li>如果收到一个ICMP抑制分组（ ICMP source quench）并被送给TCP传输实体 ，则这个事件被当作超时对待</li></ul><h3 id="TCP拥塞控制状态"><a href="#TCP拥塞控制状态" class="headerlink" title="TCP拥塞控制状态"></a>TCP拥塞控制状态</h3><ul><li>当CongWin &lt; Threshold(阈值), 发送端处于慢启动阶段（slow-start）, 窗口指数性增长</li><li>当CongWin &gt; Threshold, 发送端处于拥塞避免阶段（congestion-avoidance）, 窗口线性增长</li><li>当收到三个重复的ACKs (triple duplicate ACK),Threshold设置成CongWin/2，CongWin=Threshold+3</li><li>当超时事件发生时timeout, Threshold=CongWin/2,CongWin=1 MSS，进入SS阶段</li></ul><h3 id="TCP平均吞吐量"><a href="#TCP平均吞吐量" class="headerlink" title="TCP平均吞吐量"></a>TCP平均吞吐量</h3><p>使用窗口window尺寸W和RTT来描述</p><ul><li>忽略慢启动阶段，假设发送端总有数据传输</li><li>W：发生丢失事件时的窗口尺寸（单位：字节）</li><li>平均窗口尺寸：3/4W</li><li>平均吞吐量：1RTT时间内吞吐3/4W $avg TCP thruput=\frac{\frac{3}{4}W}{RTT}bytes/sec=\frac{3}{4}*\frac{W}{RTT}bytes/sec$ </li></ul><p><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/dahsufji.png"></p><h3 id="TCP的公平性"><a href="#TCP的公平性" class="headerlink" title="TCP的公平性"></a>TCP的公平性</h3><h4 id="公平性目标"><a href="#公平性目标" class="headerlink" title="公平性目标"></a>公平性目标</h4><p>如果K个TCP会话分享一个链路带宽为R的瓶颈，每一个会话的有效带宽为R/K<br><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/gongpingxing.png"></p><h4 id="TCP是公平的原因"><a href="#TCP是公平的原因" class="headerlink" title="TCP是公平的原因"></a>TCP是公平的原因</h4><p>2个竞争的TCP会话:始终遵循加性增加，斜率为1, 吞吐量增加。乘性减，吞吐量比例减少<br><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/gongpingxingshid.png"></p><ul><li>UDP不是公平性的，其尽其所能向网络中传输数据，所以其对TCP具有侵略性</li><li>TCP的公平性针对的是连接间的，而不是端口间或应用间的，例如两个应用，其中一个建立九条TCP连接，一个建立一条TCP连接，最后占据九条的分走网络带宽的9/10，占据一条的只能分走1/10</li></ul><h2 id="TCP定时器"><a href="#TCP定时器" class="headerlink" title="TCP定时器"></a>TCP定时器</h2><h3 id="重传定时器"><a href="#重传定时器" class="headerlink" title="重传定时器"></a>重传定时器</h3><p>TCP采用了肯定确认重传技术来保证每一个字节的可靠传输，为解决数据段丢失问题，每发一个数据段都会启动一个<strong>重传定时器</strong>，它是最重要的定时器之一</p><p>它的时间设置需要非常多的考量，如果时间设置过长，就会导致等待时间过长，如果设置过短，可能引发频繁的超时和重传</p><h3 id="快速重传"><a href="#快速重传" class="headerlink" title="快速重传"></a>快速重传</h3><p>重传定时器所设置的时间一般比较保守，都比较长，如果单纯依靠重传定时器完成数据的重传，会导致在网络较差的环境下延时较长，快速重传通关检测重复的ACK判定报文段的丢失并进行重传</p><p>发送方通常发送大量的报文段，如果其中的报文段丢失，通常会引发接收方发送多个重复的ACK</p><p><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/vchongchuan.png"></p><p>以上图为例，当50-59部分的报文段丢失后，后续报文段到达接收方，接收方发现不是所期待的分组，所以仍然发送前一个报文段的确认，即对49之前字节的报文段确认并再次请求50字节及以后的报文段，发送方在接收到正常的确认报文段后又接收到了三个重复的ACK，此时发送方会直接重发所请求的报文段，而不再等待重传计时器（三次重复已经说明该报文段有大概率丢失了）</p><h3 id="持续定时器"><a href="#持续定时器" class="headerlink" title="持续定时器"></a>持续定时器</h3><p>用来避免如下的死锁（ deadlock ）发生</p><h4 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁</h4><ul><li>接收方发送了一个窗口数为零的确认（窗口更新），告诉发送方等待。</li><li>稍后，接收方空出了缓冲，发送更新窗口的数据段，但是，很不幸，该分组中途丢失</li><li>现在，收发双方都在等待对方发送数据段过来，但永远等不到，死锁产生。</li></ul><h4 id="利用持续定时器解决死锁问题"><a href="#利用持续定时器解决死锁问题" class="headerlink" title="利用持续定时器解决死锁问题"></a>利用持续定时器解决死锁问题</h4><p>当接收方发送一个窗口数为0的确认后，发送方开始启动一个持续定时器</p><p>此时，如果接收方在计时器限定时间范围内空出空间，并成功发送新确认到发送方，持续计时器结束并继续数据传输</p><p>假设持续计时器时间为0新的确认还没有到达，此时发送方就会发送一个探测数据段，里边没有任何数据内容，单纯引发接收方重新发送一个确认，以解决死锁问题</p><h3 id="保活定时器"><a href="#保活定时器" class="headerlink" title="保活定时器"></a>保活定时器</h3><p>用来检查连接是否存活，当一个连接空闲的时间超过保活定时器的时间，该连接将被杀掉。</p><p>还有在关闭时刻处于TIMED WAIT状态中使用的定时器：运行两倍的最大分组生存时间，以确保连接关闭之后，该连接上的所有分组都完全消失。</p><table><thead><tr><th>性能</th><th>TCP</th><th>UDP</th></tr></thead><tbody><tr><td>可靠性</td><td>T</td><td>F</td></tr><tr><td>传输延迟</td><td>不确定</td><td>网络延迟</td></tr><tr><td>拥塞控制</td><td>T</td><td>F</td></tr></tbody></table><h4 id="TCP"><a href="#TCP" class="headerlink" title="TCP"></a>TCP</h4><ul><li>可靠传输方式</li><li>可让应用程序简单化，程序员可以不必进行错误检查、修正等工作</li></ul><h4 id="UDP"><a href="#UDP" class="headerlink" title="UDP"></a>UDP</h4><ul><li>为了降低对计算机资源的需求（DNS）</li><li>应用程序本身已提供数据完整性的检查机制，勿须依赖传输层的协议来保证</li><li>应用程序传输的并非关键性的数据（路由器周期性的路由信息交换）</li><li>一对多方式，必须使用UDP（TCP限于一对一的传送）（视频传播）</li></ul>]]></content>
      
      
      <categories>
          
          <category> 计算机基础 </category>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>19-MyBatis注解开发</title>
      <link href="/2021/03/21/19-MyBatis%E6%B3%A8%E8%A7%A3%E5%BC%80%E5%8F%91/"/>
      <url>/2021/03/21/19-MyBatis%E6%B3%A8%E8%A7%A3%E5%BC%80%E5%8F%91/</url>
      
        <content type="html"><![CDATA[<h1 id="MyBatis注解开发"><a href="#MyBatis注解开发" class="headerlink" title="MyBatis注解开发"></a>MyBatis注解开发</h1><p>MyBatis同时支持注解开发模式，在面对简单的配置时，注解开发可以明显的减轻开发难度</p><h2 id="MyBatis注解类型"><a href="#MyBatis注解类型" class="headerlink" title="MyBatis注解类型"></a>MyBatis注解类型</h2><table><thead><tr><th>注解</th><th>作用</th></tr></thead><tbody><tr><td>@Insert</td><td>用于执行新增语句</td></tr><tr><td>@Update</td><td>用于执行更新语句</td></tr><tr><td>@Delete</td><td>用于执行删除语句</td></tr><tr><td>@Select</td><td>用于执行查询语句</td></tr><tr><td>@Result</td><td>用于实现结果集的封装</td></tr><tr><td>@Results</td><td>与@Result一起使用，实现多个结果集的封装</td></tr><tr><td>@One</td><td>实现一对一结果集的封装</td></tr><tr><td>@Many</td><td>实现一对多或多对多的结果集的封装</td></tr></tbody></table><h2 id="基本使用步骤"><a href="#基本使用步骤" class="headerlink" title="基本使用步骤"></a>基本使用步骤</h2><h3 id="直接在mapper接口类中使用注解"><a href="#直接在mapper接口类中使用注解" class="headerlink" title="直接在mapper接口类中使用注解"></a>直接在mapper接口类中使用注解</h3><p>参数传入的是要执行的sql语句</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Select(&quot;select * from user&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">findAll</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="meta">@Insert(&quot;insert into user values (#&#123;id&#125;,#&#123;username&#125;,#&#123;password&#125;)&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">(User user)</span></span>;</span><br><span class="line">    <span class="meta">@Update(&quot;update user set username=#&#123;username&#125;,password=#&#123;password&#125; where id=#&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(User user)</span></span>;</span><br><span class="line">    <span class="meta">@Delete(&quot;delete from user where id=#&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">(Long id)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="在核心文件配置扫描器，扫描指定包下的注解"><a href="#在核心文件配置扫描器，扫描指定包下的注解" class="headerlink" title="在核心文件配置扫描器，扫描指定包下的注解"></a>在核心文件配置扫描器，扫描指定包下的注解</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--加载映射关系--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--加载映射关系：扫描注解--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;cn.ywrby.mapper&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">package</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="一对一模型使用注解开发"><a href="#一对一模型使用注解开发" class="headerlink" title="一对一模型使用注解开发"></a>一对一模型使用注解开发</h2><p>通过@Results和@Result配置映射关系进行一对一模型的注解开发(column表示数据段名称，property表示类中属性值名称)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">OrderMapper</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Results(&#123;</span></span><br><span class="line"><span class="meta">            @Result(column = &quot;oid&quot;,property = &quot;id&quot;),</span></span><br><span class="line"><span class="meta">            @Result(column = &quot;orderName&quot;,property = &quot;orderName&quot;),</span></span><br><span class="line"><span class="meta">            @Result(column = &quot;orderAmount&quot;,property = &quot;orderAmount&quot;),</span></span><br><span class="line"><span class="meta">            @Result(column = &quot;userId&quot;,property = &quot;user.id&quot;),</span></span><br><span class="line"><span class="meta">            @Result(column = &quot;username&quot;,property = &quot;user.username&quot;),</span></span><br><span class="line"><span class="meta">            @Result(column = &quot;password&quot;,property = &quot;user.password&quot;)</span></span><br><span class="line"><span class="meta">    &#125;)</span></span><br><span class="line">    <span class="meta">@Select(&quot;select *,o.id oid from orders o ,user u where o.userId=u.id&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Order&gt; <span class="title">findAll</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="一对多-多对多模型使用注解开发"><a href="#一对多-多对多模型使用注解开发" class="headerlink" title="一对多/多对多模型使用注解开发"></a>一对多/多对多模型使用注解开发</h2><p>一对多模型或多对多模型使用注解开发需要分开查询，首先在用户查询方法中配置基本映射对象，配置orderList对象时需要指定javaType为集合类型，以及many属性利用@Many标签指定一对多模型查询使用的另一个表的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Select(&quot;select * from user&quot;)</span></span><br><span class="line">    <span class="meta">@Results(&#123;</span></span><br><span class="line"><span class="meta">            @Result(column = &quot;id&quot;,property = &quot;id&quot;),</span></span><br><span class="line"><span class="meta">            @Result(column = &quot;username&quot;,property = &quot;username&quot;),</span></span><br><span class="line"><span class="meta">            @Result(column = &quot;password&quot;,property = &quot;password&quot;),</span></span><br><span class="line"><span class="meta">            @Result(</span></span><br><span class="line"><span class="meta">                    property = &quot;orderList&quot;,</span></span><br><span class="line"><span class="meta">                    column = &quot;id&quot;,</span></span><br><span class="line"><span class="meta">                    javaType = List.class,</span></span><br><span class="line"><span class="meta">                    many = @Many(select = &quot;cn.ywrby.mapper.OrderMapper.findByUid&quot;)</span></span><br><span class="line"><span class="meta">            )</span></span><br><span class="line"><span class="meta">    &#125;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">findAll</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>另一个表的查询方法，由于除了查询需要的uid，查询结果数据都是本表内的，所以不需要配置映射关系</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">OrderMapper</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Select(&quot;select * from orders where userId=#&#123;uid&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Order&gt; <span class="title">findByUid</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试用例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBatisTest</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> UserMapper mapper;</span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        InputStream resourceAsStream = Resources.getResourceAsStream(<span class="string">&quot;SqlMapConfig.xml&quot;</span>);</span><br><span class="line">        SqlSessionFactory factory=<span class="keyword">new</span> SqlSessionFactoryBuilder().build(resourceAsStream);</span><br><span class="line">        SqlSession sqlSession = factory.openSession(<span class="keyword">true</span>);</span><br><span class="line">        mapper = sqlSession.getMapper(UserMapper.class);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">        List&lt;User&gt; userList=mapper.findAll();</span><br><span class="line">        <span class="keyword">for</span>(User user:userList)&#123;</span><br><span class="line">            System.out.println(user);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">User&#123;id=1, username=&#x27;Leslie&#x27;, password=&#x27;123&#x27;, orderList=[Order&#123;id=1, orderName=&#x27;textbook&#x27;, orderAmount=10, user=null&#125;, Order&#123;id=9, orderName=&#x27;mathbook&#x27;, orderAmount=16, user=null&#125;]&#125;</span></span><br><span class="line"><span class="comment">User&#123;id=2, username=&#x27;Jessica&#x27;, password=&#x27;123&#x27;, orderList=[Order&#123;id=2, orderName=&#x27;mathbook&#x27;, orderAmount=15, user=null&#125;]&#125;</span></span><br><span class="line"><span class="comment">User&#123;id=4, username=&#x27;lily&#x27;, password=&#x27;1234&#x27;, orderList=[Order&#123;id=3, orderName=&#x27;writebook&#x27;, orderAmount=6, user=null&#125;]&#125;</span></span><br><span class="line"><span class="comment">User&#123;id=6, username=&#x27;Kelly&#x27;, password=&#x27;1234&#x27;, orderList=[Order&#123;id=4, orderName=&#x27;chinesebook&#x27;, orderAmount=10, user=null&#125;]&#125;</span></span><br><span class="line"><span class="comment">User&#123;id=7, username=&#x27;Les&#x27;, password=&#x27;1234&#x27;, orderList=[Order&#123;id=5, orderName=&#x27;textbook&#x27;, orderAmount=10, user=null&#125;]&#125;</span></span><br><span class="line"><span class="comment">User&#123;id=8, username=&#x27;dshjihi&#x27;, password=&#x27;398&#x27;, orderList=[Order&#123;id=6, orderName=&#x27;textbook&#x27;, orderAmount=10, user=null&#125;]&#125;</span></span><br><span class="line"><span class="comment">User&#123;id=9, username=&#x27;Pixel&#x27;, password=&#x27;9999&#x27;, orderList=[]&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
          <category> 后端框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
            <tag> MyBatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>18-MyBatis多表操作</title>
      <link href="/2021/03/21/18-MyBatis%E5%A4%9A%E8%A1%A8%E6%93%8D%E4%BD%9C/"/>
      <url>/2021/03/21/18-MyBatis%E5%A4%9A%E8%A1%A8%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<h1 id="MyBatis多表操作"><a href="#MyBatis多表操作" class="headerlink" title="MyBatis多表操作"></a>MyBatis多表操作</h1><h2 id="一对一查询模型"><a href="#一对一查询模型" class="headerlink" title="一对一查询模型"></a>一对一查询模型</h2><p>以用户-订单模型为例，假定用户与订单之间是一一对应的关系，建立如下数据库</p><p><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/userdatebase.png"></p><p><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/orderdatabase.png"></p><p>订单表中的userId表示标识用户的ID信息，若直接通过sql语句进行一对一查询，则可写作<code>select * from orders o ,user u where o.userId=u.id</code> ,得到如下查询结果</p><p><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/databaseresultnj.png"></p><p>可在mybatis中进行查询时，其并不知道各个数据段对应的参数，所以需要我们手动通过map进行对应</p><p>首先定义order类,注意这里通过User对象来储存的用户信息，而不是数据库中的userId</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Order</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String orderName;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> orderAmount;</span><br><span class="line">    <span class="keyword">private</span> User user;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Long id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getOrderName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> orderName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setOrderName</span><span class="params">(String orderName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.orderName = orderName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getOrderAmount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> orderAmount;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setOrderAmount</span><span class="params">(<span class="keyword">int</span> orderAmount)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.orderAmount = orderAmount;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">getUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUser</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.user = user;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Order&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;id=&quot;</span> + id +</span><br><span class="line">                <span class="string">&quot;, orderName=&#x27;&quot;</span> + orderName + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, orderAmount=&quot;</span> + orderAmount +</span><br><span class="line">                <span class="string">&quot;, user=&quot;</span> + user +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实现mapper接口类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">OrderMapper</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Order&gt; <span class="title">findAll</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>映射文件,可以看到这里通过resultMap配置数据段(column)和类属性(property)的映射关系（注意，这里在sql语句中对order中的id使用了别名为oid，这是为了防止两表都有的id数据段造成混淆）</p><p>这里的column代表的数据段不单纯是user或order任一表的数据段，而是经过查询后得到的新表的数据段</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--命名空间的值和接口类全限定名一致--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;cn.ywrby.mapper.OrderMapper&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;orderMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;order&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;oid&quot;</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;orderName&quot;</span> <span class="attr">property</span>=<span class="string">&quot;orderName&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;orderAmount&quot;</span> <span class="attr">property</span>=<span class="string">&quot;orderAmount&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;userId&quot;</span> <span class="attr">property</span>=<span class="string">&quot;user.id&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;username&quot;</span> <span class="attr">property</span>=<span class="string">&quot;user.username&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;password&quot;</span> <span class="attr">property</span>=<span class="string">&quot;user.password&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findAll&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;orderMap&quot;</span>&gt;</span></span><br><span class="line">        select *,o.id oid from orders o ,user u where o.userId=u.id</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这里的resultMap还有第二种配置方式，对于order中的user属性的所有值进行单独封装</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;orderMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;order&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;orderName&quot;</span> <span class="attr">property</span>=<span class="string">&quot;orderName&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;orderAmount&quot;</span> <span class="attr">property</span>=<span class="string">&quot;orderAmount&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--注意这里的两个user含义不同，第一个是order中的属性的名称，第二个是类User的别名--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">&quot;user&quot;</span> <span class="attr">javaType</span>=<span class="string">&quot;user&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;userId&quot;</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;username&quot;</span> <span class="attr">property</span>=<span class="string">&quot;username&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;password&quot;</span> <span class="attr">property</span>=<span class="string">&quot;password&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">association</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后需要在核心配置文件中配置这个新的映射文件并指定别名order</p><p>测试用例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    InputStream resourceAsStream = Resources.getResourceAsStream(<span class="string">&quot;SqlMapConfig.xml&quot;</span>);</span><br><span class="line">    SqlSessionFactory factory=<span class="keyword">new</span> SqlSessionFactoryBuilder().build(resourceAsStream);</span><br><span class="line">    SqlSession sqlSession = factory.openSession();</span><br><span class="line">    OrderMapper mapper = sqlSession.getMapper(OrderMapper.class);</span><br><span class="line"></span><br><span class="line">    List&lt;Order&gt; orderList=mapper.findAll();</span><br><span class="line">    <span class="keyword">for</span> (Order order: orderList) &#123;</span><br><span class="line">        System.out.println(order);</span><br><span class="line">    &#125;</span><br><span class="line">    sqlSession.close();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 运行结果</span></span><br><span class="line"><span class="comment">Order&#123;id=1, orderName=&#x27;textbook&#x27;, orderAmount=10, user=User&#123;id=1, username=&#x27;Leslie&#x27;, password=&#x27;123&#x27;&#125;&#125;</span></span><br><span class="line"><span class="comment">Order&#123;id=2, orderName=&#x27;mathbook&#x27;, orderAmount=15, user=User&#123;id=2, username=&#x27;Jessica&#x27;, password=&#x27;123&#x27;&#125;&#125;</span></span><br><span class="line"><span class="comment">Order&#123;id=3, orderName=&#x27;writebook&#x27;, orderAmount=6, user=User&#123;id=4, username=&#x27;lily&#x27;, password=&#x27;1234&#x27;&#125;&#125;</span></span><br><span class="line"><span class="comment">Order&#123;id=4, orderName=&#x27;chinesebook&#x27;, orderAmount=10, user=User&#123;id=6, username=&#x27;Kelly&#x27;, password=&#x27;1234&#x27;&#125;&#125;</span></span><br><span class="line"><span class="comment">Order&#123;id=5, orderName=&#x27;textbook&#x27;, orderAmount=10, user=User&#123;id=7, username=&#x27;Les&#x27;, password=&#x27;1234&#x27;&#125;&#125;</span></span><br><span class="line"><span class="comment">Order&#123;id=6, orderName=&#x27;textbook&#x27;, orderAmount=10, user=User&#123;id=8, username=&#x27;dshjihi&#x27;, password=&#x27;398&#x27;&#125;&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="一对多查询模型"><a href="#一对多查询模型" class="headerlink" title="一对多查询模型"></a>一对多查询模型</h2><p>现在假设一个用户可能拥有多个订单的情况，此时通过数据库直接用sql语句查询的方式如下<code>select *,o.id oid from user u ,orders o where o.userId=u.id</code>，可以看到一个用户出现对应多个订单的情况，此时在用户的属性中加入<code>List&lt;Order&gt; orderList</code>用于存储订单集合</p><p><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/%E5%A4%9A%E8%A1%A8%E6%9F%A5%E8%AF%A2%E7%BB%93%E6%9E%9Chu.png"></p><p>这种情况下MyBatis的查询方式如下,collection标签就是用于处理集合类型数据，ofType属性表示集合中存储的数据类型（这里用了别名）</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;cn.ywrby.mapper.UserMapper&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;userMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;user&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;username&quot;</span> <span class="attr">property</span>=<span class="string">&quot;username&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;password&quot;</span> <span class="attr">property</span>=<span class="string">&quot;password&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">&quot;orderList&quot;</span> <span class="attr">ofType</span>=<span class="string">&quot;order&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;oid&quot;</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;orderName&quot;</span> <span class="attr">property</span>=<span class="string">&quot;orderName&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;orderAmount&quot;</span> <span class="attr">property</span>=<span class="string">&quot;orderAmount&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findAll&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;userMap&quot;</span>&gt;</span></span><br><span class="line">        select *,o.id oid from user u ,orders o where o.userId=u.id</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><p>测试用例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    InputStream resourceAsStream = Resources.getResourceAsStream(<span class="string">&quot;SqlMapConfig.xml&quot;</span>);</span><br><span class="line">    SqlSessionFactory factory=<span class="keyword">new</span> SqlSessionFactoryBuilder().build(resourceAsStream);</span><br><span class="line">    SqlSession sqlSession = factory.openSession();</span><br><span class="line">    UserMapper mapper = sqlSession.getMapper(UserMapper.class);</span><br><span class="line"></span><br><span class="line">    List&lt;User&gt; userList=mapper.findAll();</span><br><span class="line">    <span class="keyword">for</span> (User user: userList) &#123;</span><br><span class="line">        System.out.println(user);</span><br><span class="line">    &#125;</span><br><span class="line">    sqlSession.close();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">User&#123;id=1, username=&#x27;Leslie&#x27;, password=&#x27;123&#x27;, orderList=[Order&#123;id=1, orderName=&#x27;textbook&#x27;, orderAmount=10, user=null&#125;, Order&#123;id=7, orderName=&#x27;mathbook&#x27;, orderAmount=12, user=null&#125;]&#125;</span></span><br><span class="line"><span class="comment">User&#123;id=2, username=&#x27;Jessica&#x27;, password=&#x27;123&#x27;, orderList=[Order&#123;id=2, orderName=&#x27;mathbook&#x27;, orderAmount=15, user=null&#125;, Order&#123;id=8, orderName=&#x27;englishbook&#x27;, orderAmount=19, user=null&#125;]&#125;</span></span><br><span class="line"><span class="comment">User&#123;id=4, username=&#x27;lily&#x27;, password=&#x27;1234&#x27;, orderList=[Order&#123;id=3, orderName=&#x27;writebook&#x27;, orderAmount=6, user=null&#125;]&#125;</span></span><br><span class="line"><span class="comment">User&#123;id=6, username=&#x27;Kelly&#x27;, password=&#x27;1234&#x27;, orderList=[Order&#123;id=4, orderName=&#x27;chinesebook&#x27;, orderAmount=10, user=null&#125;]&#125;</span></span><br><span class="line"><span class="comment">User&#123;id=7, username=&#x27;Les&#x27;, password=&#x27;1234&#x27;, orderList=[Order&#123;id=5, orderName=&#x27;textbook&#x27;, orderAmount=10, user=null&#125;]&#125;</span></span><br><span class="line"><span class="comment">User&#123;id=8, username=&#x27;dshjihi&#x27;, password=&#x27;398&#x27;, orderList=[Order&#123;id=6, orderName=&#x27;textbook&#x27;, orderAmount=10, user=null&#125;]&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>至于多对多模型的查询，其基本原理跟一对多没有区别，只要注意合理使用中间表以及正确的映射关系即可</p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
          <category> 后端框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
            <tag> MyBatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>17-MyBatis映射文件与核心配置文件深入</title>
      <link href="/2021/03/20/17-MyBatis%E6%98%A0%E5%B0%84%E6%96%87%E4%BB%B6%E4%B8%8E%E6%A0%B8%E5%BF%83%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E6%B7%B1%E5%85%A5/"/>
      <url>/2021/03/20/17-MyBatis%E6%98%A0%E5%B0%84%E6%96%87%E4%BB%B6%E4%B8%8E%E6%A0%B8%E5%BF%83%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E6%B7%B1%E5%85%A5/</url>
      
        <content type="html"><![CDATA[<h1 id="MyBatis映射文件深入"><a href="#MyBatis映射文件深入" class="headerlink" title="MyBatis映射文件深入"></a>MyBatis映射文件深入</h1><h2 id="动态sql"><a href="#动态sql" class="headerlink" title="动态sql"></a>动态sql</h2><p>可以看到，在之前的映射文件中，所有sql语句都是写死的，并不会根据我传入参数的不同进行区分，但在实际开发过程中，可能需要执行sql语句查询前先进行逻辑判断或其他操作，对参数进行简单的判断</p><p>例如下面的简单情况，我们在映射文件中写明了查询的条件，需要你User对象传入三个参数</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findByCondition&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;user&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;user&quot;</span>&gt;</span></span><br><span class="line">    select * from user where id=#&#123;id&#125; and username=#&#123;username&#125; and  password=#&#123;password&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>此时，传入的User对象若存在该三个属性值则能够进行正常的查询</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    User user=<span class="keyword">new</span> User();</span><br><span class="line">    user.setId((<span class="keyword">long</span>) <span class="number">4</span>);</span><br><span class="line">    user.setUsername(<span class="string">&quot;lily&quot;</span>);</span><br><span class="line">    user.setPassword(<span class="string">&quot;1234&quot;</span>);</span><br><span class="line">    InputStream resourceAsStream = Resources.getResourceAsStream(<span class="string">&quot;SqlMapConfig.xml&quot;</span>);</span><br><span class="line">    SqlSessionFactory factory=<span class="keyword">new</span> SqlSessionFactoryBuilder().build(resourceAsStream);</span><br><span class="line">    SqlSession sqlSession = factory.openSession();</span><br><span class="line">    UserMapper mapper = sqlSession.getMapper(UserMapper.class);</span><br><span class="line">    List&lt;User&gt; users = mapper.findByCondition(user);</span><br><span class="line">    System.out.println(users);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 执行结果</span></span><br><span class="line"><span class="comment">[User&#123;id=4, username=&#x27;lily&#x27;, password=&#x27;1234&#x27;&#125;]</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>若我们传入的User没有任一属性值，则不能正确查询</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    User user=<span class="keyword">new</span> User();</span><br><span class="line">    user.setId((<span class="keyword">long</span>) <span class="number">4</span>);</span><br><span class="line">    <span class="comment">//user.setUsername(&quot;lily&quot;);</span></span><br><span class="line">    user.setPassword(<span class="string">&quot;1234&quot;</span>);</span><br><span class="line">    InputStream resourceAsStream = Resources.getResourceAsStream(<span class="string">&quot;SqlMapConfig.xml&quot;</span>);</span><br><span class="line">    SqlSessionFactory factory=<span class="keyword">new</span> SqlSessionFactoryBuilder().build(resourceAsStream);</span><br><span class="line">    SqlSession sqlSession = factory.openSession();</span><br><span class="line">    UserMapper mapper = sqlSession.getMapper(UserMapper.class);</span><br><span class="line">    List&lt;User&gt; users = mapper.findByCondition(user);</span><br><span class="line">    System.out.println(users);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 执行结果为[]</span></span><br><span class="line"><span class="comment">因为缺少属性值username所以查询语句变成了</span></span><br><span class="line"><span class="comment">select * from user where id=4 and username=null and  password=1234</span></span><br><span class="line"><span class="comment">而不存在username为空的数据，所以返回空集合</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>很明显这不是我们想要达成的业务逻辑，所以我们可以采用动态sql的方式，通过提供的标签进行简单的逻辑判断</p><h3 id="if标签"><a href="#if标签" class="headerlink" title="if标签"></a>if标签</h3><p>if标签用于进行判断逻辑操作，使用方式如下,分别判断各个属性值是否为空，若不为空则将对应语句添加到原语句的后面，若为空则不添加，这里的where标签与数据库中的where语法一致，只是它可以自动合理的帮我们拼接多个if条件语句，并且如果所有条件均不满足，where不会拼接</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findByCondition&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;user&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;user&quot;</span>&gt;</span></span><br><span class="line">    select * from user</span><br><span class="line">    <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;id!=0&quot;</span>&gt;</span></span><br><span class="line">            and id=#&#123;id&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;username!=null&quot;</span>&gt;</span></span><br><span class="line">            and username=#&#123;username&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;password!=null&quot;</span>&gt;</span></span><br><span class="line">            and password=#&#123;password&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>使用后，原测试用例在省略参数后也可以正常查询到符合条件的数据</p><h3 id="foreach标签"><a href="#foreach标签" class="headerlink" title="foreach标签"></a>foreach标签</h3><p>在实际应用中，我们还可能遇到查询条件不唯一的情况，例如所有编号为1或2或3的查询结果，如果单纯利用sql语句的方式可以写为<code>SELECT * FROM user WHERE id IN (1,2,3)</code>,而实际开发中这个list集合一般是由service层传递给mapper层作为参数进行查询，此时就需要用到foreach标签进行集合的遍历</p><p>foreach标签的属性值较多，其分别代表：</p><ul><li>collection：集合类型，可以为list或array</li><li>item：表示遍历的元素的名称</li><li>open：语句开头的内容，根据sql语句进行填写</li><li>close：语句结束的部分，同样根据sql语句进行填写即可</li><li>separator：元素之间的分隔符，分割每个遍历元素的</li><li>标签体中写元素格式即可<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findByList&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;list&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;user&quot;</span>&gt;</span></span><br><span class="line">    select * from user</span><br><span class="line">    <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;list&quot;</span> <span class="attr">item</span>=<span class="string">&quot;id&quot;</span> <span class="attr">open</span>=<span class="string">&quot;id in (&quot;</span> <span class="attr">close</span>=<span class="string">&quot;)&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;,&quot;</span>&gt;</span></span><br><span class="line">            #&#123;id&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><p>foreach标签的拼接结果是<code>id IN (1,2,3)</code> 再利用where标签将其与原语句拼接后得到<code>SELECT * FROM user WHERE id IN (1,2,3)</code></p><h2 id="sql片段的抽取"><a href="#sql片段的抽取" class="headerlink" title="sql片段的抽取"></a>sql片段的抽取</h2><p>对于配置文件中高度重复的sql语句片段，我们可以利用抽取的思想对语句片段进行抽取，方便复用和修改</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--sql语句的抽取--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">sql</span> <span class="attr">id</span>=<span class="string">&quot;selectAll&quot;</span>&gt;</span>select * from user<span class="tag">&lt;/<span class="name">sql</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--使用抽取的sql语句--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findByList&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;list&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;user&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">&quot;selectAll&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;list&quot;</span> <span class="attr">item</span>=<span class="string">&quot;id&quot;</span> <span class="attr">open</span>=<span class="string">&quot;id in (&quot;</span> <span class="attr">close</span>=<span class="string">&quot;)&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;,&quot;</span>&gt;</span></span><br><span class="line">            #&#123;id&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="MyBatis核心配置文件深入"><a href="#MyBatis核心配置文件深入" class="headerlink" title="MyBatis核心配置文件深入"></a>MyBatis核心配置文件深入</h1><h2 id="typeHandler-类型转换器"><a href="#typeHandler-类型转换器" class="headerlink" title="typeHandler-类型转换器"></a>typeHandler-类型转换器</h2><p>当我们从数据库获取数据或将数据写入数据库的过程中，始终存在类型转换的过程，例如Java中的Integer到数据库中的int或Java中的String到数据库中的varchar，这些基本数据类型的转换MyBatis已经有自己默认的类型转换器，一般情况下不需要我们处理，但当我们要处理自己定义的类型或MyBaitis没有默认处理的类型时，就需要自己定义类型转换器（例如将日期类型转换为毫秒值存入数据库，再在读取数据时将毫秒值转为日期）</p><h3 id="typeHandler使用步骤"><a href="#typeHandler使用步骤" class="headerlink" title="typeHandler使用步骤"></a>typeHandler使用步骤</h3><p>这里实现了将Date类型存入数据库的过程中转换为毫秒值传入，并在从数据库读取该数据时重新转换为Date类型存入User对象</p><h4 id="1-定义转换类继承类BaseTypeHandler并实现方法"><a href="#1-定义转换类继承类BaseTypeHandler并实现方法" class="headerlink" title="1. 定义转换类继承类BaseTypeHandler并实现方法"></a>1. 定义转换类继承类BaseTypeHandler<T>并实现方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DateTypeHandler</span> <span class="keyword">extends</span> <span class="title">BaseTypeHandler</span>&lt;<span class="title">Date</span>&gt; </span>&#123;</span><br><span class="line">    <span class="comment">//将Java类型转换为数据库所需的类型,参数i表示将转换后数据插入的位置，字段躲在的列</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setNonNullParameter</span><span class="params">(PreparedStatement preparedStatement, <span class="keyword">int</span> i, Date date, JdbcType jdbcType)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        <span class="comment">//将日期转为长整型</span></span><br><span class="line">        <span class="keyword">long</span> time = date.getTime();</span><br><span class="line">        <span class="comment">//设置参数</span></span><br><span class="line">        preparedStatement.setLong(i,time);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//将数据库类型转换为Java所需的类型</span></span><br><span class="line">    <span class="comment">//s参数表示数据表字段的名称，resultSet是查询结果集</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Date <span class="title">getNullableResult</span><span class="params">(ResultSet resultSet, String s)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        <span class="comment">//获取数据库中的数据</span></span><br><span class="line">        Long dateTime=resultSet.getLong(s);</span><br><span class="line">        <span class="comment">//转化为Java中的Date类型</span></span><br><span class="line">        Date date=<span class="keyword">new</span> Date(dateTime);</span><br><span class="line">        <span class="comment">//返回数据</span></span><br><span class="line">        <span class="keyword">return</span> date;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//将数据库类型转换为Java所需的类型</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Date <span class="title">getNullableResult</span><span class="params">(ResultSet resultSet, <span class="keyword">int</span> i)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        <span class="comment">//获取数据库中的数据</span></span><br><span class="line">        Long dateTime=resultSet.getLong(i);</span><br><span class="line">        <span class="comment">//转化为Java中的Date类型</span></span><br><span class="line">        Date date=<span class="keyword">new</span> Date(dateTime);</span><br><span class="line">        <span class="comment">//返回数据</span></span><br><span class="line">        <span class="keyword">return</span> date;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//将数据库类型转换为Java所需的类型</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Date <span class="title">getNullableResult</span><span class="params">(CallableStatement callableStatement, <span class="keyword">int</span> i)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        <span class="comment">//获取数据库中的数据</span></span><br><span class="line">        Long dateTime=callableStatement.getLong(i);</span><br><span class="line">        <span class="comment">//转化为Java中的Date类型</span></span><br><span class="line">        Date date=<span class="keyword">new</span> Date(dateTime);</span><br><span class="line">        <span class="comment">//返回数据</span></span><br><span class="line">        <span class="keyword">return</span> date;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-在MyBatis核心配置文件中配置转换器"><a href="#2-在MyBatis核心配置文件中配置转换器" class="headerlink" title="2. 在MyBatis核心配置文件中配置转换器"></a>2. 在MyBatis核心配置文件中配置转换器</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--自定义类型转换器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">typeHandlers</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">typeHandler</span> <span class="attr">handler</span>=<span class="string">&quot;cn.ywrby.handler.DateTypeHandler&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">typeHandlers</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="3-测试转换效果"><a href="#3-测试转换效果" class="headerlink" title="3. 测试转换效果"></a>3. 测试转换效果</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    User user=<span class="keyword">new</span> User();</span><br><span class="line">    user.setId((<span class="keyword">long</span>) <span class="number">6</span>);</span><br><span class="line">    user.setUsername(<span class="string">&quot;Kelly&quot;</span>);</span><br><span class="line">    user.setPassword(<span class="string">&quot;1234&quot;</span>);</span><br><span class="line">    <span class="comment">//获取当前时间并作为参数传入</span></span><br><span class="line">    user.setDate(<span class="keyword">new</span> Date());</span><br><span class="line">    InputStream resourceAsStream = Resources.getResourceAsStream(<span class="string">&quot;SqlMapConfig.xml&quot;</span>);</span><br><span class="line">    SqlSessionFactory factory=<span class="keyword">new</span> SqlSessionFactoryBuilder().build(resourceAsStream);</span><br><span class="line">    SqlSession sqlSession = factory.openSession();</span><br><span class="line">    UserMapper mapper = sqlSession.getMapper(UserMapper.class);</span><br><span class="line">    <span class="comment">//测试能否将Date类型转为毫秒值保存到数据库</span></span><br><span class="line">    mapper.save(user);</span><br><span class="line">    sqlSession.commit();</span><br><span class="line">    <span class="comment">//测试从数据库读取数据能否正确转换为Java中的Date类型</span></span><br><span class="line">    List&lt;User&gt; userList = mapper.findByCondition(user);</span><br><span class="line">    System.out.println(userList);</span><br><span class="line">    sqlSession.close();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 运行结果</span></span><br><span class="line"><span class="comment">[User&#123;id=6, username=&#x27;Kelly&#x27;, password=&#x27;1234&#x27;, date=Sat Mar 20 16:30:36 CST 2021&#125;]</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><p>数据库显示效果<br><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/databasehdisa.png"></p><p>可以看到首先成功将Date类型存入数据库的值变为毫秒值，而从数据读取到Java过程中又转换回了Date类型</p><h2 id="plugins-插件标签"><a href="#plugins-插件标签" class="headerlink" title="plugins-插件标签"></a>plugins-插件标签</h2><p>MyBatis可以使用第三方插件来进行功能的扩展，这里以分页助手（page-helper）为例进行插件使用的演示，其功能是将复杂的分页技术进行封装，使用简单的方式即可获取分页数据</p><h3 id="插件使用步骤"><a href="#插件使用步骤" class="headerlink" title="插件使用步骤"></a>插件使用步骤</h3><ol><li>导入插件的坐标</li><li>在mybatis核心配置文件中配置插件</li><li>测试分页数据的获取</li></ol><h4 id="导入page-helper的坐标"><a href="#导入page-helper的坐标" class="headerlink" title="导入page-helper的坐标"></a>导入page-helper的坐标</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="在核心配置文件中配置插件"><a href="#在核心配置文件中配置插件" class="headerlink" title="在核心配置文件中配置插件"></a>在核心配置文件中配置插件</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">plugins在配置文件中的位置必须符合要求，否则会报错，顺序如下:</span></span><br><span class="line"><span class="comment">properties?, settings?,</span></span><br><span class="line"><span class="comment">typeAliases?, typeHandlers?,</span></span><br><span class="line"><span class="comment">objectFactory?,objectWrapperFactory?,</span></span><br><span class="line"><span class="comment">plugins?,</span></span><br><span class="line"><span class="comment">environments?, databaseIdProvider?, mappers?</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- com.github.pagehelper为PageHelper类所在包名 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugin</span> <span class="attr">interceptor</span>=<span class="string">&quot;com.github.pagehelper.PageInterceptor&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--配置数据库方言--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;helperDialect&quot;</span> <span class="attr">value</span>=<span class="string">&quot;mysql&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="测试分页数据获取"><a href="#测试分页数据获取" class="headerlink" title="测试分页数据获取"></a>测试分页数据获取</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    InputStream resourceAsStream = Resources.getResourceAsStream(<span class="string">&quot;SqlMapConfig.xml&quot;</span>);</span><br><span class="line">    SqlSessionFactory factory=<span class="keyword">new</span> SqlSessionFactoryBuilder().build(resourceAsStream);</span><br><span class="line">    SqlSession sqlSession = factory.openSession();</span><br><span class="line">    UserMapper mapper = sqlSession.getMapper(UserMapper.class);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//设置分页相关参数 当前页，每页显示的条数</span></span><br><span class="line">    PageHelper.startPage(<span class="number">1</span>,<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">    List&lt;User&gt; userList=mapper.findAll();</span><br><span class="line">    <span class="keyword">for</span> (User user:userList)&#123;</span><br><span class="line">        System.out.println(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获得与分页相关的参数</span></span><br><span class="line">    PageInfo&lt;User&gt; pageInfo=<span class="keyword">new</span> PageInfo&lt;User&gt;(userList);</span><br><span class="line">    <span class="comment">//输出相关信息</span></span><br><span class="line">    System.out.println(<span class="string">&quot;当前页：&quot;</span>+pageInfo.getPageNum());</span><br><span class="line">    System.out.println(<span class="string">&quot;总条数：&quot;</span>+pageInfo.getTotal());</span><br><span class="line">    System.out.println(<span class="string">&quot;总页数：&quot;</span>+pageInfo.getPages());</span><br><span class="line">    System.out.println(<span class="string">&quot;上一页：&quot;</span>+pageInfo.getPrePage());</span><br><span class="line"></span><br><span class="line">    sqlSession.close();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 运行结果</span></span><br><span class="line"><span class="comment">User&#123;id=1, username=&#x27;Leslie&#x27;, password=&#x27;123&#x27;, date=null&#125;</span></span><br><span class="line"><span class="comment">User&#123;id=2, username=&#x27;Jessica&#x27;, password=&#x27;123&#x27;, date=null&#125;</span></span><br><span class="line"><span class="comment">User&#123;id=4, username=&#x27;lily&#x27;, password=&#x27;1234&#x27;, date=null&#125;</span></span><br><span class="line"><span class="comment">当前页：1</span></span><br><span class="line"><span class="comment">总条数：6</span></span><br><span class="line"><span class="comment">总页数：2</span></span><br><span class="line"><span class="comment">上一页：0</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><p>可以看到，数据按照指定的第一页显示三条进行了输出，并且可以通过PageInfo对象获取所有的分页信息</p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
          <category> 后端框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
            <tag> MyBatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>16-MyBatis概述</title>
      <link href="/2021/03/18/16-MyBatis%E6%A6%82%E8%BF%B0/"/>
      <url>/2021/03/18/16-MyBatis%E6%A6%82%E8%BF%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="MyBatis概述"><a href="#MyBatis概述" class="headerlink" title="MyBatis概述"></a>MyBatis概述</h1><h3 id="原始JDBC开发存在的问题"><a href="#原始JDBC开发存在的问题" class="headerlink" title="原始JDBC开发存在的问题"></a>原始JDBC开发存在的问题</h3><ul><li>数据库的连接创建，释放频繁造成系统资源浪费从而影响系统性能</li><li>sql 语句在代码中硬编码，造成代码不易维护，实际应用 sql 变化的可能较大，sql 变动需要改变java代码。（sql语句与Java代码耦合死）</li><li>查询操作时，需要手动将结果集中的数据手动封装到实体中。插入操作时，需要手动将实体的数据设置到sql语句的占位符位置</li></ul><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><ul><li>池化思想：使用数据库连接池初始化连接资源</li><li>配置文件：将sql语句抽取到xml配置文件中</li><li>使用反射、内省等底层技术，自动将实体与表进行属性与字段的自动映射</li></ul><h2 id="MyBatis简介"><a href="#MyBatis简介" class="headerlink" title="MyBatis简介"></a>MyBatis简介</h2><blockquote><p>MyBatis 是一款优秀的<strong>持久层</strong>框架，它内部封装了JDBC，它支持定制化 SQL、存储过程以及高级映射。MyBatis 避免了几乎所有的 JDBC 代码和手动设置参数以及获取结果集。MyBatis 可以使用简单的 XML 或注解来配置和映射原生信息，将接口和 Java 的 POJO映射成数据库中的记录。</p></blockquote><p>mybatis通过xml或注解的方式将要执行的各种 statement配置起来，并通过java对象和statement中sql的动态参数进行映射生成最终执行的sql语句。</p><p>最后mybatis框架执行sql并将结果映射为java对象并返回。采用ORM思想（Object Relational Mapping：对象关系映射）解决了实体和数据库映射的问题，对jdbc 进行了封装，屏蔽了jdbc api 底层访问细节，使我们不用与jdbc api 打交道，就可以完成对数据库的持久化操作。</p><h2 id="MyBatis快速开发步骤"><a href="#MyBatis快速开发步骤" class="headerlink" title="MyBatis快速开发步骤"></a>MyBatis快速开发步骤</h2><h3 id="添加MyBatis坐标"><a href="#添加MyBatis坐标" class="headerlink" title="添加MyBatis坐标"></a>添加MyBatis坐标</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="创建User数据表"><a href="#创建User数据表" class="headerlink" title="创建User数据表"></a>创建User数据表</h3><p><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/databasehjkh.png"></p><h3 id="创建User实体类"><a href="#创建User实体类" class="headerlink" title="创建User实体类"></a>创建User实体类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Long id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUsername</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUsername</span><span class="params">(String username)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.username = username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPassword</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPassword</span><span class="params">(String password)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.password = password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;User&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;id=&quot;</span> + id +</span><br><span class="line">                <span class="string">&quot;, username=&#x27;&quot;</span> + username + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, password=&#x27;&quot;</span> + password + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="编写映射文件UserMapper-xml"><a href="#编写映射文件UserMapper-xml" class="headerlink" title="编写映射文件UserMapper.xml"></a>编写映射文件UserMapper.xml</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="comment">&lt;!--映射文件DTD约束头--&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span> <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--映射文件，namespace是为了方便调用映射文件中的映射方法，与下面语句的ID一起作为查询标识--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;userMapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--标签类型有select update delete等 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--resultType表示将返回的查询结果封装到的结果集，即查询结果对应的实体类型--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findAll&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;cn.ywrby.domain.User&quot;</span>&gt;</span></span><br><span class="line">        select * from user</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="编写核心文件SqlMapConfig-xml"><a href="#编写核心文件SqlMapConfig-xml" class="headerlink" title="编写核心文件SqlMapConfig.xml"></a>编写核心文件SqlMapConfig.xml</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span> <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!--配置数据源环境--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">transactionManager</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--配置连接池基本数据--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://cdb-cd3ybvc6.cd.tencentcdb.com:hj/jdbcTest&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;rlm214&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--加载映射文件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;cn\ywrby\mapper\UserMapper.xml&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="编写测试类并执行测试"><a href="#编写测试类并执行测试" class="headerlink" title="编写测试类并执行测试"></a>编写测试类并执行测试</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="comment">//加载核心配置文件</span></span><br><span class="line">    InputStream resourceAsStream = Resources.getResourceAsStream(<span class="string">&quot;SqlMapConfig.xml&quot;</span>);</span><br><span class="line">    <span class="comment">//获得sqlSession工厂对象</span></span><br><span class="line">    SqlSessionFactory factory=<span class="keyword">new</span> SqlSessionFactoryBuilder().build(resourceAsStream);</span><br><span class="line">    <span class="comment">//获得sqlSession对象用于执行sql语句</span></span><br><span class="line">    SqlSession sqlSession = factory.openSession();</span><br><span class="line">    <span class="comment">//执行sql语句 参数：namespance.id</span></span><br><span class="line">    List&lt;User&gt; userList=sqlSession.selectList(<span class="string">&quot;userMapper.findAll&quot;</span>);</span><br><span class="line">    <span class="comment">//打印结果</span></span><br><span class="line">    System.out.println(userList);</span><br><span class="line">    <span class="comment">//释放资源</span></span><br><span class="line">    sqlSession.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="MyBatis的数据库操作（增删改查）"><a href="#MyBatis的数据库操作（增删改查）" class="headerlink" title="MyBatis的数据库操作（增删改查）"></a>MyBatis的数据库操作（增删改查）</h2><p>配置映射文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置插入操作 parameterType表示参数对象，</span></span><br><span class="line"><span class="comment">即执行插入操作时，传入该参数，并将该类属性值传入数据库</span></span><br><span class="line"><span class="comment">mybatis映射文件中的占位符是#&#123;&#125; 其内部传入的是类的属性值而不是数据库的列名--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;save&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;cn.ywrby.domain.User&quot;</span>&gt;</span></span><br><span class="line">    insert into user values (#&#123;id&#125;,#&#123;username&#125;,#&#123;password&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;update&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;cn.ywrby.domain.User&quot;</span>&gt;</span></span><br><span class="line">    update user set username=#&#123;username&#125;,password=#&#123;password&#125; where id=#&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">&quot;delete&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;java.lang.Integer&quot;</span>&gt;</span></span><br><span class="line">    delete from user where id=#&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br></pre></td></tr></table></figure><p>测试用例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 测试插入语句执行</span></span><br><span class="line"><span class="comment"> * 要注意的是在执行插入删除语句等需要对数据库进行修改的sql语句时</span></span><br><span class="line"><span class="comment"> * 必须进行事务的提交，mybatis默认不提交事务</span></span><br><span class="line"><span class="comment"> * 而查询语句由于不修改数据库内容，所以不需要进行事务的提交</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="comment">//实例化要插入的对象并传参</span></span><br><span class="line">    User user=<span class="keyword">new</span> User();</span><br><span class="line">    user.setId((<span class="keyword">long</span>) <span class="number">3</span>);</span><br><span class="line">    user.setUsername(<span class="string">&quot;Lily&quot;</span>);</span><br><span class="line">    user.setPassword(<span class="string">&quot;5667&quot;</span>);</span><br><span class="line">    <span class="comment">//加载核心配置文件</span></span><br><span class="line">    InputStream resourceAsStream = Resources.getResourceAsStream(<span class="string">&quot;SqlMapConfig.xml&quot;</span>);</span><br><span class="line">    <span class="comment">//获得sqlSession工厂对象</span></span><br><span class="line">    SqlSessionFactory factory=<span class="keyword">new</span> SqlSessionFactoryBuilder().build(resourceAsStream);</span><br><span class="line">    <span class="comment">//获得sqlSession对象用于执行sql语句</span></span><br><span class="line">    SqlSession sqlSession = factory.openSession();</span><br><span class="line">    <span class="comment">//执行插入语句，并传入要插入的对象</span></span><br><span class="line">    sqlSession.selectList(<span class="string">&quot;userMapper.save&quot;</span>,user);</span><br><span class="line">    <span class="comment">//提交事务</span></span><br><span class="line">    sqlSession.commit();</span><br><span class="line">    <span class="comment">//释放资源</span></span><br><span class="line">    sqlSession.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="MyBatis核心配置文件概述"><a href="#MyBatis核心配置文件概述" class="headerlink" title="MyBatis核心配置文件概述"></a>MyBatis核心配置文件概述</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span> <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!--配置数据源环境,default指定默认的环境名称--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--environment进行环境配置，id指定当前环境的名称--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--type属性表示指定事务管理类型是JDBC--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">transactionManager</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--配置数据源，type=&quot;POOLED&quot;表示指定当前数据源类型是连接池--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--配置连接池基本数据--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://cdb-cd3ybvc6.cd.tencentcdb.com:10056/jdbcTest&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;renboyu010214&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--加载映射文件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;cn\ywrby\mapper\UserMapper.xml&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="事务管理器（transactionManager）类型有两种："><a href="#事务管理器（transactionManager）类型有两种：" class="headerlink" title="事务管理器（transactionManager）类型有两种："></a>事务管理器（transactionManager）类型有两种：</h3><ul><li>JDBC：直接使用JDBC的提交与回滚，依赖于从数据源处得来的连接来管理事务作用域</li><li>MANAGED：这个配置几乎不进行操作，不提交或回滚任何一个连接，而是让容器来管理整个事务的生命周期</li></ul><h3 id="数据源（datasource）类型有三种："><a href="#数据源（datasource）类型有三种：" class="headerlink" title="数据源（datasource）类型有三种："></a>数据源（datasource）类型有三种：</h3><ul><li>UNPOOLED：每次被请求时打开或关闭连接</li><li>POOLED：该数据源利用池的概念将JDBC连接对象组织起来</li><li>JNDI</li></ul><h3 id="mapper标签"><a href="#mapper标签" class="headerlink" title="mapper标签"></a>mapper标签</h3><p>mapper标签的作用是加载映射文件，其加载文件的方式有多种：</p><ul><li>使用相对于类的路径的资源引用的方式（一般情况下均使用该方式）：<code>&lt;mapper resource=&quot;cn\ywrby\mapper\UserMapper.xml&quot;/&gt;</code></li><li>使用完全限定资源定位符URL：<code>&lt;mapper url=&quot;file:///var/mappers/xxx.xml&quot;/&gt;</code></li><li>使用映射器接口实现类的完全限定名(结合注解方式使用)：<code>&lt;mapper class=&quot;cn.ywrby.builder.AuthorMapper&quot;/&gt;</code></li><li>将包内的映射器接口实现全部注册为映射器(类似于对该包进行扫描，将所有映射器接口实现类注册为映射器)：<code>&lt;package name=&quot;cn.ywrby.mapper&quot;/&gt;</code></li></ul><h3 id="properties标签"><a href="#properties标签" class="headerlink" title="properties标签"></a>properties标签</h3><p>properties标签用于加载外部properties文件，可以使各文件分工更加明确（如加载jdbc.properties）</p><h3 id="typeAliases标签"><a href="#typeAliases标签" class="headerlink" title="typeAliases标签"></a>typeAliases标签</h3><p>typeAliases标签用于自定义别名，定义别名可以简化我们代码输入,type属性用于表示定义别名的实体类名，alias是自定义的别名</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置别名--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">typeAlias</span> <span class="attr">type</span>=<span class="string">&quot;cn.ywrby.domain.User&quot;</span> <span class="attr">alias</span>=<span class="string">&quot;user&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在UserMapper.xml中使用,parameterType和resultType都可以使用别名替换，另外MyBatis也为一些基本类提前定义了别名</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;userMapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findAll&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;user&quot;</span>&gt;</span></span><br><span class="line">        select * from user</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;save&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;user&quot;</span>&gt;</span></span><br><span class="line">        insert into user values (#&#123;id&#125;,#&#123;username&#125;,#&#123;password&#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">&quot;delete&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;int&quot;</span>&gt;</span></span><br><span class="line">        delete from user where id=#&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="默认的别名"><a href="#默认的别名" class="headerlink" title="默认的别名"></a>默认的别名</h4><table><thead><tr><th>别名</th><th>数据类型</th></tr></thead><tbody><tr><td>String</td><td>java.lang.String</td></tr><tr><td>long</td><td>java.lang.Long</td></tr><tr><td>int</td><td>java.lang.Integer</td></tr><tr><td>double</td><td>java.lang.Double</td></tr><tr><td>boolean</td><td>java.lang.Boolean</td></tr></tbody></table><h2 id="MyBatis的DAO层实现"><a href="#MyBatis的DAO层实现" class="headerlink" title="MyBatis的DAO层实现"></a>MyBatis的DAO层实现</h2><p>MyBatis的传统实现方式就是通过上文测试类中的一般方法，在每次的使用过程中，都需要加载核心配置文件，初始化会话工程，执行事务提交等繁琐操作，<br>所以一般情况下，在开发过程中不会采用传统的实现方式</p><h3 id="接口代理方式实现"><a href="#接口代理方式实现" class="headerlink" title="接口代理方式实现"></a>接口代理方式实现</h3><p>接口代理开发方式只需要我们实现Mapper接口（就是之前编写的DAO层接口），然后由MyBatis根据接口的定义（根据方法名，返回值，参数值等）创建接口的动态代理对象</p><p>Mapper接口的开发需要遵循以下的规范</p><ul><li>Mapper.xml文件中的namespace是接口的全限定名</li><li>Mapper接口的方法名和Mapper.xml中定义的statement的ID值相同</li><li>Mapper接口方法的输入参数和Mapper.xml中定义的sql语句的parameterType的类型相同</li><li>Mapper接口方法的输出参数和Mapper.xml中定义的sql语句的resultType的类型相同</li></ul><p>修改后的UserMapper.xml配置文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--命名空间的值和接口类全限定名一致--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;cn.ywrby.mapper.UserMapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--id值和方法名一致，resultType和返回值类型一致（这里了别名）--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findAll&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;user&quot;</span>&gt;</span></span><br><span class="line">        select * from user</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--parameterType的值也需要和传入参数一致--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;save&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;user&quot;</span>&gt;</span></span><br><span class="line">        insert into user values (#&#123;id&#125;,#&#123;username&#125;,#&#123;password&#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;update&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;user&quot;</span>&gt;</span></span><br><span class="line">        update user set username=#&#123;username&#125;,password=#&#123;password&#125; where id=#&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">&quot;delete&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;java.lang.Long&quot;</span>&gt;</span></span><br><span class="line">        delete from user where id=#&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><p>接口实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line">    <span class="comment">//这里返回值虽然是List类型，但其中存储的是User类型，所以也可以成功实现</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">findAll</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">(User user)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(User user)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">(Long id)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试用例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    User user=<span class="keyword">new</span> User();</span><br><span class="line">    user.setId((<span class="keyword">long</span>) <span class="number">4</span>);</span><br><span class="line">    user.setUsername(<span class="string">&quot;lily&quot;</span>);</span><br><span class="line">    user.setPassword(<span class="string">&quot;1234&quot;</span>);</span><br><span class="line">    InputStream resourceAsStream = Resources.getResourceAsStream(<span class="string">&quot;SqlMapConfig.xml&quot;</span>);</span><br><span class="line">    SqlSessionFactory factory=<span class="keyword">new</span> SqlSessionFactoryBuilder().build(resourceAsStream);</span><br><span class="line">    SqlSession sqlSession = factory.openSession();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//通过getMapper方法传入接口类，获得MyBatis返回的实现类</span></span><br><span class="line">    UserMapper mapper = sqlSession.getMapper(UserMapper.class);</span><br><span class="line">    <span class="comment">//执行接口方法</span></span><br><span class="line">    mapper.update(user);</span><br><span class="line">    <span class="comment">//mapper.delete((long) 4);</span></span><br><span class="line">    <span class="comment">//mapper.findAll();</span></span><br><span class="line">    <span class="comment">//mapper.save(user);</span></span><br><span class="line"></span><br><span class="line">    sqlSession.commit();</span><br><span class="line">    sqlSession.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
          <category> 后端框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
            <tag> MyBatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>15-SpringMVC异常处理</title>
      <link href="/2021/03/17/15-SpringMVC%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86%E6%9C%BA%E5%88%B6/"/>
      <url>/2021/03/17/15-SpringMVC%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86%E6%9C%BA%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<h1 id="SpringMVC异常处理"><a href="#SpringMVC异常处理" class="headerlink" title="SpringMVC异常处理"></a>SpringMVC异常处理</h1><p>系统中异常主要包括两部分，[编译时异常与运行时异常] <a href="https://ywrby.cn/2021/03/03/1-%E5%BC%82%E5%B8%B8/">Spring,SpringMVC</a>,前者可以通过捕获异常从而获取异常信息，后者主要通过规范代码格式，测试等手段减少异常出现</p><p>在开发过程中，系统的DAO层，SERVICE层和CONTROLLER层都有可能出现异常情况，这种情况下我们应该尽量将异常向上层抛出，最后将所有异常交由SpringMVC的前端控制器处理，其会利用异常处理器来进行异常处理</p><p><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/SpringMVC%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86%E6%9C%BA%E5%88%B6.png"></p><h2 id="SpringMVC异常处理的两种方式"><a href="#SpringMVC异常处理的两种方式" class="headerlink" title="SpringMVC异常处理的两种方式"></a>SpringMVC异常处理的两种方式</h2><ul><li>直接使用SpringMVC提供的简单异常处理器：SimpleMappingExceptionResolver</li><li>实现Spring的异常处理接口HandlerExceptionResolver自定义自己的异常处理器</li></ul><h3 id="1-使用SimpleMappingExceptionResolver"><a href="#1-使用SimpleMappingExceptionResolver" class="headerlink" title="1. 使用SimpleMappingExceptionResolver"></a>1. 使用SimpleMappingExceptionResolver</h3><h4 id="配置简单映射异常处理器"><a href="#配置简单映射异常处理器" class="headerlink" title="配置简单映射异常处理器"></a>配置简单映射异常处理器</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置简单映射异常处理器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.handler.SimpleMappingExceptionResolver&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置默认错误视图，指向error.jsp--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;defaultErrorView&quot;</span> <span class="attr">value</span>=<span class="string">&quot;error&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--异常映射，将指定报错映射到指定视图，一旦出现指定报错跳转到指定页面--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;exceptionMappings&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">map</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--键为错误类，值为跳转视图--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;cn.ywrby.exception.MyException&quot;</span> <span class="attr">value</span>=<span class="string">&quot;error&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;java.lang.ClassCastException&quot;</span> <span class="attr">value</span>=<span class="string">&quot;error&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="测试异常"><a href="#测试异常" class="headerlink" title="测试异常"></a>测试异常</h4><p>产生异常的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service(&quot;exceptionService&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExceptionServiceImpl</span> <span class="keyword">implements</span> <span class="title">ExceptionService</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showError1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;抛出类型转换异常&quot;</span>);</span><br><span class="line">        Object str=<span class="string">&quot;Leslie&quot;</span>;</span><br><span class="line">        Integer integer=(Integer)str;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showError2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;抛出除零异常&quot;</span>);</span><br><span class="line">        <span class="keyword">int</span> i=<span class="number">1</span>/<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showError3</span><span class="params">()</span> <span class="keyword">throws</span> FileNotFoundException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;抛出文件路径异常&quot;</span>);</span><br><span class="line">        InputStream in=<span class="keyword">new</span> FileInputStream(<span class="string">&quot;C:/xxx/xxx/xxx.txt&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showError4</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;抛出空指针异常&quot;</span>);</span><br><span class="line">        String str=<span class="keyword">null</span>;</span><br><span class="line">        str.length();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showError5</span><span class="params">()</span> <span class="keyword">throws</span> MyException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;抛出自定义异常&quot;</span>);</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> MyException();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用产生异常的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller(&quot;exceptionController&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExceptionController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ExceptionService service;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/exception&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testError</span><span class="params">()</span></span>&#123;</span><br><span class="line">        service.showError1();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="实例结果"><a href="#实例结果" class="headerlink" title="实例结果"></a>实例结果</h4><p><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/%E7%AE%80%E5%8D%95%E5%BC%82%E5%B8%B8%E6%98%A0%E5%B0%84.png"></p><h3 id="2-自定义异常处理器"><a href="#2-自定义异常处理器" class="headerlink" title="2. 自定义异常处理器"></a>2. 自定义异常处理器</h3><h4 id="创建异常处理器类实现HandlerExceptionResolver"><a href="#创建异常处理器类实现HandlerExceptionResolver" class="headerlink" title="创建异常处理器类实现HandlerExceptionResolver"></a>创建异常处理器类实现HandlerExceptionResolver</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自定义异常处理器，实现HandlerExceptionResolver接口</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyExceptionResolver</span> <span class="keyword">implements</span> <span class="title">HandlerExceptionResolver</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ModelAndView <span class="title">resolveException</span><span class="params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Object o, Exception e)</span> </span>&#123;</span><br><span class="line">        ModelAndView modelAndView=<span class="keyword">new</span> ModelAndView();</span><br><span class="line">        <span class="comment">//判断异常种类</span></span><br><span class="line">        <span class="keyword">if</span>(e <span class="keyword">instanceof</span> MyException)&#123;</span><br><span class="line">            modelAndView.addObject(<span class="string">&quot;info&quot;</span>,<span class="string">&quot;自定义异常&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(e <span class="keyword">instanceof</span> ClassCastException)&#123;</span><br><span class="line">            modelAndView.addObject(<span class="string">&quot;info&quot;</span>,<span class="string">&quot;类转换异常&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            modelAndView.addObject(<span class="string">&quot;info&quot;</span>,<span class="string">&quot;其他异常&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//设定跳转视图</span></span><br><span class="line">        modelAndView.setViewName(<span class="string">&quot;error&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> modelAndView;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="配置异常处理器"><a href="#配置异常处理器" class="headerlink" title="配置异常处理器"></a>配置异常处理器</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置自定义异常处理器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;cn.ywrby.resolver.MyExceptionResolver&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><h4 id="编写异常页面"><a href="#编写异常页面" class="headerlink" title="编写异常页面"></a>编写异常页面</h4><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;%--</span><br><span class="line">  Created by IntelliJ IDEA.</span><br><span class="line">  User: renboyu010214</span><br><span class="line">  Date: <span class="number">2021</span>/<span class="number">3</span>/<span class="number">17</span></span><br><span class="line">  Time: <span class="number">1</span>:<span class="number">04</span></span><br><span class="line">  To change <span class="keyword">this</span> template use File | Settings | File Templates.</span><br><span class="line">--%&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Error1&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h1&gt;Error：$&#123;info&#125;&lt;/h1&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h4 id="测试页面跳转"><a href="#测试页面跳转" class="headerlink" title="测试页面跳转"></a>测试页面跳转</h4><p><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/%E8%87%AA%E5%AE%9A%E4%B9%89%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86%E5%99%A8.png"></p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
          <category> 后端框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
            <tag> SpringMVC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>14-SpringMVC拦截器</title>
      <link href="/2021/03/14/14-SpringMVC%E6%8B%A6%E6%88%AA%E5%99%A8/"/>
      <url>/2021/03/14/14-SpringMVC%E6%8B%A6%E6%88%AA%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="SpringMVC拦截器-Interceptor"><a href="#SpringMVC拦截器-Interceptor" class="headerlink" title="SpringMVC拦截器(Interceptor)"></a>SpringMVC拦截器(Interceptor)</h1><p>SpringMVC中的拦截器作用类似Servlet中的<a href="%5Bdjsis.com%5D(http://localhost:4000/2021/03/03/19-Filter%E8%BF%87%E6%BB%A4%E5%99%A8/)">Filter</a>，用于对处理器进行预处理与后处理</p><p>将拦截器按一定顺序连成一条链，这条链被称为拦截器链（Interceptor Chain），在访问被拦截的方法或字段时，拦截器链就会按照指定顺序执行，这也是AOP思想的体现</p><h2 id="拦截器与过滤器的区别"><a href="#拦截器与过滤器的区别" class="headerlink" title="拦截器与过滤器的区别"></a>拦截器与过滤器的区别</h2><table><thead><tr><th>区别</th><th>过滤器</th><th>拦截器</th></tr></thead><tbody><tr><td>使用范围</td><td>是servlet规范中的一部分，任何JavaWeb工程都可以使用</td><td>是SpringMVC框架所封装的，只有使用SpringMVC框架的工程才可以使用</td></tr><tr><td>拦截范围</td><td>在url-pattern中配置了/*的情况下，可以对<strong>所有访问资源</strong>进行过滤</td><td>只能拦截访问的控制器中的业务方法，如果访问的是.jsp.html.css.img等资源文件，是无法拦截的</td></tr></tbody></table><h2 id="拦截器基本操作"><a href="#拦截器基本操作" class="headerlink" title="拦截器基本操作"></a>拦截器基本操作</h2><h3 id="1-创建拦截器类，实现HandlerInterceptor接口、"><a href="#1-创建拦截器类，实现HandlerInterceptor接口、" class="headerlink" title="1. 创建拦截器类，实现HandlerInterceptor接口、"></a>1. 创建拦截器类，实现HandlerInterceptor接口、</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyInterceptor</span> <span class="keyword">implements</span> <span class="title">HandlerInterceptor</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 在目标方法执行之前执行</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回值为布尔类型，表示是否拦截该方法，停止后续执行</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;在目标方法执行之前执行...&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 在目标方法执行完成之后，视图对象返回之前 执行</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;在目标方法执行完成之后，视图对象返回之前 执行...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 在视图返回之后执行</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterCompletion</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;在视图返回之后执行...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-配置拦截器"><a href="#2-配置拦截器" class="headerlink" title="2. 配置拦截器"></a>2. 配置拦截器</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置拦截器链--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:interceptors</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--path指定对哪些资源进行拦截（只能拦截控制器中的业务方法）--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mvc:mapping</span> <span class="attr">path</span>=<span class="string">&quot;/**&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;cn.ywrby.interceptor.MyInterceptor&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:interceptors</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3-测试拦截器效果"><a href="#3-测试拦截器效果" class="headerlink" title="3. 测试拦截器效果"></a>3. 测试拦截器效果</h3><p>控制器实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TargetController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/show&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ModelAndView <span class="title">show</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;目标资源执行&quot;</span>);</span><br><span class="line">        ModelAndView modelAndView=<span class="keyword">new</span> ModelAndView();</span><br><span class="line">        modelAndView.addObject(<span class="string">&quot;username&quot;</span>,<span class="string">&quot;Leslie&quot;</span>);</span><br><span class="line">        modelAndView.setViewName(<span class="string">&quot;index&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> modelAndView;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>jsp页面实现</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;%--</span><br><span class="line">  Created by IntelliJ IDEA.</span><br><span class="line">  User: renboyu010214</span><br><span class="line">  Date: <span class="number">2021</span>/<span class="number">3</span>/<span class="number">14</span></span><br><span class="line">  Time: <span class="number">12</span>:<span class="number">54</span></span><br><span class="line">  To change <span class="keyword">this</span> template use File | Settings | File Templates.</span><br><span class="line">--%&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;h1&gt;Hello world!$&#123;username&#125;&lt;/h1&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>访问控制器业务方法</p><p><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/testresult.png"></p><p>控制台输出</p><p><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/testresult2.png"></p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
          <category> 后端框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
            <tag> SpringMVC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2-应用层</title>
      <link href="/2021/03/13/2-%E5%BA%94%E7%94%A8%E5%B1%82/"/>
      <url>/2021/03/13/2-%E5%BA%94%E7%94%A8%E5%B1%82/</url>
      
        <content type="html"><![CDATA[<h1 id="应用层概述"><a href="#应用层概述" class="headerlink" title="应用层概述"></a>应用层概述</h1><p>参考模型中的各层一般都满足“应用下层的服务，为上层提供服务”，但应用层较为特殊，因为应用层没有上层，所以应用层直接为模型外的用户提供服务，应用层是最靠近用户的一层</p><h2 id="应用层特点"><a href="#应用层特点" class="headerlink" title="应用层特点"></a>应用层特点</h2><ul><li>没有应用层，就没有网络通信支持</li><li>参考模型中唯一的一层，不需为它的上层服务</li><li>它向参考模型之外的用户提供服务</li><li>网络应用程序可被分为两大类<ul><li>直接网络应用程序 Browser , e-mail ,FTP , Telnet</li><li>间接网络应用程序 Word , resource manager , (via Redirector)</li></ul></li></ul><h3 id="创建一个网络应用"><a href="#创建一个网络应用" class="headerlink" title="创建一个网络应用"></a>创建一个网络应用</h3><ul><li>通过程序设计语言（Java，C，python）使应用在不同的端系统上运行</li><li>通过网络基础设施提供的服务，使网络应用进程彼此间可以通信（以应用层视角来看，其下的所有层级均为基础设施为其提供服务）</li><li>网络核心中没有网络应用（以路由器交换机和链路组成的网络核心并不在应用层上起作用，主要利用网络层等，所以其上没有网络应用的存在）</li><li>网络应用只在端系统上部署，这有助于网络应用的快速开发和部署</li></ul><h4 id="主要的直接应用"><a href="#主要的直接应用" class="headerlink" title="主要的直接应用"></a>主要的直接应用</h4><ul><li>传统经典的应用：DNS，，电子邮件E-mail，万维网World wide web，文件传输ftp，远程登陆telnet</li><li>新应用：微信，多媒体，App</li></ul><h4 id="重定向器-Redirector"><a href="#重定向器-Redirector" class="headerlink" title="重定向器(Redirector)"></a>重定向器(Redirector)</h4><ul><li>置于应用中的一种小软件</li><li>是透明的</li><li>间接网络应用都是通过重定向器实现网络功能</li></ul><h3 id="网络应用的体系结构"><a href="#网络应用的体系结构" class="headerlink" title="网络应用的体系结构"></a>网络应用的体系结构</h3><p>网络应用程序体系结构是由应用程序开发者研发，规定如何在各种端系统上组织该应用程序（应用程序体系结构独立于TCP/IP协议栈，是由程序开发者使用的体系结构），目前主流的体系结构有以下几种</p><h4 id="客户-服务器体系结构（C-S）"><a href="#客户-服务器体系结构（C-S）" class="headerlink" title="客户-服务器体系结构（C/S）"></a>客户-服务器体系结构（C/S）</h4><p>客户-服务器体系结构将端系统分为客户机（Client）和服务器（Server）两种</p><p>服务器特点：</p><ul><li>服务器主机始终处于运行的状态</li><li>拥有固定的IP地址和端口号（端口号一般使用约定俗成：例如Web应用的服务器采用80端口，ftp服务器的端口采用21…）</li><li>扩展性较差，一般只能通过升级部分硬件和服务器迁移的方式进行扩展</li><li>当客户端访问增加时，服务器的服务性能不是平滑的下降，而是在访问数量达到某一程度后呈指数下跌</li></ul><p>客户端特点：</p><ul><li>主动与服务器通信</li><li>与互联网有间歇性的连接</li><li>可能是动态IP地址</li><li>不直接与其它客户端通信（例如两个web应用之间不能直接进行通信）</li></ul><h4 id="P2P体系结构-对等体系结构"><a href="#P2P体系结构-对等体系结构" class="headerlink" title="P2P体系结构/对等体系结构"></a>P2P体系结构/对等体系结构</h4><p>除了位于数据中心的专用服务器外，几乎没有是中运行的服务器存在，并且对钟信服务器依赖很小，任意端系统之间可以直接进行连接，这些相互直接连接的主机对被称为对等方，每一个节点既是客户端又是服务端，即请求服务，又提供服务（因此P2P体系结构，具有自扩展性，新节点会带来新请求同时带来新的服务），参与的主机间歇性连接并且可以改变IP地址（程间实例有迅雷，BitTorrent等等）</p><p>由于P2P体系结构允许参与主机随时进行连接或结束连接，所以该体系结构难以管理，并且在未来可能面临安全性可靠性等的挑战</p><h4 id="C-S和P2P混合体系结构"><a href="#C-S和P2P混合体系结构" class="headerlink" title="C/S和P2P混合体系结构"></a>C/S和P2P混合体系结构</h4><ul><li>文件搜索：集中<ul><li>主机在中心服务器上注册其资源</li><li>主机向中心服务器查询资源位置</li></ul></li><li>文件传输：P2P<ul><li>任意Peer节点之间</li></ul></li></ul><h3 id="进程通信概述"><a href="#进程通信概述" class="headerlink" title="进程通信概述"></a>进程通信概述</h3><p>进程：一段程序的执行过程，一个应用程序可能有一个或多个进程（例如当浏览器中打开多个网页时，每个单独的网页就是一个进程）</p><p>进程通信就是两个进程之间进行数据的传输或交换，位于同一台主机上的两个进程，可以通过操作系统指定的方式不经过网络进行进程的通信，而位于不同主机上的不同进程之间想要实现通信就需要通过交换报文（Message）的方式实现通信</p><p>我们将进行进程通信的双方分成：</p><ul><li>客户端进程：发送通信的进程</li><li>服务器进程：等待通信的进程</li></ul><h3 id="分布式进程通讯需要解决的问题"><a href="#分布式进程通讯需要解决的问题" class="headerlink" title="分布式进程通讯需要解决的问题"></a>分布式进程通讯需要解决的问题</h3><h4 id="进程标识和寻址问题"><a href="#进程标识和寻址问题" class="headerlink" title="进程标识和寻址问题"></a>进程标识和寻址问题</h4><p>两台主机之间企图进行通讯首先至少需要两台目标主机的IP地址，以保证报文能够顺利到达目标主机并且能够根据IP响应报文，并且由于是进程间的通信，还需要两个进程的端口号，并且，最后，还需要用到所采用的传输层协议，以保证能够正确的解析数据</p><ul><li>一个进程：用IP+port标示 端节点</li><li>本质上，一对主机进程之间的通信由2个端节点构成</li></ul><h4 id="传输层如何为应用层提供服务"><a href="#传输层如何为应用层提供服务" class="headerlink" title="传输层如何为应用层提供服务"></a>传输层如何为应用层提供服务</h4><p>应用层需要向传输层传递的信息</p><ul><li>层间接口必须要携带的信息<ul><li>要传输的报文（对于本层来说：SDU）</li><li>发送方信息：对方的应用进程的标示：IP+TCP(UDP)  端口</li><li>接收方信息：对方的应用进程的标示：对方的IP+TCP(UDP)端口号</li></ul></li><li>传输层实体（tcp或者udp实体）根据这些信息进行TCP报文段（UDP数据报）的封装<ul><li>源端口号，目标端口号，数据等</li><li>将IP地址往下交IP实体，用于封装IP数据报：源IP,目标IP</li></ul></li></ul><h4 id="层间信息的代表-Socket"><a href="#层间信息的代表-Socket" class="headerlink" title="层间信息的代表-Socket"></a>层间信息的代表-Socket</h4><p>如果每次通信/对话都需要携带如此多的信息，无疑会加剧管理难度，并且容易出错，所以可以采用一个代号来指代通信双方/单方的信息，这个信息就是socket（与我们通过文件操作打开文件OS会返回一个句柄一样，对句柄的操作就是对文件的操作，这里我们对socket的操作就是对通信双方交换数据的操作），所谓套接字(Socket)，就是对网络中不同主机上的应用进程之间进行双向通信的端点的抽象。</p><p>TCP上的套接字（流套接字）</p><blockquote><p>流套接字用于提供面向连接、可靠的数据传输服务。该服务将保证数据能够实现无差错、无重复送，并按顺序接收。流套接字之所以能够实现可靠的数据服务，原因在于其使用了传输控制协议，即TCP协议，对于使用面向连接服务（TCP）的应用而言，套接字是4元组：(源IP，源port，目标IP，目标port)的一个具有本地意义的标示</p></blockquote><ul><li>唯一的指定了一个会话（2个进程之间的会话关系）</li><li>应用使用这个标示，与远程的应用进程通信</li><li>不必在每一个报文的发送都要指定这4元组</li><li>简单，便于管理</li></ul><p>UDP上的套接字（数据报套接字）</p><blockquote><p>数据报套接字提供一种无连接的服务。该服务并不能保证数据传输的可靠性,数据有可能在传输过程中丢失或出现数据重复，且无法保证顺序地接收到数据。数据报套接字使用UDP协议进行数据的传输。由于数据报套接字不能保证数据传输的可靠性，对于有可能出现的数据丢失情况，需要在程序中做相应的处理对于使用无连接服务（UDP）的应用而言，套接字是2元组的一个具有本地意义的标示</p></blockquote><ul><li>2元组：IP，port  （源端指定）</li><li>UDP套接字指定了应用所在的一个端节点（end point）</li><li>但是在发送报文时，必须要指定<strong>对方</strong>的ip和udp port(另外一个端节点)</li></ul><h4 id="如何使用传输层提供的服务实现应用通信"><a href="#如何使用传输层提供的服务实现应用通信" class="headerlink" title="如何使用传输层提供的服务实现应用通信"></a>如何使用传输层提供的服务实现应用通信</h4><ul><li>定义应用层协议<ul><li>换的报文类型：请求和应答报文</li><li>各种报文类型的语法：报文中的各个字段及其描述</li><li>字段的语义：即字段取值的含义</li><li>进程何时、如何发送报文及对报文进行响应的规则</li></ul></li><li>编制程序，通过API调用网络基础设施提供通信服务传报文，解析报文，实现应用时序等</li></ul><h3 id="可供应用程序使用的传输层服务"><a href="#可供应用程序使用的传输层服务" class="headerlink" title="可供应用程序使用的传输层服务"></a>可供应用程序使用的传输层服务</h3><ul><li>是否可靠的数据传输率</li><li>能够提供的吞吐量大小</li><li>延迟/定时</li><li>数据的安全性</li></ul><table><thead><tr><th>应用</th><th>数据丢失率</th><th>吞吐</th><th>时间敏感性</th></tr></thead><tbody><tr><td>文件传输</td><td>不能丢失</td><td>弹性</td><td>不</td></tr><tr><td>E-mail</td><td>不能丢失</td><td>弹性</td><td>不</td></tr><tr><td>Web文档</td><td>不能丢失</td><td>弹性</td><td>不</td></tr><tr><td>实时音视频</td><td>容忍丢失</td><td>音频：5kbps-1Mbps 视频：0kps-5Mbps</td><td>是，100ms</td></tr><tr><td>存储音视频</td><td>容忍丢失</td><td>同上</td><td>是，几秒</td></tr><tr><td>交互式游戏</td><td>容忍丢失</td><td>1kbps-10kbps</td><td>是，100ms</td></tr><tr><td>即时讯息</td><td>不能丢失</td><td>弹性</td><td>不确定</td></tr></tbody></table><h3 id="TCP安全"><a href="#TCP安全" class="headerlink" title="TCP安全"></a>TCP安全</h3><p>无论是TCP还是UDP都没有提供任何的加密机制，也就是进程通信过程中其套接字数据与经过网络传送到目的进程的数据相同（即明文传送）</p><p>为了解决这种安全性问题，遂研制出了TCP的加强版即安全套接字层（SSL：Secure Sockets Layer）,其位于应用层（应用采用SSL库，SSL库使用TCP通信），能够完成传统TCP的一切功能，并且最关键的提供了进程到进程的安全性服务，包括加密，数据完整性与端点的鉴别</p><h2 id="万维网WWW与Http"><a href="#万维网WWW与Http" class="headerlink" title="万维网WWW与Http"></a>万维网WWW与Http</h2><p>Web即万维网，是World Wide Web的简称。</p><p>Web 是web网页的集合（ collection of web pages）,其由许多对象组成，这些对象可以是HTML文件，JPEG图象，Java程序等等，每个页面包含了指向其他页面的链接（超级链接），浏览器 –显示阅读web页面的程序</p><h3 id="组成部分"><a href="#组成部分" class="headerlink" title="组成部分"></a>组成部分</h3><ul><li>资源，web页面，Resource (html)</li><li>统一资源定位器：URL</li><li>通信协议HTTP</li></ul><h4 id="常见协议"><a href="#常见协议" class="headerlink" title="常见协议"></a>常见协议</h4><p><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/%E5%BA%94%E7%94%A8%E5%B1%82%E5%8D%8F%E8%AE%AE.jpg" alt="应用层协议"></p><h3 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h3><p>Web页面由 URL (Uniform Resource Locators)标识 (i.e.<a href="http://www.abcd.com/products.html">http://www.abcd.com/products.html</a>)</p><ul><li>协议：http</li><li>页面所在的机器的DNS 域名：<a href="http://www.abcd.com/">www.abcd.com</a></li><li>包含web页面的文件的名字：products.html</li></ul><h4 id="当用户单击一个超级链接（URL）时："><a href="#当用户单击一个超级链接（URL）时：" class="headerlink" title="当用户单击一个超级链接（URL）时："></a>当用户单击一个超级链接（URL）时：</h4><ul><li>浏览器检查URL (读取浏览器的输入)</li><li>浏览器向 DNS 服务器询问域名的IP地址</li><li>DNS 返回对应的 IP 地址</li><li>浏览器和Web服务器建立TCP 连接（在端口 80）</li><li>浏览器发送请求，要求获取文件products.html</li><li>Web服务器返回被请求的文件</li><li>TCP 连接被释放</li><li>浏览器解释显示下载到本地的文件</li></ul><p>一个web页面可能由PDF文件、GIF图标、MPEG视频、MP3歌<br>曲，或者其他数百种文件类型的任何一种组成</p><p>浏览器可能在解释这些文件的时候会遇到问题，不是让浏览<br>器越来越大，而是采用了一个更加通用的解决方案</p><p>当服务器返回一个页面，它通常也返回一些有关该页面的附<br>加信息，包含了页面的MIME类型，以决定如何显示该页面</p><h4 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h4><ul><li>一个小于4kB的命名串</li><li>当客户请求时，web服务器除了应答外，附送一个cookie，存</li><li>储存在客户机磁盘</li><li> 客户再访问同一个web服务器时，同时发送cookie</li><li>服务器辨识出该用户，并得到它关心的一些信息</li></ul><p>问题在于可能暴露客户隐私数据，存在安全隐患</p><h4 id="有两种可能的扩展浏览器的方式"><a href="#有两种可能的扩展浏览器的方式" class="headerlink" title="有两种可能的扩展浏览器的方式"></a>有两种可能的扩展浏览器的方式</h4><p>Plug-ins：代码模块，运行在浏览器的内部</p><p>Helper applications：独立的程序，浏览器只是把参数传入</p><p>两种扩展方式各有优劣，插件可以增强浏览器的功能，应用则不能，插件启动时更加迅速，但是当插件过多就会占用过多资源，导致浏览器使用缓慢</p><h3 id="服务器端"><a href="#服务器端" class="headerlink" title="服务器端"></a>服务器端</h3><h4 id="典型的web-服务器的操作："><a href="#典型的web-服务器的操作：" class="headerlink" title="典型的web 服务器的操作："></a>典型的web 服务器的操作：</h4><ul><li>接收来自客户的TCP连接</li><li>获取所需文件的名字</li><li>从本地磁盘上获取文件（静态页面）</li><li>将文件返回给客户</li><li>释放TCP连接</li></ul><h4 id="改进"><a href="#改进" class="headerlink" title="改进"></a>改进</h4><ul><li>在内存维护一个缓存，保存最近用过的 n个文件，避免每次查找文件都要读取磁盘</li><li>采用多线程服务器</li></ul><p><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/%E5%A4%9A%E7%BA%BF%E7%A8%8Bweb%E6%9C%8D%E5%8A%A1%E5%99%A8.jpg" alt="多线程web服务器"></p><p>如上图，客户的TCP连接中止于前端，所以应答也必须经过前端，一种解决的方法是TCP移交，TCP端点被传递给处理节点 ，所以应答可以直接向客户端发送 。</p><h3 id="代理服务器-万维网高速缓存"><a href="#代理服务器-万维网高速缓存" class="headerlink" title="代理服务器-万维网高速缓存"></a>代理服务器-万维网高速缓存</h3><p>代理服务器(proxy server)又称为万维网高速缓存(Web cache)，它代表浏览器发出 HTTP 请求。</p><p>万维网高速缓存把最近的一些请求和响应暂存在本地磁盘中。</p><p>当与暂时存放的请求相同的新请求到达时，万维网高速缓存就把暂存的响应发送出去，而不需要按 URL 的地址再去因特网访问该资源。</p><p>如果没有代理服务器，假定在内网内的不同客户端请求同一个数据，就需要同时大量传送完全相同的内容，浪费带宽资源。如果有代理服务器，在第一个客户端查询相关数据内容后，数据就暂时被保存在服务器中，后续客户端如果再次请求这组数据就可以直接从代理服务器获取，甚至不需要进入公网，十分高效快捷</p><h4 id="代理流程"><a href="#代理流程" class="headerlink" title="代理流程"></a>代理流程</h4><ul><li>用户设置浏览器： 通过缓存访问Web</li><li>浏览器将所有的HTTP 请求发给缓存<ul><li>在缓存中的对象：缓存直接返回对象</li><li>如对象不在缓存，缓存请求原始服务器，然后再将对象返回给客户端</li></ul></li></ul><h4 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h4><ul><li>缓存既是客户端又是服务器</li><li>通常缓存是由ISP安装(大学、公司、居民区ISP)</li><li>可以大大减少一个机构内部网络与Internent接入链路上的流量</li><li>目标：不访问原始服务器，就满足客户的请求</li></ul><h4 id="条件GET方法"><a href="#条件GET方法" class="headerlink" title="条件GET方法"></a>条件GET方法</h4><p>由于代理服务器并不能确定客户请求的资源在代理服务器中是否是最新版本，所以在用户请求资源且资源在代理服务器中存在时，代理服务器会首先向目标服务器发送一个简单报文，其中在报文头部加上<code>IF-MODIFIED-SINCE: &lt;SINCE&gt;</code>属性表示询问自该事件起，所请求的资源是否有被修改过，服务器会根据所给时间响应资源状态，代理服务器就可以判断是否需要更新资源</p><h3 id="Http协议"><a href="#Http协议" class="headerlink" title="Http协议"></a>Http协议</h3><blockquote><p>超文本传输协议（Hypertext Transfer Protocol，HTTP）是一个简单的请求-响应协议，它通常运行在TCP之上。它指定了客户端可能发送给服务器什么样的消息以及得到什么样的响应。请求和响应消息的头以ASCII形式给出；而消息内容则具有一个类似MIME的格式。</p></blockquote><p>HTTP是基于客户/服务器模式，且面向连接的。典型的HTTP事务处理有如下的过程：</p><ol><li>客户与服务器建立连接</li><li>客户向服务器提出请求</li><li>服务器接受请求，并根据请求返回相应的文件作为应答</li><li>客户与服务器关闭连接</li></ol><p>从上文可以看出，HTTP协议是无状态的，即服务器并不维护关于客户的任何信息（从上文的流程可以看到，事务处理结束后客户与服务器直接关闭连接，对客户的信息不进行处理）</p><h4 id="无状态协议的优点"><a href="#无状态协议的优点" class="headerlink" title="无状态协议的优点"></a>无状态协议的优点</h4><ul><li>减轻了服务器的压力</li><li>能够支持更多的客户端连接</li><li>不需要维护历史信息</li></ul><h4 id="非持续连接HTTP"><a href="#非持续连接HTTP" class="headerlink" title="非持续连接HTTP"></a>非持续连接HTTP</h4><p>非持续连接HTTP表示请求/响应都经过建立一个单独的TCP连接进行</p><p>非持续连接与持续连接区别<br><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/%E9%9D%9E%E6%8C%81%E7%BB%AD%E8%BF%9E%E6%8E%A5%E4%B8%8E%E6%8C%81%E7%BB%AD%E8%BF%9E%E6%8E%A5.jpg"></p><p>非持续连接HTTP特点</p><ul><li>最多只有一个对象在TCP连接上发送</li><li>下载多个对象需要多个TCP连接</li><li>HTTP/1.0 使用非持久连接</li></ul><p>非持续连接的缺点</p><ul><li>每个对象都需要两个RTT</li><li>必须为每个请求的对象建立并维护一个全新的连接，增加了服务器的负担</li></ul><p>非持续连接情况下的往返时间模型<br><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/8F8A51636239F4DE64E967DD66214535.jpg"></p><ul><li>往返时间RTT：round-trip-time表示一个分组从客户端到服务器端后又返回客户端所消耗的时间（RTT假设分组较小，数据的传输时间很短忽略不计）</li><li>从图中可以看出响应时间分为三部分，总共是两个RTT与一段传输时间（这里加传输时间是因为服务器响应的数据一般较大需要单独计算，不可以忽略不计），第一个RTT是发起TCP连接，第二个RTT是发送HTTP请求并获取响应</li></ul><h4 id="持续连接HTTP"><a href="#持续连接HTTP" class="headerlink" title="持续连接HTTP"></a>持续连接HTTP</h4><p>持续连接HTTP表示一段时间内所有请求/响应都经过同一个TCP连接进行</p><p>持续连接HTTP的是通过服务器在发送响应后，仍保持TCP连接实现的，这保证了在相同的客户端和服务器之间的后续请求和响应报文是通过相同的TCP连接进行传送的，并且客户端在于导一个引用对象的时候，就可以尽快发送该对象的请求</p><p>根据客户端发送请求的方式可以将持续连接的HTTP分为两种</p><ul><li>非流水式持久HTTP：<ul><li>客户端在收到服务器关于上一个请求的响应后才会发送下一个请求</li><li>每个请求消耗一个RTT</li></ul></li><li>流水式持久HTTP：<ul><li>客户端遇到一个引用对象就立即产生一个请求</li><li>所有引用对象消耗的时间理论上远小于非流水式</li><li>HTTP/1.1 默认采用这种方式</li></ul></li></ul><p>持续连接HTTP特点</p><ul><li>多个对象可以在一个TCP连接上传送</li><li>HTTP/1.1 默认使用持续连接</li></ul><h4 id="HTTP报文格式"><a href="#HTTP报文格式" class="headerlink" title="HTTP报文格式"></a>HTTP报文格式</h4><p><strong>HTTP请求报文数据格式</strong></p><ol><li>请求行<ul><li>请求方式：HTTP协议种规定了7种请求方式，常用的由两种<ul><li>GET：请求的参数在请求行中（即跟在URL后面），且请求的长度有限制，有安全隐患</li><li>POST：请求的参数在请求体中，请求的URL没有限制，相对安全</li></ul></li><li>请求url：发出请求的URL</li><li>请求协议/版本：例如HTTP/1.1</li></ul></li><li>请求头<ul><li>格式：请求头名称:请求头值</li><li>User-Agent：当前浏览器的相关版本信息（可以在服务器端获取该信息，以解决浏览器兼容问题）</li><li>Referer：当前网页的来源网址（从哪个网页跳转而来）可用于防盗链或进行一些统计工作</li><li>Accept：允许接收的数据格式</li><li>Accept-Language：允许接收的语言类型 </li><li>Coonection：连接状态（是否存活）</li></ul></li><li>请求空行：一段空行，用于分割各组成部分</li><li>请求体：正文内容</li></ol><p>解析前的请求头<br><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/%E8%A7%A3%E6%9E%90%E5%89%8D%E7%9A%84%E8%AF%B7%E6%B1%82%E5%A4%B4.jpg"></p><p>解析后的请求头</p><p><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/%E8%A7%A3%E6%9E%90%E5%90%8E%E7%9A%84%E8%AF%B7%E6%B1%82%E5%A4%B4.jpg"></p><p><strong>HTTP响应报文数据格式</strong></p><ol><li>响应行<ul><li>组成：协议/版本 响应状态码  状态码描述（例如HTTP/1.1 200 OK）</li></ul></li><li>响应头<ul><li>格式：头名称:值</li><li>常见响应头<ul><li>Content-Type：服务器告知客户端，响应体数据的格式以及编码方式</li><li>Content-Disposition：服务器告知客户端响应体数据的打开方式</li></ul></li></ul></li><li>响应空行</li><li>响应体</li></ol><p>捕获的本地HTTP报文<br><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/%E6%8D%95%E8%8E%B7%E7%9A%84HTTP%E6%8A%A5%E6%96%87.jpg" alt="捕获的HTTP报文"></p><p><strong>响应状态码分类</strong><br>分类|    分类描述<br>—|—<br>1xx    |信息，服务器收到请求，需要请求者继续执行操作<br>2xx    |成功，操作被成功接收并处理<br>3xx    |重定向，需要进一步的操作以完成请求<br>4xx    |客户端错误，请求包含语法错误或无法完成请求<br>5xx    |服务器错误，服务器在处理请求的过程中发生了错误</p><h3 id="cookies：实现用户与服务器的交互"><a href="#cookies：实现用户与服务器的交互" class="headerlink" title="cookies：实现用户与服务器的交互"></a>cookies：实现用户与服务器的交互</h3><blockquote><p>类型为“小型文本文件”，是某些网站为了辨别用户身份，进行Session跟踪而储存在用户本地终端上的数据（通常经过加密），由用户客户端计算机暂时或永久保存的信息</p></blockquote><h4 id="组成部分-1"><a href="#组成部分-1" class="headerlink" title="组成部分"></a>组成部分</h4><ol><li>在HTTP响应报文中有一个cookie的首部行</li><li>在HTTP请求报文含有一个cookie的首部行</li><li>在用户端系统中保留有一个cookie文件，由用户的浏览器管理</li><li>在Web站点有一个后端数据库</li></ol><h2 id="电子邮件"><a href="#电子邮件" class="headerlink" title="电子邮件"></a>电子邮件</h2><p>电子邮件系统通常由三部分组成</p><ul><li>用户代理(UA)：让用户能够阅读和发送邮件，又名邮件阅读器<ul><li>本地程序，提供命令行或图形界面，让用户和电子邮件系统交互（如outlook和foxmail）</li></ul></li><li>邮件服务器，消息传输代理 (MTA)：将消息从源端送到目标端<ul><li>通常是系统守护进程，即运行在后台的进程，在系统中传递电子邮件，又被称为邮件服务器</li></ul></li><li>简单邮件传输协议：SMTP</li></ul><h3 id="电子邮件的体系结构"><a href="#电子邮件的体系结构" class="headerlink" title="电子邮件的体系结构"></a>电子邮件的体系结构</h3><p><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/%E7%94%B5%E5%AD%90%E9%82%AE%E4%BB%B6%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84.jpg" alt="电子邮件体系结构"></p><p>用户首先在UA编辑好邮件然后提交，接下来邮件会被提交到发方的邮件服务器（MTA），接下来发方的邮件传输代理将会把邮件传输到收方的MTA上，最终，当对方从UA阅读相应邮件时，该邮件会被从对方的邮件服务器发送到对方本地的UA</p><h4 id="用户代理－UA"><a href="#用户代理－UA" class="headerlink" title="用户代理－UA"></a>用户代理－UA</h4><p>UA通常是一个程序，一般称为电子邮件阅读器，常见的UA有： Gmail,outlook,foxmail…</p><h4 id="用户代理完成的功能"><a href="#用户代理完成的功能" class="headerlink" title="用户代理完成的功能"></a>用户代理完成的功能</h4><ul><li>入境邮件的显示</li><li>归档：垃圾邮件、某重要人物的邮件</li><li>邮件处置：回复、转发、删除、保存……</li><li>自动响应</li><li>签名块</li><li>邮件列表（mailing-list）：本地、传输代理</li></ul><h3 id="电子邮件消息格式"><a href="#电子邮件消息格式" class="headerlink" title="电子邮件消息格式"></a>电子邮件消息格式</h3><p>ASCII 电子邮件信息通常采用 RFC 822，注意：<strong>SMTP是交换Email报文的协议，RFC 822是文本报文的标准</strong></p><ul><li>消息由一个基本的信封(RFC821)、一些头域、一个空行和消息体组成。</li><li>每个头域（逻辑地）由一行ASCII文本组成，包括域名、一个冒号，对于大多数头域来说，还包括一个值</li><li>RFC822是几十年前设计的，没有区分信封域和头域</li><li>虽然 RFC 5322作了修正，但是因为RFC822已经广泛使用，完全重新设计是不可能的</li><li>用户可以发明新的消息头以供自己私人使用，只要这些消息头以 X-开头</li></ul><h4 id="消息头-RFC-822"><a href="#消息头-RFC-822" class="headerlink" title="消息头 (RFC 822)"></a>消息头 (RFC 822)</h4><table><thead><tr><th>信头字段</th><th>目的</th></tr></thead><tbody><tr><td>To</td><td>收信人地址</td></tr><tr><td>CC</td><td>抄送：另一个收信人地址</td></tr><tr><td>BCC</td><td>密送：收信人地址，但其它收信人看不到这个收信人的地址。</td></tr><tr><td>From</td><td>邮件作者</td></tr><tr><td>Sender</td><td>发信人</td></tr><tr><td>Received</td><td>沿线各转运代理增加的线路</td></tr><tr><td>Return path</td><td>回邮地址</td></tr></tbody></table><h4 id="RFC-5322新增"><a href="#RFC-5322新增" class="headerlink" title="RFC 5322新增"></a>RFC 5322新增</h4><table><thead><tr><th>信头字段</th><th>目的</th></tr></thead><tbody><tr><td>Date</td><td>发信日期</td></tr><tr><td>Reply-To</td><td>回邮地址</td></tr><tr><td>Subject</td><td>主题</td></tr><tr><td>Comments</td><td>备注</td></tr><tr><td>Keywords</td><td>关键字，用来进一步搜索邮件</td></tr><tr><td>In-Reply-To</td><td>被当前邮件回复的邮件的ID</td></tr><tr><td>References</td><td>几乎同In-Reply-To一样</td></tr><tr><td>Encrypted</td><td>加密邮件的加密类型</td></tr></tbody></table><h4 id="MIME-多用途互联网邮件扩展-the-Multipurpose-Internet-Mail-Extensions"><a href="#MIME-多用途互联网邮件扩展-the-Multipurpose-Internet-Mail-Extensions" class="headerlink" title="MIME  多用途互联网邮件扩展 (the Multipurpose Internet Mail Extensions)"></a>MIME  多用途互联网邮件扩展 (the Multipurpose Internet Mail Extensions)</h4><p>RFC5322无法处理带有重音符的语言（如法语）、非拉丁字母（如俄语）、不带字母的语言（如汉语，日语）、完全不包含文本的消息（如视频）的邮件，为此提出了MIME来解决此问题</p><p>MIME的基本思想是<strong>继续使用 RFC822格式</strong>，但是在消息体中<br>增加了<strong>结构</strong>，且为非ASCII消息定义了<strong>编码规则</strong></p><ul><li>由于没有偏离 RFC822，MIME消息可以使用现有的程序和协议来发送</li><li>只有接收和发送的程序必须要改变</li></ul><p>MIME增加的消息头</p><table><thead><tr><th>Header</th><th>Meaning</th></tr></thead><tbody><tr><td>MIME-Version</td><td>标识MIME版本</td></tr><tr><td>Content－Description</td><td>描述邮件包含的内容</td></tr><tr><td>Content－ID</td><td>唯一标识符</td></tr><tr><td>Content-Transfer-Encoding</td><td>传输过程中编码方式</td></tr><tr><td>Content-Type</td><td>邮件内容的类型和格式（目前定义了七种类型：文本，图片，视频，音频，应用…每个类型还有一个或多个子类型）</td></tr></tbody></table><p><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/EMAIL%E4%B8%AD%E7%9A%84MIME.png"></p><h3 id="简单邮件传输协议SMTP（Simple-Mail-Transfer-Protocol）"><a href="#简单邮件传输协议SMTP（Simple-Mail-Transfer-Protocol）" class="headerlink" title="简单邮件传输协议SMTP（Simple Mail Transfer Protocol）"></a>简单邮件传输协议SMTP（Simple Mail Transfer Protocol）</h3><p>上文讲述了如何编写邮件，接下来进行的就是邮件的传输，邮件的传输通过简单邮件传输协议实现，这是一个简单的 ASCII 协议</p><p>源机与目标机（SMTP守护进程在监听）的<strong>25</strong>端口建立TCP连接<br>。如果消息不能被投递，则向消息的发送方返回一个错误报告（包含了不能投递消息的第一部分）</p><h4 id="SMTP传输步骤"><a href="#SMTP传输步骤" class="headerlink" title="SMTP传输步骤"></a>SMTP传输步骤</h4><ol><li>连接建立 在端口 25</li><li>数据交换<ul><li>客户机（作为客户）等待服务器（作为服务器）首先开始通话</li><li>服务器首先发送一行文本，给出它自己的标识，并且告诉客户机是否已准备好接收邮件</li><li>如果服务器没有准备好，则客户机释放连接，以后再重试(5-30min)</li><li>如果服务器愿意接收电子邮件，则客户机申明发信人和收信人</li><li>如果服务器确实存在这样的收信人，则服务器指示客户可以发送了</li><li>客户发送消息，服务器回发确认</li></ul></li><li>连接释放</li></ol><h4 id="SMTP存在的问题"><a href="#SMTP存在的问题" class="headerlink" title="SMTP存在的问题"></a>SMTP存在的问题</h4><ul><li>没有认证，导致容易接收垃圾邮件</li><li>传输的是ASCII消息而不是二进制数据，需要编码，效率低下</li><li>邮件是明文，涉及邮件安全问题</li></ul><p>通过上述流程不难发现，保证邮件发送成功的前提是发送端与接收端成功建立TCP连接，这就需要接收端与发送端设备需要在发送时都保持开机状态，但这是不现实的，收方不可能一直在线，而如果收方不在线，发方就无法发送邮件</p><h4 id="最后的投递"><a href="#最后的投递" class="headerlink" title="最后的投递"></a>最后的投递</h4><p>为解决上述问题，就需要在邮件服务提供商ISP的一台机器上运行一个<strong>消息传输代理</strong>（message transferagent）； 这台机器可以一天24小时运行，随时都可以接收邮件</p><p>然后设计一个协议，允许用户在上线后和消息传输代理MTA联系，然后把邮件从ISP那里拷贝到用户，早期使用的协议是POP-3协议，即邮局协议3版本，改进版本为IMAP。协议的作用范围在接收端用户和代理服务器之间</p><h4 id="POP3"><a href="#POP3" class="headerlink" title="POP3"></a>POP3</h4><ul><li>当用户启动邮件阅读器的时候，POP3开始工作</li><li>用户呼叫ISP（除非已有一个连接），然后与MTA在110端口<br>建立TCP连接</li><li>一旦连接建立， POP3协议按顺序经历三种状态<ul><li>授权（Authorization）处理用户登录的过程</li><li>事务（Trnsactions）用户收取电子邮件，并将邮件标记为删除</li><li>更新（Update）将标为删除的电子邮件删除</li></ul></li></ul><p>POP3协议不适合应用于移动端收发邮件，因为在移动端收发邮件会导致POP3将邮件标记为删除，无法在其他客户端查看(采用下载并删除模式)，这个问题，在IMAP中得到了解决</p><h4 id="IMAP"><a href="#IMAP" class="headerlink" title="IMAP"></a>IMAP</h4><ul><li>IMAP 假设所有的电子邮件都永久地保存在服务器上的多个邮箱中（解决了移动端删除的问题）</li><li>IMAP 提供了阅读消息或阅读部分消息的机制</li><li>IMAP 服务器在143端口监听而不是110端口</li><li>IMAP 也可以接收外发的邮件 (这点跟 POP3不同)</li><li>IMAP 有更多的命令，更复杂</li></ul><h4 id="WebMail优点"><a href="#WebMail优点" class="headerlink" title="WebMail优点"></a>WebMail优点</h4><ul><li>无需安装专用的UA，只要能够上网登录浏览器，就可以使用</li><li>无需配置，打开浏览器即可</li><li>收发双方无需同时在线，只需通过浏览器登录各自代理服务器，使用HTTP</li><li>两个代理服务器之间邮件的传递仍然采用SMTP</li></ul><h2 id="其他应用"><a href="#其他应用" class="headerlink" title="其他应用"></a>其他应用</h2><p>应用层是开放的，以TCP/IP为核心，向两端开放。应用层出不穷文件传输FTP，远程登录TELNET，多媒体，微信……</p><h3 id="文件传输（FTP）"><a href="#文件传输（FTP）" class="headerlink" title="文件传输（FTP）"></a>文件传输（FTP）</h3><p>一种可靠的面向连接的服务，采用TCP在支持FTP的系统间传<br>输文件（在远程主机上传输文件或接收文件），它支持双向二进制文件和ASCII文件传输。</p><h4 id="上载："><a href="#上载：" class="headerlink" title="上载："></a>上载：</h4><p>将文件从自己的计算机中拷贝到远程计算机上(upload)</p><h4 id="下载："><a href="#下载：" class="headerlink" title="下载："></a>下载：</h4><p>将文件从远程计算机上拷贝到自己的计算机上。 (download)</p><h4 id="FTP文件传输流程"><a href="#FTP文件传输流程" class="headerlink" title="FTP文件传输流程"></a>FTP文件传输流程</h4><ol><li>FTP客户端与服务器通过端口21进行联系，并使用TCP为传输协议（建立控制连接）</li><li>客户端通过控制连接获得身份认证（用户名与口令）</li><li>客户端通过控制连接发送命令浏览远程目录</li><li>收到一个文件传输命令<ol><li>服务器打开一个到客户端的数据连接</li><li>利用数据连接进行文件数据传输</li><li>服务器关闭当前数据连接</li></ol></li><li>以后每收到一个文件传输命令，服务器都会重新建立一条数据连接</li></ol><p>从上面的流程不难看出，FTP是有状态的协议，其需要维护用户的状态信息，当前路径以及用户账户等等<br><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/%E4%B8%A4%E6%9D%A1%E9%93%BE%E6%8E%A5.jpg" alt="两条链接"></p><h4 id="FTP命令"><a href="#FTP命令" class="headerlink" title="FTP命令"></a>FTP命令</h4><ul><li>在控制连接上以ASCII文本方式传送</li><li>USER username</li><li>PASS password</li><li>LIST：请服务器返回远程主机当前目录的文件列表</li><li>RETR filename：从远程主机的当前目录检索文件(gets)</li><li>STOR filename：向远程主机的当前目录存放文件(puts)</li></ul><h4 id="FTP返回码"><a href="#FTP返回码" class="headerlink" title="FTP返回码"></a>FTP返回码</h4><ul><li>FTP会返回状态码和状态信息(同HTTP)</li><li>331 Username OK, password required</li><li>125 data connection already open; transfer starting</li><li>425 Can’t open data connection</li><li>452 Error writing file</li></ul><h3 id="TFTP："><a href="#TFTP：" class="headerlink" title="TFTP："></a>TFTP：</h3><p>一种无连接的不可靠的服务，采用UDP在支持TFTP的系统间传输文件。</p><h3 id="Telnet"><a href="#Telnet" class="headerlink" title="Telnet"></a>Telnet</h3><p>不要求远地系统创建众多的服务器，只需为每个远程登陆用<br>户建立一个进程，这个进程再通过创建子进程为远程登陆用<br>户提供各种允许的服务。</p><p>远程登陆的另外一个优点，它提供与本地登陆几乎完全相同<br>的用户界面</p><p>本地用户在本地终端对远地系统进行远程登陆，该远程登陆<br>的内部视图实际上是一个TCP连接（服务器端口：23）；</p><p>将本地终端上的键盘输入逐键传到远地机；将远地机输出送回本地终端。</p><ul><li>FTP和TELNET的传输层都用的是TCP</li></ul><h2 id="域名系统DNS概述"><a href="#域名系统DNS概述" class="headerlink" title="域名系统DNS概述"></a>域名系统DNS概述</h2><p>在互联网中，直接使用IP地址作为机器的绝对地址是行不通的，具体原因有2点：1.计算机可能<strong>常常地更换IP地址</strong>，所以，通过IP地址去访问某台机器就会发生问题。2.IP地址<strong>难于记忆</strong>，且毫无规律。因此，我们只需要通过一个<strong>有规律性且永久不会更换</strong>的名字来标识某个IP地址，就可以解决上述问题，这就是我们所说的<strong>域名</strong>。</p><p>但是在传输数据的过程中，或是为数据加上MAC地址，或是为文件加上IP地址，却从来没有为数据加上过域名，只有IP地址可以起到标示主机与路由器的功能，因此我们必须使用域名系统DNS，来将一个个名字映射到对应的IP地址</p><p>ARPANET时代，有一个文件hosts.txt，列出了当时网络上所<br>有的主机和它们对应的IP地址（当网络很小的时候，可以工<br>作得很好），这份文件如今依然存在于电脑的<br>“C:\Windows\System32\drivers\etc\hosts” 路径下。但是随着互联网发展，用一份文件映射所有IP地址和域名变得不现实，因此才产生了如今的域名系统</p><h3 id="域名系统DNS-Domain-Name-System"><a href="#域名系统DNS-Domain-Name-System" class="headerlink" title="域名系统DNS(Domain Name System)"></a>域名系统DNS(Domain Name System)</h3><ul><li>DNS是分层次的，基于域的命名方案</li><li>采用了分布式数据库系统来实现</li><li>运行在UDP之上端口号为53的应用服务</li><li>是核心的Internet功能，但以应用层协议实现（为其他应用提供服务）</li></ul><h4 id="DNS的主要目的"><a href="#DNS的主要目的" class="headerlink" title="DNS的主要目的"></a>DNS的主要目的</h4><ul><li>实现主机-IP地址的转换</li><li>其他目的<ul><li>主机别名到规范名字的转换</li><li>邮件服务器别名到邮件服务器正规名字的转换</li><li>一定程度上实现负载均衡</li></ul></li></ul><p><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/DNS%E7%B3%BB%E7%BB%9F.jpg" alt="DNS系统"></p><p>DNS首先将整个互联网分成250个顶级域，每个顶级域被分为多个子域，子域仍可以继续划分出更多子域，所有这些域最终将会形成一棵树，树上的叶子代表没有子域的域</p><p>顶级域由ICANN负责管理运行，顶级域分为两类：通用域（.com,.edu…）以及国家域（.jp,.cn,.nl…）</p><p><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/%E9%A1%B6%E7%BA%A7%E5%9F%9F%E5%90%8D.jpg" alt="顶级域名"></p><h4 id="中国（-cn）二级域名"><a href="#中国（-cn）二级域名" class="headerlink" title="中国（.cn）二级域名"></a>中国（.cn）二级域名</h4><table><thead><tr><th>域名</th><th>含义</th><th>域名</th><th>含义</th><th>域名</th><th>含义</th></tr></thead><tbody><tr><td>ac</td><td>研究机构</td><td>gd</td><td>广东</td><td>bj</td><td>北京</td></tr><tr><td>co</td><td>商业公司</td><td>gx</td><td>广西</td><td>tj</td><td>天津</td></tr><tr><td>or</td><td>非盈利性组织</td><td>sc</td><td>四川</td><td>eb</td><td>河北</td></tr><tr><td>net</td><td>提供网络服务的单位</td><td>gz</td><td>贵州</td><td>sx</td><td>山西</td></tr><tr><td>edu</td><td>教育和科研单位</td><td>yn</td><td>云南</td><td>nm</td><td>内蒙古</td></tr><tr><td>go</td><td>政府机构</td><td>xz</td><td>西藏</td><td>en</td><td>河南</td></tr><tr><td>ha</td><td>海南</td><td>sn</td><td>陕西</td><td>ln</td><td>辽宁</td></tr><tr><td>ah</td><td>安徽</td><td>gs</td><td>甘肃</td><td>jl</td><td>吉林</td></tr><tr><td>jx</td><td>江西</td><td>qh</td><td>青海</td><td>hl</td><td>黑龙江</td></tr><tr><td>sd</td><td>山东</td><td>nx</td><td>宁夏</td><td>sh</td><td>上海</td></tr><tr><td>fj</td><td>福建</td><td>xj</td><td>新疆</td><td>js</td><td>江苏</td></tr><tr><td>hn</td><td>湖南</td><td>hb</td><td>湖北</td><td>zj</td><td>浙江</td></tr></tbody></table><p>(获得一个二级域名无需到ICANN申请)，只需要到运行顶级域名的注册机构去检查带申请名字是否可用，并且不是别人商标即可申请</p><h4 id="DNS的工作流程"><a href="#DNS的工作流程" class="headerlink" title="DNS的工作流程"></a>DNS的工作流程</h4><ol><li>应用调用解析器（resolver）</li><li>解析器作为客户向名字服务器（Name Server）发出查询报文（封装在UDP段中）</li><li>Name Server返回响应报文（Name/Ip）</li></ol><h4 id="本地名字服务器（Local-Name-Server）"><a href="#本地名字服务器（Local-Name-Server）" class="headerlink" title="本地名字服务器（Local Name Server）"></a>本地名字服务器（Local Name Server）</h4><ul><li>不严格属于层次结构内</li><li>每个ISP（居民区，学校，企业）都有本地DNS服务器（也称为默认名字服务器）</li><li>当一个主机发起DNS查询时，查询首先被送到本地DNS服务器（高速），若本地没有缓存，则转发到层次结构中进行查询（起代理作用）</li></ul><h4 id="DNS查询方式"><a href="#DNS查询方式" class="headerlink" title="DNS查询方式"></a>DNS查询方式</h4><ul><li>递归查询</li><li>迭代查询</li></ul><h3 id="域名（Domain-Names）"><a href="#域名（Domain-Names）" class="headerlink" title="域名（Domain Names）"></a>域名（Domain Names）</h3><p>每个域的名字是：从它向上到根（未命名）的路径，各个部分间用圆点隔开</p><ul><li>域名可以是绝对的，也可以是相对的，绝对域名总是以圆点<br>结束（如： eng.sun.com. ）<ul><li>相对域名必须在一定的上下文环境中被解释出来才有意义，从而唯一地确定其真实的含义</li><li>绝对域名和相对域名都引用了域名树中一个特定的节点，以及它下面的所有节点</li></ul></li><li>域名是大小写无关的（ case insensitive ）</li><li>各组成部分的名字最多有 63 个字符长，整个路径不超过 255个字符</li><li>没有规则限制同时在两个或多个顶级域名下的注册 (如：<br>sony.com and sony.nl)—这可能导致域名抢注</li><li>每个域自己控制它下面的域（子域）的划分<ul><li>例如：日本的 ac.jp 和 co.jp 分别对应于 edu 和com</li><li>荷兰却不这样区分，它把所有的都放在nl之下</li><li>要创建一个新的域，创建者必须得到该新域的上级域的许可，一旦创建成功，该新域可以创建子域，而无需征得上级域的同意</li></ul></li><li>域名遵循的是组织的边界而不是物理网络的边界<ul><li>一个域的主机可以不在同一个网络</li><li>一个网络中的主机不一定在同一个域</li></ul></li></ul><h3 id="域名服务器"><a href="#域名服务器" class="headerlink" title="域名服务器"></a>域名服务器</h3><p>资源记录存储在资源服务器中，整个互联网需要多台而不是一台域名服务器，DNS名字空间被分割成<strong>不相交的区域</strong>（zones），每个区域包含域名树的一部分，也包含一台主域名服务器（ primary name server ）。<br><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/%E5%9F%9F%E5%90%8D%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%88%92%E5%88%86.png"></p><p>主域名服务器从自己硬盘的一个文件中读取信息，次域名服<br>务器（ secondary name servers ）分享这些信息</p><h4 id="根域名服务器"><a href="#根域名服务器" class="headerlink" title="根域名服务器"></a>根域名服务器</h4><p>最重要的域名服务器；存储所有顶级域名的名字和IP</p><ul><li>无论是哪个本地域名服务器，无论何时，只要它无法回答一个查询请求，它都会向根域服务器求救 (for help)</li><li>全球有 13 根域服务器，它们的名字分别是a to m（前13 个字母）</li><li>全球还有多台根域名服务器的镜像，以便各个国家就近找到一个根域名服务器救急</li></ul><h4 id="权威DNS服务器"><a href="#权威DNS服务器" class="headerlink" title="权威DNS服务器"></a>权威DNS服务器</h4><p>组织机构的DNS服务器，提供组织机构服务器（如web，email）可访问的主机和IP之间的映射</p><h4 id="TLD服务器"><a href="#TLD服务器" class="headerlink" title="TLD服务器"></a>TLD服务器</h4><p>顶级域（TLD）服务器：负责顶级域名（com，org，net）和所有国家级的顶级域名（cn，uk，fr）</p><h3 id="资源记录"><a href="#资源记录" class="headerlink" title="资源记录"></a>资源记录</h3><p>每个域无论是单主机域还是顶级域，都有一组跟它相关联的资料记录，当一个解析器将域名传递给DNS时，DNS返回的是与这个资源相关联的资源记录，所以DNS的主要功能，是将域名映射到资源记录上去</p><h4 id="资源记录的组成-RR格式"><a href="#资源记录的组成-RR格式" class="headerlink" title="资源记录的组成-RR格式"></a>资源记录的组成-RR格式</h4><ul><li>域名（Domain name）：<ul><li>指出这条记录适用于哪个域，通常每个域有多条记录，而数据库则保存了多个域的信息</li><li>域名字段是匹配查询条件的主要关键字</li><li>记录在数据库中的顺序是无关紧要的</li></ul></li><li>生存期（Time to Live，TTL）：生存时间，指示该条记录的稳定程度<ul><li>极稳定的信息会被分配一个很大的值，可以用于记录权威记录</li><li>非常不稳定的信息会被分配一个很小的值，可以用于记录缓冲记录</li></ul></li><li>类别（Class）：对于互联网信息，它总是 IN</li><li>值（Value）：类型对应的值，可以是数字，可以是ASCII码，域名等等</li><li>类型（Type）：资源记录的类型<ul><li>A：Domain Name为主机，Value为IP地址</li><li>CNAME：Domain Name为规范名字的别名，Value为规范名字</li><li>NS：Domain Name为域名，Value为该域名的权威服务器的域名</li><li>MX：Value为Domain Name对应的邮件服务器的名字</li></ul></li></ul><h2 id="P2P应用"><a href="#P2P应用" class="headerlink" title="P2P应用"></a>P2P应用</h2><blockquote><p>对等式网络（英语：peer-to-peer， 简称P2P），又称点对点技术，是无中心服务器、依靠用户群（peers）交换信息的互联网体系，它的作用在于，减低以往网路传输中的节点，以降低资料遗失的风险。与有中心服务器的中央网络系统不同，对等网络的每个用户端既是一个节点，也有服务器的功能，任何一个节点无法直接找到其他节点，必须依靠其户群进行信息交流。</p></blockquote><h3 id="P2P应用架构"><a href="#P2P应用架构" class="headerlink" title="P2P应用架构"></a>P2P应用架构</h3><ul><li>没有（或极少）一直运行的服务器</li><li>任意端系统都可以直接通信</li><li>利用peer的服务能力</li><li>Peer节点间歇上网，每次IP地址都有可能变化</li></ul><h3 id="C-S模式在文件分发中暴露的劣势"><a href="#C-S模式在文件分发中暴露的劣势" class="headerlink" title="C/S模式在文件分发中暴露的劣势"></a>C/S模式在文件分发中暴露的劣势</h3><h4 id="实际场景"><a href="#实际场景" class="headerlink" title="实际场景"></a>实际场景</h4><p>以文件（文件大小为F）下载为例，在文件下载过程中C/S模式下，始终都是服务器负责进行文件的上载（上载能力$U_s$），各个客户端负责文件的下载（下载能力$D_i$），此时下载所消耗的时间取决于客户端下载单个文件所花费的时间，与服务器上载N个相同文件所花费时间中的最大值，即：<br>$$D_{c/s}\geq max{\frac{N*F}{U_s},\frac{F}{D_1},…,\frac{F}{D_N}}$$</p><p><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/CS%E4%B8%8EP2P%E5%8C%BA%E5%88%AB.jpg"></p><p>而P2P应用在进行文件传输的时候，不依赖与上传的服务器，所有peer在下载文件后都可以成为文件的提供方进行数据的上载，所以其下载所消耗最长时间取决于三个因素：</p><ul><li>服务器传输：最少需要上载一份拷贝，发送一个拷贝的时间：$\frac{F}{U_S}$</li><li>客户端: 每个客户端必须下载一个拷贝,下载拷贝所需时间：$\frac{F}{D_i}$</li><li>客户端: 所有客户端总体下载量NF<ul><li>最大上载带宽是：$U_S+U_i+…+U_N$</li><li>除了服务器可以上载，其他所有的peer节点也都可以上载</li><li>所以总体时间：$\frac{N*F}{U_S+U_i+…+U_N}$</li></ul></li></ul><p>$$D_{P2P}\geq max{\frac{F}{U_s},\frac{N*F}{U_S+U_i+…+U_N},\frac{F}{D_1},…,\frac{F}{D_N},}$$</p><p>随用户数量变化C/S与P2P两种模式下载消耗时间变化如图<br><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/%E9%9A%8F%E6%97%B6%E9%97%B4%E5%8F%98%E5%8C%96CS%E4%B8%8EP2P.png"></p><h3 id="P2P文件分发应用：BitTorrent"><a href="#P2P文件分发应用：BitTorrent" class="headerlink" title="P2P文件分发应用：BitTorrent"></a>P2P文件分发应用：BitTorrent</h3><p>BitTorrent协议是架构于TCP/IP协议之上的一个P2P文件传输通信协议，处于TCP/IP结构的应用层。</p><p>根据BitTorrent协议，文件发布者会根据要发布的文件生成提供一个.torrent文件，即种子文件，也简称为“种子”。</p><p>种子文件本质上是文本文件，包含Tracker信息和文件信息两部分。Tracker信息主要是BT下载中需要用到的Tracker服务器的地址和针对Tracker服务器的设置，文件信息是根据对目标文件的计算生成的，计算结果根据BitTorrent协议内的Bencode规则进行编码。它的主要原理是需要把提供下载的文件虚拟分成大小相等的块，块大小必须为2k的整数次方（由于是虚拟分块，硬盘上并不产生各个块文件），并把每个块的索引信息和Hash验证码写入种子文件中；所以，种子文件就是被下载文件的“索引”。</p><p>下载时，BT客户端首先解析种子文件得到Tracker地址，然后连接Tracker服务器。Tracker服务器回应下载者的请求，提供下载者其他下载者（包括发布者）的IP。下载者再连接其他下载者，根据种子文件，两者分别告知对方自己已经有的块，然后交换对方所没有的数据。此时不需要其他服务器参与，分散了单个线路上的数据流量，因此减轻了服务器负担。</p><p>下载者每得到一个块，需要算出下载块的Hash验证码与种子文件中的对比，如果一样则说明块正确，不一样则需要重新下载这个块。这种规定是为了解决下载内容准确性的问题。</p><ul><li>扰动：peer节点可能会上线或者下线</li></ul><h3 id="P2P文件共享"><a href="#P2P文件共享" class="headerlink" title="P2P文件共享"></a>P2P文件共享</h3><h4 id="面临的问题："><a href="#面临的问题：" class="headerlink" title="面临的问题："></a>面临的问题：</h4><ol><li>如何定位所需的资源</li><li>如何处理对等方的加入与离开</li></ol><h4 id="方案一：集中式目录"><a href="#方案一：集中式目录" class="headerlink" title="方案一：集中式目录"></a>方案一：集中式目录</h4><ul><li>存在一个中心服务器始终运行，负责存储各个Peer的IP地址和可提供的内容</li><li>一旦某个Peer上线就需要向中心服务器提供自己的IP地址和可以提供的内容</li><li>一旦某个Peer下线，同样需要向服务器说明自己将不再提供服务</li></ul><p><strong>这种集中式目录的共享方法存在如下的问题：</strong></p><ul><li>单点故障：中心服务器的故障会导致整个文件共享瘫痪</li><li>性能瓶颈：中心服务器存在瓶颈，文件传输是分散的，而定位内容则是高度集中的</li><li>侵犯版权</li></ul><h4 id="方案二：查询泛洪Gnutella"><a href="#方案二：查询泛洪Gnutella" class="headerlink" title="方案二：查询泛洪Gnutella"></a>方案二：查询泛洪Gnutella</h4><p>Gnutella是一种全分布式的（没有中心服务器）开放文件共享协议，Gnutella协议以TCP连接作为边，两个Peer间<br>如果存在一条TCP连接，则看作存在一条边（不是物理链路的连接），所有活动的对等方和边构成覆盖网络</p><p>查询过程：</p><ol><li>在已有的TCP连接上发送查询报文（向所有边）</li><li>对等方转发查询报文（同样向对等方自己的所有边）</li><li>如果发现查询内容，则以反方向返回查询命中报文</li></ol><p>如何实现对等方的加入</p><ol><li>对等方X必须首先发现某些已经在覆盖网络中的其他对等方<ul><li>自己维持一张 对等方列表（经常开机的对等方的IP）</li><li>或联系维持列表的Gnutella站点获得对等方列表</li></ul></li><li>X接着试图与该列表上的对等方建立TCP连接，直到与某个对等方Y建立连接</li><li>X向Y发送一个Ping报文，Y转发该Ping报文</li><li>所有收到Ping报文的对等方以Pong报文响应IP地址、共享文件的数量及总字节数</li><li>X收到许多Pong报文，然后它能建立其他TCP连接</li></ol><h4 id="方案三：半分散KaZaA"><a href="#方案三：半分散KaZaA" class="headerlink" title="方案三：半分散KaZaA"></a>方案三：半分散KaZaA</h4><ul><li>每个对等方要么是一个组长，要么隶属于一个组长<ul><li>对等方与其组长之间有TCP连接</li><li>组长之间有TCP连接</li></ul></li><li>组长跟踪其所有的孩子的内容（IP地址与所能提供的文件内容）<ul><li>此时小组内部就是通过集中式目录进行文件共享的，组长就是中心服务器</li></ul></li><li>组长与其他组长联系<ul><li>转发查询到其他组长</li><li>获得其他组长的数据拷贝</li><li>此时组长间就是通过全分布式进行文件共享，所有查询在组长间进行泛洪</li></ul></li></ul><h2 id="CDN与视频流化服务"><a href="#CDN与视频流化服务" class="headerlink" title="CDN与视频流化服务"></a>CDN与视频流化服务</h2><p>在当下互联网环境中，视频流量占据了互联网的大部分带宽（例如网飞，油管等），单个超级服务器已经难以再为这些应用提供服务（扩展性差，难以处理高并发情况），所以需要通过分布式的，应用层面的基础设施解决这些流媒体服务</p><h3 id="对流媒体视频的处理"><a href="#对流媒体视频的处理" class="headerlink" title="对流媒体视频的处理"></a>对流媒体视频的处理</h3><p>要解决视频流量占据大量带宽的问题，首先可以基于用户的角度进行解决，避免用户加载不必要的资源，对视频流量进行合理的取舍</p><h4 id="编码"><a href="#编码" class="headerlink" title="编码"></a>编码</h4><p>视频是以固定速度显示的图片序列，而图片又是像素的阵列，这些都保证了视频是可以被压缩的，而这种压缩方式就是编码：使用图像内和图像间的冗余来降低编码的比特数（空间冗余是因每幅图片中临近的相近色块而产生，时间冗余则是由于相邻图像间相近而产生）</p><p>编码方式：</p><ul><li>CBR：constant bit rate，以固定速率编码</li><li>VBR：variable bit rate，视频编码速率随时间的变化而变化</li></ul><h4 id="多媒体流化服务：DASH"><a href="#多媒体流化服务：DASH" class="headerlink" title="多媒体流化服务：DASH"></a>多媒体流化服务：DASH</h4><p>DASH：Dynamic Adaptive Streaming over Http</p><p>首先由服务器将视频文件分割成多个小块，每个块独立存储，并且都用不同的码率编码，同时服务器会生成告示文件（mainfest file）以提供不同的URL</p><p>当客户端请求视频文件时，首先会获取到告示文件，并且周期性的测试服务器到客户端的带宽，通过查询告示文件在每个时刻请求一个块，如果带宽足够大，则尽量请求高码率视频，会话中不同时刻，可以切换码率不同的编码块（客户端自适应）</p><h3 id="CDN-内容分发网络"><a href="#CDN-内容分发网络" class="headerlink" title="CDN-内容分发网络"></a>CDN-内容分发网络</h3><blockquote><p>内容分发网络（英语：Content Delivery Network或Content Distribution Network，缩写：CDN）是指一种透过互联网互相连接的电脑网络系统，利用最靠近每位用户的服务器，更快、更可靠地将音乐、图片、视频、应用程序及其他文件发送给用户，来提供高性能、可扩展性及低成本的网络内容传递给用户。</p></blockquote><h4 id="单个超级服务器多面临的问题"><a href="#单个超级服务器多面临的问题" class="headerlink" title="单个超级服务器多面临的问题"></a>单个超级服务器多面临的问题</h4><ul><li>服务器到客户端路径上跳数较多，瓶颈链路限制带宽大小</li><li>二八定律导致网络内充满相同视频的拷贝，效率低</li><li>具有单点故障新，超级服务器出现问题影响所有用户</li><li>单个超级服务器有性能瓶颈，难于升级</li><li>由于服务用户众多，会导致周边网络的拥塞</li></ul><p>而CDN在全球全网部署节点，存储服务内容，与用户直线距离更近，可以就近为用户提供服务，提升用户体验，起到加速网络的作用</p><h4 id="CDN两种部署方式"><a href="#CDN两种部署方式" class="headerlink" title="CDN两种部署方式"></a>CDN两种部署方式</h4><ul><li>enter deep：将服务器深入许多接入网，更接近用户，数量多，离用户近，但难于管理</li><li>bring home：部署在少数关键位置（例如将服务器簇安装于POP处），再利用租用线路将服务器簇连接起来</li></ul><h4 id="CDN流程"><a href="#CDN流程" class="headerlink" title="CDN流程"></a>CDN流程</h4><p>视频资源会被进行多次拷贝存储在CDN各个服务器中，用户通过告示文件重定向到最近的拷贝，进行内容的请求，过程中，如果当前请求的网络路径阻塞，可能会选择不同的拷贝进行请求</p>]]></content>
      
      
      <categories>
          
          <category> 计算机基础 </category>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>13-SpringMVC文件上传</title>
      <link href="/2021/03/13/13-SpringMVC%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/"/>
      <url>/2021/03/13/13-SpringMVC%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="SpringMVC文件上传"><a href="#SpringMVC文件上传" class="headerlink" title="SpringMVC文件上传"></a>SpringMVC文件上传</h1><h2 id="文件上传客户端的三要素"><a href="#文件上传客户端的三要素" class="headerlink" title="文件上传客户端的三要素"></a>文件上传客户端的三要素</h2><ul><li>表单项中type值为file</li><li>表单的提交方式为post</li><li>表单的enctype属性是多部分表单形式，即multipart/form-data</li></ul><p>表单的创建</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;%--</span><br><span class="line">  Created by IntelliJ IDEA.</span><br><span class="line">  User: renboyu010214</span><br><span class="line">  Date: <span class="number">2021</span>/<span class="number">3</span>/<span class="number">12</span></span><br><span class="line">  Time: <span class="number">20</span>:08</span><br><span class="line">  To change <span class="keyword">this</span> template use File | Settings | File Templates.</span><br><span class="line">--%&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;UPLOAD&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;form action=<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/save&quot;</span> method=<span class="string">&quot;post&quot;</span> enctype=<span class="string">&quot;multipart/form-data&quot;</span>&gt;</span><br><span class="line">    名称：&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;name&quot;</span>&gt;&lt;br&gt;</span><br><span class="line">    文件：&lt;input type=<span class="string">&quot;file&quot;</span> name=<span class="string">&quot;file&quot;</span>&gt;&lt;br&gt;</span><br><span class="line">    &lt;input type=<span class="string">&quot;submit&quot;</span> value=<span class="string">&quot;提交&quot;</span>&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h2 id="文件上传的原理"><a href="#文件上传的原理" class="headerlink" title="文件上传的原理"></a>文件上传的原理</h2><ul><li>注意，当form表单的enctype属性修改为multipart/form-data多部分表单时，原先的request.getParameter等方法均失效，因为原先返回的是url表单，属性值都被封装在url中，以键值对的形式存在，但现在返回的是多部分表单，url不被返回，同时数据的封装也不再是键值对，所以方法失效</li></ul><p>可以看到返回的报文中分割了表单的信息与数据<br><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/returnData.png"></p><h2 id="单文件上传"><a href="#单文件上传" class="headerlink" title="单文件上传"></a>单文件上传</h2><h3 id="1-导入upload与IO的坐标"><a href="#1-导入upload与IO的坐标" class="headerlink" title="1. 导入upload与IO的坐标"></a>1. 导入upload与IO的坐标</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-io<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-io<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-在spring-mvc-xml中配置文件上传解析器"><a href="#2-在spring-mvc-xml中配置文件上传解析器" class="headerlink" title="2. 在spring-mvc.xml中配置文件上传解析器"></a>2. 在spring-mvc.xml中配置文件上传解析器</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置文件上传解析器，注意ID不可修改为其他--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;multipartResolver&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.multipart.commons.CommonsMultipartResolver&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置文件编码方式和最大上传大小--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;defaultEncoding&quot;</span> <span class="attr">value</span>=<span class="string">&quot;utf-8&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maxUploadSize&quot;</span> <span class="attr">value</span>=<span class="string">&quot;5242800&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3-编写文件上传代码"><a href="#3-编写文件上传代码" class="headerlink" title="3. 编写文件上传代码"></a>3. 编写文件上传代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 保存上传的文件</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> name 获取到的名称</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> file 上传的文件，注意这里的参数名称必须和表单</span></span><br><span class="line"><span class="comment"> *             里定义的名称一致，否则无法正确获取文件</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/save&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">(String name, MultipartFile file)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    System.out.println(name);</span><br><span class="line">    <span class="comment">//获得文件原始命名</span></span><br><span class="line">    String originalName=file.getOriginalFilename();</span><br><span class="line">    <span class="comment">//保存文件</span></span><br><span class="line">    file.transferTo(<span class="keyword">new</span> File(<span class="string">&quot;C:\\upload\\&quot;</span>+originalName));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/uploadfile2.png"></p><h2 id="多文件上传"><a href="#多文件上传" class="headerlink" title="多文件上传"></a>多文件上传</h2><p>只需要设置多个表单项和多个文件参数即可，注意文件参数命名与表单项命名一一匹配</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;%--</span><br><span class="line">  Created by IntelliJ IDEA.</span><br><span class="line">  User: renboyu010214</span><br><span class="line">  Date: <span class="number">2021</span>/<span class="number">3</span>/<span class="number">12</span></span><br><span class="line">  Time: <span class="number">20</span>:08</span><br><span class="line">  To change <span class="keyword">this</span> template use File | Settings | File Templates.</span><br><span class="line">--%&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;UPLOAD&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;form action=<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/save&quot;</span> method=<span class="string">&quot;post&quot;</span> enctype=<span class="string">&quot;multipart/form-data&quot;</span>&gt;</span><br><span class="line">    名称：&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;name&quot;</span>&gt;&lt;br&gt;</span><br><span class="line">    文件<span class="number">1</span>：&lt;input type=<span class="string">&quot;file&quot;</span> name=<span class="string">&quot;file1&quot;</span>&gt;&lt;br&gt;</span><br><span class="line">    文件<span class="number">2</span>：&lt;input type=<span class="string">&quot;file&quot;</span> name=<span class="string">&quot;file2&quot;</span>&gt;&lt;br&gt;</span><br><span class="line">    &lt;input type=<span class="string">&quot;submit&quot;</span> value=<span class="string">&quot;提交&quot;</span>&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/save&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">(String name, MultipartFile file1,MultipartFile file2)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    System.out.println(name);</span><br><span class="line">    <span class="comment">//获得文件原始命名</span></span><br><span class="line">    String originalName=file1.getOriginalFilename();</span><br><span class="line">    <span class="comment">//保存文件</span></span><br><span class="line">    file1.transferTo(<span class="keyword">new</span> File(<span class="string">&quot;C:\\upload\\&quot;</span>+originalName));</span><br><span class="line">    <span class="comment">//获得文件原始命名</span></span><br><span class="line">    String originalName2=file2.getOriginalFilename();</span><br><span class="line">    <span class="comment">//保存文件</span></span><br><span class="line">    file2.transferTo(<span class="keyword">new</span> File(<span class="string">&quot;C:\\upload\\&quot;</span>+originalName2));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/uploadfile3.png"></p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
          <category> 后端框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
            <tag> SpringMVC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>12-SpringMVC的请求</title>
      <link href="/2021/03/08/12-SpringMVC%E7%9A%84%E8%AF%B7%E6%B1%82/"/>
      <url>/2021/03/08/12-SpringMVC%E7%9A%84%E8%AF%B7%E6%B1%82/</url>
      
        <content type="html"><![CDATA[<h1 id="SpringMVC的请求"><a href="#SpringMVC的请求" class="headerlink" title="SpringMVC的请求"></a>SpringMVC的请求</h1><h2 id="获得请求参数"><a href="#获得请求参数" class="headerlink" title="获得请求参数"></a>获得请求参数</h2><p>客户端请求参数的格式：name=value&amp;name=value…</p><p>服务器端要获得请求的参数，有时还需要对获得的数据进行封装，SpringMVC可以接收的参数如下：</p><ul><li>基本类型参数</li><li>POJO类型参数</li><li>数组类型参数</li><li>集合类型参数</li></ul><h3 id="基本类型参数的获取"><a href="#基本类型参数的获取" class="headerlink" title="基本类型参数的获取"></a>基本类型参数的获取</h3><p>当Controller中的业务方法的参数名称与请求参数的名称一致时，SpringMVC会自动进行参数值的映射匹配</p><p>例如该方法中的参数名称分别为username和age，当我们访问 <a href="http://localhost:8080/save?username=leslie&amp;age=20">http://localhost:8080/save?username=leslie&amp;age=20</a> 时，两个基本类型的参数便能够自动匹配</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller(&quot;userController&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/save&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">(String username,<span class="keyword">int</span> age)</span></span>&#123;</span><br><span class="line">        System.out.println(username);</span><br><span class="line">        System.out.println(age);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 输出结果</span></span><br><span class="line"><span class="comment">leslie</span></span><br><span class="line"><span class="comment">20</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h3 id="获得POJO类型的参数"><a href="#获得POJO类型的参数" class="headerlink" title="获得POJO类型的参数"></a>获得POJO类型的参数</h3><p>当Controller的业务方法中请求的POJO类的属性值与请求参数名称一致时，SpringMVC会自动将对应的属性值封装到POJO类中并实例化该对象</p><p>例如该业务方法的参数为POJO类：User，其内部属性值分别为username和age，当我们访问 <a href="http://localhost:8080/save?username=leslie&amp;age=20">http://localhost:8080/save?username=leslie&amp;age=20</a> 时，username和age便会被传入User对象内并实例化该POJO对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller(&quot;userController&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/save&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">(User user)</span></span>&#123;</span><br><span class="line">        System.out.println(user.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 输出结果</span></span><br><span class="line"><span class="comment">User&#123;username=&#x27;leslie&#x27;, age=20&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h3 id="获得数组类型的参数"><a href="#获得数组类型的参数" class="headerlink" title="获得数组类型的参数"></a>获得数组类型的参数</h3><p>本质与上文同理，只要保证Controller的业务方法中参数的数组名称与请求参数名称一致，数组便可以被自动匹配</p><p>访问 <a href="http://localhost:8080/save?users=leslie&amp;users=Jessica&amp;users=Lily">http://localhost:8080/save?users=leslie&amp;users=Jessica&amp;users=Lily</a> 该路径，则数组users将被自动匹配</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller(&quot;userController&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/save&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">(String[] users)</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(String user:users)&#123;</span><br><span class="line">            System.out.println(user);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 运行结果</span></span><br><span class="line"><span class="comment">leslie</span></span><br><span class="line"><span class="comment">Jessica</span></span><br><span class="line"><span class="comment">Lily</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h3 id="获得集合类型的参数"><a href="#获得集合类型的参数" class="headerlink" title="获得集合类型的参数"></a>获得集合类型的参数</h3><h4 id="方法一："><a href="#方法一：" class="headerlink" title="方法一："></a>方法一：</h4><p>想要获得集合类型的参数，不能再直接通过在参数列表中指定集合类型的参数，而是需要将集合参数包装到一个POJO中（一般将该POJO称为VO：View Object），通过这个对象来获取集合类型参数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">VO</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> List&lt;User&gt; userList;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">getUserList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userList;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUserList</span><span class="params">(List&lt;User&gt; userList)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.userList = userList;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;VO&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;userList=&quot;</span> + userList +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同样这里也无法通过get方法获取参数了，所以利用一个简单的表单页面完成验证,表单中<code>&lt;input&gt;</code>标签的name属性用于指定集合参数的名称，以及写入数据在集合中的位置，以及写入数据的属性名称。例如：<code>name=&quot;userList[0].username&quot;</code>表示这个数据会被写入到userList这个集合的第一个位置，写入的属性名称为username</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;%--</span><br><span class="line">  Created by IntelliJ IDEA.</span><br><span class="line">  User: renboyu010214</span><br><span class="line">  Date: <span class="number">2021</span>/<span class="number">3</span>/<span class="number">8</span></span><br><span class="line">  Time: <span class="number">16</span>:<span class="number">06</span></span><br><span class="line">  To change <span class="keyword">this</span> template use File | Settings | File Templates.</span><br><span class="line">--%&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;form action=<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/save&quot;</span> method=<span class="string">&quot;post&quot;</span>&gt;</span><br><span class="line">    &lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;userList[0].username&quot;</span>&gt;&lt;br/&gt;</span><br><span class="line">    &lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;userList[0].age&quot;</span>&gt;&lt;br/&gt;</span><br><span class="line">    &lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;userList[1].username&quot;</span>&gt;&lt;br/&gt;</span><br><span class="line">    &lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;userList[1].age&quot;</span>&gt;&lt;br/&gt;</span><br><span class="line">    &lt;input type=<span class="string">&quot;submit&quot;</span> value=<span class="string">&quot;提交&quot;</span>&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>接下来业务方法就可以利用VO对象来接收集合</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller(&quot;userController&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/save&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">(VO vo)</span></span>&#123;</span><br><span class="line">        System.out.println(vo);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试用例：</p><p><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/ListTest.png"></p><p>执行结果：</p><p><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/ListResult.png"></p><h4 id="方法二："><a href="#方法二：" class="headerlink" title="方法二："></a>方法二：</h4><p>当使用ajax提交时，可以指定contentType为json格式，然后在业务方法中为参数名添加@RequestBody注解，就可以直接接收集合参数，不需要通过POJO封装后接收</p><p>通过ajax提交数据，并指定contentType类型为json格式</p><p>下面的代码先引入了jQuery文件，然后定义了一个集合数据类型，并向其中写入了两条数据，随后通过ajax进行提交，指定提交方式为POST，提交路径为业务方法的路径，提交的数据为经过JSON格式转化的集合数据，contentType为JSON</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;%--</span><br><span class="line">  Created by IntelliJ IDEA.</span><br><span class="line">  User: renboyu010214</span><br><span class="line">  Date: <span class="number">2021</span>/<span class="number">3</span>/<span class="number">8</span></span><br><span class="line">  Time: <span class="number">16</span>:<span class="number">06</span></span><br><span class="line">  To change <span class="keyword">this</span> template use File | Settings | File Templates.</span><br><span class="line">--%&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">    &lt;script src=<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/js/jQuery-3.5.1.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        <span class="keyword">var</span> userList=<span class="keyword">new</span> Array();</span><br><span class="line">        userList.push(&#123;username:<span class="string">&quot;Leslie&quot;</span>,age:<span class="number">19</span>&#125;);</span><br><span class="line">        userList.push(&#123;username:<span class="string">&quot;Jessica&quot;</span>,age:<span class="number">37</span>&#125;);</span><br><span class="line"></span><br><span class="line">        $.ajax(&#123;</span><br><span class="line">            type: <span class="string">&quot;POST&quot;</span>,</span><br><span class="line">            url: <span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/save&quot;</span>,</span><br><span class="line">            data: JSON.stringify(userList),</span><br><span class="line">            contentType: <span class="string">&quot;application/json;charset=utf-8&quot;</span></span><br><span class="line">        &#125;)</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>开启静态资源的访问，以保证jQuery-3.5.1.js能被正常访问到</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc:resources</span> <span class="attr">mapping</span>=<span class="string">&quot;/js/**&quot;</span> <span class="attr">location</span>=<span class="string">&quot;/js/&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>在业务方法的参数前加上注解@RequestBody</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller(&quot;userController&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/save&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">(<span class="meta">@RequestBody</span> List&lt;User&gt; userList)</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(User user:userList)&#123;</span><br><span class="line">            System.out.println(user);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 运行结果</span></span><br><span class="line"><span class="comment">User&#123;username=&#x27;Leslie&#x27;, age=19&#125;</span></span><br><span class="line"><span class="comment">User&#123;username=&#x27;Jessica&#x27;, age=37&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>就是本来用到jquery，他会把js文件当做请求，去扫描所有的requestMapping，发现没有，就加载失败。需要给这个扫描的配适器加一个能够扫描本地js目录下文件的权限</p><h3 id="开启静态资源的访问"><a href="#开启静态资源的访问" class="headerlink" title="开启静态资源的访问"></a>开启静态资源的访问</h3><p>上文中在通过ajax提交数据的过程中，在spring-mvc.xml中加入了如下代码</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc:resources</span> <span class="attr">mapping</span>=<span class="string">&quot;/js/**&quot;</span> <span class="attr">location</span>=<span class="string">&quot;/js/&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>如果不加入该代码，当我们访问对应的jsp文件路径时，会发现网页提示如下错误</p><p><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/error1.png"></p><p>这里的错误是由于我们在web.xml中配置SpringMVC的前端控制器DispatcherServlet时设置了缺省值<code>&lt;url-pattern&gt;/&lt;/url-pattern&gt;</code>，这导致我们在访问所有资源时，如果没有对应Servlet，则其会交由前端控制器进行处理，而前端控制器寻找资源的依据是注解<code>@RequestMapping(&quot;/xxx&quot;)</code>中设置的资源路径，但很明显jQuery文件并没有配置该虚拟路径，所以导致前端控制器和网页无法访问到该资源</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置SpringMVC前端控制器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:spring-mvc.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--配置映射地址--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><p>因此我们需要开启某些资源的访问权限（一般情况下都为静态资源），所以在配置文件中加入对js文件夹下所有静态资源的访问权限</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--开启js文件夹下所有资源的访问权限,</span></span><br><span class="line"><span class="comment">mapping表示映射资源地址，location表示开放的目录--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:resources</span> <span class="attr">mapping</span>=<span class="string">&quot;/js/**&quot;</span> <span class="attr">location</span>=<span class="string">&quot;/js/&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>或者我们还可以进行如下配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc:default-servlet-handler</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>该配置表示访问资源时仍旧首先通过前端控制器进行访问，如果前端控制器不能匹配到对应的资源，则调用原始的容器进行静态资源的访问（而在此处原始的容器是Tomcat服务器，其本身具有访问静态资源的能力），所以可以解决静态资源不能被访问到的问题</p><p>PS：该配置必须写在spring-mvc的注解驱动配置下方才有效</p><h3 id="配置全局乱码过滤器"><a href="#配置全局乱码过滤器" class="headerlink" title="配置全局乱码过滤器"></a>配置全局乱码过滤器</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置全局乱码过滤器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>utf-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><p>解决获得参数中包含中文出现乱码的问题</p><h3 id="参数绑定注解-RequestParam"><a href="#参数绑定注解-RequestParam" class="headerlink" title="参数绑定注解@RequestParam"></a>参数绑定注解@RequestParam</h3><p>当请求的参数名称与Controller中业务方法的参数名称不一致时，就需要通过@RequestParam注解将两个参数名称进行显式的绑定</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/save&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">(<span class="meta">@RequestParam(&quot;user&quot;)</span> String username)</span></span>&#123;</span><br><span class="line">    System.out.println(username);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该注解包含三个参数，value表示请求参数的名称，required为布尔类型，表示请求时是否必须指定该参数，默认值为true，defaultValue表示没有请求该参数时，默认向业务方法的参数中传入的值</p><h3 id="获得Restful风格的参数"><a href="#获得Restful风格的参数" class="headerlink" title="获得Restful风格的参数"></a>获得Restful风格的参数</h3><p>Restful是一种软件架构风格、设计风格，而不是标准，只是提供了一组设计原则和约束条件。主要用于客户端和服务器交互类的软件，基于这个风格设计的软件可以更简洁，更有层次，更易于实现缓存机制等。</p><p>Restful风格的请求是使用“url+请求方式”表示一次请求目的的，HTTP 协议里面四个表示操作方式的动词如下：</p><ul><li>GET：用于获取资源</li><li>POST：用于新建资源</li><li>PUT：用于更新资源</li><li>DELETE：用于删除资源  </li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller(&quot;userController&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 上述url地址/save/&#123;name&#125;中的&#123;name&#125;就是要获得的请求参数，在SpringMVC中可以使用占位符进行参数绑定。</span></span><br><span class="line"><span class="comment">     * 在业务方法中我们可以使用<span class="doctag">@PathVariable</span>注解进行占位符的匹配获取工作。</span></span><br><span class="line"><span class="comment">     * value值必须与要匹配的占位符的名字一致，required表示是否为必须参数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/save/&#123;name&#125;&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">(<span class="meta">@PathVariable(value = &quot;name&quot;,required = true)</span> String username)</span> </span>&#123;</span><br><span class="line">        System.out.println(username);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 运行结果</span></span><br><span class="line"><span class="comment">leslie</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/restfultest1.png"></p><h3 id="自定义类型转换器"><a href="#自定义类型转换器" class="headerlink" title="自定义类型转换器"></a>自定义类型转换器</h3><p>SpringMVC 默认已经提供了一些常用的类型转换器，例如客户端提交的字符串转换成int型进行参数设置。<br>但是不是所有的数据类型都提供了转换器，没有提供的就需要自定义转换器，例如：日期类型的数据就需要自定义转换器。</p><p>自定义类型转换器的开发步骤：</p><ul><li>定义转换器类实现Converter接口</li><li>在配置文件中声明转换器</li><li>在<annotation-driven>中引用转换器</li></ul><h4 id="定义转换器类实现Converter接口"><a href="#定义转换器类实现Converter接口" class="headerlink" title="定义转换器类实现Converter接口"></a>定义转换器类实现Converter接口</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DateConverter</span> <span class="keyword">implements</span> <span class="title">Converter</span>&lt;<span class="title">String</span>, <span class="title">Date</span>&gt; </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Date <span class="title">convert</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//将获取到的字符串数据转换为日期类型并返回</span></span><br><span class="line">        SimpleDateFormat format=<span class="keyword">new</span> SimpleDateFormat(<span class="string">&quot;yyyy-MM-dd&quot;</span>);</span><br><span class="line">        Date date=<span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            date = format.parse(s);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ParseException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> date;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="在配置文件中声明转换器，并在注解驱动中声明使用（spring-mvc-xml中）"><a href="#在配置文件中声明转换器，并在注解驱动中声明使用（spring-mvc-xml中）" class="headerlink" title="在配置文件中声明转换器，并在注解驱动中声明使用（spring-mvc.xml中）"></a>在配置文件中声明转换器，并在注解驱动中声明使用（spring-mvc.xml中）</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置spring-mvc的注解驱动,在驱动中声明使用转换器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:annotation-driven</span> <span class="attr">conversion-service</span>=<span class="string">&quot;conversionService&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--声明转换器，外层是转换器声明池--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;conversionService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.context.support.ConversionServiceFactoryBean&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;converters&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;cn.ywrby.converter.DateConverter&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/save&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">(Date date)</span> </span>&#123;</span><br><span class="line">    System.out.println(date);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 运行结果</span></span><br><span class="line"><span class="comment">Thu Dec 31 00:00:00 CST 2020</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><p><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/datetest.png"></p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
          <category> 后端框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
            <tag> SpringMVC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1-计算机网络和因特网</title>
      <link href="/2021/03/07/1-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%92%8C%E5%9B%A0%E7%89%B9%E7%BD%91/"/>
      <url>/2021/03/07/1-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%92%8C%E5%9B%A0%E7%89%B9%E7%BD%91/</url>
      
        <content type="html"><![CDATA[<h1 id="常用基本概念"><a href="#常用基本概念" class="headerlink" title="常用基本概念"></a>常用基本概念</h1><ul><li>计算机网络：使用单一技术相互连接（连接介质可以是光纤，铜线，微波…）的自主（单台计算机具有独立自主性）计算机的互联集合</li><li>互联网络（Internet）：是计算机网络的连接，是网络的网络</li><li>拓扑：信道（信号的通道）的分布方式，常见有一下几种形式，最常见的两种基础拓扑是总线拓扑和星型拓扑</li></ul><p><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/%E6%9C%AA%E5%91%BD%E5%90%8D%E6%96%87%E4%BB%B6%20(9).jpg" alt="未命名文件 (9)"></p><ul><li>总线拓扑<ul><li>从主机上发出的信号在总线上双向同时传输</li><li>所有主机都可以接收这个信号</li></ul></li></ul><ul><li><p>星型拓扑</p><ul><li>主机都挂接在一个中心节点上</li><li>早期中心节点由集线器充当，现在的中心节点主要由交换机充当</li><li>相较于总线拓扑有单点故障这一缺点（是指系统中一点失效，就会让整个系统无法运作的部件，换句话说，单点故障即会整体故障。）</li></ul></li><li><p>ISP: Internet Service Provider,互联网服务提供商,指的是面向公众提供下列信息服务的经营者：一是接入服务，即帮助用户接入Internet；二是导航服务，即帮助用户在Internet上找到所需要的信息；三是信息服务，即建立数据服务系统，收集、加工、存储信息，定期维护更新，并通过网络向用户提供信息内容服务。</p></li><li><p>协议：一系列规则和约定的规范性描述，控制网络中的设备之间++如何进行信息交换++</p></li><li><p>易混淆的常见单位</p><ul><li>bit意为“位”或“比特”，是计算机运算的基础；</li><li>byte意为“字节”，是计算机文件大小的基本计算单位；</li><li>二者转换关系为：一字节（1byte）=八个单位元（8bit）</li></ul></li><li><p>数字带宽：指在单位时间内流经的信息总量，带宽越大意味着里边信息越多</p><ul><li>基本单位：比特每秒，即bps(k,M,G…)或者写作bits/s</li></ul></li><li><p>吞吐量(Throughput)：实际的，可测的带宽</p><ul><li>受制因素<ul><li>网络设备性能</li><li>用户数量</li><li>用网的时间</li><li>用户计算机性能</li><li>网络拓朴</li><li>服务器</li></ul></li><li>瞬间吞吐量：在一个时间点的速率</li><li>平均吞吐量：在很长一段时间内平均的吞吐率</li><li>瓶颈链路：限制端到端吞吐量的链路</li></ul></li></ul><ul><li>信息量(S/bit)，带宽(BW/bps)和传输时间(T/s)之间的关系</li><li>理想情况：</li></ul><p>$$T=\frac{S}{BW}$$</p><ul><li>实际情况(P表示吞吐量/bps)：</li></ul><p>$$T=\frac{S}{P}$$</p><h4 id="例题："><a href="#例题：" class="headerlink" title="例题："></a>例题：</h4><p>如果ISDN的带宽为 128kbps，OC-48的带宽为 2.488 Gbps，如果用ISDN传输一张装满数据的1.44M软盘，用OC-48传输装满10G的硬盘数据，问哪一种传输所用的时间更少？</p><h4 id="解题："><a href="#解题：" class="headerlink" title="解题："></a>解题：</h4><p>按照理想的传输状况来计算，即根据：T=S/BW,</p><p>$$T_{fd}=\frac{1.44M}{128kbps}=\frac{1.44<em>10^6</em>8}{128*10^3}=90(s)$$</p><p>$$T_{hd}=\frac{10G}{2.488Gbps}=\frac{10G*8}{2.a88Gbps}=32.152(s)$$</p><p>易知，OC-48更快，题目中承8的原因是1.44M表示文件大小，单位是字节，这里要计算标准时间秒，就要转换为标准的比特bit</p><ul><li><p>点到点<br>信源机和信宿机之间的通信由一段一段==直接相连的机器==间的通信组成，机器间的直接连接叫做点到点的连接<br><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/%E6%9C%AA%E5%91%BD%E5%90%8D%E6%96%87%E4%BB%B6%20(11).jpg" alt="未命名文件 (11)"></p></li><li><p>端到端<br>信源机与信宿机之间直接==通信==，好像拥有一条直接的线路<br><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/%E6%9C%AA%E5%91%BD%E5%90%8D%E6%96%87%E4%BB%B6%20(12).jpg" alt="未命名文件 (12)"></p></li></ul><ul><li>计算机网络分类<ul><li>按传输介质：<ul><li>有线网络</li><li>无线网络</li></ul></li><li>按大小和规模划分<ul><li>最小的计算机网络：PAN(Personal Area Networks)覆盖的范围1米左右</li><li>局域网：LAN(Local Area Networks)覆盖范围一公里左右</li><li>城域网：MAN(Metroplitan Area Networks)覆盖范围十公里左右</li><li>广域网：WAN(Wide Area Networks)覆盖范围约100/1000公里</li><li>互联网：Internet覆盖范围为全球</li></ul></li></ul></li></ul><p>这里提到的距离不是绝对的，判断网络类型的绝对因素是其是否具有对应网络类型的特征以及是否采用对应技术</p><h1 id="因特网"><a href="#因特网" class="headerlink" title="因特网"></a>因特网</h1><p>上文提到，计算机网络是使用单一技术相互连接的自主计算机的互联集合，而Internet则是计算机网络的连接。处在因特网的边缘部分即因特网上的所有主机（host），又称为端系统（end system）</p><p>端系统通过通信链路（光纤，铜线，微波…）和分组交换机（路由器，链路交换机…）相互连接。</p><h2 id="协议的准确定义"><a href="#协议的准确定义" class="headerlink" title="协议的准确定义"></a>协议的准确定义</h2><p>定义了在两个或多个通信实体间交换的报文格式和顺序，以及报文发送/接收及其他事件发生时所采取的动作</p><h1 id="网络结构"><a href="#网络结构" class="headerlink" title="网络结构"></a>网络结构</h1><h2 id="网络边缘（edge）"><a href="#网络边缘（edge）" class="headerlink" title="网络边缘（edge）"></a>网络边缘（edge）</h2><p>网络边缘指的就是位于因特网边缘的主机（端系统）以及运行于其上的应用程序（例如web浏览器/web服务器，email程序等…）根据具体功能又可以被细分为C/S，即客户端Client与服务器Server</p><h3 id="接入网"><a href="#接入网" class="headerlink" title="接入网"></a>接入网</h3><p>接入网指的就是将端系统物理连接到其边缘路由器（端系统到任何其他远程端系统路径上的第一台路由器）的网络</p><h2 id="网络核心（core）"><a href="#网络核心（core）" class="headerlink" title="网络核心（core）"></a>网络核心（core）</h2><p>由分组交换机（路由器等…）和链路构成的网状网络</p><h3 id="数据通过网络进行传输的方式"><a href="#数据通过网络进行传输的方式" class="headerlink" title="数据通过网络进行传输的方式"></a>数据通过网络进行传输的方式</h3><h4 id="电路交换"><a href="#电路交换" class="headerlink" title="电路交换"></a>电路交换</h4><p>为每个呼叫（CALL）预留一条专属线路，即在端系统通信会话期间，会为该会话预留端系统沿路通信所需的所有资源（缓存，链路传输速率）</p><p>电路交换这种数据传输方式具有如下特性</p><ul><li>资源独享，同时保证了呼叫的性能</li><li>如果呼叫没有数据传输，被分配的资源就会被浪费</li><li>通常被电话网络采用</li></ul><p>为了使一条真实线路能够同时传输多条对话，电路交换网络采用了片的概念，指将带宽等网络资源按照一定的复用方式进行切分，然后为某个呼叫分配指定的片进行数据传输</p><p>电路交换网络中的复用</p><ul><li>频分(Frequency-division multiplexing)</li><li>时分(Time-division multiplexing)</li><li>波分(Wave-division multiplexing)</li></ul><p>电路交换网络并不适合作为计算机间通信的方式：</p><ul><li>连接建立时间长</li><li>计算机之间的通信有突发性，如果使用线路交换，则浪费的片较多<ul><li>即使这个呼叫没有数据传递，其所占据的片也不能够被别的呼叫使用</li></ul></li><li>可靠性不高</li></ul><h4 id="分组交换"><a href="#分组交换" class="headerlink" title="分组交换"></a>分组交换</h4><p>分组交换不再采用片的概念，当数据传输时会占据整个网络资源</p><p>在进行数据传输时，源会将长报文进行切割，切为一个个的分组后，以分组为单位进行交换。</p><p>多数的分组转换机采用存储转发传输的方式，即在数据的输入端规定进行转发前，节点必须确保已经接收到了完整的一个分组（只有当完整的一个分组到达数据交换机时才会执行转发操作），也因此分组交换的延迟时间要大于电路交换（电路交换可以每比特直接进行传输，因为此时整条线路都是自己独占的）</p><p>分组交换可能出现排队延迟和丢失</p><ul><li>当到达速率&gt;链路的传输速率时会出现交换机处接收到完整的数据包，但发出链路方向还有数个未发出或正在发出的数据包，此时该数据包就需要进行排队，等待传输完成</li><li>如果路由器的缓存用完了，分组将会被抛</li></ul><h3 id="网络核心的关键功能"><a href="#网络核心的关键功能" class="headerlink" title="网络核心的关键功能"></a>网络核心的关键功能</h3><ul><li>路由：利用路由表决定数据包从源到目的地的路径（通过路由算法）</li><li>转发：将分组从路由器的输入链路转移到输出链</li></ul><h3 id="ISP互联"><a href="#ISP互联" class="headerlink" title="ISP互联"></a>ISP互联</h3><p><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/ISP%E4%BA%92%E8%81%94%E3%80%81.png"></p><ul><li>POP: 高层ISP面向客户网络的接入点，涉及费用结算<ul><li>如一个低层ISP接入多个高层ISP，多宿（multi home）</li></ul></li><li>对等接入：2个ISP对等互接，不涉及费用结算</li><li>IXP：多个对等ISP互联互通之处，通常不涉及费用结算<ul><li>对等接入</li></ul></li><li>ICP自己部署专用网络，同时和各级ISP连接</li></ul><h2 id="分组交换网中的时延，丢包和吞吐量"><a href="#分组交换网中的时延，丢包和吞吐量" class="headerlink" title="分组交换网中的时延，丢包和吞吐量"></a>分组交换网中的时延，丢包和吞吐量</h2><p><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/%E5%88%86%E7%BB%84%E4%B8%A2%E5%A4%B1%E6%97%B6%E5%BB%B6%E5%8E%9F%E5%9B%A0.png"></p><h3 id="四种主要的分组延时"><a href="#四种主要的分组延时" class="headerlink" title="四种主要的分组延时"></a>四种主要的分组延时</h3><h4 id="处理延时（节点处理延时）"><a href="#处理延时（节点处理延时）" class="headerlink" title="处理延时（节点处理延时）"></a>处理延时（节点处理延时）</h4><p>出现原因是检查bit级差错，检查分组首部和决定将分组导向何处</p><h4 id="排队延时"><a href="#排队延时" class="headerlink" title="排队延时"></a>排队延时</h4><p>出现原因是在输出链路上等待传输的时间，取决于路由器的拥塞程度</p><ul><li>流量强度<ul><li>R=链路宽度（bps）</li><li>L=分组长度（bits）</li><li>a=分组到达队列的平均速率</li><li>流量强度=La/R</li><li>流量强度趋于0时，排队延时很小</li><li>流量强度趋于1时，排队延时快速增加直至无穷大</li><li>流量强度等于或大于1时，排队延时无穷大，几乎所有分组都会处于排队状态</li><li>设计系统时需要保证流量强度小于1</li></ul></li></ul><h4 id="传输延时"><a href="#传输延时" class="headerlink" title="传输延时"></a>传输延时</h4><p>出现原因是将分组发送到链路上所消耗的时间，也被称为存储转发延时</p><p>计算方式：</p><ul><li>R=链路带宽(bps)</li><li>L=分组长度(bits)</li><li>将分组发送到链路上的时间= L/R</li></ul><h4 id="传播延时"><a href="#传播延时" class="headerlink" title="传播延时"></a>传播延时</h4><p>传播延时出现的原因是由于比特流在物理线路上传播时，产生的传播时间。</p><p>计算方式：</p><ul><li>d=物理链路的长度</li><li>s=比特流在传播媒介上的速率</li><li>传播延时=d/s</li></ul><h3 id="节点延时"><a href="#节点延时" class="headerlink" title="节点延时"></a>节点延时</h3><p>$$d_{nodal}=d_{proc}+d_{queue}+d_{trans}+d_{prop}$$</p><ul><li>$d_{proc}$表示处理延时，通常是微秒级或更少</li><li>$d_{queue}$表示排队延时，时长取决于拥塞程度</li><li>$d_{trans}=L/R$ 表示传输延时，对低速率的链路其传输延时较为明显（如拨号），通常为微秒级到毫秒级</li><li>$d_{prop}$传播延时，一般为几微妙到几百毫秒</li></ul><h1 id="参考模型"><a href="#参考模型" class="headerlink" title="参考模型"></a>参考模型</h1><h2 id="为什么计算机网络需要进行分层"><a href="#为什么计算机网络需要进行分层" class="headerlink" title="为什么计算机网络需要进行分层"></a>为什么计算机网络需要进行分层</h2><ol><li>各层独立工作，层之间通过接口联系，降低协议工作的复杂程度</li><li>提高灵活性，任何一层的改变不影响其他层</li><li>每层的实现技术可以不同，减少了实现的复杂度</li><li>易于维护，每层可以单独进行调试</li><li>还便于标准化</li></ol><h2 id="分层原则："><a href="#分层原则：" class="headerlink" title="分层原则："></a>分层原则：</h2><p>信宿机第n层收到的对象应该与信源机第n层发出的对象完全一致</p><h2 id="典型分层模型"><a href="#典型分层模型" class="headerlink" title="典型分层模型"></a>典型分层模型</h2><ul><li>OSI七层模型</li><li>TCP/IP四层模型</li></ul><h3 id="OSI七层模型"><a href="#OSI七层模型" class="headerlink" title="OSI七层模型"></a>OSI七层模型</h3><table><thead><tr><th>层次</th><th>名称</th><th>功能描述</th></tr></thead><tbody><tr><td>7</td><td>应用层(Application)</td><td>主要为各种各样的网络应用提供网络服务，应用报文之间的交互(Email，FTP，微信)</td></tr><tr><td>6</td><td>表示层(Presentation)</td><td>将信息表示为一定形式的数据流(将信息转换为比特)完成的任务有压缩与解压缩，加密解密等</td></tr><tr><td>5</td><td>会话层(Session)</td><td>它负责通信主机间的会话的建立，管理和拆除(协调通信双方会话)</td></tr><tr><td>4</td><td>传输层(Transport)</td><td>是参考模型的核心层之一，负责通信主机间的进程到进程的区分，并负责提供可靠的传输(对于TCP来说，其还负责提供可靠的传输，差错恢复，拥塞控制等额外功能)</td></tr><tr><td>3</td><td>网络层(Network)</td><td>是另一个核心层，功能是通过IP地址以及最优路径，将每一个每一个分组从信源机一路送至目的机（以分组为单位，端到端的传输）</td></tr><tr><td>2</td><td>数据链路层(Data Link)</td><td>在相邻的两点间传输以帧为单位的数据（提供介质访问服务(通过物理地址识别通信主机，提供可靠的帧传递，并作差错控制，流控等)）</td></tr><tr><td>1</td><td>物理层(Physical)</td><td>发送端将上层的帧转换为物理信号，通过介质传送到相邻的接收方，接收方将物理信号转换为还原为比特流数据（提供<strong>透明的比特流</strong>(光信号，电信号，无线信号…)传递，物理流只关心比特流传输，不关心比特流包含内容）</td></tr></tbody></table><p>每一层都利用它下层的服务，为它的上层提供服务</p><h3 id="TCP-IP参考模型"><a href="#TCP-IP参考模型" class="headerlink" title="TCP/IP参考模型"></a>TCP/IP参考模型</h3><table><thead><tr><th>TCP/IP协议</th><th>OSI参考模型</th></tr></thead><tbody><tr><td>应用层(Telent,FTP,SNTP协议)</td><td>会话层，表示层和应用层</td></tr><tr><td>传输层(TCP,UDP协议)</td><td>传输层</td></tr><tr><td>网络层(ICMP,IP,ARP协议)</td><td>网络层</td></tr><tr><td>数据链路层</td><td>物理层和数据链路层</td></tr></tbody></table><h2 id="数据如何传输？"><a href="#数据如何传输？" class="headerlink" title="数据如何传输？"></a>数据如何传输？</h2><p>涉及到：发送方，接收方和中间的信号通道(用于传输比特流)</p><p>发送方：进行<strong>封装/打包</strong>：将信息打包，从最高层逐渐下行到最底层</p><ul><li>在每一层上，数据都被加上头部信息，用于传递信息<ol><li>在OSI模型上三层，信息表示为<strong>报文（message）或数据流（DataStream）</strong></li><li>传输层，切割为<strong>报文段或数据段（segment）</strong>，加上段头(包含端口号等)</li><li>网络层，添加分组头部(包含寻址主机的IP地址等)，形成<strong>分组(包)</strong></li><li>数据链路层，添加帧头(包含寻址主机所需的物理地址(MAC)，校验等信息)形成<strong>帧</strong></li><li>物理层，帧转为<strong>比特流</strong></li></ol></li></ul><p>上述加粗标注为数据在各层存在形式，称为数据协议单元PDU</p><h3 id="数据单元（DU）"><a href="#数据单元（DU）" class="headerlink" title="数据单元（DU）"></a>数据单元（DU）</h3><p><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/%E6%95%B0%E6%8D%AE%E5%8D%95%E5%85%83DU.png"></p><ul><li>SDU：服务数据单元，是上层传送给下层的数据单元</li><li>PDU：协议数据单元，是相同层级间交换的数据单元</li></ul><p>从上图可以看出，数据单元的基本传输形式就是上层的SDU与上层的ICI（接口控制信息，包含了对应层的一些基本信息）组成了完整的数据单元利用原语通过服务接入点SAP进入下层，下层会根据本次的ICI与上层数据单元结合并继续向下层传递</p><p>接收方：进行<strong>解封装/解包</strong>，从最底层逐渐上行到最高层提取出信息（解封装的过程就是封装的逆向过程，在每层<em>去掉头部信息</em>，最终还原出应用层的输出：信息）</p><h3 id="实体-Entity-："><a href="#实体-Entity-：" class="headerlink" title="实体(Entity)："></a>实体(Entity)：</h3><p>每层中活动的元素，可能是硬件也可能是软件，负责完成对应层的封装或解封装任务。</p><h3 id="对等实体："><a href="#对等实体：" class="headerlink" title="对等实体："></a>对等实体：</h3><p>收发双方对应层上的实体互称对等实体</p><h3 id="虚拟通信-对等通信"><a href="#虚拟通信-对等通信" class="headerlink" title="虚拟通信(对等通信)"></a>虚拟通信(对等通信)</h3><p>只看收发双方的对应层，发现收发双方对应层(即对等实体之间)之间好像有一根直接的通道(虚拟通道)，沿虚拟通道，PDU从发放到达收方。</p><h3 id="服务-Service-："><a href="#服务-Service-：" class="headerlink" title="服务(Service)："></a>服务(Service)：</h3><p>低层实体向上层实体提供它们之间的通信的能力</p><ul><li>服务用户(serviceuser)</li><li>服务提供者(serviceprovider)<h4 id="原语-primitive-："><a href="#原语-primitive-：" class="headerlink" title="原语(primitive)："></a>原语(primitive)：</h4>上层使用下层服务的形式，高层使用低层提供的服务，以及低层向高层提供服务都是通过<br>服务访问原语来进行交互的—形式<h4 id="服务访问点SAP-ServicesAccessPoint-："><a href="#服务访问点SAP-ServicesAccessPoint-：" class="headerlink" title="服务访问点SAP(ServicesAccessPoint)："></a>服务访问点SAP(ServicesAccessPoint)：</h4>上层使用下层提供的服务通过层间的接口—地点；</li></ul><h3 id="服务，协议和接口之间的关系"><a href="#服务，协议和接口之间的关系" class="headerlink" title="服务，协议和接口之间的关系"></a>服务，协议和接口之间的关系</h3><p>参考模型上每一层都为上一层提供<strong>服务</strong>，以<strong>接口</strong>的形式供上层调用。<strong>协议</strong>作用于对应层之间</p>]]></content>
      
      
      <categories>
          
          <category> 计算机基础 </category>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>11-SpringMVC的数据响应</title>
      <link href="/2021/03/05/11-SpringMVC%E7%9A%84%E6%95%B0%E6%8D%AE%E5%93%8D%E5%BA%94/"/>
      <url>/2021/03/05/11-SpringMVC%E7%9A%84%E6%95%B0%E6%8D%AE%E5%93%8D%E5%BA%94/</url>
      
        <content type="html"><![CDATA[<h1 id="SpringMVC的数据响应"><a href="#SpringMVC的数据响应" class="headerlink" title="SpringMVC的数据响应"></a>SpringMVC的数据响应</h1><h2 id="页面跳转"><a href="#页面跳转" class="headerlink" title="页面跳转"></a>页面跳转</h2><h3 id="方式一：直接返回字符串"><a href="#方式一：直接返回字符串" class="headerlink" title="方式一：直接返回字符串"></a>方式一：直接返回字符串</h3><p>直接返回字符串，此种方法会将返回的字符串与视图解析器的前后缀拼接后进行页面跳转</p><ol><li><p>没有设置视图解析器的前后缀，直接返回字符串时就需要把跳转页面路径写全</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/saveFunction&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">save</span><span class="params">()</span></span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;(Controller) Save running...&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;/success.jsp&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>设置视图解析器的前后缀(在Spring-MVC配置文件中配置)，直接返回字符串时就可以省略前后缀</p></li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置内部资源视图解析器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;viewResolver&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;prefix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suffix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;.jsp&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/saveFunction&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">save</span><span class="params">()</span></span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;(Controller) Save running...&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="方式二：返回ModelAndView"><a href="#方式二：返回ModelAndView" class="headerlink" title="方式二：返回ModelAndView"></a>方式二：返回ModelAndView</h3><p>ModelAndView对象内部分别存储了Model与View对象，其中Model对象负责进行数据的封装，即通过addObject方法像其中写入键值对，View对象负责展示数据（一般为JSP）通过setViewName进行指定</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/saveFunction2&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ModelAndView <span class="title">save2</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * ModelAndView 对象</span></span><br><span class="line"><span class="comment">     * Model：模型，负责封装数据</span></span><br><span class="line"><span class="comment">     * View：视图，负责展示数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    ModelAndView modelAndView=<span class="keyword">new</span> ModelAndView();</span><br><span class="line">    <span class="comment">//设置模型model数据</span></span><br><span class="line">    modelAndView.addObject(<span class="string">&quot;username&quot;</span>,<span class="string">&quot;Leslie&quot;</span>);</span><br><span class="line">    <span class="comment">//设置视图名称</span></span><br><span class="line">    modelAndView.setViewName(<span class="string">&quot;success&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> modelAndView;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;%--</span><br><span class="line">  Created by IntelliJ IDEA.</span><br><span class="line">  User: renboyu010214</span><br><span class="line">  Date: <span class="number">2021</span>/<span class="number">3</span>/<span class="number">3</span></span><br><span class="line">  Time: <span class="number">22</span>:<span class="number">55</span></span><br><span class="line">  To change <span class="keyword">this</span> template use File | Settings | File Templates.</span><br><span class="line">--%&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;h1&gt;Success! $&#123;username&#125;&lt;/h1&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>上面的方法是在方法体内新创建ModelAndView对象，实际上由于是SpringMVC调用该方法，所以在调用过程中如果检测到该方法并非空参列表，会自动注入空参，所以可以改写成以下格式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/saveFunction2&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ModelAndView <span class="title">save2</span><span class="params">(ModelAndView modelAndView)</span></span>&#123;</span><br><span class="line">    modelAndView.addObject(<span class="string">&quot;username&quot;</span>,<span class="string">&quot;Leslie&quot;</span>);</span><br><span class="line">    modelAndView.setViewName(<span class="string">&quot;success&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> modelAndView;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="回写数据"><a href="#回写数据" class="headerlink" title="回写数据"></a>回写数据</h2><h3 id="通过返回字符串进行回写数据"><a href="#通过返回字符串进行回写数据" class="headerlink" title="通过返回字符串进行回写数据"></a>通过返回字符串进行回写数据</h3><h4 id="方法一：利用response对象直接回写数据"><a href="#方法一：利用response对象直接回写数据" class="headerlink" title="方法一：利用response对象直接回写数据"></a>方法一：利用response对象直接回写数据</h4><p>因为是通过SpringMVC调用方法，所以可以在方法的形参列表中加入HttpServletResponse对象，由SpringMVC负责在调用时自动传入实参，并通过获得的response对象的getWriter方法进行数据的回写（但一般不会使用这种方法，这种方法又将请求和响应对象引入到了方法中，不便于SpringMVC的使用）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/save&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save2</span><span class="params">(HttpServletResponse response)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    response.getWriter().write(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="方法二：使用注解直接返回要回写的数据"><a href="#方法二：使用注解直接返回要回写的数据" class="headerlink" title="方法二：使用注解直接返回要回写的数据"></a>方法二：使用注解直接返回要回写的数据</h4><p>之前的案例中可以看出，如果不做其他注解的话，直接返回字符串，会被SpringMVC主动与视图控制器的前后缀拼接后进行页面跳转，所以这里如果想要实现直接返回字符串作为回写数据必须加上注解@ResponseBody 表示不进行页面跳转直接将返回的数据写入返回体中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/save2&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">save</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;hello world&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一般情况下，我们不会直接返回普通字符串，而是返回能表示更多信息的JSON格式的字符串，所以这里可以利用JSON格式转换工具JackSon先将对象转换成字符串，再将字符串返回</p><p>首先需要导入Jackson需要用到的坐标</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.11.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.11.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-annotations<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.11.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后修改方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller(&quot;userController&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/save&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">save</span><span class="params">()</span> <span class="keyword">throws</span> JsonProcessingException </span>&#123;</span><br><span class="line">        <span class="comment">//创建对象并存入信息</span></span><br><span class="line">        User user=<span class="keyword">new</span> User();</span><br><span class="line">        user.setUsername(<span class="string">&quot;Lselie&quot;</span>);</span><br><span class="line">        user.setAge(<span class="number">18</span>);</span><br><span class="line">        <span class="comment">//使用json转换工具将对象转换为JSON格式的字符串然后返回</span></span><br><span class="line">        ObjectMapper objectMapper=<span class="keyword">new</span> ObjectMapper();</span><br><span class="line">        String json = objectMapper.writeValueAsString(user);</span><br><span class="line">        <span class="comment">//返回json格式字符串</span></span><br><span class="line">        <span class="keyword">return</span> json;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="通过对象或集合回写数据"><a href="#通过对象或集合回写数据" class="headerlink" title="通过对象或集合回写数据"></a>通过对象或集合回写数据</h3><h4 id="通过配置处理器映射器"><a href="#通过配置处理器映射器" class="headerlink" title="通过配置处理器映射器"></a>通过配置处理器映射器</h4><p>直接通过SpringMVC帮助我们进行对象或集合的JSON格式转换，并进行数据会写。我们只需要为处理器适配器(因为是处理器适配器为我们的形参列表传入实参)配置消息转换参数，指定使用JackSon进行数据格式转换，所以我们对spring-mvc.xml进行配置(messageConverters表示的就是消息转换参数，它会调用我们指定的格式转换工具处理我们返回的对象)</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置处理器映射器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;handlerAdapter&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;messageConverters&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.http.converter.json.MappingJackson2HttpMessageConverter&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>改写方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/save2&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> User <span class="title">save2</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//创建对象并存入信息</span></span><br><span class="line">    User user=<span class="keyword">new</span> User();</span><br><span class="line">    user.setUsername(<span class="string">&quot;Lselie&quot;</span>);</span><br><span class="line">    user.setAge(<span class="number">18</span>);</span><br><span class="line">    <span class="comment">//直接返回User对象</span></span><br><span class="line">    <span class="keyword">return</span> user;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="通过MVC的注解驱动"><a href="#通过MVC的注解驱动" class="headerlink" title="通过MVC的注解驱动"></a>通过MVC的注解驱动</h4><p>上面对于处理器映射器的配置还是略显繁杂，因此我们可以使用 mvc的注解驱动代替上述的配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置spring-mvc的注解驱动--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:annotation-driven</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>在SpringMVC中，处理器映射器，处理器适配器，视图解析器被称为SpringMVC的三大组件</p><p>使用<a href="mvc:annotation-driven/">mvc:annotation-driven/</a>配置mvc的注解驱动会自动加载RequestMappingHandlerMapping（处理器映射器）RequestMappingHandlerAdapter（处理器解析器），可用在spring-mvc.xml中用于替代处理器映射器和处理器解析器的配置</p><p>同时，该配置底层还会使用Jackson进行对象或集合的转换，所以我们不再需要配置处理器解析器</p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
          <category> 后端框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
            <tag> SpringMVC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>10-SpringMVC简介及组件解析</title>
      <link href="/2021/03/04/10-SpringMVC%E7%AE%80%E4%BB%8B/"/>
      <url>/2021/03/04/10-SpringMVC%E7%AE%80%E4%BB%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="SpringMVC简介"><a href="#SpringMVC简介" class="headerlink" title="SpringMVC简介"></a>SpringMVC简介</h1><h2 id="MVC开发模式"><a href="#MVC开发模式" class="headerlink" title="MVC开发模式"></a>MVC开发模式</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>经典MVC（Model View Controller）模式中，M是指业务模型，V是指用户界面，C则是控制器，使用MVC的目的是将M和V的实现代码分离，从而使同一个程序可以使用不同的表现形式。其中，View的定义比较清晰，就是用户界面。</p><h4 id="M（Model）"><a href="#M（Model）" class="headerlink" title="M（Model）"></a>M（Model）</h4><p>模型，主要通过JavaBean实现。完成具体的业务操作（例如数据库的增删改查，对象的封装）</p><h4 id="V（View）"><a href="#V（View）" class="headerlink" title="V（View）"></a>V（View）</h4><p>视图，主要通过JSP实现。用于展示数据</p><h4 id="C（Controller）"><a href="#C（Controller）" class="headerlink" title="C（Controller）"></a>C（Controller）</h4><p>控制器，主要通过Servlet实现。用于获取用户输入，调用模型，以及将数据交给视图进行展示</p><h3 id="MVC优点"><a href="#MVC优点" class="headerlink" title="MVC优点"></a>MVC优点</h3><ul><li>耦合性低，方便维护，利于分工协作</li><li>代码重用性高</li></ul><h3 id="MVC缺点"><a href="#MVC缺点" class="headerlink" title="MVC缺点"></a>MVC缺点</h3><ul><li>项目架构复杂，对操作人员要求提高</li></ul><h2 id="SpringMVC"><a href="#SpringMVC" class="headerlink" title="SpringMVC"></a>SpringMVC</h2><p>SpringMVC是一种基于Java的实现MVC设计模型的请求驱动类型的轻量级web框架，属于SpringFrameWork的后续产品，已经融合在Spring Web Flow中</p><p>SpringMVC是目前最主流的MVC框架之一，它通过一套注解，让一个简单的Java类（POJO：Plain Ordinary Java Object，简单的Java对象，实际就是普通JavaBeans）成为处理请求的控制器，而无需实现任何接口。同时它还支持Restful编程风格的请求</p><h3 id="SpringMVC概述"><a href="#SpringMVC概述" class="headerlink" title="SpringMVC概述"></a>SpringMVC概述</h3><p>在之前所述的客户端发送请求流程中，一般流程都是客户端发送请求到Tomcat服务器，服务器会利用Tomcat引擎对请求进行接收与封装（req和resp），随后进入web应用调用相关的请求资源即相关Servlet</p><p>但实际开发中web层的Servlet存在大量重复操作，几乎每个Servlet都需要执行</p><ol><li>接收请求参数 </li><li>封装实体</li><li>访问业务层</li><li>接收返回结果</li><li>指派页面操作</li></ol><p><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/SpringMVC1.jpg" alt="SpringMVC1"></p><p>以上大量重复的操作可以称为共有行为，而每个Servlet特有的具体执行实现可以称为特有行为，SpringMVC可以抽取共有行为，将所有共有行为创建为一个新的Servlet从未降低代码的重复。同时，剩下的特有行为也不再需要封装为Servlet，而是按照POJO来实现逻辑功能即可</p><p><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/SpringMVC2.jpg" alt="SpringMVC2"></p><p>不同框架所使用的前端控制器的格式是不相同的，以SpringMVC为例，其使用Servlet作为前端控制器，而以前的Struts2则采用Filter作为控制器</p><h4 id="SpringMVC架构"><a href="#SpringMVC架构" class="headerlink" title="SpringMVC架构"></a>SpringMVC架构</h4><p>为解决持久层中一直未处理好的数据库事务的编程，又为了迎合NoSQL崛起，SpringMVC给出了方案：将传统的模型层拆分为了业务层(Service)和数据访问层（DAO,Data Access Object）。 在 Service 下可以通过 Spring 的声明式事务操作数据访问层，而在业务层上还允许我们访问 NoSQL ，这样就能够满足NoSQL的使用了，它可以大大提高互联网系统的性能。</p><p><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/SpringMVC%E6%9E%B6%E6%9E%84.png"></p><h3 id="SpringMVC开发步骤"><a href="#SpringMVC开发步骤" class="headerlink" title="SpringMVC开发步骤"></a>SpringMVC开发步骤</h3><ol><li>导入SpringMVC坐标</li><li>配置Servlet（共有行为）—SpringMVC核心控制类DispatcherServlet</li><li>创建Controller类和视图</li><li>编写Controller（实现特有行为的POJO）</li><li>将Controller使用使用注解配置到容器中（@Controller）</li><li>配置spring-mvc.xml配置文件（配置组件扫描）</li></ol><h4 id="1-导入SpringMVC坐标"><a href="#1-导入SpringMVC坐标" class="headerlink" title="1. 导入SpringMVC坐标"></a>1. 导入SpringMVC坐标</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2-配置SpringMVC核心控制类DispatcherServlet-在web-xml配置文件中"><a href="#2-配置SpringMVC核心控制类DispatcherServlet-在web-xml配置文件中" class="headerlink" title="2. 配置SpringMVC核心控制类DispatcherServlet(在web.xml配置文件中)"></a>2. 配置SpringMVC核心控制类DispatcherServlet(在web.xml配置文件中)</h4><p>注意这里再配置SpringMVC前端控制器时第一个参数是控制器名称，第二个参数是创建Servlet的名，第三个参数是声明spring-mvc配置文件，最后一个参数是设置调用时间</p><p>配置映射地址是指定哪些页面调用时执行Servlet，url-pattern设为“/”表示所有页面都执行该控制器</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置SpringMVC前端控制器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:spring-mvc.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--配置映射地址--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="3-创建Controller类和视图"><a href="#3-创建Controller类和视图" class="headerlink" title="3. 创建Controller类和视图"></a>3. 创建Controller类和视图</h4><p>视图</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;%--</span><br><span class="line">  Created by IntelliJ IDEA.</span><br><span class="line">  User: </span><br><span class="line">  Date: <span class="number">2021</span>/<span class="number">3</span>/<span class="number">3</span></span><br><span class="line">  Time: <span class="number">22</span>:<span class="number">55</span></span><br><span class="line">  To change <span class="keyword">this</span> template use File | Settings | File Templates.</span><br><span class="line">--%&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;h1&gt;Success!&lt;/h1&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h4 id="4-编写Controller（实现特有行为的POJO）-将Controller使用使用注解配置到容器中（-Controller）"><a href="#4-编写Controller（实现特有行为的POJO）-将Controller使用使用注解配置到容器中（-Controller）" class="headerlink" title="4. 编写Controller（实现特有行为的POJO）,将Controller使用使用注解配置到容器中（@Controller）"></a>4. 编写Controller（实现特有行为的POJO）,将Controller使用使用注解配置到容器中（@Controller）</h4><p>Controller类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller(&quot;userController&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/saveFunction&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">save</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;(Controller) Save running...&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;success.jsp&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-配置spring-mvc-xml配置文件（配置组件扫描）"><a href="#5-配置spring-mvc-xml配置文件（配置组件扫描）" class="headerlink" title="5. 配置spring-mvc.xml配置文件（配置组件扫描）"></a>5. 配置spring-mvc.xml配置文件（配置组件扫描）</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">                           http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--配置Controller的组件扫描--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;cn.ywrby.controller&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="SpringMVC开发流程图"><a href="#SpringMVC开发流程图" class="headerlink" title="SpringMVC开发流程图"></a>SpringMVC开发流程图</h3><p><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/SpringMVC%E6%B5%81%E7%A8%8B%E5%9B%BE.png" alt="SpringMVC开发流程"></p><h1 id="SpringMVC组件解析"><a href="#SpringMVC组件解析" class="headerlink" title="SpringMVC组件解析"></a>SpringMVC组件解析</h1><h2 id="SpringMVC执行流程"><a href="#SpringMVC执行流程" class="headerlink" title="SpringMVC执行流程"></a>SpringMVC执行流程</h2><p><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/SpringMVC%E6%89%A7%E8%A1%8C%E6%B5%81%E7%A8%8B.png"></p><ol><li>用户发送请求至前端控制器DispatcherServlet。</li><li>DispatcherServlet收到请求调用HandlerMapping处理器映射器。</li><li>处理器映射器找到具体的处理器(可以根据xml配置、注解进行查找)，生成处理器对象及处理器拦截器(如果有则生成)一并返回给DispatcherServlet。(这里返回的HandlerExecutionChain对象内部不光有访问的资源路径，还包含访问资源路径上的所有其他资源路径，因为实际web应用中要访问到所指定的资源可能需要经过多次跳转，所以只有获取所有跳转路径才能找到指定的资源)</li><li>DispatcherServlet调用HandlerAdapter处理器适配器。</li><li>HandlerAdapter经过适配调用具体的处理器(Controller，也叫后端控制器，即我们自己实现的特有应用的POJO)。</li><li>Controller执行完成返回ModelAndView。</li><li>HandlerAdapter将controller执行结果ModelAndView返回给DispatcherServlet。</li><li>DispatcherServlet将ModelAndView传给ViewReslover视图解析器。</li><li>ViewReslover解析后返回具体View。</li><li>DispatcherServlet根据View进行渲染视图（即将模型数据填充至视图中）。DispatcherServlet响应用户</li></ol><h2 id="RequestMapping注解"><a href="#RequestMapping注解" class="headerlink" title="@RequestMapping注解"></a>@RequestMapping注解</h2><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>用于建立请求URL和处理请求的方法之间的对应关系（即将请求URL与处理请求的方法进行绑定，并对请求进行限定）</p><h3 id="注解可出现的位置"><a href="#注解可出现的位置" class="headerlink" title="注解可出现的位置"></a>注解可出现的位置</h3><ul><li>类上：当该注解出现在类上时，将作为请求URL的一级访问目录，即访问类内的方法时前面需要注明该类，不写的情况下默认一级访问目录是根目录</li><li>方法上：当该注解出现在方法上时，表示请求URL的二级访问目录，与一级访问目录共同构成虚拟访问路径</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller(&quot;userController&quot;)</span></span><br><span class="line"><span class="comment">//访问路径：localhost:8080/userController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/userController&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//访问路径：localhost:8080/userController/saveFunction</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/saveFunction&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">save</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;(Controller) Save running...&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;/success.jsp&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h3><p>该注解支持三个属性（只有一个属性，且是value属性的情况下，属性名可以省略）</p><ul><li>value：用于指定请求URL的路径，作用和path一样</li><li>method：用于指定请求的方式（GET，POST…）</li><li>params：用于指定限制请求参数的条件，支持简单的表达式</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller(&quot;userController&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 第一个参数表示二级访问路径</span></span><br><span class="line"><span class="comment">     * 第二个参数表示对传入参数的限制，分别表示必须有username参数，money参数不能为100</span></span><br><span class="line"><span class="comment">     * 第三个参数表示必须是POST请求才能访问</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/saveFunction&quot;,params = &#123;&quot;username&quot;,&quot;money!100&quot;&#125;,method = RequestMethod.POST)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">save</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;(Controller) Save running...&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;/success.jsp&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
          <category> 后端框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
            <tag> SpringMVC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>27-登录注册页面基本实现</title>
      <link href="/2021/03/04/27-%E7%99%BB%E5%BD%95%E6%B3%A8%E5%86%8C%E9%A1%B5%E9%9D%A2%E5%9F%BA%E6%9C%AC%E5%AE%9E%E7%8E%B0/"/>
      <url>/2021/03/04/27-%E7%99%BB%E5%BD%95%E6%B3%A8%E5%86%8C%E9%A1%B5%E9%9D%A2%E5%9F%BA%E6%9C%AC%E5%AE%9E%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="登录注册页面基本实现"><a href="#登录注册页面基本实现" class="headerlink" title="登录注册页面基本实现"></a>登录注册页面基本实现</h1><h2 id="前端注册页面"><a href="#前端注册页面" class="headerlink" title="前端注册页面"></a>前端注册页面</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br></pre></td><td class="code"><pre><span class="line">&lt;%--</span><br><span class="line">  Created by IntelliJ IDEA.</span><br><span class="line">  User: renboyu010214</span><br><span class="line">  Date: 2021/2/1</span><br><span class="line">  Time: 19:54</span><br><span class="line">  To change this template use File | Settings | File Templates.</span><br><span class="line">--%&gt;</span><br><span class="line">&lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; language=&quot;java&quot; %&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>书城注册页面<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-id">#div1</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">border</span>: <span class="number">4px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">border-style</span>: ridge;</span></span><br><span class="line"><span class="css">            <span class="attribute">border-radius</span>:<span class="number">5px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">400px</span>;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-id">#div2</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">background</span>: gray;</span></span><br><span class="line"><span class="css">            <span class="attribute">opacity</span>: <span class="number">0.6</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">z-index</span>: <span class="number">10</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">350px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">35px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">margin-bottom</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;js/jquery-3.5.1.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="keyword">function</span> <span class="title">checkUsername</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="comment">//获取用户名</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> username=$(<span class="string">&quot;#username&quot;</span>).val();</span></span><br><span class="line"><span class="javascript">            <span class="comment">//定义正则表达式</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> reg_name=<span class="regexp">/^\w&#123;8,20&#125;$/</span>;</span></span><br><span class="line"><span class="javascript">            <span class="comment">//判断用户名是否满足正则表达式</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> result=reg_name.test(username);</span></span><br><span class="line"><span class="javascript">            <span class="keyword">if</span>(result)&#123;</span></span><br><span class="line"><span class="javascript">                <span class="comment">//用户名合法</span></span></span><br><span class="line"><span class="javascript">                $(<span class="string">&quot;#username&quot;</span>).css(<span class="string">&quot;border&quot;</span>,<span class="string">&quot;&quot;</span>);</span></span><br><span class="line"><span class="javascript">            &#125;<span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">                <span class="comment">//用户名非法</span></span></span><br><span class="line"><span class="javascript">                $(<span class="string">&quot;#username&quot;</span>).css(<span class="string">&quot;border&quot;</span>,<span class="string">&quot;2px solid red&quot;</span>);</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> result;</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="keyword">function</span> <span class="title">checkPassword</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="comment">//获取密码</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> password=$(<span class="string">&quot;#password&quot;</span>).val();</span></span><br><span class="line"><span class="javascript">            <span class="comment">//定义正则表达式</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> reg_pwd=<span class="regexp">/^\w&#123;8,20&#125;$/</span>;</span></span><br><span class="line"><span class="javascript">            <span class="comment">//判断密码是否满足正则表达式</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> result=reg_pwd.test(password);</span></span><br><span class="line"><span class="javascript">            <span class="keyword">if</span>(result)&#123;</span></span><br><span class="line"><span class="javascript">                <span class="comment">//密码合法</span></span></span><br><span class="line"><span class="javascript">                $(<span class="string">&quot;#password&quot;</span>).css(<span class="string">&quot;border&quot;</span>,<span class="string">&quot;&quot;</span>);</span></span><br><span class="line"><span class="javascript">            &#125;<span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">                <span class="comment">//密码非法</span></span></span><br><span class="line"><span class="javascript">                $(<span class="string">&quot;#password&quot;</span>).css(<span class="string">&quot;border&quot;</span>,<span class="string">&quot;2px solid red&quot;</span>);</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> result;</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="keyword">function</span> <span class="title">checkConfirmPWD</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="comment">//获取密码</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> password=$(<span class="string">&quot;#password&quot;</span>).val();</span></span><br><span class="line"><span class="javascript">            <span class="comment">//获取确认密码</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> confirm_pwd=$(<span class="string">&quot;#confirm_pwd&quot;</span>).val();</span></span><br><span class="line"><span class="javascript">            <span class="comment">//定义正则表达式</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> reg_pwd=<span class="regexp">/^\w&#123;8,20&#125;$/</span>;</span></span><br><span class="line"><span class="javascript">            <span class="comment">//判断重新输入的密码是否满足正则表达式</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> result=reg_pwd.test(confirm_pwd);</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">            <span class="comment">//判断两次输入的密码是否一致</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> result2=<span class="literal">false</span>;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">if</span>(password===confirm_pwd)&#123;</span></span><br><span class="line"><span class="javascript">                result2=<span class="literal">true</span>;</span></span><br><span class="line"><span class="javascript">            &#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="javascript">                result2=<span class="literal">false</span>;</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">if</span>(result&amp;&amp;result2)&#123;</span></span><br><span class="line"><span class="javascript">                <span class="comment">//重新输入密码通过</span></span></span><br><span class="line"><span class="javascript">                $(<span class="string">&quot;#confirm_pwd&quot;</span>).css(<span class="string">&quot;border&quot;</span>,<span class="string">&quot;&quot;</span>);</span></span><br><span class="line"><span class="javascript">            &#125;<span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">                <span class="comment">//未通过</span></span></span><br><span class="line"><span class="javascript">                $(<span class="string">&quot;#confirm_pwd&quot;</span>).css(<span class="string">&quot;border&quot;</span>,<span class="string">&quot;2px solid red&quot;</span>);</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> result;</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="keyword">function</span> <span class="title">checkTel</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="comment">//获取电话号码</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> tel=$(<span class="string">&quot;#tel&quot;</span>).val();</span></span><br><span class="line"><span class="javascript">            <span class="comment">//定义正则表达式</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> reg_tel=<span class="regexp">/^1[3|4|5|7|8][0-9]&#123;9&#125;$/</span>;</span></span><br><span class="line"><span class="javascript">            <span class="comment">//判断电话是否满足正则表达式</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> result=reg_tel.test(tel);</span></span><br><span class="line"><span class="javascript">            <span class="keyword">if</span>(result)&#123;</span></span><br><span class="line"><span class="javascript">                <span class="comment">//电话合法</span></span></span><br><span class="line"><span class="javascript">                $(<span class="string">&quot;#tel&quot;</span>).css(<span class="string">&quot;border&quot;</span>,<span class="string">&quot;&quot;</span>);</span></span><br><span class="line"><span class="javascript">            &#125;<span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">                <span class="comment">//电话非法</span></span></span><br><span class="line"><span class="javascript">                $(<span class="string">&quot;#tel&quot;</span>).css(<span class="string">&quot;border&quot;</span>,<span class="string">&quot;2px solid red&quot;</span>);</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> result;</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="keyword">function</span> <span class="title">checkEmail</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="comment">//获取邮箱</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> email=$(<span class="string">&quot;#email&quot;</span>).val();</span></span><br><span class="line"><span class="javascript">            <span class="comment">//定义正则表达式</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> reg_email=<span class="regexp">/^[A-Za-z0-9-._]+@[A-Za-z0-9-]+(.[A-Za-z0-9]+)*(.[A-Za-z]&#123;2,6&#125;)$/</span>;</span></span><br><span class="line"><span class="javascript">            <span class="comment">//判断邮箱是否满足正则表达式</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> result=reg_email.test(email);</span></span><br><span class="line"><span class="javascript">            <span class="keyword">if</span>(result)&#123;</span></span><br><span class="line"><span class="javascript">                <span class="comment">//邮箱合法</span></span></span><br><span class="line"><span class="javascript">                $(<span class="string">&quot;#email&quot;</span>).css(<span class="string">&quot;border&quot;</span>,<span class="string">&quot;&quot;</span>);</span></span><br><span class="line"><span class="javascript">            &#125;<span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">                <span class="comment">//邮箱非法</span></span></span><br><span class="line"><span class="javascript">                $(<span class="string">&quot;#email&quot;</span>).css(<span class="string">&quot;border&quot;</span>,<span class="string">&quot;2px solid red&quot;</span>);</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> result;</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">        $(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            $(<span class="string">&quot;#registerForm&quot;</span>).submit(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="comment">//采用ajax异步提交表单（以便于利用后端返回的数据进行操作，同时保证了信息的安全性）</span></span></span><br><span class="line"><span class="javascript">                <span class="keyword">if</span>(checkPassword() &amp;&amp; checkUsername()</span></span><br><span class="line"><span class="javascript">                    &amp;&amp; checkEmail() &amp;&amp; checkConfirmPWD() &amp;&amp; checkTel())&#123;</span></span><br><span class="line"><span class="javascript">                    <span class="comment">//表单验证通过，数据符合要求，执行异步提交操作</span></span></span><br><span class="line"><span class="javascript">                    <span class="comment">//$(this).serialize表示通过serialize方法获取表单数据（这里的this表示的就是registerForm）</span></span></span><br><span class="line"><span class="javascript">                    <span class="comment">//第三个参数就是利用后端返回的data数据进行操作</span></span></span><br><span class="line"><span class="javascript">                    $.post(<span class="string">&quot;RegisterServlet&quot;</span>,$(<span class="built_in">this</span>).serialize(),<span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                        <span class="keyword">if</span>(data.flag)&#123;</span></span><br><span class="line"><span class="javascript">                            <span class="comment">//注册成功，跳转到登录页面</span></span></span><br><span class="line"><span class="javascript">                            alert(<span class="string">&quot;注册成功！单击跳转到登录页面&quot;</span>);</span></span><br><span class="line"><span class="javascript">                            location.href=<span class="string">&quot;login.jsp&quot;</span>;</span></span><br><span class="line"><span class="javascript">                        &#125;<span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">                            <span class="comment">//注册失败，向页面添加提示信息（errorMsg内添加文本）</span></span></span><br><span class="line"><span class="javascript">                            $(<span class="string">&quot;#errorMsg&quot;</span>).html(data.errMsg);</span></span><br><span class="line"><span class="javascript">                        &#125;</span></span><br><span class="line"><span class="javascript">                    &#125;)</span></span><br><span class="line"><span class="javascript">                &#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="javascript">                    alert(<span class="string">&quot;提交失败！请检查信息是否填写准确&quot;</span>);</span></span><br><span class="line"><span class="javascript">                &#125;</span></span><br><span class="line"><span class="javascript">                <span class="comment">//返回值若为true，则表单会被同步提交，所以这里始终将返回值设为false</span></span></span><br><span class="line"><span class="javascript">                <span class="keyword">return</span> <span class="literal">false</span>;</span></span><br><span class="line"><span class="javascript">            &#125;)</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">            <span class="comment">//绑定所有离焦事件</span></span></span><br><span class="line"><span class="javascript">            $(<span class="string">&quot;#username&quot;</span>).blur(checkUsername);</span></span><br><span class="line"><span class="javascript">            $(<span class="string">&quot;#password&quot;</span>).blur(checkPassword);</span></span><br><span class="line"><span class="javascript">            $(<span class="string">&quot;#confirm_pwd&quot;</span>).blur(checkConfirmPWD);</span></span><br><span class="line"><span class="javascript">            $(<span class="string">&quot;#email&quot;</span>).blur(checkEmail);</span></span><br><span class="line"><span class="javascript">            $(<span class="string">&quot;#tel&quot;</span>).blur(checkTel);</span></span><br><span class="line"><span class="javascript">        &#125;)</span></span><br><span class="line"><span class="javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">id</span>=<span class="string">&quot;registerForm&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span> <span class="attr">border</span>=<span class="string">0</span> <span class="attr">cellpadding</span>=<span class="string">0</span> <span class="attr">cellspacing</span>=<span class="string">0</span> <span class="attr">style</span>=<span class="string">&quot;width:100% ;height:100%&quot;</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span> <span class="attr">style</span>=<span class="string">&quot;width:100%;&quot;</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span> <span class="attr">valign</span>=<span class="string">&quot;middle&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;div1&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;img/icon.png&quot;</span> <span class="attr">width</span>=<span class="string">&quot;250&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;div2&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">h2</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span>&gt;</span>会员注册<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;errorMsg&quot;</span> <span class="attr">style</span>=<span class="string">&quot;color: red;text-align: center&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">table</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;username&quot;</span>&gt;</span>用户名<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入用户名&quot;</span> <span class="attr">id</span>=<span class="string">&quot;username&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;truename&quot;</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;truename&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入真实姓名&quot;</span> <span class="attr">id</span>=<span class="string">&quot;truename&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;password&quot;</span>&gt;</span>密码<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入密码&quot;</span> <span class="attr">id</span>=<span class="string">&quot;password&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;confirm_pwd&quot;</span>&gt;</span>确认密码<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;confirm_pwd&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请再次输入密码&quot;</span> <span class="attr">id</span>=<span class="string">&quot;confirm_pwd&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;tel&quot;</span>&gt;</span>联系电话<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;tel&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入手机号&quot;</span> <span class="attr">id</span>=<span class="string">&quot;tel&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;email&quot;</span>&gt;</span>Email<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;email&quot;</span> <span class="attr">name</span>=<span class="string">&quot;email&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入Email&quot;</span> <span class="attr">id</span>=<span class="string">&quot;email&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">&quot;2&quot;</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;注册账号&quot;</span> <span class="attr">id</span>=<span class="string">&quot;submit&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span> 已有账号！<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/login.jsp&quot;</span>&gt;</span>点击登录<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="前端登录页面"><a href="#前端登录页面" class="headerlink" title="前端登录页面"></a>前端登录页面</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line">&lt;%--</span><br><span class="line">  Created by IntelliJ IDEA.</span><br><span class="line">  User: renboyu010214</span><br><span class="line">  Date: 2021/2/3</span><br><span class="line">  Time: 9:00</span><br><span class="line">  To change this template use File | Settings | File Templates.</span><br><span class="line">--%&gt;</span><br><span class="line">&lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; language=&quot;java&quot; %&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>书城登录页面<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-id">#div1</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">border</span>: <span class="number">4px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">border-style</span>: ridge;</span></span><br><span class="line"><span class="css">            <span class="attribute">border-radius</span>:<span class="number">5px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">400px</span>;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-id">#div2</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">border-radius</span>:<span class="number">5px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">background</span>: gray;</span></span><br><span class="line"><span class="css">            <span class="attribute">opacity</span>: <span class="number">0.6</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">z-index</span>: <span class="number">10</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">350px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">35px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">margin-bottom</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;js/jquery-3.5.1.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">        $(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="comment">//为登录按钮绑定单机事件</span></span></span><br><span class="line"><span class="javascript">            $(<span class="string">&quot;#login&quot;</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="comment">//采用ajax异步提交表单（以便于利用后端返回的数据进行操作，同时保证了信息的安全性）</span></span></span><br><span class="line"><span class="javascript">                $.post(<span class="string">&quot;LoginServlet&quot;</span>,$(<span class="string">&quot;#loginForm&quot;</span>).serialize(),<span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                    <span class="comment">//data为返回的结果日志</span></span></span><br><span class="line"><span class="javascript">                    <span class="keyword">if</span>(data.flag)&#123;</span></span><br><span class="line"><span class="javascript">                        <span class="comment">//登录成功</span></span></span><br><span class="line"><span class="javascript">                        location.href=<span class="string">&quot;index.jsp&quot;</span>;</span></span><br><span class="line"><span class="javascript">                    &#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="javascript">                        <span class="comment">//登录失败，显示错误信息，提示重新登录</span></span></span><br><span class="line"><span class="javascript">                        $(<span class="string">&quot;#errorMsg&quot;</span>).html(data.errMsg);</span></span><br><span class="line"><span class="javascript">                    &#125;</span></span><br><span class="line"><span class="javascript">                &#125;)</span></span><br><span class="line"><span class="javascript">            &#125;)</span></span><br><span class="line"><span class="javascript">        &#125;)</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">id</span>=<span class="string">&quot;loginForm&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span> <span class="attr">border</span>=<span class="string">0</span> <span class="attr">cellpadding</span>=<span class="string">0</span> <span class="attr">cellspacing</span>=<span class="string">0</span> <span class="attr">style</span>=<span class="string">&quot;width:100% ;height:100%&quot;</span> &gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span> <span class="attr">style</span>=<span class="string">&quot;width:100%;&quot;</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span> <span class="attr">valign</span>=<span class="string">&quot;middle&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;div1&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;img/icon.png&quot;</span> <span class="attr">width</span>=<span class="string">&quot;250&quot;</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;div2&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">h2</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span>&gt;</span>会员登录<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;errorMsg&quot;</span> <span class="attr">style</span>=<span class="string">&quot;color: red;text-align: center&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">table</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;username&quot;</span>&gt;</span>用户名<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入用户名&quot;</span> <span class="attr">id</span>=<span class="string">&quot;username&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;password&quot;</span>&gt;</span>密 码<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入密码&quot;</span> <span class="attr">id</span>=<span class="string">&quot;password&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">&quot;2&quot;</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;登录账号&quot;</span> <span class="attr">id</span>=<span class="string">&quot;login&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">p</span>&gt;</span> 没有账户？<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/register.jsp&quot;</span>&gt;</span>点击注册<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="后端部分实现"><a href="#后端部分实现" class="headerlink" title="后端部分实现"></a>后端部分实现</h2><h4 id="成员信息JavaBean"><a href="#成员信息JavaBean" class="headerlink" title="成员信息JavaBean"></a>成员信息JavaBean</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.ywrby.model;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Member</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer ID;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String truename;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="keyword">private</span> String city;</span><br><span class="line">    <span class="keyword">private</span> String address;</span><br><span class="line">    <span class="keyword">private</span> String postcode;</span><br><span class="line">    <span class="keyword">private</span> String cardno;</span><br><span class="line">    <span class="keyword">private</span> String cardtype;</span><br><span class="line">    <span class="keyword">private</span> String tel;</span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Member</span><span class="params">(Integer ID, String username,</span></span></span><br><span class="line"><span class="params"><span class="function">                  String truename, String password,</span></span></span><br><span class="line"><span class="params"><span class="function">                  String city, String address, String postcode,</span></span></span><br><span class="line"><span class="params"><span class="function">                  String cardno, String cardtype,</span></span></span><br><span class="line"><span class="params"><span class="function">                  String tel, String email)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.ID = ID;</span><br><span class="line">        <span class="keyword">this</span>.username = username;</span><br><span class="line">        <span class="keyword">this</span>.truename = truename;</span><br><span class="line">        <span class="keyword">this</span>.password = password;</span><br><span class="line">        <span class="keyword">this</span>.city = city;</span><br><span class="line">        <span class="keyword">this</span>.address = address;</span><br><span class="line">        <span class="keyword">this</span>.postcode = postcode;</span><br><span class="line">        <span class="keyword">this</span>.cardno = cardno;</span><br><span class="line">        <span class="keyword">this</span>.cardtype = cardtype;</span><br><span class="line">        <span class="keyword">this</span>.tel = tel;</span><br><span class="line">        <span class="keyword">this</span>.email = email;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Member</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.ID = Integer.valueOf(<span class="string">&quot;-1&quot;</span>);</span><br><span class="line">        <span class="keyword">this</span>.username = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">this</span>.truename = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">this</span>.password = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">this</span>.city = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">this</span>.address = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">this</span>.postcode = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">this</span>.cardno = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">this</span>.cardtype = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">this</span>.tel = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">this</span>.email = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getID</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ID;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setID</span><span class="params">(Integer ID)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.ID = ID;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUsername</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUsername</span><span class="params">(String username)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.username = username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getTruename</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> truename;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTruename</span><span class="params">(String truename)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.truename = truename;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPassword</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPassword</span><span class="params">(String password)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.password = password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getCity</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> city;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCity</span><span class="params">(String city)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.city = city;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getAddress</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> address;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAddress</span><span class="params">(String address)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.address = address;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPostcode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> postcode;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPostcode</span><span class="params">(String postcode)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.postcode = postcode;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getCardno</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> cardno;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCardno</span><span class="params">(String cardno)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.cardno = cardno;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getCardtype</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> cardtype;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCardtype</span><span class="params">(String cardtype)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.cardtype = cardtype;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getTel</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> tel;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTel</span><span class="params">(String tel)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.tel = tel;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getEmail</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> email;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setEmail</span><span class="params">(String email)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.email = email;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Member&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;ID=&quot;</span> + ID +</span><br><span class="line">                <span class="string">&quot;, username=&#x27;&quot;</span> + username + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, truename=&#x27;&quot;</span> + truename + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, password=&#x27;&quot;</span> + password + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, city=&#x27;&quot;</span> + city + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, address=&#x27;&quot;</span> + address + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, postcode=&#x27;&quot;</span> + postcode + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, cardno=&#x27;&quot;</span> + cardno + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, cardtype=&#x27;&quot;</span> + cardtype + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, tel=&#x27;&quot;</span> + tel + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, email=&#x27;&quot;</span> + email + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="封装后端返回数据JavaBean"><a href="#封装后端返回数据JavaBean" class="headerlink" title="封装后端返回数据JavaBean"></a>封装后端返回数据JavaBean</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.ywrby.model;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用于封装后端返回前端的数据对象</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ResultInfo</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> flag;  <span class="comment">//后端正常返回true，后端异常返回false</span></span><br><span class="line">    <span class="keyword">private</span> Object data;  <span class="comment">//后端 返回结果数据对象</span></span><br><span class="line">    <span class="keyword">private</span> String errMsg;  <span class="comment">//发生异常的错误信息</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ResultInfo</span><span class="params">(<span class="keyword">boolean</span> flag, Object data, String errMsg)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.flag = flag;</span><br><span class="line">        <span class="keyword">this</span>.data = data;</span><br><span class="line">        <span class="keyword">this</span>.errMsg = errMsg;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ResultInfo</span><span class="params">(<span class="keyword">boolean</span> flag)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.flag = flag;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ResultInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ResultInfo</span><span class="params">(<span class="keyword">boolean</span> flag, String errMsg)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.flag = flag;</span><br><span class="line">        <span class="keyword">this</span>.errMsg = errMsg;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isFlag</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> flag;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setFlag</span><span class="params">(<span class="keyword">boolean</span> flag)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.flag = flag;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getData</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setData</span><span class="params">(Object data)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.data = data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getErrMsg</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> errMsg;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setErrMsg</span><span class="params">(String errMsg)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.errMsg = errMsg;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="数据库工具类"><a href="#数据库工具类" class="headerlink" title="数据库工具类"></a>数据库工具类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.ywrby.utils;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileReader;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"><span class="keyword">import</span> java.sql.*;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * ConnDB工具类</span></span><br><span class="line"><span class="comment"> * 用于进行数据库连接与数据库操作</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConnDB</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> Connection connection=<span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">public</span> Statement statement=<span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">public</span> ResultSet resultSet=<span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义各个静态变量</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String url;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String user;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String password;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String driver;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 静态代码块，只在创建时调用一次</span></span><br><span class="line"><span class="comment">     * 可以在此处进行配置文件的读取，以及驱动注册等步骤</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 将url，user，password，driver等变量</span></span><br><span class="line"><span class="comment">     * 存入配置文件并读取可以提高代码复用性</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//创建配置文件数据集</span></span><br><span class="line">            Properties pro=<span class="keyword">new</span> Properties();</span><br><span class="line">            <span class="comment">//创建类加载器classLoader</span></span><br><span class="line">            ClassLoader classLoader=ConnDB.class.getClassLoader();</span><br><span class="line">            <span class="comment">//通过类加载器获取在src下的配置文件，这样可以避免绝对路径带来的问题</span></span><br><span class="line">            URL res=classLoader.getResource(<span class="string">&quot;jdbc.properties&quot;</span>);</span><br><span class="line">            <span class="keyword">assert</span> res != <span class="keyword">null</span>;  <span class="comment">//确保res不为空</span></span><br><span class="line">            String path=res.getPath();</span><br><span class="line">            <span class="comment">//加载配置文件</span></span><br><span class="line">            pro.load(<span class="keyword">new</span> FileReader(path));</span><br><span class="line"></span><br><span class="line">            <span class="comment">//获取配置文件中的数据</span></span><br><span class="line">            url=pro.getProperty(<span class="string">&quot;url&quot;</span>);</span><br><span class="line">            user=pro.getProperty(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">            password=pro.getProperty(<span class="string">&quot;password&quot;</span>);</span><br><span class="line">            driver=pro.getProperty(<span class="string">&quot;driver&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//注册驱动</span></span><br><span class="line">            Class.forName(driver);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException | ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建数据库连接对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回新创建的数据库连接对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title">getConnection</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Connection connection=<span class="keyword">null</span>;  <span class="comment">//创建数据库连接对象</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            connection=DriverManager.getConnection(url,user,password); <span class="comment">//进行数据库连接</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException throwables) &#123;</span><br><span class="line">            throwables.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(connection == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="comment">//如果未获取到连接，输出连接信息，方便调试</span></span><br><span class="line">            System.err.println(<span class="string">&quot;DbConnectionManager.getConnection():&quot;</span></span><br><span class="line">            +url+<span class="string">&quot;\r\n&quot;</span>+user+<span class="string">&quot;\r\n&quot;</span>+password+<span class="string">&quot;\r\n&quot;</span>+driver);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//返回连接对象</span></span><br><span class="line">        <span class="keyword">return</span> connection;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 执行数据库查询语句</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sql sql语句</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 查询结果集</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ResultSet <span class="title">executeQuery</span><span class="params">(String sql)</span>  </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            connection=getConnection();  <span class="comment">//获取数据库连接对象</span></span><br><span class="line">            <span class="comment">//获取statement以操作数据库</span></span><br><span class="line">            statement=connection.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,ResultSet.CONCUR_READ_ONLY);</span><br><span class="line">            resultSet=statement.executeQuery(sql);  <span class="comment">//执行sql语句并获得结果集对象</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException throwables) &#123;</span><br><span class="line">            throwables.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> resultSet; <span class="comment">//返回结果集</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 执行更新数据库语句</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sql sql语句</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回更新语句执行结果</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">executeUpdate</span><span class="params">(String sql)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> result=<span class="number">0</span>;  <span class="comment">//sql更新语句执行结果</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            connection=getConnection();  <span class="comment">//获取数据库连接对象</span></span><br><span class="line">            <span class="comment">//获取statement以操作数据库</span></span><br><span class="line">            statement=connection.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,ResultSet.CONCUR_READ_ONLY);</span><br><span class="line">            result=statement.executeUpdate(sql);  <span class="comment">//执行更新语句</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException throwables) &#123;</span><br><span class="line">            throwables.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;  <span class="comment">//返回更新操作执行结果</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 实现更新数据后获取自动生成的编号</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sql sql语句</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回自动生成的编号</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">executeUpdate_id</span><span class="params">(String sql)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> result=<span class="number">0</span>;  <span class="comment">//sql更新语句执行结果</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            connection=getConnection();  <span class="comment">//获取数据库连接对象</span></span><br><span class="line">            <span class="comment">//获取statement以操作数据库</span></span><br><span class="line">            statement=connection.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,ResultSet.CONCUR_READ_ONLY);</span><br><span class="line">            result=statement.executeUpdate(sql);  <span class="comment">//执行更新语句</span></span><br><span class="line"></span><br><span class="line">            String ID=<span class="string">&quot;select @@IDENTITY as id&quot;</span>; <span class="comment">//定义用于获取刚刚生成的自动编号的SQL语句</span></span><br><span class="line">            resultSet=statement.executeQuery(sql);  <span class="comment">//获取自动生成的编号</span></span><br><span class="line">            <span class="keyword">if</span>(resultSet.next())&#123;  <span class="comment">//如果存在该数据</span></span><br><span class="line">                <span class="keyword">int</span> autoID=resultSet.getInt(<span class="string">&quot;id&quot;</span>); <span class="comment">//将获取到的ID数据保存并返回</span></span><br><span class="line">                result=autoID;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException throwables) &#123;</span><br><span class="line">            throwables.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;  <span class="comment">//返回更新操作执行结果</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 关闭数据库相关资源</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">closeDB</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(resultSet!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                resultSet.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException throwables) &#123;</span><br><span class="line">                throwables.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(statement!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                statement.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException throwables) &#123;</span><br><span class="line">                throwables.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(connection!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                connection.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException throwables) &#123;</span><br><span class="line">                throwables.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">executeQueryTest</span><span class="params">()</span></span>&#123;</span><br><span class="line">        String sql=<span class="string">&quot;select * from tb_member where username=&#x27;Leslie123&#x27;&quot;</span>;</span><br><span class="line">        ResultSet rs=executeQuery(sql);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">while</span> (resultSet.next()) &#123;</span><br><span class="line">                String password = rs.getString(<span class="string">&quot;password&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException throwables) &#123;</span><br><span class="line">            throwables.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(password);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="父类Dao"><a href="#父类Dao" class="headerlink" title="父类Dao"></a>父类Dao</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.ywrby.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.ywrby.model.Member;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MemberDao</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">insert</span><span class="params">(Member member)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List <span class="title">select</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="注册-登录Dao"><a href="#注册-登录Dao" class="headerlink" title="注册/登录Dao"></a>注册/登录Dao</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.ywrby.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.ywrby.model.Member;</span><br><span class="line"><span class="keyword">import</span> cn.ywrby.utils.ChStr;</span><br><span class="line"><span class="keyword">import</span> cn.ywrby.utils.ConnDB;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MemberDaoImpl</span> <span class="keyword">implements</span> <span class="title">MemberDao</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> ConnDB connDB=<span class="keyword">new</span> ConnDB();</span><br><span class="line">    <span class="keyword">private</span> ChStr ch=<span class="keyword">new</span> ChStr();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建会员</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> member 会员对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回记录更改的条数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">insert</span><span class="params">(Member member)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//System.out.println(&quot;insert方法正常执行...&quot;);</span></span><br><span class="line">        <span class="keyword">int</span> ret=-<span class="number">1</span>;  <span class="comment">//用于记录更新记录的条数</span></span><br><span class="line">        <span class="comment">//获取传入用户的数据信息</span></span><br><span class="line">        String username=member.getUsername();</span><br><span class="line">        String truename=member.getTruename();</span><br><span class="line">        String password=member.getPassword();</span><br><span class="line">        String city=member.getCity();</span><br><span class="line">        String address=member.getAddress();</span><br><span class="line">        String postcode=member.getPostcode();</span><br><span class="line">        String cardno=member.getCardno();</span><br><span class="line">        String cardtype=member.getCardtype();</span><br><span class="line">        String tel=member.getTel();</span><br><span class="line">        String email=member.getEmail();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//插入语句</span></span><br><span class="line">            String sql=<span class="string">&quot;INSERT INTO tb_member(userName,trueName,passWord,city,&quot;</span></span><br><span class="line">                    + <span class="string">&quot;address,postcode,cardNo,cardType,tel,email) VALUES(&#x27;&quot;</span></span><br><span class="line">                    + username+<span class="string">&quot;&#x27;,&#x27;&quot;</span>+truename+<span class="string">&quot;&#x27;,&#x27;&quot;</span></span><br><span class="line">                    + password+<span class="string">&quot;&#x27;,&#x27;&quot;</span>+city+<span class="string">&quot;&#x27;,&#x27;&quot;</span></span><br><span class="line">                    + address+<span class="string">&quot;&#x27;,&#x27;&quot;</span>+postcode+<span class="string">&quot;&#x27;,&#x27;&quot;</span></span><br><span class="line">                    + cardno+<span class="string">&quot;&#x27;,&#x27;&quot;</span>+cardtype+<span class="string">&quot;&#x27;,&#x27;&quot;</span></span><br><span class="line">                    + tel+<span class="string">&quot;&#x27;,&#x27;&quot;</span>+email+<span class="string">&quot;&#x27;)&quot;</span>;</span><br><span class="line">            ret=connDB.executeUpdate(sql);  <span class="comment">//执行插入语句</span></span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            ret=<span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//关闭数据库连接</span></span><br><span class="line">        connDB.closeDB();</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取所有会员数据信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 以列表形式返回所有会员数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Member&gt; <span class="title">select</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//声明会员对象</span></span><br><span class="line">        Member member=<span class="keyword">null</span>;</span><br><span class="line">        <span class="comment">//创建List集合，用于保存会员信息</span></span><br><span class="line">        List&lt;Member&gt; memberList=<span class="keyword">new</span> ArrayList();</span><br><span class="line">        String sql=<span class="string">&quot;select * from tb_member&quot;</span>;  <span class="comment">//定义sql语句</span></span><br><span class="line">        ResultSet resultSet=connDB.executeQuery(sql); <span class="comment">//获取所有会员数据信息</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//将会员数据信息插入列表</span></span><br><span class="line">            <span class="keyword">while</span> (resultSet.next()) &#123;</span><br><span class="line">                member = <span class="keyword">new</span> Member(Integer.valueOf(resultSet.getString(<span class="number">1</span>)),</span><br><span class="line">                        resultSet.getString(<span class="number">2</span>),resultSet.getString(<span class="number">3</span>),</span><br><span class="line">                        resultSet.getString(<span class="number">4</span>),resultSet.getString(<span class="number">5</span>),</span><br><span class="line">                        resultSet.getString(<span class="number">6</span>),resultSet.getString(<span class="number">7</span>),</span><br><span class="line">                        resultSet.getString(<span class="number">8</span>),resultSet.getString(<span class="number">9</span>),</span><br><span class="line">                        resultSet.getString(<span class="number">12</span>),resultSet.getString(<span class="number">13</span>));</span><br><span class="line">                memberList.add(member);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">catch</span> (SQLException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        connDB.closeDB();  <span class="comment">//关闭数据库连接</span></span><br><span class="line">        <span class="keyword">return</span> memberList;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据用户名查询是否存在该用户</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> username 用户名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 是否存在同名用户</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Member <span class="title">findByUsername</span><span class="params">(String username)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        <span class="comment">//System.out.println(&quot;findByUsername方法正常执行...&quot;);</span></span><br><span class="line">        Member member=<span class="keyword">null</span>;</span><br><span class="line">        String sql=<span class="string">&quot;select * from tb_member where userName = &#x27;&quot;</span>+username+<span class="string">&quot;&#x27;&quot;</span>;</span><br><span class="line">        <span class="comment">//System.out.println(sql);</span></span><br><span class="line">        ResultSet resultSet=connDB.executeQuery(sql);</span><br><span class="line">        <span class="keyword">if</span>(resultSet!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">while</span> (resultSet.next()) &#123;</span><br><span class="line">                    member = <span class="keyword">new</span> Member(Integer.valueOf(resultSet.getString(<span class="number">1</span>)),</span><br><span class="line">                            resultSet.getString(<span class="number">2</span>), resultSet.getString(<span class="number">3</span>),</span><br><span class="line">                            resultSet.getString(<span class="number">4</span>), resultSet.getString(<span class="number">5</span>),</span><br><span class="line">                            resultSet.getString(<span class="number">6</span>), resultSet.getString(<span class="number">7</span>),</span><br><span class="line">                            resultSet.getString(<span class="number">8</span>), resultSet.getString(<span class="number">9</span>),</span><br><span class="line">                            resultSet.getString(<span class="number">12</span>), resultSet.getString(<span class="number">13</span>));</span><br><span class="line">                &#125;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (SQLException throwables) &#123;</span><br><span class="line">                throwables.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> member;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据用户名和密码查询用户是否存在</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> username 用户名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> password 密码</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 用户对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Member <span class="title">findByUsernameAndPassword</span><span class="params">(String username, String password)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//System.out.println(&quot;findByUsername方法正常执行...&quot;);</span></span><br><span class="line">        Member member=<span class="keyword">null</span>;</span><br><span class="line">        String sql=<span class="string">&quot;select * from tb_member where userName = &#x27;&quot;</span>+username+<span class="string">&quot;&#x27; and password = &#x27;&quot;</span>+password+<span class="string">&quot;&#x27;&quot;</span>;</span><br><span class="line">        <span class="comment">//System.out.println(sql);</span></span><br><span class="line">        ResultSet resultSet=connDB.executeQuery(sql);</span><br><span class="line">        <span class="keyword">if</span>(resultSet!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">while</span> (resultSet.next()) &#123;</span><br><span class="line">                    member = <span class="keyword">new</span> Member(Integer.valueOf(resultSet.getString(<span class="number">1</span>)),</span><br><span class="line">                            resultSet.getString(<span class="number">2</span>), resultSet.getString(<span class="number">3</span>),</span><br><span class="line">                            resultSet.getString(<span class="number">4</span>), resultSet.getString(<span class="number">5</span>),</span><br><span class="line">                            resultSet.getString(<span class="number">6</span>), resultSet.getString(<span class="number">7</span>),</span><br><span class="line">                            resultSet.getString(<span class="number">8</span>), resultSet.getString(<span class="number">9</span>),</span><br><span class="line">                            resultSet.getString(<span class="number">12</span>), resultSet.getString(<span class="number">13</span>));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException throwables) &#123;</span><br><span class="line">                throwables.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> member;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insertTest</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Member member=<span class="keyword">new</span> Member();</span><br><span class="line">        member.setUsername(<span class="string">&quot;Leslie&quot;</span>);</span><br><span class="line">        member.setTruename(<span class="string">&quot;BoyuRen&quot;</span>);</span><br><span class="line">        member.setPassword(<span class="string">&quot;010214&quot;</span>);</span><br><span class="line">        member.setCity(<span class="string">&quot;ChongQing&quot;</span>);</span><br><span class="line">        member.setAddress(<span class="string">&quot;BayiRoadBeibeiDistrict&quot;</span>);</span><br><span class="line">        member.setPostcode(<span class="string">&quot;761007&quot;</span>);</span><br><span class="line">        member.setCardno(<span class="string">&quot;1301021999&quot;</span>);</span><br><span class="line">        member.setCardtype(<span class="string">&quot;IDcard&quot;</span>);</span><br><span class="line">        member.setTel(<span class="string">&quot;0311-89160328&quot;</span>);</span><br><span class="line">        member.setEmail(<span class="string">&quot;ywrby@foxmail.com&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> num=insert(member);</span><br><span class="line">        System.out.println(num);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">selectTest</span><span class="params">()</span></span>&#123;</span><br><span class="line">        List&lt;Member&gt; memberList=select();</span><br><span class="line">        <span class="keyword">for</span>(Member m:memberList)&#123;</span><br><span class="line">            System.out.println(m+<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">findTest</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        Member member=findByUsername(<span class="string">&quot;Leslie123&quot;</span>);</span><br><span class="line">        System.out.println(member);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="注册Service"><a href="#注册Service" class="headerlink" title="注册Service"></a>注册Service</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.ywrby.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.ywrby.dao.MemberDaoImpl;</span><br><span class="line"><span class="keyword">import</span> cn.ywrby.model.Member;</span><br><span class="line"><span class="keyword">import</span> cn.ywrby.utils.ConnDB;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RegisterService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">regist</span><span class="params">(Member member)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        <span class="comment">//System.out.println(&quot;RegisterService正常执行...&quot;);</span></span><br><span class="line">        <span class="comment">//创建数据库连接</span></span><br><span class="line">        ConnDB conn=<span class="keyword">new</span> ConnDB();</span><br><span class="line">        MemberDaoImpl dao=<span class="keyword">new</span> MemberDaoImpl();</span><br><span class="line">        <span class="comment">//查询用户名是否存在</span></span><br><span class="line">        String username=member.getUsername();</span><br><span class="line">        Member memberResult=dao.findByUsername(username);</span><br><span class="line">        <span class="keyword">if</span>(memberResult!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="comment">//用户名存在，注册失败</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//用户名不存在 保存信息</span></span><br><span class="line">        dao.insert(member);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="注册Servlet"><a href="#注册Servlet" class="headerlink" title="注册Servlet"></a>注册Servlet</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.ywrby.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.ywrby.dao.MemberDaoImpl;</span><br><span class="line"><span class="keyword">import</span> cn.ywrby.model.Member;</span><br><span class="line"><span class="keyword">import</span> cn.ywrby.model.ResultInfo;</span><br><span class="line"><span class="keyword">import</span> cn.ywrby.service.RegisterService;</span><br><span class="line"><span class="keyword">import</span> cn.ywrby.utils.ConnDB;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet(&quot;/RegisterServlet&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RegisterServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">//System.out.println(&quot;RegisterServlet正常执行...&quot;);</span></span><br><span class="line">        ConnDB conn=<span class="keyword">new</span> ConnDB();</span><br><span class="line">        MemberDaoImpl insertMember=<span class="keyword">new</span> MemberDaoImpl();</span><br><span class="line">        RegisterService service=<span class="keyword">new</span> RegisterService();</span><br><span class="line">        Member member=<span class="keyword">new</span> Member();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取数据</span></span><br><span class="line">        Map&lt;String,String[]&gt; memberData=request.getParameterMap();</span><br><span class="line">        <span class="comment">//封装对象</span></span><br><span class="line">        member.setUsername(memberData.get(<span class="string">&quot;username&quot;</span>)[<span class="number">0</span>]);</span><br><span class="line">        member.setTruename(memberData.get(<span class="string">&quot;truename&quot;</span>)[<span class="number">0</span>]);</span><br><span class="line">        member.setPassword(memberData.get(<span class="string">&quot;password&quot;</span>)[<span class="number">0</span>]);</span><br><span class="line">        member.setTel(memberData.get(<span class="string">&quot;tel&quot;</span>)[<span class="number">0</span>]);</span><br><span class="line">        member.setEmail(memberData.get(<span class="string">&quot;email&quot;</span>)[<span class="number">0</span>]);</span><br><span class="line">        <span class="comment">//调用service完成注册</span></span><br><span class="line">        <span class="keyword">boolean</span> result= <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            result = service.regist(member);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException throwables) &#123;</span><br><span class="line">            throwables.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//封装对象返回前端</span></span><br><span class="line">        ResultInfo info=<span class="keyword">new</span> ResultInfo();</span><br><span class="line">        <span class="keyword">if</span>(result)&#123;</span><br><span class="line">            <span class="comment">//用户创建成功，数据成功保存</span></span><br><span class="line">            info.setFlag(<span class="keyword">true</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">//用户创建失败，数据未保存</span></span><br><span class="line">            info.setFlag(<span class="keyword">false</span>);</span><br><span class="line">            info.setErrMsg(<span class="string">&quot;注册失败！请尝试重新注册&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//将info对象序列化为json</span></span><br><span class="line">        ObjectMapper mapper=<span class="keyword">new</span> ObjectMapper();</span><br><span class="line">        String json=mapper.writeValueAsString(info);</span><br><span class="line">        <span class="comment">//将json数据写回客户端</span></span><br><span class="line">        response.setContentType(<span class="string">&quot;application/json; charset=utf-8&quot;</span>);</span><br><span class="line">        response.getWriter().write(json);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.doPost(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="登录Service"><a href="#登录Service" class="headerlink" title="登录Service"></a>登录Service</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.ywrby.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.ywrby.dao.MemberDaoImpl;</span><br><span class="line"><span class="keyword">import</span> cn.ywrby.model.Member;</span><br><span class="line"><span class="keyword">import</span> cn.ywrby.utils.ConnDB;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginService</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Member <span class="title">login</span><span class="params">(Member member)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建数据库连接</span></span><br><span class="line">        ConnDB conn=<span class="keyword">new</span> ConnDB();</span><br><span class="line">        MemberDaoImpl dao=<span class="keyword">new</span> MemberDaoImpl();</span><br><span class="line">        <span class="keyword">return</span> dao.findByUsernameAndPassword(member.getUsername(),member.getPassword());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="登录Servlet"><a href="#登录Servlet" class="headerlink" title="登录Servlet"></a>登录Servlet</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.ywrby.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.ywrby.model.Member;</span><br><span class="line"><span class="keyword">import</span> cn.ywrby.model.ResultInfo;</span><br><span class="line"><span class="keyword">import</span> cn.ywrby.service.LoginService;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet(&quot;/LoginServlet&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">//获取用户输入数据</span></span><br><span class="line">        Map&lt;String, String[]&gt; map = request.getParameterMap();</span><br><span class="line">        <span class="comment">//封装对象</span></span><br><span class="line">        Member member = <span class="keyword">new</span> Member();</span><br><span class="line">        member.setUsername(map.get(<span class="string">&quot;username&quot;</span>)[<span class="number">0</span>]);</span><br><span class="line">        member.setPassword(map.get(<span class="string">&quot;password&quot;</span>)[<span class="number">0</span>]);</span><br><span class="line">        <span class="comment">//调用service进行查询与匹配</span></span><br><span class="line">        LoginService service = <span class="keyword">new</span> LoginService();</span><br><span class="line">        Member member1 = service.login(member);</span><br><span class="line"></span><br><span class="line">        ResultInfo info = <span class="keyword">new</span> ResultInfo();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//判断用户能否正常登录</span></span><br><span class="line">        <span class="keyword">if</span>(member1==<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="comment">//用户不存在，提示用户检查用户名以及密码输入</span></span><br><span class="line">            info.setFlag(<span class="keyword">false</span>);</span><br><span class="line">            info.setErrMsg(<span class="string">&quot;用户名或密码输入错误！&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//用户存在，提示用户成功登陆</span></span><br><span class="line">            info.setFlag(<span class="keyword">true</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//响应数据</span></span><br><span class="line">        ObjectMapper mapper=<span class="keyword">new</span> ObjectMapper();</span><br><span class="line">        response.setContentType(<span class="string">&quot;application/json;charset=utf-8&quot;</span>);</span><br><span class="line">        mapper.writeValue(response.getOutputStream(),info);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.doPost(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaWeb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>26-Jedis</title>
      <link href="/2021/03/04/26-Jedis/"/>
      <url>/2021/03/04/26-Jedis/</url>
      
        <content type="html"><![CDATA[<h1 id="Jedis"><a href="#Jedis" class="headerlink" title="Jedis"></a>Jedis</h1><h4 id="Jedis-是-Redis-官方首选的-Java-客户端开发包。"><a href="#Jedis-是-Redis-官方首选的-Java-客户端开发包。" class="headerlink" title="Jedis 是 Redis 官方首选的 Java 客户端开发包。"></a>Jedis 是 Redis 官方首选的 Java 客户端开发包。</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Jedis测试类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JedisTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//获取连接</span></span><br><span class="line">        Jedis jedis=<span class="keyword">new</span> Jedis(<span class="string">&quot;localhost&quot;</span>,<span class="number">6379</span>);</span><br><span class="line">        <span class="comment">//执行操作</span></span><br><span class="line">        jedis.set(<span class="string">&quot;username&quot;</span>,<span class="string">&quot;Leslie&quot;</span>);</span><br><span class="line">        <span class="comment">//关闭连接</span></span><br><span class="line">        jedis.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//获取连接</span></span><br><span class="line">        Jedis jedis=<span class="keyword">new</span> Jedis(<span class="string">&quot;localhost&quot;</span>,<span class="number">6379</span>);</span><br><span class="line">        <span class="comment">//执行操作</span></span><br><span class="line">        String name=jedis.get(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">        System.out.println(name);</span><br><span class="line">        <span class="comment">//关闭连接</span></span><br><span class="line">        jedis.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Jedis中各个方法名与Redis中完全一致</p><h4 id="Jedis中的特殊方法"><a href="#Jedis中的特殊方法" class="headerlink" title="Jedis中的特殊方法"></a>Jedis中的特殊方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//保存数据并在规定时间后删除</span></span><br><span class="line">jedis.setex(<span class="string">&quot;age&quot;</span>,<span class="number">10</span>,<span class="string">&quot;17&quot;</span>); <span class="comment">//存入age:17键值对并在10秒后删除</span></span><br></pre></td></tr></table></figure><h2 id="Jedis连接池：JedisPool"><a href="#Jedis连接池：JedisPool" class="headerlink" title="Jedis连接池：JedisPool"></a>Jedis连接池：JedisPool</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//创建连接池配置对象用于修改默认配置</span></span><br><span class="line">    JedisPoolConfig config=<span class="keyword">new</span> JedisPoolConfig();</span><br><span class="line">    config.setMaxIdle(<span class="number">10</span>); <span class="comment">//最大空闲连接</span></span><br><span class="line">    config.setMaxTotal(<span class="number">50</span>); <span class="comment">//最大连接数</span></span><br><span class="line">    <span class="comment">//获取连接池对象</span></span><br><span class="line">    JedisPool pool=<span class="keyword">new</span> JedisPool(config,<span class="string">&quot;localhost&quot;</span>,<span class="number">6379</span>);</span><br><span class="line">    <span class="comment">//通过连接池获取Jedis连接</span></span><br><span class="line">    Jedis jedis=pool.getResource();</span><br><span class="line">    <span class="comment">//执行操作</span></span><br><span class="line">    jedis.set(<span class="string">&quot;hello&quot;</span>,<span class="string">&quot;hi&quot;</span>);</span><br><span class="line">    <span class="comment">//关闭(此时只是归还Jedis对象给连接池)</span></span><br><span class="line">    jedis.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaWeb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>25-Redis</title>
      <link href="/2021/03/04/25-Redis/"/>
      <url>/2021/03/04/25-Redis/</url>
      
        <content type="html"><![CDATA[<h1 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h1><p>Redis是一款高性能的NoSQL系列的非关系型的数据库</p><p>关系型数据库一般多指数据之间存在关系，且将数据保存到硬盘上的数据库，例如MySQL等等。非关系型数据库是一个与之相对的概念，数据之间并不存在逻辑上的关系，且将数据存入内存而非硬盘中</p><p>Redis数据库将数据以键值对的形式存入内存</p><h4 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h4><p>Redis存储的是键值对形式（KEY，VALUE）的数据，其中KEY始终是字符串，VALUE有五种可存储类型</p><ul><li>字符串类型string</li><li>哈希类型hash（可嵌套存储键值对）</li><li>列表类型list</li><li>集合类型set（键不可重复）</li><li>有序集合类型sortedset（自动排序）</li></ul><h2 id="命令操作"><a href="#命令操作" class="headerlink" title="命令操作"></a>命令操作</h2><h3 id="字符串类型"><a href="#字符串类型" class="headerlink" title="字符串类型"></a>字符串类型</h3><ul><li>set key value:存储数据</li><li>get key:获取数据</li><li>del key:删除数据</li></ul><h3 id="哈希类型"><a href="#哈希类型" class="headerlink" title="哈希类型"></a>哈希类型</h3><ul><li>hset key filed value:存储数据</li><li>hget key filed:获取数据</li><li>hgetall key:获取全部哈希数据</li><li>hdel key field:删除指定数据</li></ul><h3 id="列表类型"><a href="#列表类型" class="headerlink" title="列表类型"></a>列表类型</h3><ul><li>lpush key value:从列表左侧插入元素（列表头部）</li><li>rpush key value:从列表右侧插入元素（列表尾部）</li><li>lrange key start end:获取范围内的元素</li><li>lpop key:删除列表左侧首元素并返回值</li><li>rpop key:删除列表右侧尾元素并返回值</li></ul><h3 id="集合类型"><a href="#集合类型" class="headerlink" title="集合类型"></a>集合类型</h3><ul><li>sadd key value:存储元素（键不可重复）</li><li>smembers key:获取set集合中所有元素</li><li>srem key value:删除集合中某个元素</li></ul><h3 id="有序集合类型（数据按照score排序）"><a href="#有序集合类型（数据按照score排序）" class="headerlink" title="有序集合类型（数据按照score排序）"></a>有序集合类型（数据按照score排序）</h3><ul><li>zadd key score value:存储数据 </li><li>zrange key start end:获取指定范围内的元素</li><li>zren key value:删除指定元素</li></ul><h3 id="通用操作"><a href="#通用操作" class="headerlink" title="通用操作"></a>通用操作</h3><ul><li>keys * :获取所有键名</li><li>type key:获取对应键所存储的数据种类</li><li>del key:删除指定数据</li></ul><h2 id="Redis的持久化"><a href="#Redis的持久化" class="headerlink" title="Redis的持久化"></a>Redis的持久化</h2><p>redis是一个内存数据库，当服务器重启或者电脑重启，都会导致数据库中数据的丢失，此时就需要通过设置redis持久化进行解决。redis有两种持久化方案，分别是RDB与AOF</p><h3 id="RDB持久化方式"><a href="#RDB持久化方式" class="headerlink" title="RDB持久化方式"></a>RDB持久化方式</h3><p>在一定的时间间隔中，检验key的变化情况，然后持久化数据</p><p>是redis默认的持久化方式，不需要进行配置，默认情况下就采用这种持久化方式</p><p>要更改相关的配置需要修改配置文件redis.windows.conf中的</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">################################ SNAPSHOTTING  ################################</span><br><span class="line">#</span><br><span class="line"># Save the DB on disk:</span><br><span class="line">#</span><br><span class="line">#   save &lt;seconds&gt; &lt;changes&gt;</span><br><span class="line">#</span><br><span class="line">#   Will save the DB if both the given number of seconds and the given</span><br><span class="line">#   number of write operations against the DB occurred.</span><br><span class="line">#</span><br><span class="line">#   In the example below the behaviour will be to save:</span><br><span class="line">#   after 900 sec (15 min) if at least 1 key changed</span><br><span class="line">#   after 300 sec (5 min) if at least 10 keys changed</span><br><span class="line">#   after 60 sec if at least 10000 keys changed</span><br><span class="line">#</span><br><span class="line">#   Note: you can disable saving completely by commenting out all &quot;save&quot; lines.</span><br><span class="line">#</span><br><span class="line">#   It is also possible to remove all the previously configured save</span><br><span class="line">#   points by adding a save directive with a single empty string argument</span><br><span class="line">#   like in the following example:</span><br><span class="line">#</span><br><span class="line">#   save &quot;&quot;</span><br><span class="line"></span><br><span class="line">save 900 1</span><br><span class="line">save 300 10</span><br><span class="line">save 60 10000</span><br></pre></td></tr></table></figure><p>“save 900 1”表示没过900秒有超过1个key被修改就进行持久化操作，同理”save 60 10000”表示没过60秒超过10000个key变化就进行持久化操作</p><p>修改文件后不能通过直接打开可执行程序的方式打开服务器端，需要通过命令行启动服务器端才能实现修改（在服务器文件路径下打开CMD窗口输入文件名启动服务器端）</p><h3 id="AOF持久化方式"><a href="#AOF持久化方式" class="headerlink" title="AOF持久化方式"></a>AOF持久化方式</h3><p>采用直接记录日志的方式，可以在每一次命令操作后持久化数据</p><p>使用AOF进行持久化操作的方式是编辑配置文件redis.windows.conf，将appendonly no 修改为appendonly yes（表示开启AOF持久化）</p><p>AOF持久化有三种可以选择的持久化方案</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">appendfsync always  //每次命令操作都进行持久化</span><br><span class="line">appendfsync everysec  //每隔一秒进行一次持久化操作</span><br><span class="line">appendfsync no   //不进行持久化操作</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaWeb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>24-JSON</title>
      <link href="/2021/03/04/24-JSON/"/>
      <url>/2021/03/04/24-JSON/</url>
      
        <content type="html"><![CDATA[<h1 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h1><p>JavaScript 对象表示法（JavaScript Object Notation）。如今主要用于做存储和交换文本信息的语法。类似 XML。JSON 比 XML 更小、更快，更易解析。</p><p>例如：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">&quot;employees&quot;</span>: [</span><br><span class="line">&#123; <span class="attr">&quot;firstName&quot;</span>:<span class="string">&quot;Bill&quot;</span> , <span class="attr">&quot;lastName&quot;</span>:<span class="string">&quot;Gates&quot;</span> &#125;,</span><br><span class="line">&#123; <span class="attr">&quot;firstName&quot;</span>:<span class="string">&quot;George&quot;</span> , <span class="attr">&quot;lastName&quot;</span>:<span class="string">&quot;Bush&quot;</span> &#125;,</span><br><span class="line">&#123; <span class="attr">&quot;firstName&quot;</span>:<span class="string">&quot;Thomas&quot;</span> , <span class="attr">&quot;lastName&quot;</span>:<span class="string">&quot;Carter&quot;</span> &#125;</span><br><span class="line">]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="JSON语法"><a href="#JSON语法" class="headerlink" title="JSON语法"></a>JSON语法</h3><p>JSON 语法是 JavaScript 对象表示法语法的子集。</p><ul><li>数据在名称/值对中：JSON数据由键值对构成（键在书写时引号可省略）<ul><li>JSON 值可以是：数字（整数或浮点数），字符串（在双引号中），逻辑值（true 或 false），数组（在方括号中），对象（在花括号中）<br>null</li></ul></li><li>数据由逗号分隔（对于多个键值对）</li><li>花括号保存对象</li><li>方括号保存数组</li></ul><h3 id="JSON值的获取"><a href="#JSON值的获取" class="headerlink" title="JSON值的获取"></a>JSON值的获取</h3><ul><li>json对象.键名 </li><li>json对象[“键名”]</li><li>数组对象[索引]</li></ul><p>注意：第一种获取方式键名不需要加引号，第二种获取方式需要加引号</p><h2 id="JSON数据与Java对象相互转换"><a href="#JSON数据与Java对象相互转换" class="headerlink" title="JSON数据与Java对象相互转换"></a>JSON数据与Java对象相互转换</h2><p>这种转换一般依赖于JSON解析器，常见的解析器有：Jsonlib,fastjson,Gson,jackson</p><h3 id="java对象转换为JSON数据"><a href="#java对象转换为JSON数据" class="headerlink" title="java对象转换为JSON数据"></a>java对象转换为JSON数据</h3><ol><li>导入响应jar包（jackson-annotations-2.9.9.jar，jackson-core-2.9.9.jar，jackson-databind-2.9.9.jar）</li><li>创建Jackson核心对象ObjectMapper</li><li>使用核心对象进行Java与JSON的转换</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">jacksonTest1</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//创建Person对象</span></span><br><span class="line">        Person p=<span class="keyword">new</span> Person(<span class="string">&quot;Leslie&quot;</span>,<span class="number">23</span>,<span class="string">&quot;man&quot;</span>);</span><br><span class="line">        <span class="comment">//创建Jackson的核心对象</span></span><br><span class="line">        ObjectMapper mapper=<span class="keyword">new</span> ObjectMapper();</span><br><span class="line">        <span class="comment">//将对象转换为JSON格式</span></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 转换函数有</span></span><br><span class="line"><span class="comment">         * writeValue():接收两个参数，第一个参数表示转换后的处理方式，第二个参数是要转换的对象</span></span><br><span class="line"><span class="comment">         *     参数1：</span></span><br><span class="line"><span class="comment">         *          File：将对象转换为JSON字符串，转化后的字符串保存到对应文件中去</span></span><br><span class="line"><span class="comment">         *          Writer：将对象转换为JSON字符串，并将数据填充到指定的字符输出流中</span></span><br><span class="line"><span class="comment">         *          OutputStream：将对象转换为JSON字符串，并将数据填充到指定的字节输出流中</span></span><br><span class="line"><span class="comment">         * writeValueAsString():将对象直接转换为JSON字符串</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        String person=mapper.writeValueAsString(p);</span><br><span class="line">        System.out.println(person);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//&#123;&quot;name&quot;:&quot;Leslie&quot;,&quot;age&quot;:23,&quot;gender&quot;:&quot;man&quot;&#125;</span></span><br></pre></td></tr></table></figure><h4 id="两个注解"><a href="#两个注解" class="headerlink" title="两个注解"></a>两个注解</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@JsonIgnore</span> <span class="comment">//表示转化为JSON数据时忽略该属性</span></span><br><span class="line"><span class="keyword">private</span> String gender;</span><br><span class="line"></span><br><span class="line"><span class="meta">@JsonFormat(pattern = &quot;yyyy-MM-dd&quot;)</span> <span class="comment">//表示转化为Json时按照指定格式格式化该属性</span></span><br><span class="line"><span class="keyword">private</span> Date birth;</span><br></pre></td></tr></table></figure><h3 id="Json数据转换为Java对象"><a href="#Json数据转换为Java对象" class="headerlink" title="Json数据转换为Java对象"></a>Json数据转换为Java对象</h3><ol><li>导入响应jar包（jackson-annotations-2.9.9.jar，jackson-core-2.9.9.jar，jackson-databind-2.9.9.jar）</li><li>创建Jackson核心对象ObjectMapper</li><li>使用核心对象进行Java与JSON的转换</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">jacksonTest2</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//创建Jackson的核心对象</span></span><br><span class="line">        ObjectMapper mapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">        <span class="comment">//将数据转为Java对象</span></span><br><span class="line">        <span class="comment">//第一个参数表示Json数据，第二个参数表示要转化为的对象</span></span><br><span class="line">        <span class="comment">//初始化Json字符串</span></span><br><span class="line">        String json=<span class="string">&quot;&#123;\&quot;name\&quot;:\&quot;Leslie\&quot;,\&quot;age\&quot;:23,\&quot;gender\&quot;:\&quot;man\&quot;&#125;&quot;</span>;</span><br><span class="line">        Person person=mapper.readValue(json,Person.class);</span><br><span class="line">        System.out.println(person.toString());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Person&#123;name=&#x27;Leslie&#x27;, age=23, gender=&#x27;man&#x27;&#125;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaWeb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>23-Ajax</title>
      <link href="/2021/03/04/23-Ajax/"/>
      <url>/2021/03/04/23-Ajax/</url>
      
        <content type="html"><![CDATA[<h1 id="AJAX"><a href="#AJAX" class="headerlink" title="AJAX"></a>AJAX</h1><p>异步和同步: 客户端和服务器端相互通信的基础上</p><p>同步：客户端必须等待服务器端的响应。在等待的期间客户端不能做其他操作。</p><p>异步：客户端不需要等待服务器端的响应。在服务器处理请求的过程中，客户端可以进行其他的操作。</p><p>Ajax是一种在无需重新加载整个网页的情况下，能够更新部分网页的技术。通过在后台与服务器进行少量数据交换，Ajax可以使网页实现异步更新。这意味着可以在不重新加载整个网页的情况下，对网页的某部分进行更新。传统的网页（不使用Ajax)如果需要更新内容，必须重载整个网页页面。提升用户的体验</p><h2 id="JS原生实现异步操作"><a href="#JS原生实现异步操作" class="headerlink" title="JS原生实现异步操作"></a>JS原生实现异步操作</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Ajax异步请求<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="keyword">function</span> <span class="title">func</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="comment">//发送异步请求</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">//创建关键对象</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> xmlhttp;</span></span><br><span class="line"><span class="javascript">            <span class="comment">//判断浏览器版本，根据版本不同，初始化对象方式不同</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">if</span> (<span class="built_in">window</span>.XMLHttpRequest)</span></span><br><span class="line"><span class="javascript">            &#123;<span class="comment">// code for IE7+, Firefox, Chrome, Opera, Safari</span></span></span><br><span class="line"><span class="javascript">                xmlhttp=<span class="keyword">new</span> XMLHttpRequest();</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">else</span></span></span><br><span class="line"><span class="javascript">            &#123;<span class="comment">// code for IE6, IE5</span></span></span><br><span class="line"><span class="javascript">                xmlhttp=<span class="keyword">new</span> ActiveXObject(<span class="string">&quot;Microsoft.XMLHTTP&quot;</span>);</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">            <span class="comment">//建立连接</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">/**</span></span></span><br><span class="line"><span class="comment"><span class="javascript">             * 参数：</span></span></span><br><span class="line"><span class="comment"><span class="javascript">             *     1. 请求方式：GET，POST</span></span></span><br><span class="line"><span class="comment"><span class="javascript">             *        GET:请求在URL后面拼接，send方法传空参</span></span></span><br><span class="line"><span class="comment"><span class="javascript">             *        POST:请求通过send方法传入，不在URL后拼接</span></span></span><br><span class="line"><span class="comment"><span class="javascript">             *     2. 请求的URL</span></span></span><br><span class="line"><span class="comment"><span class="javascript">             *     3. 是否采用异步请求</span></span></span><br><span class="line"><span class="comment"><span class="javascript">             */</span></span></span><br><span class="line"><span class="javascript">            xmlhttp.open(<span class="string">&quot;GET&quot;</span>,<span class="string">&quot;AjaxServlet1?username=Tom&quot;</span>,<span class="literal">true</span>);</span></span><br><span class="line"><span class="javascript">            <span class="comment">//发送异步请求</span></span></span><br><span class="line"><span class="javascript">            xmlhttp.send();</span></span><br><span class="line"><span class="javascript">            <span class="comment">//接收并处理来自服务器的响应结果</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">//判断xmlhttp对象的响应状态，处于就绪状态时再执行后续操作</span></span></span><br><span class="line"><span class="javascript">            xmlhttp.onreadystatechange=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span></span></span><br><span class="line"><span class="function"><span class="javascript">            </span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="comment">//判断就绪状态是否为4，只有为4时才能获取响应结果</span></span></span><br><span class="line"><span class="javascript">                <span class="comment">//同时判断响应状态码是否为200，200表示相应成功</span></span></span><br><span class="line"><span class="javascript">                <span class="comment">/**</span></span></span><br><span class="line"><span class="comment"><span class="javascript">                 0: 请求未初始化</span></span></span><br><span class="line"><span class="comment"><span class="javascript">                 1: 服务器连接已建立</span></span></span><br><span class="line"><span class="comment"><span class="javascript">                 2: 请求已接收</span></span></span><br><span class="line"><span class="comment"><span class="javascript">                 3: 请求处理中</span></span></span><br><span class="line"><span class="comment"><span class="javascript">                 4: 请求已完成，且响应已就绪</span></span></span><br><span class="line"><span class="comment"><span class="javascript">                 */</span></span></span><br><span class="line"><span class="javascript">                <span class="keyword">if</span> (xmlhttp.readyState==<span class="number">4</span> &amp;&amp; xmlhttp.status==<span class="number">200</span>)</span></span><br><span class="line"><span class="javascript">                &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="comment">//xmlhttp.responseText用于获取响应结果</span></span></span><br><span class="line"><span class="javascript">                    <span class="keyword">var</span> username=xmlhttp.responseText;</span></span><br><span class="line"><span class="javascript">                    <span class="comment">//显示结果</span></span></span><br><span class="line"><span class="javascript">                    alert(username);</span></span><br><span class="line"><span class="javascript">                &#125;</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">value</span>=<span class="string">&quot;异步请求&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;func()&quot;</span> <span class="attr">id</span>=<span class="string">&quot;b1&quot;</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;in1&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebServlet(&quot;/AjaxServlet1&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AjaxServlet1</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">//获取请求参数</span></span><br><span class="line">        String username=request.getParameter(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">        <span class="comment">//打印参数</span></span><br><span class="line">        System.out.println(username);</span><br><span class="line">        <span class="comment">//响应请求</span></span><br><span class="line">        response.getWriter().write(<span class="string">&quot;Hello :&quot;</span>+username);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.doPost(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="jQuery实现异步操作"><a href="#jQuery实现异步操作" class="headerlink" title="jQuery实现异步操作"></a>jQuery实现异步操作</h2><h4 id="ajax-：通用操作"><a href="#ajax-：通用操作" class="headerlink" title="$.ajax()：通用操作"></a>$.ajax()：通用操作</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Ajax异步请求<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;js/jquery-3.5.1.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="comment">//通过jQuery实现异步操作</span></span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="keyword">function</span> <span class="title">func</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="comment">//使用$.ajax()的方式发送异步请求</span></span></span><br><span class="line"><span class="javascript">            $.ajax(&#123;</span></span><br><span class="line"><span class="javascript">                <span class="attr">url</span>:<span class="string">&quot;AjaxServlet1&quot;</span>,<span class="comment">//请求路径</span></span></span><br><span class="line"><span class="javascript">                <span class="attr">type</span>:<span class="string">&quot;POST&quot;</span>,<span class="comment">//请求方式</span></span></span><br><span class="line"><span class="javascript">                <span class="attr">data</span>:&#123;<span class="string">&quot;username&quot;</span>:<span class="string">&quot;Jack&quot;</span>,<span class="string">&quot;age&quot;</span>:<span class="number">23</span>&#125;,<span class="comment">//请求参数</span></span></span><br><span class="line"><span class="javascript">                <span class="attr">success</span>:<span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                    alert(data);</span></span><br><span class="line"><span class="javascript">                &#125;<span class="comment">//响应成功后的回调函数</span></span></span><br><span class="line"><span class="javascript">            &#125;)</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">value</span>=<span class="string">&quot;异步请求&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;func()&quot;</span> <span class="attr">id</span>=<span class="string">&quot;b1&quot;</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;in1&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="get-post-用来发送get或post请求"><a href="#get-post-用来发送get或post请求" class="headerlink" title="$.get() $.post() 用来发送get或post请求"></a>$.get() $.post() 用来发送get或post请求</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Ajax异步请求<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;js/jquery-3.5.1.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="comment">//通过jQuery实现异步操作</span></span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="keyword">function</span> <span class="title">func</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="comment">//使用$.get()的方式发送异步请求</span></span></span><br><span class="line"><span class="javascript">            $.get(<span class="string">&quot;AjaxServlet1&quot;</span>,&#123;<span class="attr">username</span>:<span class="string">&quot;Leslie&quot;</span>&#125;,<span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                alert(data)</span></span><br><span class="line"><span class="javascript">            &#125;)</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">value</span>=<span class="string">&quot;异步请求&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;func()&quot;</span> <span class="attr">id</span>=<span class="string">&quot;b1&quot;</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;in1&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaWeb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>22-jQuery深入</title>
      <link href="/2021/03/04/22-jQuery%E6%B7%B1%E5%85%A5/"/>
      <url>/2021/03/04/22-jQuery%E6%B7%B1%E5%85%A5/</url>
      
        <content type="html"><![CDATA[<h1 id="jQuery中的DOM操作"><a href="#jQuery中的DOM操作" class="headerlink" title="jQuery中的DOM操作"></a>jQuery中的DOM操作</h1><h2 id="内容操作"><a href="#内容操作" class="headerlink" title="内容操作"></a>内容操作</h2><ul><li>html():获取/设置元素标签体中的内容</li><li>text():获取/设置元素标签体中的纯文本内容</li><li>val():获取/设置元素value属性值内容</li></ul><h2 id="属性操作"><a href="#属性操作" class="headerlink" title="属性操作"></a>属性操作</h2><h4 id="1-通用属性操作"><a href="#1-通用属性操作" class="headerlink" title="1. 通用属性操作"></a>1. 通用属性操作</h4><ul><li>attr():获取/设置元素属性，一般操作自定义属性</li><li>removeAttr():删除元素属性</li><li>prop():获取/设置元素属性，一般操作固有属性</li><li>removeProp():删除元素属性</li></ul><h4 id="2-对class属性操作"><a href="#2-对class属性操作" class="headerlink" title="2. 对class属性操作"></a>2. 对class属性操作</h4><ul><li>addClass():添加class属性值</li><li>removeClass():删除class属性值</li><li>taggleClass():切换class属性</li></ul><h2 id="CRUD操作"><a href="#CRUD操作" class="headerlink" title="CRUD操作"></a>CRUD操作</h2><ol><li>append():父元素将子元素追加到末尾<ul><li>对象1.append(对象2):将对象2添加到对象1元素内部，并且在末尾</li></ul></li><li>prepend():父元素将子元秦追加到开头<ul><li>对象1.prepend(对象2):将对象2添加到对象1元素内部，并且在开头</li></ul></li><li>appendTo():<ul><li>对象1.appendTo(对象2):将对象1添加到对象2内部，并且在未尾</li></ul></li><li>prependTo():<ul><li>对象1.prependTo(对象2):将对象1添加到对象2内部，并且在开头</li></ul></li><li>after():添加元秦到元素后边<ul><li>对象1.after(对象2):将对象2添加到对象1后边。对象1和对象2是兄弟关系</li></ul></li><li>before():添加元素到元秦前边<ul><li>对象1. before(对象2):将对象2添加到对象1前边。对象1和对象2是兄弟关系</li></ul></li><li>insertAfter()<ul><li>对象1.insertAfter(对象2):将对象2添加到对象1后边。对象1和对象2是兄弟关系</li></ul></li><li>insertBefore()<ul><li>对象1.insertBefore(对象2)∶将对象2添加到对象1前边。对象1和对象2是兄弟关系</li></ul></li><li>remove():移除元素<ul><li>对象.remove(:将对象删除掉</li></ul></li><li>empty():清空元素的所有后代元秦。<ul><li>对象.empty():将对象的后代元素全部清空，但是保留当前对象以及其属性节点</li></ul></li></ol><h1 id="jQuery中的动画操作"><a href="#jQuery中的动画操作" class="headerlink" title="jQuery中的动画操作"></a>jQuery中的动画操作</h1><h3 id="标签默认的显示与隐藏"><a href="#标签默认的显示与隐藏" class="headerlink" title="标签默认的显示与隐藏"></a>标签默认的显示与隐藏</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>jQuery动画练习<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;js/jquery-3.5.1.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="comment">/**</span></span></span><br><span class="line"><span class="comment"><span class="javascript">         * show,hide,taggle都可以接收三个参数</span></span></span><br><span class="line"><span class="comment"><span class="javascript">         * 第一个参数表示动画速度，可选slow,fast,normal也可输入毫秒数，可以省略</span></span></span><br><span class="line"><span class="comment"><span class="javascript">         * 第二个参数表示淡入/淡出方式，默认是swing，还有linear可选，可以省略</span></span></span><br><span class="line"><span class="comment"><span class="javascript">         * 第三个参数表示执行函数，函数会在动画时执行，每个元素执行一次</span></span></span><br><span class="line"><span class="comment"><span class="javascript">         */</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">//利用hide函数隐藏元素</span></span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="keyword">function</span> <span class="title">hideFunc</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            $(<span class="string">&quot;#div1&quot;</span>).hide(<span class="string">&quot;slow&quot;</span>,<span class="string">&quot;swing&quot;</span>,<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                alert(<span class="string">&quot;div1被隐藏...&quot;</span>);</span></span><br><span class="line"><span class="javascript">            &#125;)</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">        <span class="comment">//利用show方法显示元素</span></span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="keyword">function</span> <span class="title">showFunc</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            $(<span class="string">&quot;#div1&quot;</span>).show(<span class="string">&quot;slow&quot;</span>,<span class="string">&quot;swing&quot;</span>);</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">        <span class="comment">//taggle函数会修改标签显示状态</span></span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="keyword">function</span> <span class="title">changeFunc</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            $(<span class="string">&quot;#div1&quot;</span>).toggle(<span class="string">&quot;slow&quot;</span>);</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;点击隐藏&quot;</span> <span class="attr">id</span>=<span class="string">&quot;b1&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;hideFunc()&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;点击显示&quot;</span> <span class="attr">id</span>=<span class="string">&quot;b2&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;showFunc()&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;切换状态&quot;</span> <span class="attr">id</span>=<span class="string">&quot;b3&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;changeFunc()&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;div1&quot;</span>&gt;</span>hello world!<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>此外还有类似功能的slideDown,slideUp,slideTaggle表示滑动显示或隐藏</p><p>以及fadeIn,fadeOut,fadeTaggle表示淡入淡出</p><h1 id="jQuery中的遍历操作"><a href="#jQuery中的遍历操作" class="headerlink" title="jQuery中的遍历操作"></a>jQuery中的遍历操作</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;js/jquery-3.5.1.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    $(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="comment">//获取对象</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> cities=$(<span class="string">&quot;#city li&quot;</span>);</span></span><br><span class="line"><span class="javascript">        alert(cities);</span></span><br><span class="line"><span class="javascript">        <span class="comment">//JS遍历方式</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;cities.length;i++)&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> name=cities[i].innerHTML;</span></span><br><span class="line"><span class="javascript">            alert(name);</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">        <span class="comment">//jQuery方式遍历</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">//第一种方式</span></span></span><br><span class="line"><span class="javascript">        cities.each(<span class="function"><span class="keyword">function</span> (<span class="params">index,element</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="comment">//index表示索引值，element是每次遍历得到的元素对象</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">//index,element可以省略不写，此时可以通过this获取对象，但不能获取索引值</span></span></span><br><span class="line"><span class="javascript">            alert(index+<span class="string">&quot;:&quot;</span>+$(element).html());</span></span><br><span class="line"><span class="javascript">        &#125;);</span></span><br><span class="line"><span class="javascript">        <span class="comment">//第二种方式</span></span></span><br><span class="line"><span class="javascript">        $.each(cities,<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            alert($(<span class="built_in">this</span>).html());</span></span><br><span class="line"><span class="javascript">        &#125;);</span></span><br><span class="line"><span class="javascript">        <span class="comment">//第三种方式（jQuery3.0后才支持）</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">for</span>(city <span class="keyword">of</span> cities)&#123;</span></span><br><span class="line"><span class="javascript">            alert($(city).html());</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    &#125;)</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">&quot;city&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>北京<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>上海<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>广州<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>深圳<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>重庆<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="jQuery事件绑定"><a href="#jQuery事件绑定" class="headerlink" title="jQuery事件绑定"></a>jQuery事件绑定</h1><h3 id="标准绑定方式"><a href="#标准绑定方式" class="headerlink" title="标准绑定方式"></a>标准绑定方式</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">jQuery对象.事件方法(回调函数)</span><br><span class="line"></span><br><span class="line">//例如</span><br><span class="line">button.onClick(function()&#123;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="on绑定事件-off解除绑定"><a href="#on绑定事件-off解除绑定" class="headerlink" title="on绑定事件/off解除绑定"></a>on绑定事件/off解除绑定</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">jQuery对象.on(&quot;事件名称&quot;,回调函数)</span><br><span class="line"></span><br><span class="line">//例如</span><br><span class="line">button.on(&quot;click&quot;,function()&#123;</span><br><span class="line">&#125;)</span><br><span class="line">button.off(&quot;click&quot;)</span><br></pre></td></tr></table></figure><h3 id="事件切换-toggle"><a href="#事件切换-toggle" class="headerlink" title="事件切换 toggle"></a>事件切换 toggle</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jQuery对象.toggle(func1,func2,...)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaWeb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>21-jQuery基础+选择器</title>
      <link href="/2021/03/04/21-jQuery%E5%9F%BA%E7%A1%80-%E9%80%89%E6%8B%A9%E5%99%A8/"/>
      <url>/2021/03/04/21-jQuery%E5%9F%BA%E7%A1%80-%E9%80%89%E6%8B%A9%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="jQuery框架"><a href="#jQuery框架" class="headerlink" title="jQuery框架"></a>jQuery框架</h1><p>jQuery是开源软件，使用MIT许可证授权。 jQuery的语法设计使得许多操作变得容易，如操作文档对象（document）、选择文档对象模型（DOM）元素、创建动画效果、处理事件、以及开发Ajax程序。jQuery也提供了给开发人员在其上创建插件的能力。这使开发人员可以对底层交互与动画、高级效果和高级主题化的组件进行抽象化。模块化的方式使jQuery函数库能够创建功能强大的动态网页以及网络应用程序。</p><h4 id="简单演示"><a href="#简单演示" class="headerlink" title="简单演示"></a>简单演示</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;js/jquery-3.5.1.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;div1&quot;</span>&gt;</span>div1...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;div2&quot;</span>&gt;</span>div2...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="comment">//通过JS的方式获取所有div标签</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> divs=<span class="built_in">document</span>.getElementsByTagName(<span class="string">&quot;div&quot;</span>);</span></span><br><span class="line"><span class="javascript">    <span class="comment">//遍历标签集合，修改标签内容</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;divs.length;i++)&#123;</span></span><br><span class="line"><span class="javascript">        divs[i].innerHTML=<span class="string">&quot;hello div!&quot;</span>;</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript">    <span class="comment">//通过Jquery方式获取所有div标签</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> $divs=$(<span class="string">&quot;div&quot;</span>);</span></span><br><span class="line"><span class="javascript">    <span class="comment">//通过Jquery方式遍历标签集合并修改内容</span></span></span><br><span class="line"><span class="javascript">    $divs.html(<span class="string">&quot;hi div!&quot;</span>);</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="JS与Jquery对象之间的转化"><a href="#JS与Jquery对象之间的转化" class="headerlink" title="JS与Jquery对象之间的转化"></a>JS与Jquery对象之间的转化</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;js/jquery-3.5.1.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;div1&quot;</span>&gt;</span>div1...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;div2&quot;</span>&gt;</span>div2...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="comment">//通过JS的方式获取所有div标签</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> divs=<span class="built_in">document</span>.getElementsByTagName(<span class="string">&quot;div&quot;</span>);</span></span><br><span class="line"><span class="javascript">    <span class="comment">//通过Jquery方式获取所有div标签</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> $divs=$(<span class="string">&quot;div&quot;</span>);</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="comment">//JS对象转化为Jquery对象,直接在变量名前加$()即可</span></span></span><br><span class="line"><span class="javascript">    $(divs)</span></span><br><span class="line"><span class="javascript">    <span class="comment">//Jquery对象转化为JS对象，可以利用索引值，也可以利用get方法</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> div1=$divs.get(<span class="number">0</span>);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> div2=$divs[<span class="number">1</span>];</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Jquery选择器"><a href="#Jquery选择器" class="headerlink" title="Jquery选择器"></a>Jquery选择器</h2><p>用于筛选具有相似特征的元素</p><h3 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h3><h4 id="1-事件绑定"><a href="#1-事件绑定" class="headerlink" title="1. 事件绑定"></a>1. 事件绑定</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>事件绑定<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;js/jquery-3.5.1.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;click&quot;</span> <span class="attr">id</span>=<span class="string">&quot;b1&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="comment">//获取按钮</span></span></span><br><span class="line"><span class="javascript">    $(<span class="string">&quot;#b1&quot;</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        alert(<span class="string">&quot;hello&quot;</span>);</span></span><br><span class="line"><span class="javascript">    &#125;)</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2-入口函数"><a href="#2-入口函数" class="headerlink" title="2. 入口函数"></a>2. 入口函数</h4><p>入口函数即指首先加载的内容</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>事件绑定<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;js/jquery-3.5.1.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="comment">//入口函数，始终先于其他内容执行</span></span></span><br><span class="line"><span class="javascript">    $(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        alert(<span class="string">&quot;执行页面加载前的准备工作&quot;</span>)</span></span><br><span class="line"><span class="javascript">    &#125;)</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;click&quot;</span> <span class="attr">id</span>=<span class="string">&quot;b1&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="3-CSS样式控制"><a href="#3-CSS样式控制" class="headerlink" title="3. CSS样式控制"></a>3. CSS样式控制</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>事件绑定<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;js/jquery-3.5.1.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    $(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="comment">//进行CSS样式控制</span></span></span><br><span class="line"><span class="javascript">        $(<span class="string">&quot;#div1&quot;</span>).css(<span class="string">&quot;background-color&quot;</span>,<span class="string">&quot;red&quot;</span>);</span></span><br><span class="line"><span class="javascript">    &#125;)</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;div1&quot;</span>&gt;</span>hello world<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="基本选择器"><a href="#基本选择器" class="headerlink" title="基本选择器"></a>基本选择器</h3><ul><li>标签选择器（元素选择器）：获得所有匹配标签名称的选择器<ul><li>$(“HTML标签名”)</li></ul></li><li>ID选择器：获得所有与指定ID值匹配的元素<ul><li>$(“#ID的属性值”)</li></ul></li><li>类选择器：获得所有与指定类(class)相同的元素<ul><li>$(“.class”)  </li></ul></li><li>并集选择器：获得多个选择器所选中的元素<ul><li>$(“选择器1,选择器2,…”)</li></ul></li></ul><h3 id="层级选择器"><a href="#层级选择器" class="headerlink" title="层级选择器"></a>层级选择器</h3><ul><li>后代选择器：会选择A标签下所有与B标签相一致的元素（包括子辈与孙辈等等）<ul><li>$(“A B”)</li></ul></li><li>子选择器：会选择A标签下所有与B标签相一致的子辈元素（不包括子辈以外的元素）<ul><li>$(“A &gt; B”)</li></ul></li></ul><h3 id="属性选择器"><a href="#属性选择器" class="headerlink" title="属性选择器"></a>属性选择器</h3><ul><li>属性名称选择器：只要包含指定属性名称都会被选择(A是标签名称)<ul><li>$(“A[属性名]”)  </li></ul></li><li>属性选择器：选择所有包含对应属性，且属性值与规定相同的元素<ul><li>$(“A[属性名=’属性值’]”)</li></ul></li><li>复合属性选择器：包含多个属性选择器<ul><li>$(“A[属性名1=’属性值1’][属性名2=’属性值2’]…”)</li></ul></li></ul><h3 id="过滤选择器"><a href="#过滤选择器" class="headerlink" title="过滤选择器"></a>过滤选择器</h3><ul><li>首元素选择器：获得选择元素中的第一个元素<ul><li>$(“选择器:first”)</li><li>例如：$(“div:first”) $(“#id:first”)</li></ul></li><li>尾元素选择器：获得选择元素中的最后一个元素<ul><li>$(“选择器:last”)</li><li>例如：$(“div:last”) $(“#id:last”)</li></ul></li><li>非元素选择器：不包括指定内容的元素<ul><li>$(“选择器:not(selector)”)</li></ul></li><li>偶数选择器，奇数选择器（从0开始计数）<ul><li>$(“选择器:even”)  $(“选择器:odd”)</li></ul></li><li>等于索引选择器：指定索引元素<ul><li>$(“选择器:eq(index)”)</li></ul></li><li>大于索引选择器：所有大于指定索引的元素<ul><li>$(“选择器:gt(index)”)</li></ul></li><li>小于索引选择器：所有小于指定索引的元素<ul><li>$(“选择器:lt(index)”)</li></ul></li><li>标题选择器：获得标题元素，固定写法<ul><li>$(“选择器:header”)</li></ul></li></ul><h3 id="表单过滤选择器"><a href="#表单过滤选择器" class="headerlink" title="表单过滤选择器"></a>表单过滤选择器</h3><ul><li>可用元素选择器：获得所有可用元素<ul><li>$(“选择器:enabled”)</li></ul></li><li>不可用元素选择器：获得所有不可用元素<ul><li>$(“选择器:disabled”)</li></ul></li><li>选中选择器：获得单选/复选框所有选中的元素<ul><li>$(“选择器:checked”)</li></ul></li><li>选中选择器：获得下拉列表框中选中元素<ul><li>$(“选择器:selected”)</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaWeb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>20-Listener监听器</title>
      <link href="/2021/03/04/20-Listener%E7%9B%91%E5%90%AC%E5%99%A8/"/>
      <url>/2021/03/04/20-Listener%E7%9B%91%E5%90%AC%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="Listener监听器"><a href="#Listener监听器" class="headerlink" title="Listener监听器"></a>Listener监听器</h1><h4 id="事件的监听机制"><a href="#事件的监听机制" class="headerlink" title="事件的监听机制"></a>事件的监听机制</h4><ul><li>事件：一件事务</li><li>事件源：事件发生地点</li><li>监听器：一个监听器对象</li><li>注册监听：将事件，事件源，监听器，绑定在一起，当事件源上某事件发生时，执行监听代码</li></ul><h3 id="ServletContextListener"><a href="#ServletContextListener" class="headerlink" title="ServletContextListener"></a>ServletContextListener</h3><p>监听ServletContext对象的创建和销毁</p><ul><li>void contextDestroyed(ServletContextEvent sce)：ServletContext对象被销毁前会调用该方法</li><li>void contextInitialized(ServletContextEvent sce)：ServletContext对象被创建时会调用该方法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebListener</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ListerDemo1</span> <span class="keyword">implements</span> <span class="title">ServletContextListener</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * ServletContext对象被创建时会调用该方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> servletContextEvent</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextInitialized</span><span class="params">(ServletContextEvent servletContextEvent)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//一般用于加载资源文件</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * ServletContext对象被销毁前会调用该方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> servletContextEvent</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextDestroyed</span><span class="params">(ServletContextEvent servletContextEvent)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//一般用于释放资源</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="配置方式"><a href="#配置方式" class="headerlink" title="配置方式"></a>配置方式</h3><ul><li>注解配置：直接在类前加上注解@WebListener即可</li><li>web.xml配置：</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>cn.ywrby.Listener.ListerDemo1<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaWeb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>19-Filter过滤器</title>
      <link href="/2021/03/04/19-Filter%E8%BF%87%E6%BB%A4%E5%99%A8/"/>
      <url>/2021/03/04/19-Filter%E8%BF%87%E6%BB%A4%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="Filter"><a href="#Filter" class="headerlink" title="Filter"></a>Filter</h1><p>当访问服务器资源时，过滤器可以将请求提前拦截下来，完成一些特殊的操作。一般用于完成通用操作（检查是否登录，统一编码处理，敏感词汇处理等…）</p><h4 id="创建步骤"><a href="#创建步骤" class="headerlink" title="创建步骤"></a>创建步骤</h4><ol><li>定义类，实现Filter接口</li><li>复写方法</li><li>配置拦截路径（1. 通过web.xml 2. 通过注解@WebFilter）<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebFilter(&quot;/index.jsp&quot;)</span>  <span class="comment">//配置拦截路径，访问index.jsp前会进行过滤（&quot;/*&quot;表示访问所有资源前均过滤）</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FilterDemo1</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 服务器启动后，会调用init方法，创建Filter对象，只执行一次</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> filterConfig</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> ServletException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 在每一次请求被拦截的资源时执行，执行多次</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> servletRequest</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> servletResponse</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> filterChain</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> ServletException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">        <span class="comment">//对请求request进行特殊操作</span></span><br><span class="line">        System.out.println(<span class="string">&quot;对request进行操作...&quot;</span>);</span><br><span class="line">        <span class="comment">//放行</span></span><br><span class="line">        filterChain.doFilter(servletRequest,servletResponse);</span><br><span class="line">        <span class="comment">//对响应response进行操作</span></span><br><span class="line">        System.out.println(<span class="string">&quot;对response进行操作...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 在服务器关闭时销毁Filter对象，在服务器正常关闭的情况下执行，只执行一次</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p><strong>第二种配置方法：通过web.xml(url-pattern处写拦截路径)</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>FilterDemo1<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>cn.ywrby.Filter.FilterDemo1<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>FilterDemo1<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/index.jsp<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="过滤器执行流程"><a href="#过滤器执行流程" class="headerlink" title="过滤器执行流程"></a>过滤器执行流程</h3><p><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/filter.jpg" alt="filter"><br>一次请求会两次经过Filter，request和response都会经由过滤器处理。在执行放行流程filterChain.doFilter(servletRequest,servletResponse)之前，一般对request进行特殊操作，在执行放行流程之后，一般对响应response进行操作</p><h3 id="拦截路径配置的四种写法"><a href="#拦截路径配置的四种写法" class="headerlink" title="拦截路径配置的四种写法"></a>拦截路径配置的四种写法</h3><ol><li>具体资源路径：”/index.jsp” 只有访问具体路径资源时，才会调用过滤器</li><li>拦截目录：”/user/*” 访问user目录下所有资源时，都会调用过滤器</li><li>后缀名拦截：”*.jsp” 注意这种写法没有“/”,访问所有后缀名为.jsp的资源时都会调用过滤器</li><li>拦截所有资源：”/*” 访问所有资源都会调用过滤器</li></ol><h3 id="拦截方式配置"><a href="#拦截方式配置" class="headerlink" title="拦截方式配置"></a>拦截方式配置</h3><p>拦截方式是指资源被访问的方式</p><h4 id="注解配置"><a href="#注解配置" class="headerlink" title="注解配置"></a>注解配置</h4><p>通过设置dispatcherTypes属性</p><ul><li>REQUEST：默认值，浏览器直接请求资源</li><li>FORWORD：转发访问资源</li><li>INCLUDE：包含访问资源</li><li>ERROR：错误跳转资源</li><li>ASYNC：异步访问资源</li></ul><p>例如我们设置dispatcherTypes属性值为FORWARD则表示只有通过转发访问资源的方式才能够通过过滤器</p><p>我们将dispatcherTypes属性值设为REQUEST</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//dispatcherTypes = DispatcherType.REQUEST 表示浏览器直接请求资源时，该过滤器会被执行</span></span><br><span class="line"><span class="meta">@WebFilter(value = &quot;/index.jsp&quot;,dispatcherTypes = DispatcherType.REQUEST)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FilterDemo2</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest req, ServletResponse resp, FilterChain chain)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;FilterDemo2正常执行...&quot;</span>);</span><br><span class="line">        chain.doFilter(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(FilterConfig config)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>TextDemo1可以转发访问index.jsp</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebServlet(&quot;/TextDemo1&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TextDemo1</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;TextDemo1正常执行...&quot;</span>);</span><br><span class="line">        <span class="comment">//转发到index.jsp</span></span><br><span class="line">        request.getRequestDispatcher(<span class="string">&quot;/index.jsp&quot;</span>).forward(request,response);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.doPost(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>index.jsp被访问时在控制台输出内容</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; language=&quot;java&quot; %&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>测试用例<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  &lt;%System.out.println(&quot;index.jsp执行...&quot;);%&gt;</span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>hi JSP!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>当直接访问index.jsp时，过滤器正常执行</p><p><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/%E7%9B%B4%E6%8E%A5%E8%AE%BF%E9%97%AE.jpg" alt="直接访问"></p><p>当通过TextDemo1转发访问index.jsp时，过滤器没有被调用</p><p><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/%E8%BD%AC%E5%8F%91%E8%AE%BF%E9%97%AE.jpg" alt="转发访问"></p><h4 id="web-xml配置"><a href="#web-xml配置" class="headerlink" title="web.xml配置"></a>web.xml配置</h4><p>通过web.xml中的dispatcher标签也可以定义拦截方式</p><h3 id="过滤器链"><a href="#过滤器链" class="headerlink" title="过滤器链"></a>过滤器链</h3><p>要注意过滤器链的执行顺序<br><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/%E6%8B%A6%E6%88%AA%E5%99%A8%E9%93%BE.jpg" alt="拦截器链"></p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaWeb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>18-MVC开发模式</title>
      <link href="/2021/03/04/18-MVC%E5%BC%80%E5%8F%91%E6%A8%A1%E5%BC%8F/"/>
      <url>/2021/03/04/18-MVC%E5%BC%80%E5%8F%91%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="MVC开发模式"><a href="#MVC开发模式" class="headerlink" title="MVC开发模式"></a>MVC开发模式</h1><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>经典MVC（Model View Controller）模式中，M是指业务模型，V是指用户界面，C则是控制器，使用MVC的目的是将M和V的实现代码分离，从而使同一个程序可以使用不同的表现形式。其中，View的定义比较清晰，就是用户界面。</p><h3 id="M（Model）"><a href="#M（Model）" class="headerlink" title="M（Model）"></a>M（Model）</h3><p>模型，主要通过JavaBean实现。完成具体的业务操作（例如数据库的增删改查，对象的封装）</p><h3 id="V（View）"><a href="#V（View）" class="headerlink" title="V（View）"></a>V（View）</h3><p>视图，主要通过JSP实现。用于展示数据</p><h3 id="C（Controller）"><a href="#C（Controller）" class="headerlink" title="C（Controller）"></a>C（Controller）</h3><p>控制器，主要通过Servlet实现。用于获取用户输入，调用模型，以及将数据交给视图进行展示</p><h3 id="MVC优点"><a href="#MVC优点" class="headerlink" title="MVC优点"></a>MVC优点</h3><ul><li>耦合性低，方便维护，利于分工协作</li><li>代码重用性高</li></ul><h3 id="MVC缺点"><a href="#MVC缺点" class="headerlink" title="MVC缺点"></a>MVC缺点</h3><ul><li>项目架构复杂，对操作人员要求提高</li></ul>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaWeb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>17-Session</title>
      <link href="/2021/03/04/17-Session/"/>
      <url>/2021/03/04/17-Session/</url>
      
        <content type="html"><![CDATA[<h1 id="Session"><a href="#Session" class="headerlink" title="Session"></a>Session</h1><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>服务器端会话技术，再一次对话的多次请求间共享数据，数据存储在服务器端的对象中（HttpSession）</p><h3 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h3><ol><li>获取HttpSession对象 <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HttpSession session=request.getSession();</span><br></pre></td></tr></table></figure></li><li>使用HttpSession对象<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//存储数据</span></span><br><span class="line">session.setAttribute(<span class="string">&quot;msg&quot;</span>,<span class="string">&quot;hello_world&quot;</span>);</span><br><span class="line"><span class="comment">//获取数据</span></span><br><span class="line">Object msg=session.getAttribute(<span class="string">&quot;msg&quot;</span>);</span><br><span class="line"><span class="comment">//移除数据</span></span><br><span class="line">session.removeAttribute(<span class="string">&quot;msg&quot;</span>);</span><br></pre></td></tr></table></figure><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3></li></ol><p><strong>Session的实现依赖于Cookie</strong>，在一次会话中，第一次请求Session的过程中，服务器端会创建一个Cookie对象，用来存储该Session的ID，并写入响应头返回到客户端，在客户端下次访问时，服务器端检测到该Cookie并读取Session的ID，就能够在浏览器端找到该Session并返回客户端</p><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><ol><li>客户端关闭后，服务器端不关闭的情况下，两次获取的Session默认情况下不是同一个，也就不能共享数据（这是因为客户端关闭，代表一次会话结束，同时携带JSESSIONID的cookie也被销毁，所以Session失效）</li><li>通过创建一个同名Cookie并设置Cookie的持久化处理，可以解决上面的问题<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取Session</span></span><br><span class="line">HttpSession session=request.getSession();</span><br><span class="line"><span class="comment">//创建JSESSIONID的Cookie 设置最大存活时间</span></span><br><span class="line">Cookie cookie=<span class="keyword">new</span> Cookie(<span class="string">&quot;JSESSIONID&quot;</span>,session.getId());</span><br><span class="line">cookie.setMaxAge(<span class="number">60</span>*<span class="number">60</span>);</span><br><span class="line">response.addCookie(cookie);</span><br><span class="line"><span class="comment">//存储数据</span></span><br><span class="line">session.setAttribute(<span class="string">&quot;msg&quot;</span>,<span class="string">&quot;hello_world&quot;</span>);</span><br></pre></td></tr></table></figure></li><li>服务器端关闭的情况下，两次获取的Session对象不是同一个，但要保证数据不丢失，所以服务器端会进行Session的钝化与活化<ul><li>Session的钝化：在服务器正常关闭之前，将服务器上的Session对象序列化到硬盘中</li><li>Session的活化：在服务器启动后，将硬盘中的Session文件转化为内存中的Session对象</li></ul></li><li>Session被销毁的情况<ul><li>服务器关闭</li><li>session对象调用invalidate方法</li><li>session默认失效时间30min</li></ul></li></ol><h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><ol><li>session用于存储一次会话的多次请求的数据，存储在服务器端</li><li>session可以存储任意类型，任意大小的数据</li></ol><h3 id="Session与Cookie的区别"><a href="#Session与Cookie的区别" class="headerlink" title="Session与Cookie的区别"></a>Session与Cookie的区别</h3><ol><li>Session存储数据在服务器端，Cookie在客户端</li><li>Session对存储数据的类型和大小没有限制，Cookie有限制</li><li>Session更安全，Cookie相对而言不安全</li></ol>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaWeb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>16-JSP基础</title>
      <link href="/2021/03/04/16-JSP%E5%9F%BA%E7%A1%80/"/>
      <url>/2021/03/04/16-JSP%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h1 id="JSP"><a href="#JSP" class="headerlink" title="JSP"></a>JSP</h1><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>Java Server Pages:Java服务器端页面，在该页面中既可以定义Java代码，也可以定义html标签，主要用于简化书写</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; language=&quot;java&quot; %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">    &lt;title&gt;测试用例&lt;/title&gt;</span><br><span class="line">  &lt;/head&gt;</span><br><span class="line">  &lt;body&gt;</span><br><span class="line">    &lt;%System.out.println(&quot;hello JSP!&quot;);%&gt;</span><br><span class="line">    &lt;p&gt;hi JSP!&lt;/p&gt;</span><br><span class="line">  &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p><strong>JSP本质上还是Java中的Servlet，因为只有Servlet能够提供文件访问</strong></p><p><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/index_jsp.jpg" alt="index_jsp"></p><h3 id="JSP脚本"><a href="#JSP脚本" class="headerlink" title="JSP脚本"></a>JSP脚本</h3><p>JSP中共有三种定义Java代码的方法，每种定义方法均有不同作用，经过编译并形成最终的.class文件时自动生成的位置也不相同</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">//定义的Java代码，在service方法中生成</span><br><span class="line">//service方法中可以定义什么，这种方法就可以写什么</span><br><span class="line">&lt;% code %&gt;</span><br><span class="line">&lt;% System.out.println(&quot;hello&quot;); %&gt; </span><br><span class="line"></span><br><span class="line">//定义的Java方法，在JSP转换后的成员位置</span><br><span class="line">//可以定义成员变量或成员方法</span><br><span class="line">&lt;%! code %&gt;</span><br><span class="line">&lt;%! int num=100; %&gt;</span><br><span class="line"></span><br><span class="line">//定义的Java代码，会输出到页面上</span><br><span class="line">//输出语句可以定义什么,代码就可以定义什么</span><br><span class="line">&lt;%= code %&gt;</span><br><span class="line">&lt;%= &quot;hello&quot; %&gt;</span><br></pre></td></tr></table></figure><h3 id="JSP内置对象"><a href="#JSP内置对象" class="headerlink" title="JSP内置对象"></a>JSP内置对象</h3><p>在JSP页面中，不需要获取和创建就可以直接使用的对象。JSP中共有9个内置对象（request,response,out…）</p><p>其中的out对象本质是字符输出流对象，其作用类似于response.getWriter()主要用于将字符输出到页面</p><p>out.write()和response.getWriter().write()的作用还是存在细微差距，由于二者缓冲区不一致，在Tomcat服务器中，始终会首先访问response的缓冲区再访问out缓冲区，所以导致response的输出始终先于out输出，无论二者在代码中的位置，所以一般情况下，都会统一采用一种输出方式</p><h2 id="JSP指令"><a href="#JSP指令" class="headerlink" title="JSP指令"></a>JSP指令</h2><h4 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h4><p>用于配置JSP页面，导入资源文件</p><h4 id="格式"><a href="#格式" class="headerlink" title="格式"></a>格式</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ 指令名 属性名1=属性值1 属性名2=属性值2 ... %&gt;</span><br></pre></td></tr></table></figure><h4 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h4><ul><li>page:配置JSP页面</li><li>include:页面包含的，导入页面的资源文件</li><li>taglib:导入资源</li></ul><h4 id="page指令常用属性"><a href="#page指令常用属性" class="headerlink" title="page指令常用属性"></a>page指令常用属性</h4><ul><li>contentType:作用等同于response.setContentType(),作用为设置响应体的MIME类型和字符集以及设置当前JSP页面编码</li><li>import:用于导入相应包</li><li>errorPage:表示当前页面发生异常后，会自动跳转到指定的页面</li><li>isErrorPage:用于标识当前页面是否为异常跳转页面，如果是，则该页面可以通过内置对象exception获取跳转来的页面的报错信息</li></ul><p><strong>可能发生报错的页面</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; errorPage=&quot;JspDemo2.jsp&quot; language=&quot;java&quot; %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;% int i=3/0; %&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p><strong>响应报错的页面</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; isErrorPage=&quot;true&quot; language=&quot;java&quot; %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h1&gt;</span><br><span class="line">    网页错误！错误原因：</span><br><span class="line">&lt;/h1&gt;</span><br><span class="line">&lt;% String e=exception.getMessage(); %&gt;</span><br><span class="line">&lt;% out.write(e); %&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h4 id="JSP注释方法"><a href="#JSP注释方法" class="headerlink" title="JSP注释方法"></a>JSP注释方法</h4><ol><li>HTML注释：<!-- --> 只能注释HTML内容</li><li>JSP注释：&lt;%– –%&gt; Java代码与HTML标签都可以注释</li></ol><h2 id="JSP中的9个内置对象"><a href="#JSP中的9个内置对象" class="headerlink" title="JSP中的9个内置对象"></a>JSP中的9个内置对象</h2><table><thead><tr><th>变量名</th><th>真实类型</th><th>主要作用</th></tr></thead><tbody><tr><td>pageContext</td><td>PageContext</td><td>当前页面内共享数据，还可以获取其他八个内置对象</td></tr><tr><td>request</td><td>HttpServletRequest</td><td>一次请求访问多个资源</td></tr><tr><td>response</td><td>HttpServletResponse</td><td>响应对象</td></tr><tr><td>session</td><td>HttpSession</td><td>一次会话的多个请求间</td></tr><tr><td>application</td><td>ServletContext</td><td>所有用户间共享数据</td></tr><tr><td>page</td><td>Object</td><td>当前页面（Servlet）的对象，this</td></tr><tr><td>out</td><td>JspWriter</td><td>输出对象，将内容输出到页面上</td></tr><tr><td>config</td><td>ServletConfig</td><td>Servlet配置对象</td></tr><tr><td>exception</td><td>Throwable</td><td>异常对象</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaWeb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>15-会话技术与Cookie</title>
      <link href="/2021/03/04/15-%E4%BC%9A%E8%AF%9D%E6%8A%80%E6%9C%AF%E4%B8%8Ecookie/"/>
      <url>/2021/03/04/15-%E4%BC%9A%E8%AF%9D%E6%8A%80%E6%9C%AF%E4%B8%8Ecookie/</url>
      
        <content type="html"><![CDATA[<h1 id="会话技术"><a href="#会话技术" class="headerlink" title="会话技术"></a>会话技术</h1><h3 id="会话"><a href="#会话" class="headerlink" title="会话"></a>会话</h3><p>一次会话中包含多次请求和相应，浏览器第一次给服务器资源发送请求，会话建立，直到有一方断开为止，会话结束</p><h3 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h3><p>再一次会话范围内的多次请求间共享数据</p><h3 id="方式"><a href="#方式" class="headerlink" title="方式"></a>方式</h3><ul><li>客户端会话技术：Cookie</li><li>服务器端会话技术：Session</li></ul><h2 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h2><h3 id="概念："><a href="#概念：" class="headerlink" title="概念："></a>概念：</h3><p>客户端会话技术，将数据保存到客户端</p><h3 id="主要步骤"><a href="#主要步骤" class="headerlink" title="主要步骤:"></a>主要步骤:</h3><ol><li>创建Cookie对象，绑定数据<ul><li>new Cookie(String name,String value)</li></ul></li><li>发送Cookie对象<ul><li>response.addCookie(Cookie cookie)</li></ul></li><li>获取Cookie对象，拿到数据(getCookies方法获取全部Cookie并返回数组)<ul><li>request.getCookies()</li></ul></li></ol><h4 id="创建Cookie与发送"><a href="#创建Cookie与发送" class="headerlink" title="创建Cookie与发送"></a>创建Cookie与发送</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebServlet(&quot;/CookieServlet&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CookieServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">//创建Cookie对象</span></span><br><span class="line">        Cookie cookie=<span class="keyword">new</span> Cookie(<span class="string">&quot;msg&quot;</span>,<span class="string">&quot;hello_world&quot;</span>);</span><br><span class="line">        <span class="comment">//发送Cookie</span></span><br><span class="line">        response.addCookie(cookie);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.doPost(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="接收Cookie"><a href="#接收Cookie" class="headerlink" title="接收Cookie"></a>接收Cookie</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebServlet(&quot;/CookieServlet2&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CookieServlet2</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">//获取Cookie</span></span><br><span class="line">        Cookie[] cookies=request.getCookies();</span><br><span class="line">        <span class="comment">//遍历Cookies 获取Cookie值</span></span><br><span class="line">        <span class="keyword">if</span>(cookies!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">for</span>(Cookie cookie:cookies)&#123;</span><br><span class="line">                String name=cookie.getName();</span><br><span class="line">                String value=cookie.getValue();</span><br><span class="line">                System.out.println(name+<span class="string">&quot; : &quot;</span>+value);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.doPost(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h3><p>Cookie的发送是通过在客户端发送请求到服务器端的过程后，浏览器端在返回response时向响应头中添加set-cookie:name=value实现。Cookie的接收是通过客户端在向服务器端发送请求前向请求头中添加cookie:name=value来实现的。两个实现原理均是在遵循HTML协议的前提下所实现</p><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><ol><li>一次可以发送多个Cookie</li><li>cookie在浏览器中默认情况下在浏览器关闭后被销毁（保存在浏览器内存而不是本地）</li><li>在发送cookie时可以进行持久化存储的操作，保证在一段时间内，无论浏览器是否关闭，cookie都有效（保存在本地文件中）<ul><li>Cookie.setMaxAge(int seconds)</li><li>传入正数表示保存到秒数</li><li>传入0表示删除本地对应cookie信息</li><li>传入负数表示在浏览器关闭后销毁cookie</li></ul></li><li>Tomcat8之前不能存储中文cookie，Tomcat8之后可以存储中文cookie</li><li>默认情况下，同一个Tomcat服务器部署的不同web项目之间的cookie是不能进行共享的。cookie共享范围，默认情况下为当前虚拟目录。可以通过setPath(String path)修改默认共享范围</li><li>在不同Tomcat服务器部署的web项目中cookie也是可以设置共享的，利用setDomain(String path):如果设置的一级域名相同，那么多个服务器之间的cookie可以共享（例如：setDomain(“.baidu.com”)可以保证百度贴吧和百度体育之间的cookie共享）</li></ol><h3 id="Cookie特点与作用"><a href="#Cookie特点与作用" class="headerlink" title="Cookie特点与作用"></a>Cookie特点与作用</h3><ol><li>数据存储在客户端浏览器</li><li>浏览器对于cookie的大小以及同域名下cookie的数量都有限制</li><li>一般用来存储不太敏感的信息（例如在不登录的情况下，完成服务器对客户端身份的识别）</li></ol><p><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/cookie.jpg" alt="cookie"></p><h3 id="Cookie简单应用"><a href="#Cookie简单应用" class="headerlink" title="Cookie简单应用"></a>Cookie简单应用</h3><p>判断用户是否为初次访问当前页面，如果是则告知用户初次访问，如果不是，则显示用户上一次访问页面的时间</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.ywrby.Cookie;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.Cookie;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet(&quot;/CookieDemo1&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CookieDemo1</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        response.setContentType(<span class="string">&quot;text/html;charset=utf-8&quot;</span>);</span><br><span class="line">        <span class="comment">//获取所有cookie</span></span><br><span class="line">        Cookie[] cookies=request.getCookies();</span><br><span class="line">        <span class="comment">//是否找到lastTime的cookie</span></span><br><span class="line">        <span class="keyword">boolean</span> flag=<span class="keyword">false</span>;</span><br><span class="line">        <span class="comment">//遍历cookie列表判断是否访问过该网页</span></span><br><span class="line">        <span class="keyword">if</span>(cookies!=<span class="keyword">null</span>&amp;&amp;cookies.length&gt;<span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (Cookie cookie : cookies) &#123;</span><br><span class="line">                <span class="comment">//判断是否存在lastTime的cookie</span></span><br><span class="line">                <span class="keyword">if</span> (cookie.getName().equals(<span class="string">&quot;lastTime&quot;</span>)) &#123;</span><br><span class="line">                    <span class="comment">//存在该cookie表示之前访问过</span></span><br><span class="line">                    <span class="comment">//获取上次访问时间</span></span><br><span class="line">                    String t1=cookie.getValue();</span><br><span class="line">                    <span class="comment">//打印上次访问时间</span></span><br><span class="line">                    response.getWriter().write(<span class="string">&quot;&lt;h1&gt;欢迎再次访问，您上次访问时间是：&quot;</span>+t1+<span class="string">&quot;&lt;/h1&gt;&quot;</span>);</span><br><span class="line">                    <span class="comment">//获取当前时间</span></span><br><span class="line">                    Date date=<span class="keyword">new</span> Date();</span><br><span class="line">                    <span class="comment">//格式化时间数据</span></span><br><span class="line">                    SimpleDateFormat sdf=<span class="keyword">new</span> SimpleDateFormat(<span class="string">&quot;HH:mm:ss&quot;</span>);</span><br><span class="line">                    String t2=sdf.format(date);</span><br><span class="line">                    <span class="comment">//重新传值并传回response中</span></span><br><span class="line">                    cookie.setValue(t2);</span><br><span class="line">                    response.addCookie(cookie);</span><br><span class="line">                    <span class="comment">//修改flag值</span></span><br><span class="line">                    flag=<span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//未找到lastTime的cookie表示初次访问</span></span><br><span class="line">        <span class="keyword">if</span>(!flag||cookies==<span class="keyword">null</span>||cookies.length==<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="comment">//获取当前时间</span></span><br><span class="line">            Date date=<span class="keyword">new</span> Date();</span><br><span class="line">            SimpleDateFormat sdf=<span class="keyword">new</span> SimpleDateFormat(<span class="string">&quot;HH:mm:ss&quot;</span>);</span><br><span class="line">            String t=sdf.format(date);</span><br><span class="line">            <span class="comment">//创建cookie并传入response中</span></span><br><span class="line">            Cookie cookie=<span class="keyword">new</span> Cookie(<span class="string">&quot;lastTime&quot;</span>,t);</span><br><span class="line">            response.addCookie(cookie);</span><br><span class="line">            <span class="comment">//页面显示初次内容</span></span><br><span class="line">            response.getWriter().write(<span class="string">&quot;&lt;h1&gt;欢迎初次访问！&lt;/h1&gt;&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.doPost(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/cookie1.jpg" alt="cookie1"><br><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/cookie2.jpg" alt="cookie2"></p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaWeb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>14-下载案例</title>
      <link href="/2021/03/04/14-%E4%B8%8B%E8%BD%BD%E6%A1%88%E4%BE%8B/"/>
      <url>/2021/03/04/14-%E4%B8%8B%E8%BD%BD%E6%A1%88%E4%BE%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="下载案例"><a href="#下载案例" class="headerlink" title="下载案例"></a>下载案例</h1><h2 id="HTML文件"><a href="#HTML文件" class="headerlink" title="HTML文件"></a>HTML文件</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--定义超链接跳转到对应的Servlet并且携带文件名参数--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/DownloadTest/downloadServlet?filename=1.jpg&quot;</span>&gt;</span>点击下载图片1<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/DownloadTest/downloadServlet?filename=2.jpg&quot;</span>&gt;</span>点击下载图片2<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/DownloadTest/downloadServlet?filename=3.jpg&quot;</span>&gt;</span>点击下载图片3<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Servlet"><a href="#Servlet" class="headerlink" title="Servlet"></a>Servlet</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebServlet(&quot;/downloadServlet&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DownloadServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">//1. 获取请求参数（即文件名称）</span></span><br><span class="line">        String filename=request.getParameter(<span class="string">&quot;filename&quot;</span>);</span><br><span class="line">        <span class="comment">//2. 使用字节输入流加载文件进内存</span></span><br><span class="line">        <span class="comment">//2.1 获取文件真实路径</span></span><br><span class="line">        String path=<span class="keyword">this</span>.getServletContext().getRealPath(<span class="string">&quot;/img/&quot;</span>+filename);  <span class="comment">//通过ServletContext对象获取真实路径</span></span><br><span class="line">        <span class="comment">//2.2 加载进内存</span></span><br><span class="line">        FileInputStream fis=<span class="keyword">new</span> FileInputStream(path);</span><br><span class="line">        <span class="comment">//3. 设置响应头数据</span></span><br><span class="line">        <span class="comment">//3.1 设置content-type(需要利用ServletContext获取文件的MIME类型)</span></span><br><span class="line">        String mimeType=<span class="keyword">this</span>.getServletContext().getMimeType(filename);</span><br><span class="line">        response.setHeader(<span class="string">&quot;content-type&quot;</span>,mimeType);</span><br><span class="line">        <span class="comment">//3.2 设置content-disposition(文件的打开方式，以附件形式打开。filename属性表示保存文件的名称)</span></span><br><span class="line">        response.setHeader(<span class="string">&quot;content-disposition&quot;</span>,<span class="string">&quot;attachment;filename=&quot;</span>+filename);</span><br><span class="line">        <span class="comment">//4. 将文件内容（输入流）写入输出流中</span></span><br><span class="line">        ServletOutputStream sos=response.getOutputStream();</span><br><span class="line">        <span class="keyword">int</span> len=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">byte</span>[] buff=<span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>*<span class="number">8</span>];</span><br><span class="line">        <span class="keyword">while</span>((len=fis.read(buff))!=-<span class="number">1</span>)&#123;</span><br><span class="line">            sos.write(buff,<span class="number">0</span>,len);</span><br><span class="line">        &#125;</span><br><span class="line">        fis.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.doPost(request,response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaWeb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>13-ServletContext</title>
      <link href="/2021/03/04/13-ServletContext/"/>
      <url>/2021/03/04/13-ServletContext/</url>
      
        <content type="html"><![CDATA[<h1 id="ServletContext对象"><a href="#ServletContext对象" class="headerlink" title="ServletContext对象"></a>ServletContext对象</h1><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>代表整个web应用，可以和程序的容器进行通信</p><h3 id="ServletContext对象的获取"><a href="#ServletContext对象的获取" class="headerlink" title="ServletContext对象的获取"></a>ServletContext对象的获取</h3><ul><li>通过request对象获取：getServletContext()</li><li>通过HttpServlet获取：getServletContext()</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebServlet(&quot;/servletContextDemo1&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServletContextDemo1</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">//通过request直接获取</span></span><br><span class="line">        ServletContext sc1=request.getServletContext();</span><br><span class="line">        <span class="comment">//通过HttpServlet获取</span></span><br><span class="line">        ServletContext sc2=<span class="keyword">this</span>.getServletContext();</span><br><span class="line"></span><br><span class="line">        System.out.println(sc1==sc2); <span class="comment">//true</span></span><br><span class="line">        System.out.println(sc1);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.doPost(request,response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h2><h3 id="1-获取MIME类型"><a href="#1-获取MIME类型" class="headerlink" title="1. 获取MIME类型"></a>1. 获取MIME类型</h3><h4 id="MIME类型概念"><a href="#MIME类型概念" class="headerlink" title="MIME类型概念"></a>MIME类型概念</h4><p>在互联网通信过程中定义的一种文件数据类型，HTTP协议也遵循这种数据类型</p><h4 id="格式"><a href="#格式" class="headerlink" title="格式"></a>格式</h4><p>大类型/小类型，例如：</p><ul><li>text/html</li><li>image/jpeg</li></ul><h4 id="获取方式"><a href="#获取方式" class="headerlink" title="获取方式"></a>获取方式</h4><ul><li>getMimeType(String filename)</li></ul><h3 id="2-作为域对象-共享数据"><a href="#2-作为域对象-共享数据" class="headerlink" title="2. 作为域对象-共享数据"></a>2. 作为域对象-共享数据</h3><ul><li>setAttribute(String name,Object value)</li><li>getAttribute(String name)</li><li>removeAttribute(String name)</li></ul><h4 id="ServletContext对象的范围"><a href="#ServletContext对象的范围" class="headerlink" title="ServletContext对象的范围"></a>ServletContext对象的范围</h4><p>所有用户所有请求的数据</p><h3 id="3-获取文件的真实（服务器）路径"><a href="#3-获取文件的真实（服务器）路径" class="headerlink" title="3. 获取文件的真实（服务器）路径"></a>3. 获取文件的真实（服务器）路径</h3><p>这里获取的真实路径是指在程序运行在Tomcat服务器上时的文件路径，而不是指我们当前工作空间的真实路径</p><p>我们传入的路径是以web文件夹为基准的相对路径，这里需要注意，如果要获取与web文件夹同级的src文件夹中的文件，有两种方式，一种是采用类加载器的方式，局限性较大，另一种方式是当程序运行在Tomcat服务器上时，src中的内容会被放置在web文件夹下的WEB-INF文件夹中的classes文件夹中，可以通过这种相对关系来获取</p><h4 id="方法："><a href="#方法：" class="headerlink" title="方法："></a>方法：</h4><ul><li>String getRealPath(String path)</li></ul><h4 id="例如："><a href="#例如：" class="headerlink" title="例如："></a>例如：</h4><ul><li>获取web文件夹下的文件：getRealPath(“/a.txt”)</li><li>获取WEB-INF文件夹下的文件：getRealPath(“/WEB-INF/b.txt”)</li><li>获取src文件夹下的文件：getRealPath(“/WEB-INF/classes/c.txt”)</li></ul>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaWeb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>12-Request对象+Response对象</title>
      <link href="/2021/03/04/12-Request%E5%AF%B9%E8%B1%A1+Response%E5%AF%B9%E8%B1%A1/"/>
      <url>/2021/03/04/12-Request%E5%AF%B9%E8%B1%A1+Response%E5%AF%B9%E8%B1%A1/</url>
      
        <content type="html"><![CDATA[<h1 id="Request对象"><a href="#Request对象" class="headerlink" title="Request对象"></a>Request对象</h1><h2 id="request对象和response对象原理"><a href="#request对象和response对象原理" class="headerlink" title="request对象和response对象原理"></a>request对象和response对象原理</h2><ul><li>request对象和response对象是由服务器创建的，供程序员使用的对象</li><li>request对象是来获取请求信息的，response对象是来设置响应消息的</li></ul><h3 id="浏览器-amp-服务器请求响应过程"><a href="#浏览器-amp-服务器请求响应过程" class="headerlink" title="浏览器&amp;服务器请求响应过程"></a>浏览器&amp;服务器请求响应过程</h3><p><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/%E6%B5%8F%E8%A7%88%E5%99%A8%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%AF%B7%E6%B1%82%E5%93%8D%E5%BA%94%E8%BF%87%E7%A8%8B.jpg" alt="浏览器服务器请求响应过程"></p><h2 id="Request功能"><a href="#Request功能" class="headerlink" title="Request功能"></a>Request功能</h2><h3 id="获取请求消息数据"><a href="#获取请求消息数据" class="headerlink" title="获取请求消息数据"></a>获取请求消息数据</h3><ol><li>获取请求行数据<ul><li>String getMethod():获取请求方式GET/POST</li><li>String　getContextPath():获取虚拟目录</li><li>String getServletPath():获取Servlet路径</li><li>String getQueryString():获取get方式的请求参数</li><li>String getRequestURI():获取请求URI（不包含协议和IP地址）</li><li>StringBuffer getRequestURL():获取请求URI（包含协议和IP地址）</li><li>String getProtocol():获取协议及版本</li><li>String getRemoteAddr():获取客户机IP地址</li></ul></li><li>获取请求头数据<ul><li>String getHeader(String headerName):通过请求头的名称获取请求头的值</li><li>Enumeration<String> getHeaders():获取所有请求头的名称（Enumeration<String>通过hasMoreElements方法判断是否结束，通过nextElement获取下一个请求头的名称）</li></ul></li><li>获取请求体数据<ul><li>只有POST请求方式，才有请求体</li><li>请求体的返回数据是流对象的格式，所以我们需要先获取流对象，再从流对象中获取请求体的数据，共有两种方式获取流对象<ul><li>BufferesReader getReader():获取字符输入流，只能操作字符数据</li><li>ServletInputStream getInputStream():获取字节输入流，可以操作所有类型的数据</li></ul></li></ul></li></ol><h4 id="获取请求行数据代码示例"><a href="#获取请求行数据代码示例" class="headerlink" title="获取请求行数据代码示例"></a>获取请求行数据代码示例</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * - String getMethod():获取请求方式GET/POST</span></span><br><span class="line"><span class="comment"> * - String　getContextPath():获取虚拟目录</span></span><br><span class="line"><span class="comment"> * - String getServletPath():获取Servlet路径</span></span><br><span class="line"><span class="comment"> * - String getQueryString():获取get方式的请求参数</span></span><br><span class="line"><span class="comment"> * - String getRequestURI():获取请求URI（不包含协议和IP地址）</span></span><br><span class="line"><span class="comment"> * - StringBuffer getRequestURL():获取请求URI（包含协议和IP地址）</span></span><br><span class="line"><span class="comment"> * - String getProtocol():获取协议及版本</span></span><br><span class="line"><span class="comment"> * - String getRemoteAddr():获取客户机IP地址</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">@WebServlet(value=&quot;/requestDemo1&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RequestDemo1</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;请求方式：&quot;</span>+request.getMethod());</span><br><span class="line">        System.out.println(<span class="string">&quot;虚拟目录：&quot;</span>+request.getContextPath());</span><br><span class="line">        System.out.println(<span class="string">&quot;Servlet路径：&quot;</span>+request.getServletPath());</span><br><span class="line">        System.out.println(<span class="string">&quot;get方式的请求参数：&quot;</span>+request.getQueryString());</span><br><span class="line">        System.out.println(<span class="string">&quot;请求URI：&quot;</span>+request.getRequestURI());</span><br><span class="line">        System.out.println(<span class="string">&quot;请求URL：&quot;</span>+request.getRequestURL());</span><br><span class="line">        System.out.println(<span class="string">&quot;协议及版本：&quot;</span>+request.getProtocol());</span><br><span class="line">        System.out.println(<span class="string">&quot;客户机IP地址：&quot;</span>+request.getRemoteAddr());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">运行结果：</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment">请求方式：GET</span></span><br><span class="line"><span class="comment">虚拟目录：/JavaWebTest2</span></span><br><span class="line"><span class="comment">Servlet路径：/requestDemo1</span></span><br><span class="line"><span class="comment">get方式的请求参数：username=renboyu010214</span></span><br><span class="line"><span class="comment">请求URI：/JavaWebTest2/requestDemo1</span></span><br><span class="line"><span class="comment">请求URL：http://localhost:8080/JavaWebTest2/requestDemo1</span></span><br><span class="line"><span class="comment">协议及版本：HTTP/1.1</span></span><br><span class="line"><span class="comment">客户机IP地址：0:0:0:0:0:0:0:1</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><h4 id="获取请求头数据代码示例"><a href="#获取请求头数据代码示例" class="headerlink" title="获取请求头数据代码示例"></a>获取请求头数据代码示例</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebServlet(&quot;/requestDemo2&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RequestDemo2</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">//获取所有请求头的名称request.getHeaderNames()</span></span><br><span class="line">        Enumeration&lt;String&gt; enumeration=request.getHeaderNames();</span><br><span class="line">        <span class="keyword">while</span> (enumeration.hasMoreElements())&#123;</span><br><span class="line">            <span class="comment">//利用迭代器逐个获取请求头名称</span></span><br><span class="line">            String headerName=enumeration.nextElement();</span><br><span class="line">            <span class="comment">//利用请求头名称获取请求头的值request.getHeader(headerName)</span></span><br><span class="line">            String headerValue=request.getHeader(headerName);</span><br><span class="line">            <span class="comment">//输出结果</span></span><br><span class="line">            System.out.println(headerName+<span class="string">&quot; : &quot;</span>+headerValue);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：(有特殊字符*/不便放在注释中)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">host : localhost:<span class="number">8080</span></span><br><span class="line">connection : keep-alive</span><br><span class="line">upgrade-insecure-requests : <span class="number">1</span></span><br><span class="line">user-agent : Mozilla/<span class="number">5.0</span> (Windows NT <span class="number">10.0</span>; Win64; x64) AppleWebKit/<span class="number">537.36</span> (KHTML, like Gecko) Chrome/<span class="number">84.0</span><span class="number">.4147</span><span class="number">.89</span> Safari/<span class="number">537.36</span></span><br><span class="line">accept : text/html,application/xhtml+xml,application/xml;q=<span class="number">0.9</span>,image/webp,image/apng,*<span class="comment">/*;q=0.8,application/signed-exchange;v=b3;q=0.9</span></span><br><span class="line"><span class="comment">sec-fetch-site : none</span></span><br><span class="line"><span class="comment">sec-fetch-mode : navigate</span></span><br><span class="line"><span class="comment">sec-fetch-user : ?1</span></span><br><span class="line"><span class="comment">sec-fetch-dest : document</span></span><br><span class="line"><span class="comment">accept-encoding : gzip, deflate, br</span></span><br><span class="line"><span class="comment">accept-language : zh-CN,zh;q=0.9,en;q=0.8,bo-CN;q=0.7,bo;q=0.6</span></span><br><span class="line"><span class="comment">cookie : JSESSIONID=B675242192B257B0274786E223DE5A0F; JSESSIONID=9C6F2A1D8D267CD4F8849D8D1158DDFF</span></span><br></pre></td></tr></table></figure><h4 id="获取请求体数据示例"><a href="#获取请求体数据示例" class="headerlink" title="获取请求体数据示例"></a>获取请求体数据示例</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebServlet(&quot;/requestDemo3&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RequestDemo3</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">//获取流对象</span></span><br><span class="line">        BufferedReader br=request.getReader();</span><br><span class="line">        String line=<span class="keyword">null</span>;</span><br><span class="line">        <span class="comment">//从流对象中逐行获取数据</span></span><br><span class="line">        <span class="keyword">while</span>((line=br.readLine())!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            System.out.println(line);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//运行结果：</span></span><br><span class="line"><span class="comment">//username=renboyu010214&amp;password=123456</span></span><br></pre></td></tr></table></figure><h3 id="其他功能"><a href="#其他功能" class="headerlink" title="其他功能"></a>其他功能</h3><h4 id="1-通用的获取请求参数的方法"><a href="#1-通用的获取请求参数的方法" class="headerlink" title="1. 通用的获取请求参数的方法"></a>1. 通用的获取请求参数的方法</h4><p>以下四种方式不论是POST还是GET方式都可以获取到请求参数</p><ul><li>String getParameter(String name):根据参数名称获取参数值</li><li>String[] getParameterValues(String name):根据参数名称获取参数值的数组（因为可能出现一个名称对应多个值的情况）</li><li>Enumeration<String> getParameterNames():获取所有请求参数的名称</li><li>Map&lt;String,String[]&gt; getParameterMap():获取所有参数的map集合</li></ul><h5 id="中文乱码问题："><a href="#中文乱码问题：" class="headerlink" title="中文乱码问题："></a>中文乱码问题：</h5><p>当获取请求参数出现乱码时，只需要在获取参数前，提前设置编码请求参数的格式即可</p><h4 id="2-请求转发功能"><a href="#2-请求转发功能" class="headerlink" title="2. 请求转发功能"></a>2. 请求转发功能</h4><p>一种在服务器内部的资源跳转方式</p><h5 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h5><ol><li>通过request对象获取请求转发器对象：RequestDispatcher getRequestDispatcher(String path)</li><li>使用RequestDispatcher对象进行转发，利用其的forward(ServletRequest request ServletResponse response)方法</li></ol><h5 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h5><ul><li>浏览器路径不发生变化</li><li>只能转发到当前服务器内部资源中</li><li>转发是一次请求</li></ul><h5 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebServlet(&quot;/requestDemo5&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RequestDemo5</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;访问RequestDemo5...&quot;</span>);</span><br><span class="line">        RequestDispatcher requestDispatcher=request.getRequestDispatcher(<span class="string">&quot;/requestDemo6&quot;</span>);</span><br><span class="line">        requestDispatcher.forward(request,response);</span><br><span class="line">        <span class="comment">//一般情况下利用链式编程化简为一句即可：request.getRequestDispatcher(&quot;/requestDemo6&quot;).forward(request,response);</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.doPost(request,response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 运行结果：</span></span><br><span class="line"><span class="comment">访问RequestDemo5...</span></span><br><span class="line"><span class="comment">访问RequestDemo6...</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebServlet(&quot;/requestDemo6&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RequestDemo6</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;访问RequestDemo6...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.doPost(request,response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-共享数据"><a href="#3-共享数据" class="headerlink" title="3. 共享数据"></a>3. 共享数据</h4><h5 id="域对象："><a href="#域对象：" class="headerlink" title="域对象："></a>域对象：</h5><p>一个有作用范围的对象，可以在范围内共享数据</p><h5 id="request域："><a href="#request域：" class="headerlink" title="request域："></a>request域：</h5><p>代表一次请求的范围，一般用于请求转发的多个资源中共享数据</p><h5 id="使用方法："><a href="#使用方法：" class="headerlink" title="使用方法："></a>使用方法：</h5><ul><li>void setAttribute(String name,Object obj):存储数据</li><li>Object getAttribute(String name):通过键获取值</li><li>void removeAttribute(String name):通过键移除键值对</li></ul><h4 id="4-获取ServletContext对象"><a href="#4-获取ServletContext对象" class="headerlink" title="4. 获取ServletContext对象"></a>4. 获取ServletContext对象</h4><ul><li>getServletContext()方法</li></ul><h2 id="BeanUtils工具类"><a href="#BeanUtils工具类" class="headerlink" title="BeanUtils工具类"></a>BeanUtils工具类</h2><p>用于简化数据的封装过程</p><h3 id="JavaBean"><a href="#JavaBean" class="headerlink" title="JavaBean"></a>JavaBean</h3><p>标准的Java类</p><h4 id="要求"><a href="#要求" class="headerlink" title="要求"></a>要求</h4><ul><li>类必须被public修饰</li><li>必须提供空参的构造器</li><li>成员变量必须使用private修饰</li><li>提供公共的setter和getter方法</li></ul><h4 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h4><p>封装数据</p><h3 id="提供的方法"><a href="#提供的方法" class="headerlink" title="提供的方法"></a>提供的方法</h3><ul><li>setProperty</li><li>getProperty</li><li>populate(Object obj,Map map):将map集合的键值对信息，封装到对应的JavaBean对象中</li></ul><h1 id="Response对象"><a href="#Response对象" class="headerlink" title="Response对象"></a>Response对象</h1><h3 id="功能-1"><a href="#功能-1" class="headerlink" title="功能"></a>功能</h3><p>设置响应消息（相应行，响应头，响应体）</p><h3 id="设置响应行"><a href="#设置响应行" class="headerlink" title="设置响应行"></a>设置响应行</h3><ul><li>格式：例如 HTTP/1.1 200 OK</li><li>设置状态码：setStatus(int sc)</li></ul><h3 id="设置响应头"><a href="#设置响应头" class="headerlink" title="设置响应头"></a>设置响应头</h3><ul><li>setHeader(String name,String Value)</li></ul><h3 id="设置响应体"><a href="#设置响应体" class="headerlink" title="设置响应体"></a>设置响应体</h3><h4 id="步骤-1"><a href="#步骤-1" class="headerlink" title="步骤"></a>步骤</h4><ol><li>获取输出流<ul><li>字符输出流：PrintWriter getWriter()</li><li>字节输出流：ServletOutputStream getOutputStream()</li></ul></li><li>使用输出流，将数据输出到客户端浏览器</li></ol><h2 id="示例："><a href="#示例：" class="headerlink" title="示例："></a>示例：</h2><h3 id="1-重定向"><a href="#1-重定向" class="headerlink" title="1. 重定向"></a>1. 重定向</h3><p>资源跳转的一种方式</p><h4 id="特点："><a href="#特点：" class="headerlink" title="特点："></a>特点：</h4><ul><li>重定向后地址栏发生变化</li><li>重定向可以访问其他站点（服务器）的资源</li><li>重定向是两次请求，不能使用request对象共享数据</li></ul><p><strong>常规重定向操作</strong></p><ol><li>设置状态码为302</li><li>设置location响应头，值为重定向资源路径<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebServlet(&quot;/responseDemo1&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ResponseDemo1</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">//访问demo1资源会自动跳转到demo2资源</span></span><br><span class="line">        <span class="comment">//1. 设置状态码为302</span></span><br><span class="line">        response.setStatus(<span class="number">302</span>);</span><br><span class="line">        <span class="comment">//2. 设置location响应头，值为重定向资源路径</span></span><br><span class="line">        response.setHeader(<span class="string">&quot;location&quot;</span>,<span class="string">&quot;/LoginTest/responseDemo2&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.doPost(request,response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>上述重定向操作中不难看出，状态码设为302是固定的，响应头的名称设为location也是固定的，唯一在重定向时会发生变化的就是跳转资源的路径，所以response对象将重定向进行了封装</p><p><strong>更简单的重定向操作</strong></p><ul><li>sendRedirect()方法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebServlet(&quot;/responseDemo1&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ResponseDemo1</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">//访问demo1资源会自动跳转到demo2资源</span></span><br><span class="line">        response.sendRedirect(<span class="string">&quot;/LoginTest/responseDemo2&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.doPost(request,response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-输出字符-字节数据"><a href="#2-输出字符-字节数据" class="headerlink" title="2. 输出字符/字节数据"></a>2. 输出字符/字节数据</h3><h4 id="输出字符-字节数据"><a href="#输出字符-字节数据" class="headerlink" title="输出字符/字节数据"></a>输出字符/字节数据</h4><ol><li>设置编码格式（防止中文乱码）</li><li>获取字符/字节输出流</li><li>输出数据</li></ol><h5 id="字符数据代码实现"><a href="#字符数据代码实现" class="headerlink" title="字符数据代码实现"></a>字符数据代码实现</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebServlet(&quot;/responseDemo3&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ResponseDemo3</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">//设置编码格式(还可以通过直接设置响应头的ContentType来实现编码的设置,例如下面)</span></span><br><span class="line">        <span class="comment">//response.setHeader(&quot;content-type&quot;,&quot;text/html;charset=utf-8&quot;);</span></span><br><span class="line">        response.setContentType(<span class="string">&quot;text/html;charset=utf-8&quot;</span>);</span><br><span class="line">        <span class="comment">//获取字符输出流</span></span><br><span class="line">        PrintWriter pw=response.getWriter();</span><br><span class="line">        <span class="comment">//输出数据</span></span><br><span class="line">        pw.write(<span class="string">&quot;你好！hello world!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.doPost(request,response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="字节数据代码实现"><a href="#字节数据代码实现" class="headerlink" title="字节数据代码实现"></a>字节数据代码实现</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebServlet(&quot;/responseDemo3&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ResponseDemo3</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">//设置编码格式(还可以通过直接设置响应头的ContentType来实现编码的设置,例如下面)</span></span><br><span class="line">        <span class="comment">//response.setHeader(&quot;content-type&quot;,&quot;text/html;charset=utf-8&quot;);</span></span><br><span class="line">        response.setContentType(<span class="string">&quot;text/html;charset=utf-8&quot;</span>);</span><br><span class="line">        <span class="comment">//获取字节输出流</span></span><br><span class="line">        ServletOutputStream sos=response.getOutputStream();</span><br><span class="line">        <span class="comment">//输出数据</span></span><br><span class="line">        sos.write(<span class="string">&quot;加油！good job!&quot;</span>.getBytes(StandardCharsets.UTF_8));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.doPost(request,response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="路径写法"><a href="#路径写法" class="headerlink" title="路径写法"></a>路径写法</h1><h2 id="相对路径"><a href="#相对路径" class="headerlink" title="相对路径"></a>相对路径</h2><p>通过相对路径不可以确定唯一资源，相对路径的写法：<code>./index.html</code></p><h3 id="相对路径的规则"><a href="#相对路径的规则" class="headerlink" title="相对路径的规则"></a>相对路径的规则</h3><ul><li>./表示当前目录</li><li>../表示上一级目录</li></ul><h2 id="绝对路径"><a href="#绝对路径" class="headerlink" title="绝对路径"></a>绝对路径</h2><p>通过绝对路径可以确定唯一资源，但在书写时一般不写整个绝对路径的全部内容而是简化写法，例如：<a href="http://localhost/JavaWebTest/responseDemo1">http://localhost/JavaWebTest/responseDemo1</a> 可以简化为/JavaWebTest/responseDemo1</p><h3 id="绝对路径规则"><a href="#绝对路径规则" class="headerlink" title="绝对路径规则"></a>绝对路径规则</h3><ul><li>给客户端浏览器使用的路径需要加上虚拟目录，即格式为/JavaWebTest/responseDemo1（例如超链接标签<a>，重定向等等）</li><li>给服务器端使用的路径不需要加上虚拟路径，即格式为/responseDemo1（例如转发）</li></ul>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaWeb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>11-Http概述</title>
      <link href="/2021/03/04/11-Http%E6%A6%82%E8%BF%B0/"/>
      <url>/2021/03/04/11-Http%E6%A6%82%E8%BF%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="Http协议，超文本传输协议"><a href="#Http协议，超文本传输协议" class="headerlink" title="Http协议，超文本传输协议"></a>Http协议，超文本传输协议</h1><h4 id="Hyper-Text-Transfer-Protocol"><a href="#Hyper-Text-Transfer-Protocol" class="headerlink" title="(Hyper Text Transfer Protocol)"></a>(Hyper Text Transfer Protocol)</h4><h3 id="传输协议概念"><a href="#传输协议概念" class="headerlink" title="传输协议概念"></a>传输协议概念</h3><p>定义了客户端和服务器端通信时，发送数据的格式</p><h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><ol><li>基于TCP/IP的高级协议</li><li>默认端口号为80</li><li>基于请求/响应模型，即一次请求对应一次响应</li><li>无状态的：即每次请求之间相互独立，不能交互数据</li></ol><h2 id="请求信息数据格式"><a href="#请求信息数据格式" class="headerlink" title="请求信息数据格式"></a>请求信息数据格式</h2><ol><li>请求行<ul><li>请求方式：HTTP协议种规定了7种请求方式，常用的由两种<ul><li>GET：请求的参数在请求行中（即跟在URL后面），且请求的长度有限制，有安全隐患</li><li>POST：请求的参数在请求体中，请求的URL没有限制，相对安全</li></ul></li><li>请求url：发出请求的URL</li><li>请求协议/版本：例如HTTP/1.1</li></ul></li><li>请求头<ul><li>格式：请求头名称:请求头值</li><li>User-Agent：当前浏览器的相关版本信息（可以在服务器端获取该信息，以解决浏览器兼容问题）</li><li>Referer：当前网页的来源网址（从哪个网页跳转而来）可用于防盗链或进行一些统计工作</li><li>Accept：允许接收的数据格式</li><li>Accept-Language：允许接收的语言类型 </li><li>Coonection：连接状态（是否存活）</li></ul></li><li>请求空行：一段空行，用于分割各组成部分</li><li>请求体：正文内容</li></ol><h4 id="解析前的请求头"><a href="#解析前的请求头" class="headerlink" title="解析前的请求头"></a>解析前的请求头</h4><p><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/%E8%A7%A3%E6%9E%90%E5%89%8D%E7%9A%84%E8%AF%B7%E6%B1%82%E5%A4%B4.jpg" alt="解析前的请求头"></p><h4 id="解析后的请求头"><a href="#解析后的请求头" class="headerlink" title="解析后的请求头"></a>解析后的请求头</h4><p><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/%E8%A7%A3%E6%9E%90%E5%90%8E%E7%9A%84%E8%AF%B7%E6%B1%82%E5%A4%B4.jpg" alt="解析后的请求头"></p><h4 id="捕获的本地HTTP报文"><a href="#捕获的本地HTTP报文" class="headerlink" title="捕获的本地HTTP报文"></a>捕获的本地HTTP报文</h4><p><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/%E6%8D%95%E8%8E%B7%E7%9A%84HTTP%E6%8A%A5%E6%96%87.jpg" alt="捕获的HTTP报文"></p><h3 id="捕获本地报文的方式"><a href="#捕获本地报文的方式" class="headerlink" title="捕获本地报文的方式"></a>捕获本地报文的方式</h3><ol><li>以管理员身份运行cmd</li><li>route add 本机ip mask 255.255.255.255 网关ip<ul><li>如：route add 192.168.1.105 mask 255.255.255.255 192.168.1.1</li><li>使用完毕后用route delete 192.168.1.105 mask 255.255.255.255 192.168.1.1删除，否则所有本机报文都经过网卡出去走一圈回来很耗性能。</li></ul></li><li>此时再利用wireshark进行抓包便可以抓到本机自己同自己的通信包，这样配置的原因是将发往本机的包发送到网关，而此时wireshark可以捕获到网卡驱动的报文实现抓包。</li></ol><p>但这样有一个缺点，那就是本地请求的URL的IP只能写本地的IP地址，不能写localhost或127.0.0.1，写localhost或127.0.0.1还是抓不到包。<a href="https://www.cnblogs.com/lvdongjie/p/6110183.html">参考自</a></p><h2 id="响应信息数据格式"><a href="#响应信息数据格式" class="headerlink" title="响应信息数据格式"></a>响应信息数据格式</h2><ol><li>响应行<ul><li>组成：协议/版本 响应状态码  状态码描述（例如HTTP/1.1 200 OK）</li></ul></li><li>响应头<ul><li>格式：头名称:值</li><li>常见响应头<ul><li>Content-Type：服务器告知客户端，响应体数据的格式以及编码方式</li><li>Content-Disposition：服务器告知客户端响应体数据的打开方式</li></ul></li></ul></li><li>响应空行</li><li>响应体</li></ol><h3 id="响应状态码分类"><a href="#响应状态码分类" class="headerlink" title="响应状态码分类"></a>响应状态码分类</h3><table><thead><tr><th>分类</th><th>分类描述</th></tr></thead><tbody><tr><td>1xx</td><td>信息，服务器收到请求，需要请求者继续执行操作</td></tr><tr><td>2xx</td><td>成功，操作被成功接收并处理</td></tr><tr><td>3xx</td><td>重定向，需要进一步的操作以完成请求</td></tr><tr><td>4xx</td><td>客户端错误，请求包含语法错误或无法完成请求</td></tr><tr><td>5xx</td><td>服务器错误，服务器在处理请求的过程中发生了错误</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaWeb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>10-Servlet</title>
      <link href="/2021/03/04/10-Servlet/"/>
      <url>/2021/03/04/10-Servlet/</url>
      
        <content type="html"><![CDATA[<h1 id="Servlet"><a href="#Servlet" class="headerlink" title="Servlet"></a>Servlet</h1><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>运行在服务器端的小程序</p><p>Servlet就是一个接口，定义了Java类被浏览器访问到（tomcat识别）的规则</p><h3 id="基本步骤"><a href="#基本步骤" class="headerlink" title="基本步骤"></a>基本步骤</h3><ol><li>创建JavaEE项目</li><li>定义一个类，实现Servlet接口</li><li>实现接口的抽象方法</li><li>配置Servlet（在web.xml下配置）</li></ol><h4 id="配置代码："><a href="#配置代码：" class="headerlink" title="配置代码："></a>配置代码：</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置Servlet--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>demo1<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>cn.ywrby.web.servlet.ServletDemo1<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>demo1<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/demo1<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="执行原理"><a href="#执行原理" class="headerlink" title="执行原理"></a>执行原理</h2><ol><li>当服务器接受到客户端浏览器的请求后，会解析请求URL路径,获取访问的Servlet的资源路径</li><li>查找web.xml文件,是否有对应的<url-pattern>标签体内容。</li><li>如果有，则再找到对应的<servlet-class>全类名</li><li>tomcat会将字节码文件加载进内存，并且创建其对象</li><li>调用其方法</li></ol><p><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/servlet%E6%89%A7%E8%A1%8C%E5%8E%9F%E7%90%86.jpg" alt="servlet执行原理"></p><h2 id="声明周期"><a href="#声明周期" class="headerlink" title="声明周期"></a>声明周期</h2><h3 id="1-被创建时"><a href="#1-被创建时" class="headerlink" title="1. 被创建时"></a>1. 被创建时</h3><p>执行init方法，且只执行一次，一般用于加载资源</p><h4 id="Servlet被创建的时机"><a href="#Servlet被创建的时机" class="headerlink" title="Servlet被创建的时机"></a>Servlet被创建的时机</h4><ul><li>默认情况下，在第一次访问时被创建</li><li>可以通过配置Servlet修改创建时机<ul><li>配置<Servlet>标签下的<load-on-startup>标签（值为正数则在启动服务器时就被创建，值为负数，则在第一次访问时创建，默认值为-1）</li></ul></li></ul><p>Servlet的init方法只执行一次，说明一个Servlet在内存中只存在一个对象，即Servlet是单例的。</p><ul><li>多个用户同时访问该对象时，就可能存在安全问题</li><li>解决方式：尽量不再Servlet中定义成员变量，不得已定义成员变量也不要在方法中修改成员变量的值（尽量把变量定义在方法中）</li></ul><h3 id="2-提供服务"><a href="#2-提供服务" class="headerlink" title="2. 提供服务"></a>2. 提供服务</h3><p>执行service方法，service方法可能被调用多次</p><h3 id="3-被销毁时"><a href="#3-被销毁时" class="headerlink" title="3. 被销毁时"></a>3. 被销毁时</h3><p>调用destroy方法，只在被销毁时执行一次，且必须是正常销毁，强制销毁时同样不执行。一般用于释放资源</p><h2 id="注解配置"><a href="#注解配置" class="headerlink" title="注解配置"></a>注解配置</h2><p>自Servlet3.0后，在配置时可以不必配置web.xml文件，而是采用注解配置的方式，大大降低配置注解的繁琐</p><h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><ol><li>创建JavaEE项目，选择Servlet版本在3.0以上，可以不创建web.xml</li><li>定义一个类，实现Servlet接口</li><li>复写方法</li><li>为该类添加注解，并进行配置<code>@WebServlet(url-pattern=&quot;资源路径&quot;)</code>或者省略url-pattern直接写作<code>@WebServlet(&quot;资源路径&quot;)</code></li></ol><p>一个url-pattern可以配置多个路径，例如<code>@WebServlet(&#123;&quot;/demo2&quot;,&quot;/demo3&quot;&#125;)</code></p><h4 id="例如"><a href="#例如" class="headerlink" title="例如"></a>例如</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebServlet(&quot;/demo1&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServletDemo1</span> <span class="keyword">implements</span> <span class="title">Servlet</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure><h2 id="Servlet体系结构"><a href="#Servlet体系结构" class="headerlink" title="Servlet体系结构"></a>Servlet体系结构</h2><ul><li>GenericServlet：一个抽象类，实现了Servlet接口，并对除service以外的方法都做了默认的空实现，支队service方法进行了抽象。所以在定义Servlet类时，可以继承GenericServlet，只需要实现service方法即可</li><li>HttpServlet：继承自GenericServlet。是对Http协议的一种封装，简化操作，其内部实现了service方法的判断逻辑，在继承时只需要复写doGet和doPost方法即可</li></ul><p>一般情况下我们采用继承HttpServlet并复写doGet和doPost方法的方式实现Servlet类</p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaWeb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>9-web服务器软件概述+Tomcat</title>
      <link href="/2021/03/04/9-web%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%BD%AF%E4%BB%B6%E6%A6%82%E8%BF%B0+Tomcat/"/>
      <url>/2021/03/04/9-web%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%BD%AF%E4%BB%B6%E6%A6%82%E8%BF%B0+Tomcat/</url>
      
        <content type="html"><![CDATA[<h1 id="Web服务器软件"><a href="#Web服务器软件" class="headerlink" title="Web服务器软件"></a>Web服务器软件</h1><h3 id="服务器概念"><a href="#服务器概念" class="headerlink" title="服务器概念"></a>服务器概念</h3><p>安装了服务器软件的计算机</p><h3 id="服务器软件概念"><a href="#服务器软件概念" class="headerlink" title="服务器软件概念"></a>服务器软件概念</h3><p>接收用户请求，处理请求并做出响应</p><h3 id="Web服务器软件概念"><a href="#Web服务器软件概念" class="headerlink" title="Web服务器软件概念"></a>Web服务器软件概念</h3><p>服务器软件的一种，在web服务器软件中，可以部署web项目，让用户通过浏览器访问项目，又被称为web容器</p><h3 id="常见的Java相关的web服务器软件"><a href="#常见的Java相关的web服务器软件" class="headerlink" title="常见的Java相关的web服务器软件"></a>常见的Java相关的web服务器软件</h3><ul><li>webLogic:oracle公司的，大型JavaEE服务器，支持所有JavaEE规范，收费。</li><li>webSphere:IBM公司，大型JavaEE服务器，支持所有JavaEE规范，收费。</li><li>JBOSS:JBOSS公司，大型JavaEE服务器，支持所有JavaEE规范，收费。</li><li>Tomcat:Apache基金组织的，中小型JavaEE服务器，仅支持少量的JavaEE规范（如：servlet/jsp）开源免费的</li></ul><h1 id="Tomacat"><a href="#Tomacat" class="headerlink" title="Tomacat"></a>Tomacat</h1><ol><li>下载：<a href="https://tomcat.apache.org/">https://tomcat.apache.org/</a></li><li>安装：解压缩文件到本地即可</li><li>卸载：删除解压文件夹</li><li>启动：bin/startup.bat双击运行</li><li>访问：浏览器输入<a href="http://localhost:8080/">http://localhost:8080</a> (本地访问方式，非本地将localhost替换为本机IP地址即可)</li><li>关闭<ul><li>正常关闭：1. bin/shutdown.bat双击执行即可关闭2. ctrl+c也可正常关闭</li><li>强制关闭：点击启动窗口的关闭键</li></ul></li><li>配置<ul><li>项目部署的三种方式：<ol><li>直接将项目放在webapps目录下即可访问（通过/+相对路径），可以简化部署：将项目打包成一个war包，把war包放到webapps下，会自动解压缩，并且删除war文件，则项目也被自动删除</li><li>配置conf/server.xml文件（在<Host>标签体中添加<code>&lt;Context docBase=&quot;项目路径&quot; path=&quot;/虚拟目录&quot;/&gt;</code>例如<code>&lt;Context docBase=&quot;D:\CodingProgram\Web_YWRBY\webProject1&quot; path=&quot;/webPro1&quot;/&gt;</code>）</li><li>在conf/Catalina/localhost中创建任意名称的xml文件，载文件中编写<code>&lt;Context docBase=&quot;项目路径&quot; /&gt;</code>不需要填虚拟目录，虚拟目录就是这个xml文件的文件名（推荐使用这种方式，这种方式支持热部署，不需要来回重启Tomcat）</li></ol></li></ul></li></ol><h2 id="Java动态项目目录结构"><a href="#Java动态项目目录结构" class="headerlink" title="Java动态项目目录结构"></a>Java动态项目目录结构</h2><h3 id="项目根目录"><a href="#项目根目录" class="headerlink" title="项目根目录"></a>项目根目录</h3><ul><li>WEB-INF目录<ul><li>web.xml：web项目核心配置文件</li><li>classes目录：放置字节码文件的目录</li><li>lib目录：放置依赖jar包的目录</li></ul></li><li>其他</li></ul><h3 id="IDEA集成创建web项目"><a href="#IDEA集成创建web项目" class="headerlink" title="IDEA集成创建web项目"></a>IDEA集成创建web项目</h3><p><a href="https://www.bilibili.com/video/BV1uJ411k7wy?p=683">视频讲解</a></p><h4 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h4><ol><li>使用Idea部署项目后，访问路径为url:8080/项目名_war_exploded的解决方案<ul><li>在tomcat配置页的Deployment下，修改Application context为/，即可直接使用url:8080访问项目主页。</li></ul></li></ol>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaWeb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>8-XML概述</title>
      <link href="/2021/03/04/8-XML%E6%A6%82%E8%BF%B0/"/>
      <url>/2021/03/04/8-XML%E6%A6%82%E8%BF%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="XML概述"><a href="#XML概述" class="headerlink" title="XML概述"></a>XML概述</h1><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>Extensible Markup Language可扩展标记语言（可扩展指XML中的所有标签都是自定义的）</p><h3 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h3><ul><li>存储数据<ul><li>做配置文件</li><li>在网络中传输</li></ul></li></ul><h3 id="XML与HTML区别"><a href="#XML与HTML区别" class="headerlink" title="XML与HTML区别"></a>XML与HTML区别</h3><ul><li>XML标签都是自定义的，HTML标签都是预定义的</li><li>XML语法严格，HTML语法松散</li><li>XML是用来存储数据的，HTML是用来展示数据的</li></ul><h3 id="基本要求"><a href="#基本要求" class="headerlink" title="基本要求"></a>基本要求</h3><ol><li>xml文档的后缀名.xml</li><li>xml第一行必须定义为文档声明。例如：<code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</code></li><li>xml文档中有且仅有一个根标签</li><li>属性值必须使用引号(单双都可)引起来</li><li>标签必须正确关闭</li><li>xml标签名称区分大小写</li></ol><h2 id="组成部分"><a href="#组成部分" class="headerlink" title="组成部分"></a>组成部分</h2><h3 id="1-文档声明"><a href="#1-文档声明" class="headerlink" title="1. 文档声明"></a>1. 文档声明</h3><ul><li>格式：<?xml 属性列表 ?></li><li>属性列表组成<ul><li>version：版本号，必须的属性</li><li>encoding：编码方式，告知解析引擎当前文档使用的字符集</li><li>standalone：是否独立（yes：不依赖其他文件，no：依赖其他文件）</li></ul></li></ul><h3 id="2-标签："><a href="#2-标签：" class="headerlink" title="2. 标签："></a>2. 标签：</h3><p>自定义名称</p><h3 id="3-属性："><a href="#3-属性：" class="headerlink" title="3. 属性："></a>3. 属性：</h3><p>（注意id属性值唯一）</p><h3 id="4-文本："><a href="#4-文本：" class="headerlink" title="4. 文本："></a>4. 文本：</h3><p>由于我们保存的文本数据可能包含一些有特殊意义的字符，例如&gt;,&lt;,&amp;等等，一种解决方式是用转义字符替换所有这些特殊文本。但这样使得文本的可读性变差，另一种方式就是使用XML中的CDATA区</p><ul><li>CDATA区：在该区域中的数据会被原样展示（格式：<![CDATA[ 文本数据 ]]>）</li></ul><h2 id="约束"><a href="#约束" class="headerlink" title="约束"></a>约束</h2><p>规定XML文档的书写规则</p><h3 id="dtd约束"><a href="#dtd约束" class="headerlink" title="dtd约束"></a>dtd约束</h3><p>一种相对简单的约束技术</p><h4 id="1-内部dtd"><a href="#1-内部dtd" class="headerlink" title="1. 内部dtd"></a>1. 内部dtd</h4><p>将约束规则定义在xml文档中</p><h4 id="2-外部dtd"><a href="#2-外部dtd" class="headerlink" title="2. 外部dtd"></a>2. 外部dtd</h4><p>将约束规则定义在外部的dtd文件中</p><ul><li>本地：<!DOCTYPE 根标签名 SYSTEM "dtd文件地址"></li><li>网络：<!DOCTYPE 根标签名 SYSTEM "dtd文件名字" "dtd文件的位置URL"></li></ul><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><p>该示例中跟标签名是students，其内部允许放置student标签，student标签内部又允许放置name,age,sex三个标签，这三个标签内部允许存放字符串。最后一行对number属性进行限定，规定其为ID属性，也就是必须是唯一的值，#REQUIRED表示这个属性必须出现</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;!ELEMENT students (student+)&gt;</span><br><span class="line">        &lt;!ELEMENT student (name,age,sex)&gt;</span><br><span class="line">        &lt;!ELEMENT name ( #PCDATA)&gt;</span><br><span class="line">        &lt;!ELEMENT age (#PCDATA)&gt;</span><br><span class="line">        &lt;!ELEMENT sex (#PCDATA)&gt;</span><br><span class="line">        &lt;!ATTLIST student number ID #REQUIRED&gt;</span><br></pre></td></tr></table></figure><h4 id="引入当前示例"><a href="#引入当前示例" class="headerlink" title="引入当前示例"></a>引入当前示例</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot;?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">students</span> <span class="meta-keyword">SYSTEM</span> <span class="meta-string">&quot;student.dtd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">students</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">student</span> <span class="attr">number</span>=<span class="string">&quot;id1&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>Leslie<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">age</span>&gt;</span>20<span class="tag">&lt;/<span class="name">age</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">sex</span>&gt;</span>male<span class="tag">&lt;/<span class="name">sex</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">student</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">student</span> <span class="attr">number</span>=<span class="string">&quot;id2&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>Leslie<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">age</span>&gt;</span>20<span class="tag">&lt;/<span class="name">age</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">sex</span>&gt;</span>male<span class="tag">&lt;/<span class="name">sex</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">student</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">students</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Schema约束"><a href="#Schema约束" class="headerlink" title="Schema约束"></a>Schema约束</h3><ol><li>填写xml文档的根元素</li><li>引入xsi前缀。<code>xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</code></li><li>引入xsd文件命名空间，<code>xsi:schemaLocation=&quot;http://www.ywrby.cn/xml student.xsd&quot;</code></li><li>为每一个xsd约束声明一个前缀,作为标识<code>xmlns=&quot;http://www.ywrby.cn/xml&quot;</code></li></ol><p><a href="https://www.bilibili.com/video/BV1uJ411k7wy?p=666">深入</a></p><h2 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h2><p>操作XML文档，将文档中的数据读取到内存中</p><h3 id="操作XML文档"><a href="#操作XML文档" class="headerlink" title="操作XML文档"></a>操作XML文档</h3><ul><li>解析(读取)：将文档中的数据读取到内存中</li><li>写入：将内存中的数据保存到XML文档中，持久化存储</li></ul><h3 id="解析XML的方式"><a href="#解析XML的方式" class="headerlink" title="解析XML的方式"></a>解析XML的方式</h3><ol><li>DOM：将标记语言文档一次性加载进内存，在内存中形成一棵DOM树<ul><li>优点：操作方便，可以对文档进行CRUD的所有操作</li><li>缺点：由于是一次性加载所有数据进内存，所以对内存占用较大</li></ul></li><li>SAX：逐行读取，读取完一行后立即释放并读取下一行。基于事件驱动<ul><li>优点：不占用内存</li><li>缺点：由于逐行释放，所以无法进行增删改操作，只能读取</li></ul></li></ol><h3 id="XML常见的解析器"><a href="#XML常见的解析器" class="headerlink" title="XML常见的解析器"></a>XML常见的解析器</h3><ul><li>JAXP：sun公司提供的官方解析器，支持DOM和SAX两种思想。性能较差</li><li>DOM4J：一款非常优秀的解析器</li><li>Jsoup：jsoup 是一款Java 的HTML解析器，可直接解析某个URL地址、HTML文本内容。它提供了一套非常省力的API，可通过DOM，CSS以及类似于jQuery的操作方法来取出和操作数据。</li><li>PULL：Android操作系统内置的解析器，支持SAX思想</li></ul><h3 id="Jsoup解析"><a href="#Jsoup解析" class="headerlink" title="Jsoup解析"></a>Jsoup解析</h3><h4 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h4><ol><li>导入jar包：jsoup-1.13.1.jar</li><li>获取Document对象</li><li>获取Element对象</li><li>获取数据</li></ol><h4 id="示例-1"><a href="#示例-1" class="headerlink" title="示例"></a>示例</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Jsoup快速入门</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JsoupDemo1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//获取Document对象</span></span><br><span class="line">        <span class="comment">//获取要解析的xml文件路径</span></span><br><span class="line">        String path =JsoupDemo1.class.getClassLoader().getResource(<span class="string">&quot;cn/ywrby/xml/stu.xml&quot;</span>).getPath();</span><br><span class="line">        <span class="comment">//解析XML文档，加载文档进内存，获取DOM树--&gt;Document（注意这里的Doccument对象是org.jsoup.nodes.Document，不是其他类）</span></span><br><span class="line">        Document doc=Jsoup.parse(<span class="keyword">new</span> File(path),<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">        <span class="comment">//获取元素对象 --&gt;Element</span></span><br><span class="line">        Elements elements=doc.getElementsByTag(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">        <span class="comment">//遍历</span></span><br><span class="line">        <span class="keyword">for</span>(Element element:elements)&#123;</span><br><span class="line">            <span class="comment">//获取数据</span></span><br><span class="line">            String name=element.text();</span><br><span class="line">            System.out.println(name);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Jsoup中的常见对象"><a href="#Jsoup中的常见对象" class="headerlink" title="Jsoup中的常见对象"></a>Jsoup中的常见对象</h4><ul><li>Jsoup：工具类，可以解析html或xml文档，返回Document<ul><li>parse()方法。解析html或xml文档，返回Document，有多种重载形式<ul><li>(File in,String charsetName)：解析本地的xml或html文件</li><li>(String html)：解析html字符串</li><li>(URL url,int timeoutMills)：通过网络路径获取指定html或xml文档对象</li></ul></li></ul></li><li>Document：文档对象，代表内存中的DOM树<ul><li>主要用于获取Element对象<ul><li>getElementsByTag</li><li>getElementsByAttribute</li><li>getElementById</li></ul></li></ul></li><li>Elements：元素Element的集合，可以当作ArrayList<Element>使用</li><li>Element：元素对象<ul><li>获取其子元素对象<ul><li>getElementsByTag</li><li>getElementsByAttribute</li><li>getElementById</li></ul></li><li>获取属性值：  attr(String key)根据属性名称，获取属性值</li><li>获取文本内容：text()获取文本内容（包括子标签的文本内容）,html()获取包括子标签的标签体的所有内容</li></ul></li><li>Node：节点对象，是Document与Element对象的父类</li></ul><h2 id="快捷查询XML文档的方法"><a href="#快捷查询XML文档的方法" class="headerlink" title="快捷查询XML文档的方法"></a>快捷查询XML文档的方法</h2><h3 id="1-selector：选择器"><a href="#1-selector：选择器" class="headerlink" title="1. selector：选择器"></a>1. selector：选择器</h3><p>使用的方法：<code>Elements select(String cssQuery)</code></p><p><a href="https://jsoup.org/apidocs/org/jsoup/select/Selector.html">语法参考</a></p><p><a href="https://www.bilibili.com/video/BV1uJ411k7wy?p=673">视频讲解</a></p><h3 id="2-XPath"><a href="#2-XPath" class="headerlink" title="2. XPath"></a>2. XPath</h3><p>XPath 是一门在 XML 文档中查找信息的语言。XPath 可用来在 XML 文档中对元素和属性进行遍历。</p><p><a href="https://www.w3school.com.cn/xpath/index.asp">教程</a></p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaWeb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>7-软件架构，资源分类</title>
      <link href="/2021/03/04/7-%E8%BD%AF%E4%BB%B6%E6%9E%B6%E6%9E%84%EF%BC%8C%E8%B5%84%E6%BA%90%E5%88%86%E7%B1%BB/"/>
      <url>/2021/03/04/7-%E8%BD%AF%E4%BB%B6%E6%9E%B6%E6%9E%84%EF%BC%8C%E8%B5%84%E6%BA%90%E5%88%86%E7%B1%BB/</url>
      
        <content type="html"><![CDATA[<h1 id="软件架构"><a href="#软件架构" class="headerlink" title="软件架构"></a>软件架构</h1><h3 id="C-S-Client-Server"><a href="#C-S-Client-Server" class="headerlink" title="C/S(Client/Server)"></a>C/S(Client/Server)</h3><p>客户端/服务器端</p><p>在用户本地有客户端程序，在远程由服务器端程序（例如QQ，迅雷）</p><ul><li>优点：用户体验好</li><li>缺点：开发，安装，部署，维护等十分麻烦</li></ul><h3 id="B-S-Browser-Server"><a href="#B-S-Browser-Server" class="headerlink" title="B/S(Browser/Server)"></a>B/S(Browser/Server)</h3><p>浏览器/服务器端</p><p>只需要一个浏览器，用户就可以通过URL访问不同服务器端程序</p><ul><li>优点：开发，安装，部署，维护等十分更简单</li><li>缺点：<ul><li>如果应用过大，用户体验可能受到影响</li><li>对硬件要求高</li></ul></li></ul><h1 id="B-S架构-资源分类"><a href="#B-S架构-资源分类" class="headerlink" title="B/S架构 资源分类"></a>B/S架构 资源分类</h1><h2 id="静态资源"><a href="#静态资源" class="headerlink" title="静态资源"></a>静态资源</h2><p>使用静态网页开发技术发布的资源</p><h3 id="特点："><a href="#特点：" class="headerlink" title="特点："></a>特点：</h3><ul><li>所有用户访问，得到的页面完全一致</li><li>如：文本，图片，音视频，HTML，CSS，JavaScript</li><li>如果用户请求的是静态资源，服务器会直接将静态资源发送给浏览器，浏览器中内置静态资源的解析引擎，可以展示静态资源</li></ul><h2 id="动态资源"><a href="#动态资源" class="headerlink" title="动态资源"></a>动态资源</h2><p>使用动态网页技术发布的资源</p><h3 id="特点：-1"><a href="#特点：-1" class="headerlink" title="特点："></a>特点：</h3><ul><li>所有用户访问。得到的结果可能是不一样的</li><li>如：Jsp/Servlet,php,asp</li><li>如果用户请求的是动态资源，服务器会执行动态资源，将其转换为静态资源，再发送给浏览器</li></ul>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaWeb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>6-JDBCTemplate</title>
      <link href="/2021/03/04/6-JDBCTemplate/"/>
      <url>/2021/03/04/6-JDBCTemplate/</url>
      
        <content type="html"><![CDATA[<h1 id="JDBCTemplate"><a href="#JDBCTemplate" class="headerlink" title="JDBCTemplate"></a>JDBCTemplate</h1><p>Spring JDBC是Spring框架对JDBC的简单封装，其中提供了JDBCTemplate对象简化JDBC开发</p><h2 id="使用步骤"><a href="#使用步骤" class="headerlink" title="使用步骤"></a>使用步骤</h2><ol><li>导入jar包：commons-logging-1.2.jar，spring-beans-5.1.10.RELEASE.jar，spring-core-5.1.10.RELEASE.jar，spring-jdbc-5.1.10.RELEASE.jar，spring-tx-5.1.10.RELEASE.jar</li><li>创建JdbcTemplate对象，依赖于数据源DataSource</li><li>调用JdbdTemplate的方法进行CRUD增删改查<ul><li>update():执行DML语句</li><li>queryForMap():查询结果并将结果封装为map对象（查询结果长度只能是1，也就是只能查询一条结果，查询到的结果将被封装为Map，其中列名为Key，值为Value）</li><li>queryForList():查询结果并将结果封装为list对象（将每一条记录封装为一个Map集合，再将多个Map集合封装为一个List集合）</li><li>query():查询结果并将结果封装为JavaBean对象。query中一般需要接收RowMapper类型的参数，该参数的获取，一般使用<code>new BeanPropertyRowMapper&lt;类型&gt;(类型.class)</code>这种实现类，该类可以实现数据到JavaBean的自动封装</li><li>queryForObject:查询结果并将结果封装为对象(一般是系统已经定义过的对象，例如Long，int等等，通过这个方法可以计算数据库总记录数等信息)一般用于聚合函数的查询</li></ul></li></ol><h4 id="JdbcTemplate对象的简单使用"><a href="#JdbcTemplate对象的简单使用" class="headerlink" title="JdbcTemplate对象的简单使用"></a>JdbcTemplate对象的简单使用</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * JDBCTemplate入门</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo1</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//创建JDBCTemplate对象</span></span><br><span class="line">        JdbcTemplate jdbcTemplate=<span class="keyword">new</span> JdbcTemplate(DruidUtils.getDataSource());</span><br><span class="line">        <span class="comment">//调用方法</span></span><br><span class="line">        String sql=<span class="string">&quot;update stuMess set score=100 where id=?&quot;</span>;</span><br><span class="line">        <span class="keyword">int</span> result=jdbcTemplate.update(sql,<span class="number">3</span>);</span><br><span class="line">        System.out.println(result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="query-方法的一般使用方式"><a href="#query-方法的一般使用方式" class="headerlink" title="query()方法的一般使用方式"></a>query()方法的一般使用方式</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo2</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> JdbcTemplate jdbcTemplate=<span class="keyword">new</span> JdbcTemplate(DruidUtils.getDataSource());</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        String sql=<span class="string">&quot;select * from FINALEXAM_PERSON where ELEC &gt;?&quot;</span>;</span><br><span class="line">        List&lt;Person&gt; personList=jdbcTemplate.query(sql,<span class="keyword">new</span> BeanPropertyRowMapper&lt;Person&gt;(Person.class),<span class="number">3000</span>);</span><br><span class="line">        <span class="keyword">for</span>(Person p: personList)&#123;</span><br><span class="line">            System.out.println(p);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 运行结果：</span></span><br><span class="line"><span class="comment">Person&#123;up=&#x27;A路人&#x27;, fan=2634110, all_like=4060804, all_play=130307845, elec=3717, submissions=246&#125;</span></span><br><span class="line"><span class="comment">Person&#123;up=&#x27;hanser&#x27;, fan=1940049, all_like=5015728, all_play=93791313, elec=14054, submissions=263&#125;</span></span><br><span class="line"><span class="comment">Person&#123;up=&#x27;信誓蛋蛋&#x27;, fan=4822994, all_like=12635046, all_play=285482138, elec=22156, submissions=181&#125;</span></span><br><span class="line"><span class="comment">Person&#123;up=&#x27;ilem&#x27;, fan=1379899, all_like=2696860, all_play=83757635, elec=5289, submissions=117&#125;</span></span><br><span class="line"><span class="comment">......</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaWeb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>5-数据库连接池</title>
      <link href="/2021/03/04/5-%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9E%E6%8E%A5%E6%B1%A0/"/>
      <url>/2021/03/04/5-%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9E%E6%8E%A5%E6%B1%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="数据库连接池"><a href="#数据库连接池" class="headerlink" title="数据库连接池"></a>数据库连接池</h1><blockquote><p>数据库连接池负责分配、管理和释放数据库连接，它允许应用程序重复使用一个现有的数据库连接，而不是再重新建立一个；释放空闲时间超过最大空闲时间的数据库连接来避免因为没有释放数据库连接而引起的数据库连接遗漏。这项技术能明显提高对数据库操作的性能。(用户访问更加高效，消耗资源减少)</p></blockquote><h2 id="数据库连接池的实现"><a href="#数据库连接池的实现" class="headerlink" title="数据库连接池的实现"></a>数据库连接池的实现</h2><h3 id="标准接口：DataSource"><a href="#标准接口：DataSource" class="headerlink" title="标准接口：DataSource"></a>标准接口：DataSource</h3><p>位于javax.sql包下，通过方法getConnection获取连接</p><p>如果Connection对象是从连接池中直接获取的，则调用Connection的close方法不再关闭连接，而是将该连接归还给连接池</p><p>数据库连接池一般由数据库厂商直接实现，我们不需要另行实现</p><ul><li>C3P0：数据库连接池实现技术</li><li>Druid：数据库连接池实现技术，由阿里巴巴提供</li></ul><h2 id="C3P0"><a href="#C3P0" class="headerlink" title="C3P0"></a>C3P0</h2><h3 id="使用步骤"><a href="#使用步骤" class="headerlink" title="使用步骤"></a>使用步骤</h3><ol><li>导入jar包：c3p0-0.9.5.5.jar和mchange-commons-java-0.2.19.jar（依赖jar包）另外因为要使用数据库连接对象，所以不要忘记导入mysql-connector-java-8.0.20.jar包</li><li>定义配置文件<ul><li>名称需为：c3p0.properties或c3p0-config.xml</li><li>配置文件路径直接放在src文件夹下即可</li></ul></li><li>创建核心对象：数据库连接池对象：ComboPooledDataSource</li><li>获取连接：getConnection</li></ol><h4 id="C3P0演示类"><a href="#C3P0演示类" class="headerlink" title="C3P0演示类"></a>C3P0演示类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * C3P0演示类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        <span class="comment">//创建数据库连接池对象</span></span><br><span class="line">        <span class="comment">//在不向ComboPooledDataSource()中传入参数的情况下使用默认配置</span></span><br><span class="line">        <span class="comment">//传入指定名称参数，可以使用配置文件中其他的指定配置（使用指定名称的配置）</span></span><br><span class="line">        <span class="comment">//这样就只需要一个配置文件即可完成所有数据库连接池的配置</span></span><br><span class="line">        DataSource dataSource=<span class="keyword">new</span> ComboPooledDataSource();</span><br><span class="line">        <span class="comment">//获取数据库连接对象</span></span><br><span class="line">        Connection connection=dataSource.getConnection();</span><br><span class="line">        <span class="comment">//查看获取情况</span></span><br><span class="line">        System.out.println(connection);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="配置文件c3p0-config-xml"><a href="#配置文件c3p0-config-xml" class="headerlink" title="配置文件c3p0-config.xml"></a>配置文件c3p0-config.xml</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">c3p0-config</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 使用默认的配置读取连接池对象 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">default-config</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--  连接参数 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClass&quot;</span>&gt;</span>com.mysql.cj.jdbc.Driver<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;jdbcUrl&quot;</span>&gt;</span>jdbc:mysql://cdb-cd3ybvc6.cd.tencentcdb.com:10056/jdbcTest<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;user&quot;</span>&gt;</span>root<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>&gt;</span>rby<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 连接池参数 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--初始化申请的连接数量--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;initialPoolSize&quot;</span>&gt;</span>5<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--最大的连接数量--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maxPoolSize&quot;</span>&gt;</span>10<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--超时时间--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;checkoutTimeout&quot;</span>&gt;</span>3000<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">default-config</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--  指定名称的配置 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">named-config</span> <span class="attr">name</span>=<span class="string">&quot;otherc3p0&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--  连接参数 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClass&quot;</span>&gt;</span>com.mysql.cj.jdbc.Driver<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;jdbcUrl&quot;</span>&gt;</span>jdbc:mysql://cdb-cd3ybvc6.cd.tencentcdb.com:10056/jdbcTest<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;user&quot;</span>&gt;</span>root<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>&gt;</span>rby<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 连接池参数 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;initialPoolSize&quot;</span>&gt;</span>5<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maxPoolSize&quot;</span>&gt;</span>8<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;checkoutTimeout&quot;</span>&gt;</span>1000<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">named-config</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">c3p0-config</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Druid"><a href="#Druid" class="headerlink" title="Druid"></a>Druid</h2><h3 id="使用步骤-1"><a href="#使用步骤-1" class="headerlink" title="使用步骤"></a>使用步骤</h3><ol><li>导入jar包：druid-1.1.23.jar和mysql-connector-java-8.0.20.jar</li><li>定义配置文件<ul><li>Druid的配置文件是properties类型的</li><li>名称和位置都是任意的</li></ul></li><li>加载配置文件</li><li>获取数据库连接池对象：通过工厂获取DruidDataSourceFactory</li><li>获取连接：getConnection</li></ol><h4 id="Druid演示类"><a href="#Druid演示类" class="headerlink" title="Druid演示类"></a>Druid演示类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Druid演示</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//加载配置文件</span></span><br><span class="line">        Properties properties=<span class="keyword">new</span> Properties();</span><br><span class="line">        InputStream is =Demo1.class.getClassLoader().getResourceAsStream(<span class="string">&quot;druid.properties&quot;</span>);</span><br><span class="line">        properties.load(is);</span><br><span class="line">        <span class="comment">//获取连接池对象</span></span><br><span class="line">        DataSource ds= DruidDataSourceFactory.createDataSource(properties);</span><br><span class="line">        <span class="comment">//获取连接</span></span><br><span class="line">        Connection connection=ds.getConnection();</span><br><span class="line">        <span class="comment">//打印结果</span></span><br><span class="line">        System.out.println(connection);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h4><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">driverClassName</span>=<span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"><span class="attr">url</span>=<span class="string">jdbc:mysql://cdb-cd3ybvc6.cd.tencentcdb.com:10056/jdbcTest</span></span><br><span class="line"><span class="attr">username</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">password</span>=<span class="string">rby</span></span><br><span class="line"><span class="comment"># 初始化连接数</span></span><br><span class="line"><span class="attr">initialSize</span>=<span class="string">5</span></span><br><span class="line"><span class="comment"># 最大连接数</span></span><br><span class="line"><span class="attr">maxActive</span>=<span class="string">10</span></span><br><span class="line"><span class="comment"># 最大等待数</span></span><br><span class="line"><span class="attr">maxWait</span>=<span class="string">3000</span></span><br></pre></td></tr></table></figure><h3 id="利用Druid实现工具类"><a href="#利用Druid实现工具类" class="headerlink" title="利用Druid实现工具类"></a>利用Druid实现工具类</h3><h4 id="Druid工具类"><a href="#Druid工具类" class="headerlink" title="Druid工具类"></a>Druid工具类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Druid工具类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DruidUtils</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义成员变量</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> DataSource dataSource;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 在静态代码块中加载配置文件，并且获取连接池对象，这些都是只需要进行一次的操作</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//加载配置文件</span></span><br><span class="line">            Properties properties = <span class="keyword">new</span> Properties();</span><br><span class="line">            InputStream is = DruidUtils.class.getClassLoader().getResourceAsStream(<span class="string">&quot;druid.properties&quot;</span>);</span><br><span class="line">            properties.load(is);</span><br><span class="line">            <span class="comment">//获取连接池对象</span></span><br><span class="line">            dataSource=DruidDataSourceFactory.createDataSource(properties);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取连接池对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 连接池对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> DataSource <span class="title">getDataSource</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> dataSource;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取数据库连接对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 数据库连接对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title">getConnection</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> dataSource.getConnection();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 释放数据库连接资源</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> rs 数据库结果集</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> connection 数据库连接对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> statement sql语句执行对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">(ResultSet rs, Connection connection, Statement statement)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(rs!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                rs.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException throwables) &#123;</span><br><span class="line">                throwables.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(statement!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                statement.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException throwables) &#123;</span><br><span class="line">                throwables.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(connection!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                connection.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException throwables) &#123;</span><br><span class="line">                throwables.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 释放数据库连接资源</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> connection 数据库连接对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> statement sql语句执行对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">(Connection connection, Statement statement)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(statement!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                statement.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException throwables) &#123;</span><br><span class="line">                throwables.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(connection!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                connection.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException throwables) &#123;</span><br><span class="line">                throwables.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="测试代码"><a href="#测试代码" class="headerlink" title="测试代码"></a>测试代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Connection connection=<span class="keyword">null</span>;</span><br><span class="line">        PreparedStatement statement = <span class="keyword">null</span>;</span><br><span class="line">        ResultSet rs=<span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//利用工具来获取连接对象</span></span><br><span class="line">            connection = DruidUtils.getConnection();</span><br><span class="line">            String sql=<span class="string">&quot;select * from loginMess;&quot;</span>;</span><br><span class="line">            statement=connection.prepareStatement(sql);</span><br><span class="line">            rs=statement.executeQuery();</span><br><span class="line">            <span class="keyword">while</span> (rs.next())&#123;</span><br><span class="line">                String user=rs.getString(<span class="number">2</span>);</span><br><span class="line">                String pass=rs.getString(<span class="number">3</span>);</span><br><span class="line">                System.out.println(user+<span class="string">&quot; : &quot;</span>+pass);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            DruidUtils.close(rs,connection,statement);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaWeb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>4-JDBC</title>
      <link href="/2021/03/04/4-JDBC/"/>
      <url>/2021/03/04/4-JDBC/</url>
      
        <content type="html"><![CDATA[<h1 id="JDBC-Java数据库连接"><a href="#JDBC-Java数据库连接" class="headerlink" title="JDBC Java数据库连接"></a>JDBC Java数据库连接</h1><h3 id="Java-Database-Connectivity"><a href="#Java-Database-Connectivity" class="headerlink" title="(Java Database Connectivity)"></a>(Java Database Connectivity)</h3><h2 id="JDBC本质"><a href="#JDBC本质" class="headerlink" title="JDBC本质"></a>JDBC本质</h2><p>本质是sun公司制作的一套操作所有关系型数据库的规则，即接口。各个数据库厂商负责实现这些接口，提供响应的数据库驱动jar包，我们可以使用这套接口（JDBC）编程，最终真正执行的是数据库驱动jar包中的实现类</p><h2 id="基本流程"><a href="#基本流程" class="headerlink" title="基本流程"></a>基本流程</h2><ol><li>导入驱动jar包<ol><li>在项目中新建libs目录(和src同级)</li><li>将mysql-connector-java-8.0.20.jar复制到libs目录中</li><li>右键libs目录，将该目录添加到library(add as library)</li></ol></li><li>注册驱动</li><li>获取数据库连接对象Connection</li><li>定义sql</li><li>获取执行sql语句的对象statement</li><li>执行sql，接收返回结果</li><li>处理结果</li><li>释放资源</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JDBCDemo1</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//注册驱动</span></span><br><span class="line">        Class.forName(<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);</span><br><span class="line">        <span class="comment">//获取数据库连接对象</span></span><br><span class="line">        Connection connection= DriverManager.getConnection(<span class="string">&quot;jdbc:mysql://cdb-cd3ybvc6.cd.tencentcdb.com:10056/weixinNews&quot;</span>,<span class="string">&quot;root&quot;</span>,<span class="string">&quot;renboyu&quot;</span>);</span><br><span class="line">        <span class="comment">//定义sql语句</span></span><br><span class="line">        String sql=<span class="string">&quot;SELECT * FROM WEIBO WHERE TITLE LIKE &#x27;%韩国%&#x27;;&quot;</span>;</span><br><span class="line">        <span class="comment">//获取执行sql的对象Statement</span></span><br><span class="line">        Statement statement=connection.createStatement();</span><br><span class="line">        <span class="comment">//执行sql语句</span></span><br><span class="line">        ResultSet set=statement.executeQuery(sql);</span><br><span class="line">        <span class="comment">//打印结果</span></span><br><span class="line">        <span class="keyword">while</span> (set.next())&#123;</span><br><span class="line">            String title=set.getString(<span class="string">&quot;TITLE&quot;</span>);</span><br><span class="line">            System.out.println(title);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//释放资源</span></span><br><span class="line">        statement.close();</span><br><span class="line">        connection.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="更规范的流程"><a href="#更规范的流程" class="headerlink" title="更规范的流程"></a>更规范的流程</h4><p>（尽量避免直接抛出错误）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JDBCDemo2</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Connection connection=<span class="keyword">null</span>;</span><br><span class="line">        Statement statement=<span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//注册驱动</span></span><br><span class="line">            Class.forName(<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);</span><br><span class="line">            <span class="comment">//定义sql语句</span></span><br><span class="line">            String sql=<span class="string">&quot;insert into stuMess VALUES(null,&#x27;Leslie&#x27;,&#x27;CS&#x27;,&#x27;95&#x27;);&quot;</span>;</span><br><span class="line">            <span class="comment">//获取数据库连接对象</span></span><br><span class="line">            connection= DriverManager.getConnection(<span class="string">&quot;jdbc:mysql://cdb-cd3ybvc6.cd.tencentcdb.com:10056/jdbcTest&quot;</span>,<span class="string">&quot;root&quot;</span>,<span class="string">&quot;renboyu010214&quot;</span>);</span><br><span class="line">            <span class="comment">//获取执行sql的对象Statement</span></span><br><span class="line">            statement=connection.createStatement();</span><br><span class="line">            <span class="comment">//执行sql语句</span></span><br><span class="line">            <span class="keyword">int</span> result=statement.executeUpdate(sql);</span><br><span class="line">            <span class="comment">//输出结果</span></span><br><span class="line">            System.out.println(result);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException | SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">//释放资源,由于可能出错导致没有成功获取数据库连接对象和Statement，所以要提前检验是否为空</span></span><br><span class="line">            <span class="keyword">if</span>(statement!=<span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    statement.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (SQLException throwables) &#123;</span><br><span class="line">                    throwables.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(connection!=<span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    connection.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (SQLException throwables) &#123;</span><br><span class="line">                    throwables.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="各个对象详解"><a href="#各个对象详解" class="headerlink" title="各个对象详解"></a>各个对象详解</h2><h3 id="DriverManager"><a href="#DriverManager" class="headerlink" title="DriverManager"></a>DriverManager</h3><p>驱动管理对象 </p><h4 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h4><p><strong>注册驱动</strong></p><p>DriverManager提供registerDriver方法注册给定的驱动程序，而我们在上面代码中所写的<code>Class.forName(&quot;com.mysql.cj.jdbc.Driver&quot;);</code>之所以能注册驱动，是因为将com.mysql.cj.jdbc.Driver加载进了内存，而com.mysql.cj.jdbc.Driver包内存在静态代码块，通过阅读源码可以找到该静态代码块</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        java.sql.DriverManager.registerDriver(<span class="keyword">new</span> Driver());</span><br><span class="line">    &#125; <span class="keyword">catch</span> (SQLException E) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;Can&#x27;t register driver!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到<code>Class.forName(&quot;com.mysql.cj.jdbc.Driver&quot;);</code>仍然是通过调用DriverManager提供的registerDriver方法注册驱动程序，只是这种写法比调用方法更加简洁</p><p>不过，自5版本后，jar包会自动帮我们注册驱动，所以其实注册驱动步骤可以省略</p><p><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/%E8%87%AA%E5%8A%A8%E6%B3%A8%E5%86%8C%E9%A9%B1%E5%8A%A8.jpg" alt="自动注册驱动"></p><p><strong>获取数据库连接</strong></p><p>利用DriverManager的getConnection方法可以获取数据库连接，返回数据库连接对象</p><p>该方法接收三个参数，分别是</p><ul><li>url:指定连接路径，以MySQL为例：jdbc:mysql://ip地址(域名):端口号/数据库名称</li><li>user:用户名</li><li>password:密码</li></ul><h3 id="Connection"><a href="#Connection" class="headerlink" title="Connection"></a>Connection</h3><p>数据库连接对象</p><h4 id="功能-1"><a href="#功能-1" class="headerlink" title="功能"></a>功能</h4><p><strong>获取执行sql语句的对象</strong></p><ul><li>Statement    createStatement()</li><li>PreparedStatement    prepareStatement(String sql)</li></ul><p><strong>管理事务</strong></p><ul><li>开启事务：void setAutoCommit​(boolean autoCommit)  调用该方法，设置参数为false，即可开启事务<ul><li>在执行sql语句之前开启事务</li></ul></li><li>提交事务：void commit()  <ul><li>在所有sql语句执行完后提交事务</li></ul></li><li>回滚事务：void rollback()<ul><li>在catch中回滚事务</li></ul></li></ul><h3 id="Statement"><a href="#Statement" class="headerlink" title="Statement"></a>Statement</h3><p>执行sql语句的对象</p><h4 id="功能-2"><a href="#功能-2" class="headerlink" title="功能"></a>功能</h4><p><strong>执行sql语句</strong></p><ul><li>boolean    execute(String sql) 执行任意的sql语句，不常用（返回值为执行的结果）</li><li>int executeUpdate​(String sql) 执行DML语句和DDL语句。返回值为影响的行数，可以作为判断执行成功与否的标准</li><li>ResultSet    executeQuery​(String sql) 执行DQL语句</li></ul><h3 id="ResultSet"><a href="#ResultSet" class="headerlink" title="ResultSet"></a>ResultSet</h3><p>数据库结果集对象</p><ul><li>boolean next() 游标向下移动一行,返回值表示当前行是否是最后一行数据，如果是则返回false，所以可以用while循环遍历ResultSet</li><li>getString(),getInt,getDouble…   获取某一行中的数据，可以接收两种参数，整型参数表示数据的列数，字符串型数据表示列的名称</li></ul><h3 id="PreparedStatement"><a href="#PreparedStatement" class="headerlink" title="PreparedStatement"></a>PreparedStatement</h3><p>执行sql语句的对象</p><h4 id="sql注入问题"><a href="#sql注入问题" class="headerlink" title="sql注入问题"></a>sql注入问题</h4><p>在拼接sql时，有一些sql的特殊关键字参与字符串拼接，导致安全性问题。例如，下面代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String userName, password;</span><br><span class="line">String sql=<span class="string">&quot;SELECT * FROM loginMess where userName =&#x27;&quot;</span>+userName+<span class="string">&quot;&#x27; and password=&#x27;&quot;</span>+password+<span class="string">&quot;&#x27;;&quot;</span>;</span><br></pre></td></tr></table></figure><p>假如password处用户传入<code>a&#39; or &#39;a&#39;=&#39;a&#39;</code>。则整个sql语句变为了<code>SELECT * FROM loginMess where userName =&#39;userName&#39; and password=&#39;a&#39; or &#39;a&#39;=&#39;a&#39;;</code>则整个sql语句变为恒等句，用户始终可以登录成功</p><h4 id="可能发生sql诸如的代码"><a href="#可能发生sql诸如的代码" class="headerlink" title="可能发生sql诸如的代码"></a>可能发生sql诸如的代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 登录案例,使用PreparedStatement实现</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginDemo2</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">login</span><span class="params">(String userName,String password)</span></span>&#123;</span><br><span class="line">        Connection connection=<span class="keyword">null</span>;</span><br><span class="line">        Statement statement=<span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//通过工具类获取数据库连接</span></span><br><span class="line">            connection= JDBCUtils.getConnection();</span><br><span class="line">            <span class="comment">//定义sql语句</span></span><br><span class="line">            String sql=<span class="string">&quot;SELECT * FROM loginMess where userName =&#x27;&quot;</span>+userName+<span class="string">&quot;&#x27; and password=&#x27;&quot;</span>+password+<span class="string">&quot;&#x27;;&quot;</span>;</span><br><span class="line">            <span class="comment">//获取执行sql的对象Statement</span></span><br><span class="line">            statement=connection.createStatement();</span><br><span class="line">            <span class="comment">//执行sql语句</span></span><br><span class="line">            ResultSet set=statement.executeQuery(sql);</span><br><span class="line">            <span class="comment">//遍历数据库表，获得所有用户对象</span></span><br><span class="line">            <span class="keyword">if</span> (set.next())&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;登陆成功&quot;</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;登陆失败&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException throwables) &#123;</span><br><span class="line">            throwables.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">//通过工具类关闭资源</span></span><br><span class="line">            JDBCUtils.closeDB(connection,statement);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Scanner sc=<span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        System.out.println(<span class="string">&quot;please input the username:&quot;</span>);</span><br><span class="line">        String userName=sc.nextLine();</span><br><span class="line">        System.out.println(<span class="string">&quot;please input the password:&quot;</span>);</span><br><span class="line">        String password=sc.nextLine();</span><br><span class="line">        login(userName,password);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h4><p>使用PreparedStatement对象来执行sql语句，PreparedStatement对象执行预编译的sql语句，所有参数使用“?”作为占位符。借此可解决sql诸如问题</p><h4 id="使用PreparedStatement后的流程"><a href="#使用PreparedStatement后的流程" class="headerlink" title="使用PreparedStatement后的流程"></a>使用PreparedStatement后的流程</h4><ol><li>导入驱动jar包</li><li>注册驱动</li><li>获取数据库连接对象Connection</li><li>定义sql<ul><li>注意：定义的sql语句中的所有变量用通配符?代替</li></ul></li><li>获取执行sql语句的对象PreparedStatement（需要传入sql语句）</li><li>给?赋值<ul><li>setInt,setDouble等等方法，第一个参数为通配符?的位置，第二个参数为传入的值</li></ul></li><li>执行sql，接收返回结果（PreparedStatement对象的执行方法不需要传入sql语句，因为已经在定义时传入了）</li><li>处理结果</li><li>释放资源（PreparedStatement和Statement一样也需要释放）</li></ol><h4 id="使用PreparedStatement修改后的登录代码"><a href="#使用PreparedStatement修改后的登录代码" class="headerlink" title="使用PreparedStatement修改后的登录代码"></a>使用PreparedStatement修改后的登录代码</h4><p>可以避免sql诸如问题</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 登录案例,使用PreparedStatement实现</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginDemo2</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">login</span><span class="params">(String userName,String password)</span></span>&#123;</span><br><span class="line">        Connection connection=<span class="keyword">null</span>;</span><br><span class="line">        PreparedStatement preSta=<span class="keyword">null</span>;</span><br><span class="line">        ResultSet set=<span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//通过工具类获取数据库连接</span></span><br><span class="line">            connection= JDBCUtils.getConnection();</span><br><span class="line">            <span class="comment">//定义sql语句，所有变量用通配符?代替</span></span><br><span class="line">            String sql=<span class="string">&quot;SELECT * FROM loginMess where userName =? and password=?;&quot;</span>;</span><br><span class="line">            <span class="comment">//获取执行sql的对象PreparedStatement</span></span><br><span class="line">            preSta=connection.prepareStatement(sql);</span><br><span class="line">            <span class="comment">//给?赋值</span></span><br><span class="line">            preSta.setString(<span class="number">1</span>,userName);</span><br><span class="line">            preSta.setString(<span class="number">2</span>,password);</span><br><span class="line">            <span class="comment">//执行sql语句(不需要传参)</span></span><br><span class="line">            set=preSta.executeQuery();</span><br><span class="line">            <span class="comment">//遍历数据库表，获得所有用户对象</span></span><br><span class="line">            <span class="keyword">if</span> (set.next())&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;登陆成功&quot;</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;登陆失败&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException throwables) &#123;</span><br><span class="line">            throwables.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">//通过工具类关闭资源</span></span><br><span class="line">            JDBCUtils.closeDB(set,connection,preSta);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Scanner sc=<span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        System.out.println(<span class="string">&quot;please input the username:&quot;</span>);</span><br><span class="line">        String userName=sc.nextLine();</span><br><span class="line">        System.out.println(<span class="string">&quot;please input the password:&quot;</span>);</span><br><span class="line">        String password=sc.nextLine();</span><br><span class="line">        login(userName,password);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="定义JDBC工具类简化代码"><a href="#定义JDBC工具类简化代码" class="headerlink" title="定义JDBC工具类简化代码"></a>定义JDBC工具类简化代码</h2><h3 id="工具类"><a href="#工具类" class="headerlink" title="工具类"></a>工具类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * JDBC工具类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JDBCUtils</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义各个静态遍历</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String url;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String user;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String password;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String driver;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 静态代码块，只在创建时调用一次</span></span><br><span class="line"><span class="comment">     * 可以在此处进行配置文件的读取，以及驱动注册等步骤</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 将url，user，password，driver等变量</span></span><br><span class="line"><span class="comment">     * 存入配置文件并读取可以提高代码复用性</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//创建配置文件数据集</span></span><br><span class="line">            Properties pro=<span class="keyword">new</span> Properties();</span><br><span class="line">            <span class="comment">//创建类加载器classLoader</span></span><br><span class="line">            ClassLoader classLoader=JDBCUtils.class.getClassLoader();</span><br><span class="line">            <span class="comment">//通过类加载器获取在src下的配置文件，这样可以避免绝对路径带来的问题</span></span><br><span class="line">            URL res=classLoader.getResource(<span class="string">&quot;jdbc.properties&quot;</span>);</span><br><span class="line">            String path=res.getPath();</span><br><span class="line">            <span class="comment">//加载配置文件</span></span><br><span class="line">            pro.load(<span class="keyword">new</span> FileReader(path));</span><br><span class="line"></span><br><span class="line">            <span class="comment">//获取配置文件中的数据</span></span><br><span class="line">            url=pro.getProperty(<span class="string">&quot;url&quot;</span>);</span><br><span class="line">            user=pro.getProperty(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">            password=pro.getProperty(<span class="string">&quot;password&quot;</span>);</span><br><span class="line">            driver=pro.getProperty(<span class="string">&quot;driver&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//注册驱动</span></span><br><span class="line">            Class.forName(driver);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException | ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取数据库连接</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 数据库连接</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> SQLException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title">getConnection</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> DriverManager.getConnection(url,user,password);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 关闭数据库相关资源</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> rs ResultSet数据库结果集对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> connection 数据库连接对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> statement sql语句执行对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">closeDB</span><span class="params">(ResultSet rs,Connection connection,Statement statement)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(rs!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                rs.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException throwables) &#123;</span><br><span class="line">                throwables.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(statement!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                statement.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException throwables) &#123;</span><br><span class="line">                throwables.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(connection!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                connection.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException throwables) &#123;</span><br><span class="line">                throwables.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 关闭数据库相关资源</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> connection 数据库连接对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> statement sql语句执行对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">closeDB</span><span class="params">(Connection connection,Statement statement)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(statement!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                statement.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException throwables) &#123;</span><br><span class="line">                throwables.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(connection!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                connection.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException throwables) &#123;</span><br><span class="line">                throwables.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">url=jdbc:mysql:<span class="comment">//cdb-cd3ybvc6.cd.tencentcdb.com:10056/weixinNews</span></span><br><span class="line">user=root</span><br><span class="line">password=rby</span><br><span class="line">driver=com.mysql.cj.jdbc.Driver</span><br></pre></td></tr></table></figure><h3 id="测试类"><a href="#测试类" class="headerlink" title="测试类"></a>测试类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JDBCDemo3</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Connection connection=<span class="keyword">null</span>;</span><br><span class="line">        Statement statement=<span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//通过工具类获取数据库连接</span></span><br><span class="line">            connection= JDBCUtils.getConnection();</span><br><span class="line">            <span class="comment">//定义sql语句</span></span><br><span class="line">            String sql=<span class="string">&quot;SELECT * FROM WEIBO WHERE TITLE LIKE &#x27;%韩国%&#x27;;&quot;</span>;</span><br><span class="line">            <span class="comment">//获取执行sql的对象Statement</span></span><br><span class="line">            statement=connection.createStatement();</span><br><span class="line">            <span class="comment">//执行sql语句</span></span><br><span class="line">            ResultSet set=statement.executeQuery(sql);</span><br><span class="line">            <span class="comment">//打印结果</span></span><br><span class="line">            <span class="keyword">while</span> (set.next())&#123;</span><br><span class="line">                String title=set.getString(<span class="string">&quot;TITLE&quot;</span>);</span><br><span class="line">                System.out.println(title);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException throwables) &#123;</span><br><span class="line">            throwables.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">//通过工具类关闭资源</span></span><br><span class="line">            JDBCUtils.closeDB(connection,statement);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaWeb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>3-注解</title>
      <link href="/2021/03/04/3-%E6%B3%A8%E8%A7%A3/"/>
      <url>/2021/03/04/3-%E6%B3%A8%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h1 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h1><blockquote><p>从JDK5开始,Java增加对元数据的支持，也就是注解，注解是一种代码级别的说明。注解与注释是有一定区别的，可以把注解理解为代码里的特殊标记，这些标记可以在编译，类加载，运行时被读取，并执行相应的处理。通过注解开发人员可以在不改变原有代码和逻辑的情况下在源代码中嵌入补充信息。</p></blockquote><h3 id="作用分类"><a href="#作用分类" class="headerlink" title="作用分类"></a>作用分类</h3><ul><li>编写文档：通过代码里标识的注解生成doc文档</li><li>代码分析：通过代码里标识的注解进行代码分析（使用反射）</li><li>编译检查：通过代码里标识的注解对代码进行基本的编译检查</li></ul><h2 id="JDK内置注解"><a href="#JDK内置注解" class="headerlink" title="JDK内置注解"></a>JDK内置注解</h2><ul><li>@Override： 检测被注解的方法是否继承自父类/父接口，不是则报错</li><li>@Deprecated： 将该注解标注的内容标识为已过时的内容</li><li>@SuppressWarnings： 压制警告， 指示编译器去忽略注解中声明的警告。（一般传递参数”all”压制所有警告）</li><li>@SafeVarargs：  Java 7 开始支持，忽略任何使用参数为泛型变量的方法或构造函数调用产生的警告。</li><li>@FunctionalInterface：   Java 8 开始支持，标识一个匿名函数或函数式接口。</li></ul><h2 id="自定义注解"><a href="#自定义注解" class="headerlink" title="自定义注解"></a>自定义注解</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//自定义注解的格式</span></span><br><span class="line"></span><br><span class="line">元注解...</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> 注解名称()&#123;&#125;</span><br></pre></td></tr></table></figure><h3 id="注解的本质"><a href="#注解的本质" class="headerlink" title="注解的本质"></a>注解的本质</h3><p>注解本质就是一个接口，该接口默认继承java.lang.annotation.Annotation接口</p><p>下面的内容就是通过将<code>public @interface MyAnnotation &#123; &#125;</code>经过编译与反编译后重新得到的Java文件，可以清楚的看到注解的本质</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MyAnnotation</span> <span class="keyword">extends</span> <span class="title">java</span>.<span class="title">lang</span>.<span class="title">annotation</span>.<span class="title">Annotation</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure><p><strong>编译与反编译的过程</strong><br><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/%E6%B3%A8%E8%A7%A3%E7%9A%84%E6%9C%AC%E8%B4%A8.jpg" alt="注解的本质"></p><h3 id="注解的属性"><a href="#注解的属性" class="headerlink" title="注解的属性"></a>注解的属性</h3><p>在注解接口中定义的抽象的成员方法</p><h4 id="要求"><a href="#要求" class="headerlink" title="要求"></a>要求</h4><p>属性的返回值类型只能是下列取值：</p><ul><li>基本数据类型</li><li>String类</li><li>枚举</li><li>注解</li><li>以上类型的数组</li></ul><p>定义属性后，在使用时需要给属性赋值（或者在定义时利用default()传入默认值）</p><p>如果只有一个属性需要赋值，且属性名为value，则value可以省略，直接传入值即可</p><p>数组赋值时，使用大括号{}包裹值，如果数组中只有一个值，大括号可以省略</p><h2 id="元注解"><a href="#元注解" class="headerlink" title="元注解"></a>元注解</h2><p>用于描述注解的注解</p><ul><li>@Target：描述注解能够作用的位置（ElementType常见取值：TYPE表示能够作用于类上，METHOD表示能够作用于方法上，FIELD表示能够作用于成员变量上）</li><li>@Retention：描述注解被保留的阶段（Java代码的三个阶段SOURCE：源代码阶段，CLASS：类对象阶段，RUNTIME：运行时阶段）　一般情况下自定义注解都选择运行时阶段</li><li>@Documented：描述注解是否被抽取到API文档中</li><li>@Inherited：描述注解是否被子类继承</li></ul><h2 id="在程序中使用（解析）注解"><a href="#在程序中使用（解析）注解" class="headerlink" title="在程序中使用（解析）注解"></a>在程序中使用（解析）注解</h2><h3 id="获取注解中定义的属性值"><a href="#获取注解中定义的属性值" class="headerlink" title="获取注解中定义的属性值"></a>获取注解中定义的属性值</h3><p>首先获取注解定义位置的对象，因为注解可以定义在类，方法或成员变量上，所以需要获取对应变量，例如：注解定义在类上，就需要获取该类对象，然后通过类对象的getAnnotation方法获取到指定的注解，随后只需要调用注解的属性值（抽象方法）即可获取到我们所配置的属性值</p><h4 id="定义注解："><a href="#定义注解：" class="headerlink" title="定义注解："></a>定义注解：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 描述需要执行的类名和方法名</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Target(&#123;ElementType.TYPE&#125;)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Inherited</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Pro &#123;</span><br><span class="line">    <span class="function">String <span class="title">className</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function">String <span class="title">methodName</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="调用注解并获取属性值"><a href="#调用注解并获取属性值" class="headerlink" title="调用注解并获取属性值"></a>调用注解并获取属性值</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Pro(className = &quot;cn.ywrby.domain.Person&quot;,methodName = &quot;MessageOfPerson&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReflectTest2</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//解析注解</span></span><br><span class="line">        <span class="comment">//获取本类的字节码文件对象</span></span><br><span class="line">        Class&lt;ReflectTest2&gt; MyCls=ReflectTest2.class;</span><br><span class="line">        <span class="comment">//获取本类指定的注解</span></span><br><span class="line">        <span class="comment">//其实就是在内存中生成一个该注解接口的子类实现对象，该子类复写了注解的属性，返回值就是我们定义注解时传入的值</span></span><br><span class="line">        Pro annotation=MyCls.getAnnotation(Pro.class);</span><br><span class="line">        <span class="comment">//调用注解对象中定义的抽象方法（属性）,获取返回值</span></span><br><span class="line">        String className=annotation.className();</span><br><span class="line">        String methodName=annotation.methodName();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//加载该类进内存，并且创建对象</span></span><br><span class="line">        Class cls=Class.forName(className);</span><br><span class="line">        <span class="comment">//创建对象</span></span><br><span class="line">        Object object=cls.getDeclaredConstructor().newInstance();</span><br><span class="line">        <span class="comment">//获取方法对象</span></span><br><span class="line">        Method method=cls.getMethod(methodName);</span><br><span class="line">        <span class="comment">//执行方法</span></span><br><span class="line">        method.invoke(object);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="简单案例：完成一个简单的测试框架"><a href="#简单案例：完成一个简单的测试框架" class="headerlink" title="简单案例：完成一个简单的测试框架"></a>简单案例：完成一个简单的测试框架</h2><h4 id="自定义注解-1"><a href="#自定义注解-1" class="headerlink" title="自定义注解"></a>自定义注解</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target(ElementType.METHOD)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Check &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="使用注解"><a href="#使用注解" class="headerlink" title="使用注解"></a>使用注解</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Calculator2</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Check</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;1+0=&quot;</span>+(<span class="number">1</span>+<span class="number">0</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Check</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sub</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;1-0=&quot;</span>+(<span class="number">1</span>-<span class="number">0</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Check</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">mul</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;1*0=&quot;</span>+(<span class="number">1</span>*<span class="number">0</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Check</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">div</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;1/0=&quot;</span>+(<span class="number">1</span>/<span class="number">0</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ignore</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;永不报错，不被检查&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="进行测试"><a href="#进行测试" class="headerlink" title="进行测试"></a>进行测试</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 简单的测试框架</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 主方法执行后，自动检测所有加上<span class="doctag">@Check</span>注解的方法，判断方法有无异常，并记录在文件中</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Calculator2Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> errorNum=<span class="number">0</span>;   <span class="comment">//出现异常的次数</span></span><br><span class="line">        BufferedWriter bw=<span class="keyword">new</span> BufferedWriter(<span class="keyword">new</span> FileWriter(<span class="string">&quot;bug.txt&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建Calculator2对象</span></span><br><span class="line">        Calculator2 cal=<span class="keyword">new</span> Calculator2();</span><br><span class="line">        <span class="comment">//获取字节码文件对象</span></span><br><span class="line">        Class&lt;Calculator2&gt; cls=Calculator2.class;</span><br><span class="line">        <span class="comment">//获取所有方法</span></span><br><span class="line">        Method[] methods=cls.getMethods();</span><br><span class="line">        <span class="comment">//判断是否有@Check注解</span></span><br><span class="line">        <span class="keyword">for</span>(Method method:methods)&#123;</span><br><span class="line">            <span class="comment">//isAnnotationPresent方法判断当前方法上是否有指定的注解</span></span><br><span class="line">            <span class="keyword">if</span>(method.isAnnotationPresent(Check.class))&#123;</span><br><span class="line">                <span class="comment">//存在则执行方法，不存在则不执行该方法</span></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    method.invoke(cal);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    <span class="comment">//发现异常，捕获异常并记录在文件中</span></span><br><span class="line">                    errorNum+=<span class="number">1</span>;</span><br><span class="line">                    bw.write(method.getName()+<span class="string">&quot;方法出现异常！&quot;</span>);</span><br><span class="line">                    bw.newLine(); <span class="comment">//换行</span></span><br><span class="line">                    bw.write(<span class="string">&quot;异常的名称：&quot;</span>+e.getCause().getClass().getSimpleName()); <span class="comment">//获取异常的简短名称</span></span><br><span class="line">                    bw.newLine();</span><br><span class="line">                    bw.write(<span class="string">&quot;异常的原因&quot;</span>+e.getCause().getMessage());</span><br><span class="line">                    bw.newLine();</span><br><span class="line">                    bw.write(<span class="string">&quot;--------------------------------------&quot;</span>);</span><br><span class="line">                    bw.newLine();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        bw.write(<span class="string">&quot;本次一共出现&quot;</span>+errorNum+<span class="string">&quot;个异常&quot;</span>);</span><br><span class="line">        bw.flush();</span><br><span class="line">        bw.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="运行效果"><a href="#运行效果" class="headerlink" title="运行效果"></a>运行效果</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">//窗口显示结果</span><br><span class="line">1+0=1</span><br><span class="line">1-0=1</span><br><span class="line">1*0=0</span><br><span class="line">//bug.txt文件中显示内容</span><br><span class="line">div方法出现异常！</span><br><span class="line">异常的名称：ArithmeticException</span><br><span class="line">异常的原因/ by zero</span><br><span class="line">--------------------------------------</span><br><span class="line">本次一共出现1个异常</span><br></pre></td></tr></table></figure><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><ul><li>以后大部分情境下，我们是注解的使用者而不是自定义</li><li>注解的目的是给编译器或解析程序使用</li><li>注解不是程序的一部分，注解的存在更类似于标签的作用</li></ul>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaWeb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2-反射</title>
      <link href="/2021/03/04/2-%E5%8F%8D%E5%B0%84/"/>
      <url>/2021/03/04/2-%E5%8F%8D%E5%B0%84/</url>
      
        <content type="html"><![CDATA[<h1 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h1><p>框架设计的灵魂，反射机制就是指将类的各个组成部分封装成其他对象</p><h2 id="框架"><a href="#框架" class="headerlink" title="框架"></a>框架</h2><p>半成品的软件，可以在其基础上进行软件开发，简化代码</p><h2 id="反射机制的好处"><a href="#反射机制的好处" class="headerlink" title="反射机制的好处"></a>反射机制的好处</h2><ul><li>可以在程序运行过程中操作这些对象</li><li>可以解耦，提高程序可扩展性</li></ul><h2 id="Java代码在计算机中的三个运行阶段"><a href="#Java代码在计算机中的三个运行阶段" class="headerlink" title="Java代码在计算机中的三个运行阶段"></a>Java代码在计算机中的三个运行阶段</h2><p><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/java%E4%BB%A3%E7%A0%81%E4%B8%89%E4%B8%AA%E8%BF%90%E8%A1%8C%E9%98%B6%E6%AE%B5.jpg" alt="java代码三个运行阶段"></p><p>（第二阶段通过类加载器将源代码阶段的字节码文件加载进了内存）</p><h3 id="三个阶段获取Class对象的方法"><a href="#三个阶段获取Class对象的方法" class="headerlink" title="三个阶段获取Class对象的方法"></a>三个阶段获取Class对象的方法</h3><h4 id="源代码阶段"><a href="#源代码阶段" class="headerlink" title="源代码阶段"></a>源代码阶段</h4><p>Class.forName(“全类名”)：将字节码文件加载进内存，返回Class类对象</p><p>多用于配置文件，将类名定义在配置文件中，读取文件，加载类</p><h4 id="Class类对象阶段"><a href="#Class类对象阶段" class="headerlink" title="Class类对象阶段"></a>Class类对象阶段</h4><p>通过 类名.class：通过类名的属性class获取</p><p>多用于参数传递时</p><h4 id="运行时阶段"><a href="#运行时阶段" class="headerlink" title="运行时阶段"></a>运行时阶段</h4><p>通过 对象.getClass() 获取（getClass方法定义在Object类中，所以所有对象都具有该方法）</p><p>多用于对象已被创建后，通过对象获取字节码文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取Class对象的三种方法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReflectDemo1</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//Class.forName(&quot;全类名&quot;)</span></span><br><span class="line">        Class cls1=Class.forName(<span class="string">&quot;cn.ywrby.domain.Person&quot;</span>);</span><br><span class="line">        System.out.println(cls1);</span><br><span class="line">        <span class="comment">//类名.class</span></span><br><span class="line">        Class cls2= Person.class;</span><br><span class="line">        System.out.println(cls2);</span><br><span class="line">        <span class="comment">//对象.getClass()</span></span><br><span class="line">        Person person=<span class="keyword">new</span> Person();</span><br><span class="line">        Class cls3=person.getClass();</span><br><span class="line">        System.out.println(cls3);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//判读Class对象是否为同一个</span></span><br><span class="line">        System.out.println(cls1==cls2);</span><br><span class="line">        System.out.println(cls1==cls3);</span><br><span class="line">        <span class="comment">//结果均为true说明一个字节码文件(*.class)在一次程序运行过程中，只会被加载一次</span></span><br><span class="line">        <span class="comment">//也就是说不论通过哪一种方式获取到的Class对象都是同一个</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="使用Class对象"><a href="#使用Class对象" class="headerlink" title="使用Class对象"></a>使用Class对象</h2><h3 id="获取功能"><a href="#获取功能" class="headerlink" title="获取功能"></a>获取功能</h3><ul><li>获取成员变量们<ul><li>Field[]    getFields()  获取所有<strong>public修饰</strong>的成员变量</li><li>Field    getField(String name)  获取指定名称的由<strong>public修饰</strong>的成员变量 （通过Filed对象的get()和set()方法可以获取和设置成员变量的值，不过需要传入对象参数）</li><li>Field[]    getDeclaredFields()  获取所有的成员变量，不考虑变量的修饰符</li><li>Field    getDeclaredField(String name)  获取指定成员变量，不考虑修饰符</li></ul></li><li>获取构造方法们<ul><li>Constructor&lt;?&gt;[]    getConstructors()</li><li>Constructor<T>    getConstructor(Class&lt;?&gt;… parameterTypes)</li><li>Constructor&lt;?&gt;[]    getDeclaredConstructors()</li><li>Constructor<T>    getDeclaredConstructor(Class&lt;?&gt;… parameterTypes)</li></ul></li><li>获取成员方法们<ul><li>Method[]    getMethods()</li><li>Method    getMethod(String name, Class&lt;?&gt;… parameterTypes)</li><li>Method[]    getDeclaredMethods()</li><li>Method    getDeclaredMethod(String name, Class&lt;?&gt;… parameterTypes)</li></ul></li><li>获取类名<ul><li>String    getName()</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取成员变量们</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReflectDemo2</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//首先获取Person的Class对象</span></span><br><span class="line">        Class personClass=Person.class;</span><br><span class="line">        <span class="comment">//获取所有public修饰的成员变量</span></span><br><span class="line">        Field[] fields=personClass.getFields();</span><br><span class="line">        <span class="keyword">for</span> (Field field: fields) &#123;</span><br><span class="line">            System.out.println(field);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;--------------------&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取指定的public修饰的成员变量</span></span><br><span class="line">        Field field=personClass.getField(<span class="string">&quot;num&quot;</span>);</span><br><span class="line">        <span class="comment">//设置成员变量的值</span></span><br><span class="line">        Person p=<span class="keyword">new</span> Person();</span><br><span class="line">        field.set(p,<span class="number">80</span>);</span><br><span class="line">        <span class="comment">//获取成员变量的值</span></span><br><span class="line">        Object num= field.get(p);</span><br><span class="line">        System.out.println(num);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;--------------------&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取所有的成员变量</span></span><br><span class="line">        Field[] fields1=personClass.getDeclaredFields();</span><br><span class="line">        <span class="keyword">for</span> (Field field1:fields1) &#123;</span><br><span class="line">            System.out.println(field1);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;--------------------&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取指定的成员变量</span></span><br><span class="line">        Field field1=personClass.getDeclaredField(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">        <span class="comment">/* 设置成员变量的值（正常情况下我们直接通过对象无法获取到对象所在类</span></span><br><span class="line"><span class="comment">         * 的非public类型的成员变量，但是通过反射的getDeclaredField等方法却可以获取到</span></span><br><span class="line"><span class="comment">         * 任意指定的成员变量，但如果该成员变量是非public修饰的，我们需要忽略访问权限修饰符的安全检查</span></span><br><span class="line"><span class="comment">         * 才能对该成员变量进行访问（获取或设置值））</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        field1.setAccessible(<span class="keyword">true</span>);   <span class="comment">//忽略访问权限修饰符的安全检查(被称为暴力反射)</span></span><br><span class="line">        field1.set(p,<span class="string">&quot;ywrby&quot;</span>);</span><br><span class="line">        Object name=field1.get(p);</span><br><span class="line">        System.out.println(name);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 运行结果</span></span><br><span class="line"><span class="comment">public int cn.ywrby.domain.Person.num</span></span><br><span class="line"><span class="comment">--------------------</span></span><br><span class="line"><span class="comment">80</span></span><br><span class="line"><span class="comment">--------------------</span></span><br><span class="line"><span class="comment">private java.lang.String cn.ywrby.domain.Person.name</span></span><br><span class="line"><span class="comment">private int cn.ywrby.domain.Person.age</span></span><br><span class="line"><span class="comment">public int cn.ywrby.domain.Person.num</span></span><br><span class="line"><span class="comment">--------------------</span></span><br><span class="line"><span class="comment">ywrby</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取构造方法们</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReflectDemo3</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//首先获取Person的Class对象</span></span><br><span class="line">        Class personClass = Person.class;</span><br><span class="line">        <span class="comment">//获取构造函数/构造器(构造函数间唯一区别就在于参数列表，所以通过参数类型获取指定构造器)</span></span><br><span class="line">        Constructor constructor=personClass.getConstructor(String.class,<span class="keyword">int</span>.class,<span class="keyword">int</span>.class);</span><br><span class="line">        <span class="comment">//利用构造方法可以用来创建对象  newInstance​(Object... initargs)方法就是用来创建对应的对象</span></span><br><span class="line">        Object person=constructor.newInstance(<span class="string">&quot;ywrby&quot;</span>,<span class="number">19</span>,<span class="number">95</span>);</span><br><span class="line">        System.out.println(person); <span class="comment">//这里记得在Person类中重写toString方法才能显示正确的各变量值（右键generate快速创建）</span></span><br><span class="line">        <span class="comment">//空参构造器一般直接采用下面这种方式简化创建</span></span><br><span class="line">        Object person2=personClass.getDeclaredConstructor().newInstance();</span><br><span class="line">        System.out.println(person2);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 运行结果</span></span><br><span class="line"><span class="comment">Person&#123;name=&#x27;ywrby&#x27;, age=19, num=95&#125;</span></span><br><span class="line"><span class="comment">Person&#123;name=&#x27;null&#x27;, age=0, num=0&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取成员方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReflectDemo4</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//首先获取Person的Class对象</span></span><br><span class="line">        Class personClass = Person.class;</span><br><span class="line">        <span class="comment">//获取指定方法,第一个参数是方法名，后续参数的方法的参数列表类型</span></span><br><span class="line">        Method method = personClass.getDeclaredMethod(<span class="string">&quot;MessageOfPerson&quot;</span>, <span class="keyword">int</span>.class);</span><br><span class="line">        <span class="comment">//执行方法</span></span><br><span class="line">        Person person = <span class="keyword">new</span> Person(<span class="string">&quot;ywrby&quot;</span>, <span class="number">19</span>, <span class="number">95</span>);</span><br><span class="line">        method.invoke(person, <span class="number">5</span>);  <span class="comment">//利用invoke执行方法，第一个参数是类对象，后续不定参是方法实参列表</span></span><br><span class="line">        <span class="comment">//方法对象还可以直接获取名称，利用getName()方法</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">name is ywrby, age is 19, num is 95</span></span><br><span class="line"><span class="comment">name is ywrby, age is 19, num is 95</span></span><br><span class="line"><span class="comment">name is ywrby, age is 19, num is 95</span></span><br><span class="line"><span class="comment">name is ywrby, age is 19, num is 95</span></span><br><span class="line"><span class="comment">name is ywrby, age is 19, num is 95</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><h2 id="反射的简单案例"><a href="#反射的简单案例" class="headerlink" title="反射的简单案例"></a>反射的简单案例</h2><h4 id="完成一个简单的框架，在不改变任何代码的前提下，能够创建任意类对象，并且运行其中任意方法（方法无参）"><a href="#完成一个简单的框架，在不改变任何代码的前提下，能够创建任意类对象，并且运行其中任意方法（方法无参）" class="headerlink" title="完成一个简单的框架，在不改变任何代码的前提下，能够创建任意类对象，并且运行其中任意方法（方法无参）"></a>完成一个简单的框架，在不改变任何代码的前提下，能够创建任意类对象，并且运行其中任意方法（方法无参）</h4><h4 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h4><ul><li>配置文件</li><li>反射</li></ul><h4 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h4><ol><li>将需要创建的全类名和需要执行的方法名定义在配置文件中</li><li>在程序中加载读取配置文件</li><li>使用反射技术来加载读取类文件进入内存</li><li>创建对象</li><li>执行方法</li></ol><h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">className</span>=<span class="string">cn.ywrby.domain.Person</span></span><br><span class="line"><span class="attr">methodName</span>=<span class="string">MessageOfPerson</span></span><br></pre></td></tr></table></figure><h3 id="简单框架"><a href="#简单框架" class="headerlink" title="简单框架"></a>简单框架</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReflectTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//加载配置文件</span></span><br><span class="line">        <span class="comment">//创建Properties对象</span></span><br><span class="line">        Properties pro = <span class="keyword">new</span> Properties();</span><br><span class="line">        <span class="comment">//利用load方法加载配置文件，转换为一个集合</span></span><br><span class="line">        ClassLoader classLoader=ReflectTest.class.getClassLoader();  <span class="comment">//获取类加载器</span></span><br><span class="line">        InputStream is=classLoader.getResourceAsStream(<span class="string">&quot;pro.properties&quot;</span>); <span class="comment">//利用类加载器的getResourceAsStream方法获取资源路径下的字节流对象</span></span><br><span class="line">        pro.load(is);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取配置文件中定义的数据</span></span><br><span class="line">        String className=pro.getProperty(<span class="string">&quot;className&quot;</span>);</span><br><span class="line">        String methodName=pro.getProperty(<span class="string">&quot;methodName&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//加载该类进内存，并且创建对象</span></span><br><span class="line">        Class cls=Class.forName(className);</span><br><span class="line">        <span class="comment">//创建对象</span></span><br><span class="line">        Object object=cls.getDeclaredConstructor().newInstance();</span><br><span class="line">        <span class="comment">//获取方法对象</span></span><br><span class="line">        Method method=cls.getMethod(methodName);</span><br><span class="line">        <span class="comment">//执行方法</span></span><br><span class="line">        method.invoke(object);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaWeb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1-Junit单元测试</title>
      <link href="/2021/03/04/1-Junit%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/"/>
      <url>/2021/03/04/1-Junit%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<h1 id="Junit单元测试"><a href="#Junit单元测试" class="headerlink" title="Junit单元测试"></a>Junit单元测试</h1><h2 id="测试分类"><a href="#测试分类" class="headerlink" title="测试分类"></a>测试分类</h2><ul><li>黑盒测试：<blockquote><p>在测试中，把程序看作一个不能打开的黑盒子，在完全不考虑程序内部结构和内部特性的情况下，在程序接口进行测试，它只检查程序功能是否按照需求规格说明书的规定正常使用，程序是否能适当地接收输入数据而产生正确的输出信息。</p></blockquote></li><li>白盒测试：<blockquote><p>白盒测试是一种测试用例设计方法，盒子指的是被测试的软件，白盒指的是盒子是可视的，即清楚盒子内部的东西以及里面是如何运作的。”白盒”法全面了解程序内部逻辑结构、对所有逻辑路径进行测试。</p></blockquote></li></ul><h2 id="Junit步骤（白盒测试）"><a href="#Junit步骤（白盒测试）" class="headerlink" title="Junit步骤（白盒测试）"></a>Junit步骤（白盒测试）</h2><h3 id="1-定义一个测试类（也叫测试用例）"><a href="#1-定义一个测试类（也叫测试用例）" class="headerlink" title="1. 定义一个测试类（也叫测试用例）"></a>1. 定义一个测试类（也叫测试用例）</h3><p>测试类名一般采用：被测试类名+Test的格式。例如，Calculator的测试类叫做CalculatorTest</p><p>测试包名一般叫做test，例如：cn.ywrby.test</p><h3 id="2-定义测试方法（可以独立运行）"><a href="#2-定义测试方法（可以独立运行）" class="headerlink" title="2. 定义测试方法（可以独立运行）"></a>2. 定义测试方法（可以独立运行）</h3><p>方法名一般采用：test+测试的方法名的格式，例如add方法的测试方法是testAdd方法</p><p>返回值一般为void，参数列表一般为空</p><h3 id="3-导入Junit依赖环境"><a href="#3-导入Junit依赖环境" class="headerlink" title="3.导入Junit依赖环境"></a>3.导入Junit依赖环境</h3><h3 id="4-给方法加-Test"><a href="#4-给方法加-Test" class="headerlink" title="4. 给方法加@Test"></a>4. 给方法加@Test</h3><h3 id="5-结果判定"><a href="#5-结果判定" class="headerlink" title="5. 结果判定"></a>5. 结果判定</h3><p>显示红色，测试失败，显示绿色，测试成功。一般使用断言操作来测试结果</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.ywrby.calculate;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 计算器类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Calculator</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 加法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> a 加数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> b 加数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 加法结果</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a+b;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 减法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> a 被减数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> b 减数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 减法结果</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">sub</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a-b;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 计算器的测试类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CalculatorTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testAdd</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//创建对象</span></span><br><span class="line">        Calculator calculator=<span class="keyword">new</span> Calculator();</span><br><span class="line">        <span class="comment">//调用要测试的方法</span></span><br><span class="line">        <span class="keyword">int</span> result=calculator.add(<span class="number">1</span>,<span class="number">5</span>);</span><br><span class="line">        <span class="comment">//利用断言检测结果准确性，第一个参数是期待值，第二个参数是真实值</span></span><br><span class="line">        Assert.assertEquals(<span class="number">6</span>,result);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSub</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//创建对象</span></span><br><span class="line">        Calculator calculator=<span class="keyword">new</span> Calculator();</span><br><span class="line">        <span class="comment">//调用要测试的方法</span></span><br><span class="line">        <span class="keyword">int</span> result=calculator.sub(<span class="number">1</span>,<span class="number">5</span>);</span><br><span class="line">        <span class="comment">//利用断言检测结果准确性，第一个参数是期待值，第二个参数是真实值</span></span><br><span class="line">        Assert.assertEquals(-<span class="number">4</span>,result);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 在所有测试用例执行前都会调用</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;init...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 在所有测试用例执行后都会调用</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@After</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;close...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaWeb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>4-Bootstrap前端框架</title>
      <link href="/2021/03/04/4-Bootstrap%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/"/>
      <url>/2021/03/04/4-Bootstrap%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Bootstrap是美国Twitter公司的设计师Mark Otto和Jacob Thornton合作基于HTML、CSS、JavaScript 开发的简洁、直观、强悍的前端开发框架，使得 Web 开发更加快捷。Bootstrap提供了优雅的HTML和CSS规范，它即是由动态CSS语言Less写成。Bootstrap一经推出后颇受欢迎，一直是GitHub上的热门开源项目，包括NASA的MSNBC（微软全国广播公司）的Breaking News都使用了该项目。国内一些移动开发者较为熟悉的框架，如WeX5前端开源框架等，也是基于Bootstrap源码进行性能优化而来。</p></blockquote><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><ul><li>定义了很多CSS样式和JS插件，使得开发人员不需要经过太多设置便可以得到一个丰富的页面效果</li><li>采用响应式布局，可以自动适配不同分辨率大小的设备</li></ul><h2 id="标准Bootstrap页面模板"><a href="#标准Bootstrap页面模板" class="headerlink" title="标准Bootstrap页面模板"></a>标准Bootstrap页面模板</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;zh-CN&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 上述3个meta标签*必须*放在最前面，任何其他内容都*必须*跟随其后！ --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Bootstrap 101 Template<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Bootstrap --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">&quot;css/bootstrap.min.css&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- jQuery (Bootstrap 的所有 JavaScript 插件都依赖 jQuery，所以必须放在前边) --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;js/jquery-3.1.1.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 加载 Bootstrap 的所有 JavaScript 插件。你也可以根据需要只加载单个插件。 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;js/bootstrap.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>你好，世界！<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="响应式布局-栅格系统"><a href="#响应式布局-栅格系统" class="headerlink" title="响应式布局-栅格系统"></a>响应式布局-栅格系统</h2><p>同一套页面可以兼容不同分辨率的设备，Bootstrap的响应式布局依赖于栅格系统实现，将一行分为12各格子，通过指定控件在不同分辨率设备上所占各自的数目实现兼容</p><h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><ol><li>定义容器（类似于table的概念）<ul><li>容器分为：1. container （固定宽度，两边有留白）2. container-fluid （100% 宽度）</li></ul></li><li>定义行（类似于table中的tr）样式：row</li><li>定义元素 指定元素在不同设备上所占格子的数量。样式：col-设备代号-各自数目</li></ol><h4 id="设备代号"><a href="#设备代号" class="headerlink" title="设备代号"></a>设备代号</h4><p><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/%E8%AE%BE%E5%A4%87%E4%BB%A3%E5%8F%B7.jpg" alt="设备代号"></p><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><ul><li>一行中格子数目超出12个格子后多余部分自动换行</li><li>栅格类属性可以向上兼容。栅格类适用于与屏幕宽度大于或等于分界点大小的设备 ， 并且针对小屏幕设备覆盖栅格类。（例如，如果设定了col-xs-4则在小屏幕手机上占四个栅格，同时在大屏幕设备上也能保证占据四个格子）</li><li>栅格类属性不可以向下兼容，如果真实设备分辨率小于预设值则一个元素会占满整行（例如，设定col-lg-4则设备在大屏幕上一个元素占四个栅格，但在小于临界值的所有设备上都单独占据一行）</li></ul><h3 id="栅格系统示例"><a href="#栅格系统示例" class="headerlink" title="栅格系统示例"></a>栅格系统示例</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;zh-CN&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Bootstrap 101 Template<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">&quot;css/bootstrap.min.css&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;js/jquery-3.1.1.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;js/bootstrap.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-class">.inner</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">border</span>: <span class="number">1px</span> solid red;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--定义容器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container-fluid&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--定义行--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--定义元素--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-lg-1 col-sm-2 inner&quot;</span>&gt;</span>栅格<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-lg-1 col-sm-2 inner&quot;</span>&gt;</span>栅格<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-lg-1 col-sm-2 inner&quot;</span>&gt;</span>栅格<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-lg-1 col-sm-2 inner&quot;</span>&gt;</span>栅格<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-lg-1 col-sm-2 inner&quot;</span>&gt;</span>栅格<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-lg-1 col-sm-2 inner&quot;</span>&gt;</span>栅格<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-lg-1 col-sm-2 inner&quot;</span>&gt;</span>栅格<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-lg-1 col-sm-2 inner&quot;</span>&gt;</span>栅格<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-lg-1 col-sm-2 inner&quot;</span>&gt;</span>栅格<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-lg-1 col-sm-2 inner&quot;</span>&gt;</span>栅格<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-lg-1 col-sm-2 inner&quot;</span>&gt;</span>栅格<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-lg-1 col-sm-2 inner&quot;</span>&gt;</span>栅格<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Bootstrap中定义的CSS样式和JS插件"><a href="#Bootstrap中定义的CSS样式和JS插件" class="headerlink" title="Bootstrap中定义的CSS样式和JS插件"></a>Bootstrap中定义的CSS样式和JS插件</h2><h3 id="全局CSS样式"><a href="#全局CSS样式" class="headerlink" title="全局CSS样式"></a>全局CSS样式</h3><ul><li>按钮样式：class=”btn btn-default” ，还有诸多其他预设类型<a href="https://v3.bootcss.com/css/#buttons">详见此页</a></li><li>图片样式：class=”img-responsive”，响应式图片布局，图片会随着设备分辨率变化自动调整大小以适应当前设备。<a href="https://v3.bootcss.com/css/#images">更多详见，方形，圆形，相框型等</a></li><li>表格：class=”table”，还有许多预设如条纹状表格，悬停变色等等。<a href="https://v3.bootcss.com/css/#tables">详见</a></li><li>表单：class=”form-control”。<a href="https://v3.bootcss.com/css/#forms">更多表单</a></li></ul><h3 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h3><ul><li><a href="https://v3.bootcss.com/components/#navbar">导航条</a></li><li><a href="https://v3.bootcss.com/components/#pagination">分页条</a></li></ul><h3 id="JS插件"><a href="#JS插件" class="headerlink" title="JS插件"></a>JS插件</h3><ul><li><a href="https://v3.bootcss.com/javascript/#carousel">轮播图</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> 前端框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>3-DOM</title>
      <link href="/2021/03/04/3-DOM/"/>
      <url>/2021/03/04/3-DOM/</url>
      
        <content type="html"><![CDATA[<h1 id="DOM-Document-Object-Model"><a href="#DOM-Document-Object-Model" class="headerlink" title="DOM(Document Object Model)"></a>DOM(Document Object Model)</h1><h4 id="文档对象模型"><a href="#文档对象模型" class="headerlink" title="文档对象模型"></a>文档对象模型</h4><hr><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>将标记语言文档（HTML,XML…）的各个部分，封装为对象，可以使用这些对象，对标记语言文档进行CRUD动态操作</p><p>W3C 文档对象模型 （DOM）是中立于平台和语言的接口，它允许程序和脚本动态地访问和更新文档的内容、结构和样式。”W3C DOM标准被分为 3 个不同的部分</p><ul><li>核心DOM-针对任何结构化文档的标准模型<ul><li><strong>Document</strong>：文档对象</li><li><strong>Element</strong>：元素对象</li><li>Attribute：属性对象</li><li>Text：文本对象</li><li>Comment：注释对象</li><li><strong>Node</strong>：节点对象，是其他5个对象的父对象</li></ul></li><li>XML DOM - 针对 XML 文档的标准模型</li><li>HTML DOM - 针对 HTML 文档的标准模型</li></ul><h4 id="HTML-DOM-树"><a href="#HTML-DOM-树" class="headerlink" title="HTML DOM 树"></a>HTML DOM 树</h4><p><img src="https://note.youdao.com/yws/res/27632/BF5CDA32E4A74808A1DAD09A903A3AF4" alt="htmlDom"></p><hr><h3 id="Document对象"><a href="#Document对象" class="headerlink" title="Document对象"></a>Document对象</h3><h4 id="对象创建"><a href="#对象创建" class="headerlink" title="对象创建"></a>对象创建</h4><ul><li>window.document</li><li>document</li></ul><h4 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h4><p><strong>获取Element对象</strong></p><ul><li>getElementById()    查找具有指定的唯一 ID 的元素。</li><li>getElementsByTagName()    返回所有具有指定名称的元素节点。</li><li>getElementByClassName 根据Class属性值获取元素对象数组并返回</li><li>getElementByName() 根据name属性值获取元素对象数组并返回</li></ul><p><strong>创建其他DOM对象</strong></p><ul><li>createAttribute(name)    创建拥有指定名称的属性节点，并返回新的 Attr 对象。</li><li>createComment()    创建注释节点。</li><li>createElement()    创建元素节点。</li><li>createTextNode()    创建文本节点。</li></ul><h3 id="Element元素对象"><a href="#Element元素对象" class="headerlink" title="Element元素对象"></a>Element元素对象</h3><p>通过document获取和创建</p><h4 id="方法-1"><a href="#方法-1" class="headerlink" title="方法"></a>方法</h4><ul><li>removeAttribute()    删除指定的属性。</li><li>setAttribute()    添加新属性。</li></ul><h3 id="Node节点对象"><a href="#Node节点对象" class="headerlink" title="Node节点对象"></a>Node节点对象</h3><p>节点对象代表文档树中的一个节点。节点可以是元素节点、属性节点、文本节点，或者也可以是任何一种节点。</p><h4 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h4><p>虽然所有的对象均能继承用于处理父节点和子节点的属性和方法，但是并不是所有的对象都拥有父节点或子节点。例如，文本节点不能拥有子节点，所以向类似的节点添加子节点就会导致 DOM 错误。</p><h4 id="方法-2"><a href="#方法-2" class="headerlink" title="方法"></a>方法</h4><p><strong>对DOM数进行增删改查</strong></p><ul><li>appendChild()    向节点的子节点列表的结尾添加新的子节点。</li><li>removeChild()    删除（并返回）当前节点的指定子节点。</li><li>replaceChild()    用新节点替换一个子节点。</li></ul><h4 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h4><ul><li>parentNode    返回节点的父节点。</li></ul><p>以上方法和属性虽然都是介绍的Node节点，但由于Node节点是其他五种对象的父对象，所以其他几种对象都可以使用</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--设置样式--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-tag">div</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">border</span>: <span class="number">1px</span> solid red;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-id">#div1</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-id">#div2</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-id">#div3</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--删除内部的div2--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;div1&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;div2&quot;</span>&gt;</span></span><br><span class="line">            div2</span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        div1</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!--在href中填入#或javascript:void(0);都可以使超链接对象不跳转，只保留点击效果--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">id</span>=<span class="string">&quot;del&quot;</span>&gt;</span>删除子节点<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;javascript:void(0);&quot;</span> <span class="attr">id</span>=<span class="string">&quot;insert&quot;</span>&gt;</span>添加子节点<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> div1=<span class="built_in">document</span>.getElementById(<span class="string">&quot;div1&quot;</span>);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> div2=<span class="built_in">document</span>.getElementById(<span class="string">&quot;div2&quot;</span>);</span></span><br><span class="line"><span class="javascript">        </span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> del=<span class="built_in">document</span>.getElementById(<span class="string">&quot;del&quot;</span>);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> insert=<span class="built_in">document</span>.getElementById(<span class="string">&quot;insert&quot;</span>);</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="comment">//删除div1内部的div2</span></span></span><br><span class="line"><span class="javascript">        del.onclick=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            div1.removeChild(div2);</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">        <span class="comment">//向div1内部添加子节点div3</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> div3=<span class="built_in">document</span>.createElement(<span class="string">&quot;div&quot;</span>);  <span class="comment">//创建子节点</span></span></span><br><span class="line"><span class="javascript">        div3.setAttribute(<span class="string">&quot;id&quot;</span>,<span class="string">&quot;div3&quot;</span>)  <span class="comment">//设置节点ID属性，再在CSS中设置节点其他样式</span></span></span><br><span class="line"><span class="javascript">        insert.onclick=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            div1.appendChild(div3);</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="实例：动态表格（插入-删除）"><a href="#实例：动态表格（插入-删除）" class="headerlink" title="实例：动态表格（插入/删除）"></a>实例：动态表格（插入/删除）</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-tag">table</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">border</span>: <span class="number">1px</span> solid;</span></span><br><span class="line"><span class="css">            <span class="attribute">margin</span>: auto;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">500px</span>;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-tag">td</span>,<span class="selector-tag">th</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="css">            <span class="attribute">border</span>: <span class="number">1px</span> solid;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">div</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="css">            <span class="attribute">margin</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;num&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入ID&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;name&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入姓名&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入性别&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;添加&quot;</span> <span class="attr">id</span>=<span class="string">&quot;in_btn&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span> <span class="attr">id</span>=<span class="string">&quot;stu_table&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">caption</span>&gt;</span>学术信息表<span class="tag">&lt;/<span class="name">caption</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>编号<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>性别<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>操作<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>Leslie<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>man<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;delTr(this)&quot;</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>2<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>John<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>man<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;delTr(this)&quot;</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>3<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>Jessica<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>woman<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;delTr(this)&quot;</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="comment">//添加操作实现</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> insert_btn=<span class="built_in">document</span>.getElementById(<span class="string">&quot;in_btn&quot;</span>);  <span class="comment">//获取插入按钮</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> table=<span class="built_in">document</span>.getElementById(<span class="string">&quot;stu_table&quot;</span>);  <span class="comment">//获取表格对象</span></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="comment">//插入按钮操作</span></span></span><br><span class="line"><span class="javascript">        insert_btn.onclick=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="comment">//获取输入框中的值</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> num=<span class="built_in">document</span>.getElementById(<span class="string">&quot;num&quot;</span>).value;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> name=<span class="built_in">document</span>.getElementById(<span class="string">&quot;name&quot;</span>).value</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> sex=<span class="built_in">document</span>.getElementById(<span class="string">&quot;sex&quot;</span>).value;</span></span><br><span class="line"><span class="javascript">            <span class="comment">//创建ID的td节点</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> td_id=<span class="built_in">document</span>.createElement(<span class="string">&quot;td&quot;</span>);  <span class="comment">//创建节点</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> text_id=<span class="built_in">document</span>.createTextNode(num);  <span class="comment">//创建文本子节点</span></span></span><br><span class="line"><span class="javascript">            td_id.appendChild(text_id);  <span class="comment">//插入子节点</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">//创建姓名的td节点</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> td_name=<span class="built_in">document</span>.createElement(<span class="string">&quot;td&quot;</span>);</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> text_name=<span class="built_in">document</span>.createTextNode(name);</span></span><br><span class="line"><span class="javascript">            td_name.appendChild(text_name);</span></span><br><span class="line"><span class="javascript">            <span class="comment">//创建性别的td节点</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> td_sex=<span class="built_in">document</span>.createElement(<span class="string">&quot;td&quot;</span>);</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> text_sex=<span class="built_in">document</span>.createTextNode(sex);</span></span><br><span class="line"><span class="javascript">            td_sex.appendChild(text_sex);</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">            <span class="comment">//创建删除按钮的td节点</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> td_delete=<span class="built_in">document</span>.createElement(<span class="string">&quot;td&quot;</span>);</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> del=<span class="built_in">document</span>.createElement(<span class="string">&quot;a&quot;</span>);  <span class="comment">//创建超链接类型的子节点</span></span></span><br><span class="line"><span class="javascript">            del.href=<span class="string">&quot;#&quot;</span>;  <span class="comment">//定义跳转链接为#，使a标签只具备点击效果，没有跳转效果</span></span></span><br><span class="line"><span class="javascript">            del.setAttribute(<span class="string">&quot;onclick&quot;</span>,<span class="string">&quot;delTr(this)&quot;</span>);</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> text_del=<span class="built_in">document</span>.createTextNode(<span class="string">&quot;删除&quot;</span>);  </span></span><br><span class="line"><span class="javascript">            del.appendChild(text_del);  <span class="comment">//插入删除的文本子节点</span></span></span><br><span class="line"><span class="javascript">            td_delete.appendChild(del);  <span class="comment">//向td节点中插入超链接子节点</span></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> tr_stu=<span class="built_in">document</span>.createElement(<span class="string">&quot;tr&quot;</span>);  <span class="comment">//创建tr类型节点</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">//逐个插入四个子节点</span></span></span><br><span class="line"><span class="javascript">            tr_stu.appendChild(td_id);  </span></span><br><span class="line"><span class="javascript">            tr_stu.appendChild(td_name);</span></span><br><span class="line"><span class="javascript">            tr_stu.appendChild(td_sex);</span></span><br><span class="line"><span class="javascript">            tr_stu.appendChild(td_delete);</span></span><br><span class="line"><span class="javascript">            <span class="comment">//向表格中插入tr子节点</span></span></span><br><span class="line"><span class="javascript">            table.appendChild(tr_stu);</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="comment">//定义删除函数</span></span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="keyword">function</span> <span class="title">delTr</span>(<span class="params">obj</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> stuTr=obj.parentNode.parentNode;  <span class="comment">//通过链接节点获取当前信息栏对象</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> table=stuTr.parentNode;    <span class="comment">//通过当前栏对象获取table对象</span></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">            table.removeChild(stuTr);  <span class="comment">//删除指定子节点</span></span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="HTML-DOM"><a href="#HTML-DOM" class="headerlink" title="HTML DOM"></a>HTML DOM</h2><h3 id="主要功能"><a href="#主要功能" class="headerlink" title="主要功能"></a>主要功能</h3><ul><li>标签体的设置和获取：innerHTML</li><li>使用html元素对象的属性</li><li>控制样式</li></ul><h3 id="innerHTML"><a href="#innerHTML" class="headerlink" title="innerHTML"></a>innerHTML</h3><p>innerHTML 属性设置或返回表格行的开始和结束标签之间的 HTML。</p><h4 id="使用innerHTML简化之前的动态表格实例"><a href="#使用innerHTML简化之前的动态表格实例" class="headerlink" title="使用innerHTML简化之前的动态表格实例"></a>使用innerHTML简化之前的动态表格实例</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>dynamicTable<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-tag">table</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">border</span>: <span class="number">1px</span> solid;</span></span><br><span class="line"><span class="css">            <span class="attribute">margin</span>: auto;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">500px</span>;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-tag">td</span>,<span class="selector-tag">th</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="css">            <span class="attribute">border</span>: <span class="number">1px</span> solid;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">div</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="css">            <span class="attribute">margin</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;num&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入ID&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;name&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入姓名&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入性别&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;添加&quot;</span> <span class="attr">id</span>=<span class="string">&quot;in_btn&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span> <span class="attr">id</span>=<span class="string">&quot;stu_table&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">caption</span>&gt;</span>学术信息表<span class="tag">&lt;/<span class="name">caption</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>编号<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>性别<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>操作<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>Leslie<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>man<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;delTr(this)&quot;</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>2<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>John<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>man<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;delTr(this)&quot;</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>3<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>Jessica<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>woman<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;delTr(this)&quot;</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="comment">//添加操作实现</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> insert_btn=<span class="built_in">document</span>.getElementById(<span class="string">&quot;in_btn&quot;</span>);  <span class="comment">//获取插入按钮</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> table=<span class="built_in">document</span>.getElementById(<span class="string">&quot;stu_table&quot;</span>);  <span class="comment">//获取表格对象</span></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="comment">//插入按钮操作</span></span></span><br><span class="line"><span class="javascript">        insert_btn.onclick=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="comment">//获取输入框中的值</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> num=<span class="built_in">document</span>.getElementById(<span class="string">&quot;num&quot;</span>).value;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> name=<span class="built_in">document</span>.getElementById(<span class="string">&quot;name&quot;</span>).value</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> sex=<span class="built_in">document</span>.getElementById(<span class="string">&quot;sex&quot;</span>).value;</span></span><br><span class="line"><span class="javascript">            </span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> tr_stu=<span class="built_in">document</span>.createElement(<span class="string">&quot;tr&quot;</span>);  <span class="comment">//创建tr类型节点</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">//使用innerHTML向tr中追加标签</span></span></span><br><span class="line"><span class="javascript">            tr_stu.innerHTML=<span class="string">&quot;&lt;td&gt;&quot;</span>+num+<span class="string">&quot;&lt;/td&gt;&quot;</span>;  <span class="comment">//这里只是展示=是直接赋值，+=可以实现追加</span></span></span><br><span class="line"><span class="javascript">                                                  <span class="comment">//实际上这四行完全可以放到一行代码（只调用一次innerHTML）</span></span></span><br><span class="line"><span class="javascript">            tr_stu.innerHTML+=<span class="string">&quot;&lt;td&gt;&quot;</span>+name+<span class="string">&quot;&lt;/td&gt;&quot;</span>;</span></span><br><span class="line"><span class="javascript">            tr_stu.innerHTML+=<span class="string">&quot;&lt;td&gt;&quot;</span>+sex+<span class="string">&quot;&lt;/td&gt;&quot;</span>;</span></span><br><span class="line"><span class="javascript">            tr_stu.innerHTML+=<span class="string">&quot;&lt;td&gt;&lt;a href=&#x27;#&#x27; onclick=&#x27;delTr(this)&#x27;&gt;删除&lt;/a&gt;&lt;/td&gt;&quot;</span></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">            <span class="comment">//向表格中插入tr子节点</span></span></span><br><span class="line"><span class="javascript">            table.appendChild(tr_stu);</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="comment">//定义删除函数</span></span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="keyword">function</span> <span class="title">delTr</span>(<span class="params">obj</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> stuTr=obj.parentNode.parentNode;  <span class="comment">//通过链接节点获取当前信息栏对象</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> table=stuTr.parentNode;    <span class="comment">//通过当前栏对象获取table对象</span></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">            table.removeChild(stuTr);  <span class="comment">//删除指定子节点</span></span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="控制元素样式"><a href="#控制元素样式" class="headerlink" title="控制元素样式"></a>控制元素样式</h3><h4 id="两种方式"><a href="#两种方式" class="headerlink" title="两种方式"></a>两种方式</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-class">.d1</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">border</span>: <span class="number">1px</span> solid blue;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">font-size</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;div1&quot;</span>&gt;</span></span><br><span class="line">        div1</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;div2&quot;</span>&gt;</span></span><br><span class="line">        div2</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> div1=<span class="built_in">document</span>.getElementById(<span class="string">&quot;div1&quot;</span>);</span></span><br><span class="line"><span class="javascript">        div1.onclick=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="comment">//设置样式方式1</span></span></span><br><span class="line"><span class="javascript">            div1.style.border=<span class="string">&quot;1px solid red&quot;</span>;</span></span><br><span class="line"><span class="javascript">            div1.style.width=<span class="string">&quot;200px&quot;</span>;</span></span><br><span class="line"><span class="javascript">            <span class="comment">//类似font-size这种样式的设置方式与命名方式如下</span></span></span><br><span class="line"><span class="javascript">            div1.style.fontSize=<span class="string">&quot;30px&quot;</span>;</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> div2=<span class="built_in">document</span>.getElementById(<span class="string">&quot;div2&quot;</span>);</span></span><br><span class="line"><span class="javascript">        div2.onclick=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="comment">//设置样式方式2</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">//提前定义好类选择器样式，通过元素的className属性来设置其class属性</span></span></span><br><span class="line"><span class="javascript">            div2.className=<span class="string">&quot;d1&quot;</span>;</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h3><h4 id="概念-1"><a href="#概念-1" class="headerlink" title="概念"></a>概念</h4><p>某些组件（事件源）被执行了某些操作（事件）后，触发某些代码（监听器）执行</p><h4 id="事件-1"><a href="#事件-1" class="headerlink" title="事件"></a>事件</h4><p>某些操作，如单击，双击，鼠标移动，键盘操作等</p><h4 id="事件源"><a href="#事件源" class="headerlink" title="事件源"></a>事件源</h4><p>被监听的组件，如文本输入框，按钮等</p><h4 id="监听器"><a href="#监听器" class="headerlink" title="监听器"></a>监听器</h4><p>一段代码</p><h4 id="注册监听"><a href="#注册监听" class="headerlink" title="注册监听"></a>注册监听</h4><p>将事件，事件源和监听器绑定在一起</p><h4 id="常见事件"><a href="#常见事件" class="headerlink" title="常见事件"></a>常见事件</h4><ul><li>点击事件<ul><li>onclick    当用户点击某个对象时调用的事件句柄。</li><li>ondblclick 当用户双击某个对象时调用的事件句柄。</li></ul></li><li>焦点事件<ul><li>onblur    元素失去焦点。</li><li>onfocus    元素获得焦点。</li></ul></li><li>加载事件<ul><li>onload    一张页面或一幅图像完成加载。</li></ul></li><li>鼠标事件<ul><li>onmousedown    鼠标按钮被按下。</li><li>onmousemove    鼠标被移动。</li><li>onmouseout    鼠标从某元素移开。</li><li>onmouseover    鼠标移到某元素之上。</li><li>onmouseup    鼠标按键被松开。</li></ul></li><li>键盘事件<ul><li>onkeydown    某个键盘按键被按下。</li><li>onkeypress    某个键盘按键被按下并松开。</li><li>onkeyup    某个键盘按键被松开。</li></ul></li><li>选中和改变<ul><li>onchange    域的内容被改变。</li><li>onselect    文本被选中。</li></ul></li><li>表单事件<ul><li>onsubmit    确认按钮被点击。</li><li>onreset    重置按钮被点击。</li></ul></li></ul><p><a href="https://www.w3school.com.cn/jsref/dom_obj_event.asp">演示网址</a></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> JS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2-BOM</title>
      <link href="/2021/03/04/2-BOM/"/>
      <url>/2021/03/04/2-BOM/</url>
      
        <content type="html"><![CDATA[<h1 id="BOM-Browser-Object-Model"><a href="#BOM-Browser-Object-Model" class="headerlink" title="BOM(Browser Object Model)"></a>BOM(Browser Object Model)</h1><h4 id="浏览器对象模型"><a href="#浏览器对象模型" class="headerlink" title="浏览器对象模型"></a>浏览器对象模型</h4><hr><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>将浏览器各个组成部分封装成对象</p><h3 id="组成"><a href="#组成" class="headerlink" title="组成"></a>组成</h3><ul><li>Window：窗口对象</li><li>Navigator：浏览器对象</li><li>Screen：显示器屏幕对象</li><li>History：历史记录对象</li><li>Location：地址栏对象</li></ul><p>(DOM对象因为十分重要被单独分类)</p><h4 id="BOM对象组成"><a href="#BOM对象组成" class="headerlink" title="BOM对象组成"></a>BOM对象组成</h4><p><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/BOM%E5%AF%B9%E8%B1%A1%E6%A6%82%E8%BF%B0.jpg" alt="BOM对象概述"></p><h2 id="Window对象"><a href="#Window对象" class="headerlink" title="Window对象"></a>Window对象</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Window窗口对象</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">1. 创建</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">2. 方法</span></span><br><span class="line"><span class="comment">    1. 与弹出框相关的方法</span></span><br><span class="line"><span class="comment">        alert()显示带有一段消息和一个确认按钮的警告框。</span></span><br><span class="line"><span class="comment">        confirm()显示带有一段消息以及确认按钮和取消按钮的对话框。(确定返回true，取消返回false)</span></span><br><span class="line"><span class="comment">        prompt()显示可提示用户输入的对话框。 返回值即用户输入的值</span></span><br><span class="line"><span class="comment">    2. 与打开关闭有关的方法</span></span><br><span class="line"><span class="comment">        close()关闭浏览器窗口。关闭的窗口是调用该方法的窗口</span></span><br><span class="line"><span class="comment">        open()打开一个新的浏览器窗口或查找一个已命名的窗口。返回值是打开的窗口对象</span></span><br><span class="line"><span class="comment">    3. 与定时器有关的方法</span></span><br><span class="line"><span class="comment">        setTimeout()在指定的毫秒数后调用函数或计算表达式。</span></span><br><span class="line"><span class="comment">                        接收两个参数，第一个是JS代码或方法对象，第二个是毫秒值，返回值是该定时器ID</span></span><br><span class="line"><span class="comment">        clearTimeout()取消由 setTimeout() 方法设置的 timeout。通过ID取消</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        setInterval()按照指定的周期（以毫秒计）来调用函数或计算表达式。</span></span><br><span class="line"><span class="comment">                        同样接收两个参数，第一个是是JS代码或方法对象，第二个是循环执行的时间间隔毫秒值，返回值是该定时器ID</span></span><br><span class="line"><span class="comment">        clearInterval()取消由 setInterval() 设置的 timeout。通过ID取消</span></span><br><span class="line"><span class="comment">3. 属性</span></span><br><span class="line"><span class="comment">    获取其他BOM对象</span></span><br><span class="line"><span class="comment">        1. history</span></span><br><span class="line"><span class="comment">        2. location</span></span><br><span class="line"><span class="comment">        3. Navigator</span></span><br><span class="line"><span class="comment">        4. Screen</span></span><br><span class="line"><span class="comment">        可以用var h1=window.history,也可以直接省略window直接获取var h2=history;</span></span><br><span class="line"><span class="comment">    获取DOM对象</span></span><br><span class="line"><span class="comment">        document属性  获取方法window.document或者document</span></span><br><span class="line"><span class="comment">4. 特点</span></span><br><span class="line"><span class="comment">    window对象不需要创建，可以直接使用：window.方法名</span></span><br><span class="line"><span class="comment">    window引用也可以省略，即直接调用方法名即可 方法名()</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//获取按钮对象</span></span><br><span class="line"><span class="keyword">var</span> openBtn=<span class="built_in">document</span>.getElementById(<span class="string">&quot;openBtn&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> closeBtn=<span class="built_in">document</span>.getElementById(<span class="string">&quot;closeBtn&quot;</span>);</span><br><span class="line"><span class="comment">//新窗口对象</span></span><br><span class="line"><span class="keyword">var</span> newWin;</span><br><span class="line"><span class="comment">//打开新窗口</span></span><br><span class="line">openBtn.onclick=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    newWin=open(<span class="string">&quot;https://www.baidu.com&quot;</span>);  <span class="comment">//打开并接收返回值</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//关闭新打开的窗口</span></span><br><span class="line">closeBtn.onclick=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    newWin.close(); <span class="comment">//关闭指定窗口</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Location地址栏对象"><a href="#Location地址栏对象" class="headerlink" title="Location地址栏对象"></a>Location地址栏对象</h2><h3 id="Location对象的创建"><a href="#Location对象的创建" class="headerlink" title="Location对象的创建"></a>Location对象的创建</h3><ul><li>window.location</li><li>location</li></ul><h3 id="主要方法"><a href="#主要方法" class="headerlink" title="主要方法"></a>主要方法</h3><ul><li>reload() 重新加载当前文档，即刷新</li></ul><h3 id="主要属性"><a href="#主要属性" class="headerlink" title="主要属性"></a>主要属性</h3><ul><li>href 设置或返回完整的URL</li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> JS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1-JavaScipt基础概念</title>
      <link href="/2021/03/04/1-JavaScipt%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5/"/>
      <url>/2021/03/04/1-JavaScipt%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5/</url>
      
        <content type="html"><![CDATA[<h1 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h1><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>一门客户端脚本语言（客户端指运行在客户端浏览器中，每一个浏览器都有JavaScript解析引擎。脚本语言指不需要通过编译，直接就可以被浏览器解析执行）</p><h3 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h3><p>用来增强用户和HTML页面交互过程，可以控制HTML元素，让页面有一些动态的效果（与动态资源无关），增强用户体验</p><h2 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h2><h3 id="与HTML结合方式"><a href="#与HTML结合方式" class="headerlink" title="与HTML结合方式"></a>与HTML结合方式</h3><h4 id="1-内部JS"><a href="#1-内部JS" class="headerlink" title="1. 内部JS"></a>1. 内部JS</h4><p>通过定义<script></script>标签实现，标签内容就是js代码。</p><h4 id="2-外部JS"><a href="#2-外部JS" class="headerlink" title="2. 外部JS"></a>2. 外部JS</h4><p>同样通过定义<script></script>实现，通过src属性引入外部文件</p><h4 id="实例："><a href="#实例：" class="headerlink" title="实例："></a>实例：</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        &lt;script&gt;标签可以放在HTML文件的任意位置，执行顺序由所放置的位置决定</span></span><br><span class="line"><span class="comment">            可以定义多个</span></span><br><span class="line"><span class="comment">        内部JS：通过定义&lt;script&gt;实现，标签内容就是js代码。</span></span><br><span class="line"><span class="comment">        外部JS：同样通过定义&lt;script&gt;实现，通过src属性引入外部文件</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">        alert(<span class="string">&quot;Hello World!&quot;</span>);　<span class="comment">// 内部JS，弹出确认框</span></span></span><br><span class="line"><span class="javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;test.js&quot;</span>&gt;</span><span class="javascript"><span class="comment">//外部JS文件</span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span>  </span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">外部JS文件内容：</span></span><br><span class="line"><span class="comment">alert(&quot;外部JS文件&quot;);</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br></pre></td></tr></table></figure><h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><p>注释方式与Java完全一样</p><ul><li>单行注释：<code>//注释内容</code></li><li>多行注释：<code>/*注释内容*/</code></li></ul><h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><h4 id="原始数据类型（基本数据类型）"><a href="#原始数据类型（基本数据类型）" class="headerlink" title="原始数据类型（基本数据类型）"></a>原始数据类型（基本数据类型）</h4><ul><li>number：包括整型/小数/NaN(Not a Number 一个不是数字的数字)</li><li>string：更类似于Python中的定义，可以用单引号或双引号表示</li><li>boolean：true或false</li><li>null：一个空对象的占位符</li><li>undefined：未定义。如果一个变量没有赋给初值，默认值为undefined</li></ul><h4 id="引用数据类型"><a href="#引用数据类型" class="headerlink" title="引用数据类型"></a>引用数据类型</h4><p>即对象</p><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><p>一小块存储数据的内存空间</p><p>Java语言是强数据类型语言，在定义变量时必须指定变量的数据类型，并且之后也不能在该内存空间存放其他类型的值。</p><p>JavaScript是弱类型数据语言，在定义变量时不需要指定变量的数据类型，之后也可以根据情况，任意修改该内存空间上的数据类型</p><h4 id="定义语法"><a href="#定义语法" class="headerlink" title="定义语法"></a>定义语法</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> 变量名 = 值;</span><br></pre></td></tr></table></figure><p>可以通过typeof()函数查看变量数据类型</p><h3 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h3><p>运算符与Java基本一致</p><p>在JS中，如果运算数不是运算符要求的数据类型，那么JS引擎会自动进行数据转换</p><ul><li>String转number:如果string是数字，则按照字面值转换，如果不少，则转为NaN</li><li>boolean转number:true转1，false转0</li><li>number转boolean：除了0和NaN都是true</li><li>String转boolean：除了空字符串””都是true</li><li>null和undefined转boolean：都是false</li><li>对象转Boolean：都是true</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">“==”和“===”的区别</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">等于“==”在比较前会先查看左右两边变量的数据类型，如果数据类型不一致，会先进行数据转换，再进行比较，即&quot;123&quot;==123的返回值是true</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">全等于“===”在比较前同样查看左右数据类型，假如数据类型不一致，直接返回false，即&quot;123&quot;===&quot;123&quot;返回值是false</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p><strong>JS同样支持 ? : 这种三元运算符</strong></p><h4 id="几点注意"><a href="#几点注意" class="headerlink" title="几点注意"></a>几点注意</h4><ul><li>每行末尾以分号;作结，但在一行只有一条语句的情况下分号;可以省略（不建议省略）</li><li>定义变量时前面的var可加可不加<ul><li>加：变量为局部变量</li><li>不加：变量是全局变量（同样不建议使用，代码可读性差）</li></ul></li></ul><h3 id="流程控制语句"><a href="#流程控制语句" class="headerlink" title="流程控制语句"></a>流程控制语句</h3><p>基本与Java完全一致</p><ul><li>if/else</li><li>switch/case</li><li>while</li><li>for</li><li>do while</li></ul><h2 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h2><h3 id="Function对象"><a href="#Function对象" class="headerlink" title="Function对象"></a>Function对象</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Function函数(方法)对象</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">1. 创建</span></span><br><span class="line"><span class="comment">    1. var func=new Function(形参列表,方法体);  基本不用，不符合正常逻辑</span></span><br><span class="line"><span class="comment">    2. function 方法名(形参列表)&#123;</span></span><br><span class="line"><span class="comment">            方法体</span></span><br><span class="line"><span class="comment">       &#125;</span></span><br><span class="line"><span class="comment">    3. var 方法名=function(形参列表)&#123;</span></span><br><span class="line"><span class="comment">            方法体</span></span><br><span class="line"><span class="comment">       &#125;</span></span><br><span class="line"><span class="comment">    </span></span><br><span class="line"><span class="comment">2. 方法</span></span><br><span class="line"><span class="comment">3. 属性</span></span><br><span class="line"><span class="comment">    length属性获取形参个数</span></span><br><span class="line"><span class="comment">4. 特点</span></span><br><span class="line"><span class="comment">    1. 方法定义时，形参的类型var不用写，返回值类型也可省略</span></span><br><span class="line"><span class="comment">    2. 方法是一个对象，如果定义名称相同，则新的方法对象会覆盖旧的方法对象</span></span><br><span class="line"><span class="comment">    3. 在JS中，方法的调用只与方法名有关，与参数列表无关，例如一个函数参数列表接收两个参数</span></span><br><span class="line"><span class="comment">       但是实际可以传入0，1，2，3...个参数，如果实参少于形参列表，未匹配上的参数就是undefined</span></span><br><span class="line"><span class="comment">       如果实参多于形参列表，多余参数不作考虑或操作</span></span><br><span class="line"><span class="comment">    4. 在方法声明中有一个隐藏的内置对象(数组),arguments 封装所有实参列表</span></span><br><span class="line"><span class="comment">5. 调用</span></span><br><span class="line"><span class="comment">    方法名称(实参列表)</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//创建Function对象方式1</span></span><br><span class="line"><span class="keyword">var</span> func=<span class="keyword">new</span> <span class="built_in">Function</span>(<span class="string">&quot;a&quot;</span>,<span class="string">&quot;b&quot;</span>,<span class="string">&quot;alert(a+b)&quot;</span>);</span><br><span class="line"><span class="comment">//创建Function对象方式2</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">func2</span>(<span class="params">a,b</span>)</span>&#123;</span><br><span class="line">    alert(a-b);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//创建Function对象方式3</span></span><br><span class="line"><span class="keyword">var</span> func3=<span class="function"><span class="keyword">function</span>(<span class="params">a,b</span>)</span>&#123;</span><br><span class="line">    alert(a*b);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//调用方法</span></span><br><span class="line"><span class="comment">//func(3,4);</span></span><br><span class="line"><span class="comment">//func2(8,2);</span></span><br><span class="line"><span class="comment">//func3(2,2);</span></span><br><span class="line"><span class="comment">//在JS中，方法的调用只与方法名有关，与参数列表无关</span></span><br><span class="line"><span class="comment">//func2();</span></span><br><span class="line"><span class="comment">//func2(1);</span></span><br><span class="line"><span class="comment">//func2(1,2);</span></span><br><span class="line"><span class="comment">//func2(1,2,3);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//利用arguments定义可计算任意数和的方法</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">func4</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> sum=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> a=<span class="number">0</span>;a&lt;<span class="built_in">arguments</span>.length;a++)&#123;</span><br><span class="line">        sum+=<span class="built_in">arguments</span>[a];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> sum=func4(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>);</span><br><span class="line">alert(sum);</span><br></pre></td></tr></table></figure><h3 id="Array数组对象"><a href="#Array数组对象" class="headerlink" title="Array数组对象"></a>Array数组对象</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Array数组对象</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">1. 创建</span></span><br><span class="line"><span class="comment">    1. var arr=new Array(元素列表);</span></span><br><span class="line"><span class="comment">    2. var arr=new Array(数组长度);</span></span><br><span class="line"><span class="comment">    3. var arr=[元素列表];</span></span><br><span class="line"><span class="comment">2. 方法</span></span><br><span class="line"><span class="comment">    join(参数)：将数组中的元素按照指定的分隔符合并为一个字符串</span></span><br><span class="line"><span class="comment">    push()：向数组的尾部添加一个或多个元素，并返回数组长度</span></span><br><span class="line"><span class="comment">3. 属性</span></span><br><span class="line"><span class="comment">    length数组的长度</span></span><br><span class="line"><span class="comment">4. 特点</span></span><br><span class="line"><span class="comment">    数组元素的类型可变</span></span><br><span class="line"><span class="comment">    数组元素的长度可变</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//数组对象的创建</span></span><br><span class="line"><span class="keyword">var</span> arr1=<span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>);</span><br><span class="line"><span class="keyword">var</span> arr2=<span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">5</span>);</span><br><span class="line"><span class="keyword">var</span> arr3=[<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>,<span class="number">11</span>];</span><br><span class="line"><span class="comment">//显示数组</span></span><br><span class="line"><span class="built_in">document</span>.write(arr1+<span class="string">&quot;&lt;br/&gt;&quot;</span>);</span><br><span class="line"><span class="built_in">document</span>.write(arr2+<span class="string">&quot;&lt;br/&gt;&quot;</span>);</span><br><span class="line"><span class="built_in">document</span>.write(arr3+<span class="string">&quot;&lt;br/&gt;&quot;</span>);</span><br></pre></td></tr></table></figure><h3 id="Date日期对象"><a href="#Date日期对象" class="headerlink" title="Date日期对象"></a>Date日期对象</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Date日期对象</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">1. 创建 var date=new Date();</span></span><br><span class="line"><span class="comment">2. 方法</span></span><br><span class="line"><span class="comment">    toLocaleString()返回当前date对象对应的时间的本地字符串格式</span></span><br><span class="line"><span class="comment">    getTime()获取指定日期对象对应的毫秒值</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> date=<span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"><span class="built_in">document</span>.write(date.toLocaleString()+<span class="string">&quot;&lt;br/&gt;&quot;</span>);</span><br><span class="line"><span class="built_in">document</span>.write(date.getTime());</span><br></pre></td></tr></table></figure><h3 id="Math数学对象"><a href="#Math数学对象" class="headerlink" title="Math数学对象"></a>Math数学对象</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Math数学对象</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">1. 创建 Math对象不用创建，可以直接使用Math.方法名()调用方法</span></span><br><span class="line"><span class="comment">2. 方法</span></span><br><span class="line"><span class="comment">    random()</span></span><br><span class="line"><span class="comment">    ceil</span></span><br><span class="line"><span class="comment">    floor</span></span><br><span class="line"><span class="comment">    round</span></span><br><span class="line"><span class="comment">    等等....</span></span><br><span class="line"><span class="comment">3. 属性</span></span><br><span class="line"><span class="comment">    PI等等</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.write(<span class="built_in">Math</span>.PI+<span class="string">&quot;&lt;br/&gt;&quot;</span>);</span><br><span class="line"><span class="built_in">document</span>.write(<span class="built_in">Math</span>.random()+<span class="string">&quot;&lt;br/&gt;&quot;</span>);</span><br><span class="line"><span class="built_in">document</span>.write(<span class="built_in">Math</span>.floor(<span class="number">4.5</span>)+<span class="string">&quot;&lt;br/&gt;&quot;</span>);</span><br><span class="line"><span class="built_in">document</span>.write(<span class="built_in">Math</span>.round(<span class="number">4.9</span>)+<span class="string">&quot;&lt;br/&gt;&quot;</span>);</span><br></pre></td></tr></table></figure><h3 id="正则表达式对象"><a href="#正则表达式对象" class="headerlink" title="正则表达式对象"></a>正则表达式对象</h3><h4 id="简单的正则表达式"><a href="#简单的正则表达式" class="headerlink" title="简单的正则表达式"></a>简单的正则表达式</h4><p><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/%E7%AE%80%E5%8D%95%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F.jpg" alt="简单正则表达式"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">RegExp正则表达式对象</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">1. 创建</span></span><br><span class="line"><span class="comment">    1. var reg=new RegExp(&quot;正则表达式&quot;);</span></span><br><span class="line"><span class="comment">    2. var reg=/正则表达式/</span></span><br><span class="line"><span class="comment">2. 方法</span></span><br><span class="line"><span class="comment">    1. test(参数)：验证指定字符串是否符合正则表达式</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> reg=<span class="regexp">/^[abc]+$/</span>;</span><br><span class="line"><span class="keyword">var</span> str=<span class="string">&quot;aaccbbb&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> flag=reg.test(str);</span><br><span class="line"><span class="keyword">var</span> str2=<span class="string">&quot;abcd123&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> flag2=reg.test(str2);</span><br><span class="line"><span class="keyword">if</span>(flag)&#123;</span><br><span class="line">    <span class="built_in">document</span>.write(str+<span class="string">&quot;符合正则表达式：&quot;</span>+reg+<span class="string">&quot;&lt;br/&gt;&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(flag2)&#123;</span><br><span class="line">    <span class="built_in">document</span>.write(str2+<span class="string">&quot;符合正则表达式：&quot;</span>+reg+<span class="string">&quot;&lt;br/&gt;&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Global全局对象"><a href="#Global全局对象" class="headerlink" title="Global全局对象"></a>Global全局对象</h3><p>全局对象，这个对象中封装的方法不需要对象可以直接调用</p><ul><li>encodeURI()：url编码</li><li>decodeURI()：url解码</li><li>encodeURIComponent()：url编码</li><li>decodeURIComponent()：url解码</li><li>parseInt()：将字符串转为数字（比直接强转功能更强大，该方法会逐一判断每一个字符是否是数字，直到不是数字为止，将前边的字符转为number）</li><li>isNaN()：判断一个变量是否为NaN</li><li>eval()：将JavaScript字符串转为JS脚本来执行</li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> JS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>15-初始化和清理</title>
      <link href="/2021/03/03/15-%E5%88%9D%E5%A7%8B%E5%8C%96%E5%92%8C%E6%B8%85%E7%90%86/"/>
      <url>/2021/03/03/15-%E5%88%9D%E5%A7%8B%E5%8C%96%E5%92%8C%E6%B8%85%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h1 id="初始化和清理"><a href="#初始化和清理" class="headerlink" title="初始化和清理"></a>初始化和清理</h1><p>初始化和清理是涉及编程安全的两个重要问题，在C语言中一直采取由程序员直接控制变量的初始化和清理，极易导致内存耗尽等问题出现</p><p>C++和Java采用了构造器（构造方法）的概念来进行对象的创建，创建对象时，如果该类提供有构造方法，Java会在用户有能力操作对象前调用构造器，完成对类中每个对象的初始化</p><h3 id="构造器与类同名的原因"><a href="#构造器与类同名的原因" class="headerlink" title="构造器与类同名的原因"></a>构造器与类同名的原因</h3><ol><li>调用构造器是编译器的任务，所以编译器必须清楚要调用哪个方法，这就要求所有类的构造器必须具有相同的方法名</li><li>所取的任何名字都可能与类中原有的方法名重复，产生冲突，为了避免这种情况，统一采用构造器与类同名这种方案</li></ol><p>构造器没有返回值，这与返回值为空null（void）具有很大区别，构造器本质上不会返回任何东西，我们在创建对象时<code>Object object=new Object();</code>看似是构造方法返回了一个新对象，实质是new表达式返回了该对象的引用（虽然与该对象完全一致）。</p><p>因为有了构造器的存在，所以强制重载方法名就显得十分重要，这也是Java支持强制重载方法名的重要原因。区分重载方法的唯一规则是不同的参数列表（即便只是顺序不同），而返回值并不可以作为区分重载方法的规则，因为很多时候我们并不关心返回值，而是为了实现方法内的功能，这样就会出现这种单纯的调用<code>func();</code>这种情况下，Java便无法区分两个返回值不同的重载方法的区别了</p><h3 id="我们为什么可以使用this关键字"><a href="#我们为什么可以使用this关键字" class="headerlink" title="我们为什么可以使用this关键字"></a>我们为什么可以使用this关键字</h3><p>在构造器或其他类方法中，我们常常通过this关键字来区分类中的变量或方法与传入的变量或方法。但我们在调用构造函数时，对象本身并不在参数列表中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Apple apple=<span class="keyword">new</span> Apple(<span class="keyword">int</span> num);</span><br><span class="line">apple.pick(<span class="keyword">int</span> n);</span><br></pre></td></tr></table></figure><p>那么Java是如何区分对象的？实质上我们在调用构造函数后编译器会对上述调用语句进行修改，最终的结果是</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Apple.pick(apple,n);</span><br></pre></td></tr></table></figure><p>变量被作为第一个参数被默认传入方法中，这也就给了我们利用this关键字来区分对象的能力 </p><h3 id="在构造器中调用另一个构造器"><a href="#在构造器中调用另一个构造器" class="headerlink" title="在构造器中调用另一个构造器"></a>在构造器中调用另一个构造器</h3><p>当我们有多个不同参数列表的构造器后，在一个构造器中调用另一个构造器可以有效的避免代码重复，实现这种调用的方式就是通过this关键字</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> num;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> weight;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Test</span><span class="params">(<span class="keyword">int</span> num)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.num=num;</span><br><span class="line">        System.out.println(<span class="string">&quot;this is the default constructor&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Test</span><span class="params">(<span class="keyword">int</span> num, String name, <span class="keyword">double</span> weight)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(num);</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.weight = weight;</span><br><span class="line">        System.out.println(<span class="string">&quot;this is the rewrite constructor&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Test test=<span class="keyword">new</span> Test(<span class="number">5</span>,<span class="string">&quot;Leslie&quot;</span>,<span class="number">90.0</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;name=&quot;</span>+test.name+<span class="string">&quot;,num=&quot;</span>+test.num+<span class="string">&quot;,weight=&quot;</span>+test.weight);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span> is the <span class="keyword">default</span> constructor</span><br><span class="line"><span class="keyword">this</span> is the rewrite constructor</span><br><span class="line">name=Leslie,num=<span class="number">5</span>,weight=<span class="number">90.0</span></span><br></pre></td></tr></table></figure><p>除构造器外，编译器禁止在其他任何方法中调用构造器</p><h3 id="static方法"><a href="#static方法" class="headerlink" title="static方法"></a>static方法</h3><p>静态方法就是没有this的方法，在static内部不能调用非静态的方法，反之可以。静态方法可以在没有创建对象的情况下，直接通过类本身来调用，这恰恰是静态方法的主要作用。这使得static方法更类似于一个全局变量，当你在类中置入static方法就可以访问其他static方法或static域</p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>14-IO流</title>
      <link href="/2021/03/03/14-IO%E6%B5%81/"/>
      <url>/2021/03/03/14-IO%E6%B5%81/</url>
      
        <content type="html"><![CDATA[<h3 id="字符集"><a href="#字符集" class="headerlink" title="字符集"></a>字符集</h3><p><strong>各个国家为自己国家的字符取的一套编号规则</strong>，计算机底层只能存储二进制，二进制可以转成十进制，十进制可以进行整数编号，所以计算机底层可以存储编号规则</p><h1 id="I-O流的分类与概述"><a href="#I-O流的分类与概述" class="headerlink" title="I/O流的分类与概述"></a>I/O流的分类与概述</h1><h4 id="（IO输入输出流-Input-Output）"><a href="#（IO输入输出流-Input-Output）" class="headerlink" title="（IO输入输出流-Input/Output）"></a>（IO输入输出流-Input/Output）</h4><blockquote><p>File类只能操作文件对象本身，并不能操作文件的内容（对文件内容进行读/写）。如果需要读写数据的操作，就需要使用I/O流</p></blockquote><h2 id="I-O流的分类"><a href="#I-O流的分类" class="headerlink" title="I/O流的分类"></a>I/O流的分类</h2><h3 id="按照流的方向来分"><a href="#按照流的方向来分" class="headerlink" title="按照流的方向来分"></a>按照流的方向来分</h3><ul><li>输入流：已内存为基准，把内存中的数据写出到磁盘文件或者网络介质中去的流称为输入流。例如：将数据写入文件</li><li>输出流：以内存为基准，把磁盘文件中的数据或者网络中的数据读入到内存中去的流称为输入流。输入流的作用就是读取数据到内存</li></ul><h3 id="按照流的内容来分"><a href="#按照流的内容来分" class="headerlink" title="按照流的内容来分"></a>按照流的内容来分</h3><ul><li>字节流：流中的数据最小单位是一个一个的字节，这个流就是字节流</li><li>字符流：流中的数据最小单位是一个一个的字符，这个流就是字符流</li></ul><h1 id="FileInputStream-文件字节输入流"><a href="#FileInputStream-文件字节输入流" class="headerlink" title="FileInputStream-文件字节输入流"></a>FileInputStream-文件字节输入流</h1><h4 id="以内存为基准，将磁盘文件中的数据按照字节的形式读入到内存中的流，简单来说，就是按照字节读取文件数据到内存"><a href="#以内存为基准，将磁盘文件中的数据按照字节的形式读入到内存中的流，简单来说，就是按照字节读取文件数据到内存" class="headerlink" title="以内存为基准，将磁盘文件中的数据按照字节的形式读入到内存中的流，简单来说，就是按照字节读取文件数据到内存"></a>以内存为基准，将磁盘文件中的数据按照字节的形式读入到内存中的流，简单来说，就是按照字节读取文件数据到内存</h4><h2 id="构造器"><a href="#构造器" class="headerlink" title="构造器"></a>构造器</h2><ul><li>public FileInputStream(File path):创建一个字节输入流管道与源文件对象接通</li><li>public FileInputStream(String pathName):创建一个字节输入流管道与文件路径对接</li></ul><h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span>;  <span class="comment">//每次读取一个字节返回，读取完毕会返回-1</span></span><br></pre></td></tr></table></figure><h2 id="实例-读取一个字节"><a href="#实例-读取一个字节" class="headerlink" title="实例-读取一个字节"></a>实例-读取一个字节</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> FileInputStreamDemo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileInDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//创建File对象</span></span><br><span class="line">        File f1=<span class="keyword">new</span> File(<span class="string">&quot;src/FileInputStreamDemo/text.txt&quot;</span>);</span><br><span class="line">        <span class="comment">//创建文件输入流对象</span></span><br><span class="line">        FileInputStream in = <span class="keyword">new</span> FileInputStream(f1);</span><br><span class="line">        <span class="comment">//读取一个字节</span></span><br><span class="line">        <span class="keyword">int</span> code=in.read();</span><br><span class="line">        <span class="comment">//不断循环输出，直到数据末尾返回-1</span></span><br><span class="line">        <span class="keyword">while</span>(code!=-<span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">char</span> c=(<span class="keyword">char</span>)code;</span><br><span class="line">            System.out.println(c);</span><br><span class="line">            code = in.read();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但这种读取方式并不有效，在中文出现后无法避免出现乱码（因为会截断中文字节），并且这种方式效率较差，不建议采用</p><h2 id="实例-读取一个字节数组"><a href="#实例-读取一个字节数组" class="headerlink" title="实例-读取一个字节数组"></a>实例-读取一个字节数组</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> FileInputStreamDemo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileInDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        FileInputStream in = <span class="keyword">new</span> FileInputStream(<span class="string">&quot;src/FileInputStreamDemo/text.txt&quot;</span>);</span><br><span class="line">        <span class="comment">//按照字节数组读取</span></span><br><span class="line">        <span class="keyword">byte</span>[] buffer=<span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="comment">//返回值是读取的字节数</span></span><br><span class="line">        <span class="keyword">int</span> len=in.read(buffer);</span><br><span class="line">        System.out.println(<span class="string">&quot;读取了&quot;</span>+len+<span class="string">&quot;个字节&quot;</span>);</span><br><span class="line">        String rs=<span class="keyword">new</span> String(buffer);</span><br><span class="line">        System.out.println(rs);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>这种方式仍然无法避免中文输出乱码的情况</strong></p><h3 id="易错点"><a href="#易错点" class="headerlink" title="易错点"></a>易错点</h3><p>在定义一个字节数组用于缓存数据后，不断从文件中读取数据到字节数组中，假如下一次读取仍然利用这个字节数组，但读取的字节数小于第一次字节数组被占用长度，则后续部分的字节不被覆盖</p><p>例如第一次读取5字节abcde,第二次读取2字节fg。则读取完后字节数组的组成是fgcde，只有前两位被覆盖，后三位并没有改变</p><h4 id="处理方法，可以在输出时使用相应方法，限制输出内容长度，只要保证输出内容的长度和本次读取字符长度相同，就能保证旧数据（未被覆盖数据）不被输出"><a href="#处理方法，可以在输出时使用相应方法，限制输出内容长度，只要保证输出内容的长度和本次读取字符长度相同，就能保证旧数据（未被覆盖数据）不被输出" class="headerlink" title="处理方法，可以在输出时使用相应方法，限制输出内容长度，只要保证输出内容的长度和本次读取字符长度相同，就能保证旧数据（未被覆盖数据）不被输出"></a>处理方法，可以在输出时使用相应方法，限制输出内容长度，只要保证输出内容的长度和本次读取字符长度相同，就能保证旧数据（未被覆盖数据）不被输出</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">String rs=<span class="keyword">new</span> String(buffer,<span class="number">0</span>,len);  <span class="comment">//限制输出范围</span></span><br></pre></td></tr></table></figure><h3 id="解决字符乱码的方式"><a href="#解决字符乱码的方式" class="headerlink" title="解决字符乱码的方式"></a>解决字符乱码的方式</h3><ul><li><strong>使用字符流</strong></li><li><strong>使用一个大小与文件字符大小刚好一致的字节数组</strong>（可以先通过文件对象，获取文件大小再获取文件对象的字节输出流并输出）缺陷是文件过大时占用内存严重，可能导致程序崩溃</li><li>使用readAllbytes()方法定义字符数组大小，例如：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileInDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        FileInputStream in = <span class="keyword">new</span> FileInputStream(<span class="string">&quot;src/FileInputStreamDemo/text.txt&quot;</span>);</span><br><span class="line">        <span class="keyword">byte</span>[] buffer=in.readAllBytes();</span><br><span class="line">        String rs=<span class="keyword">new</span> String(buffer);</span><br><span class="line">        System.out.println(rs);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="综上，字节流在处理文件读写的表现上处理并不良好，一般读写文件建议采用字符流，但这并不影响字节流处理文件的赋值等操作，因为复制操作不涉及字符的编码，只需要把全部字节原封不动转移到其他文件即可"><a href="#综上，字节流在处理文件读写的表现上处理并不良好，一般读写文件建议采用字符流，但这并不影响字节流处理文件的赋值等操作，因为复制操作不涉及字符的编码，只需要把全部字节原封不动转移到其他文件即可" class="headerlink" title="综上，字节流在处理文件读写的表现上处理并不良好，一般读写文件建议采用字符流，但这并不影响字节流处理文件的赋值等操作，因为复制操作不涉及字符的编码，只需要把全部字节原封不动转移到其他文件即可"></a>综上，字节流在处理文件读写的表现上处理并不良好，一般读写文件建议采用字符流，但这并不影响字节流处理文件的赋值等操作，因为复制操作不涉及字符的编码，只需要把全部字节原封不动转移到其他文件即可</h4><h1 id="FileOutputStream-文件字节输出流"><a href="#FileOutputStream-文件字节输出流" class="headerlink" title="FileOutputStream-文件字节输出流"></a>FileOutputStream-文件字节输出流</h1><h4 id="以内存为基准，把内存中的数据，按照字节的形式写出到磁盘中去，简言之，就是把内存数据按照字节写出到磁盘中去"><a href="#以内存为基准，把内存中的数据，按照字节的形式写出到磁盘中去，简言之，就是把内存数据按照字节写出到磁盘中去" class="headerlink" title="以内存为基准，把内存中的数据，按照字节的形式写出到磁盘中去，简言之，就是把内存数据按照字节写出到磁盘中去"></a>以内存为基准，把内存中的数据，按照字节的形式写出到磁盘中去，简言之，就是把内存数据按照字节写出到磁盘中去</h4><h2 id="构造器-1"><a href="#构造器-1" class="headerlink" title="构造器"></a>构造器</h2><ul><li>public FileOutputStream(File file):创建一个字节输出流管道通向目标文件对象</li><li>public FileOutputStream(String file):创建一个字节输出流管道通向目标文件路径</li><li>public FileOutputStream(File file,boolean append):创建一个追加数据的字节输出流管道通向目标文件对象</li><li>public FileOutputStream(String file,boolean append):创建一个追加数据的字节输出流管道通向目标文件路径</li></ul><h2 id="方法-1"><a href="#方法-1" class="headerlink" title="方法"></a>方法</h2><ul><li>public void write(int a):写一个字节</li><li>public void write(byte[] buffer):写一个字节数组出去</li><li>public void write(byte[] buffer,int pos,int len):写一个字节数组的一部分出去，第二个参数表示起始字节索引位置，第三个参数表示长度</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> FileInputStreamDemo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileOutDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//创建字节输出流管道与目标文件对象连通</span></span><br><span class="line">        FileOutputStream out=<span class="keyword">new</span> FileOutputStream(<span class="string">&quot;src/FileInputStreamDemo/text.txt&quot;</span>);</span><br><span class="line">        <span class="comment">//写一个字节出去，这种方式不能写入中文字符，因为一个中文字符3个字节，超出限制</span></span><br><span class="line">        out.write(<span class="number">97</span>);  <span class="comment">//注意这里写的是写入字符的字符编码，不是要写入的字符</span></span><br><span class="line">        out.write(<span class="string">&#x27;b&#x27;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//写一个字节数组出去</span></span><br><span class="line">        <span class="keyword">byte</span>[] bytes=<span class="keyword">new</span> <span class="keyword">byte</span>[]&#123;<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="number">100</span>,<span class="number">101</span>,<span class="number">102</span>&#125;;</span><br><span class="line">        out.write(bytes);</span><br><span class="line">        <span class="keyword">byte</span>[] bytes1=<span class="string">&quot;Less is more!--工程学名言&quot;</span>.getBytes(<span class="string">&quot;GBK&quot;</span>);   <span class="comment">//可以指定编码格式，也可以直接默认采用系统当前编码格式</span></span><br><span class="line">        out.write(bytes1);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//写字节数组的一部分出去</span></span><br><span class="line">        out.write(bytes1,<span class="number">0</span>,<span class="number">13</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//换行</span></span><br><span class="line">        out.write(<span class="string">&quot;\r\n&quot;</span>.getBytes());  <span class="comment">//这里利用\r\n来换行的原因是为了保证兼容性更好，Windows可以直接用\n换行</span></span><br><span class="line">        </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        out.flush();  <span class="comment">//立即刷新数据到文件中去，刷新后管道out还是可以正常调用</span></span><br><span class="line">        <span class="comment">//以下的关闭操作在每一次进行读写操作后都必须运行</span></span><br><span class="line">        out.close();  <span class="comment">//结束运行。结束后管道out不能继续使用，关闭操作包含刷新操作</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>IO流管道默认是覆盖管道，每次<strong>启动新的Stream管道</strong>之前，都会清空文件对象之前的内容，注意，这里是启动新管道之前，不是调用管道执行方法时</p><p>如果想要追加数据，而不是覆盖，只需要在创建管道时，设置管道第二个参数为true即可（第二个参数表示是否为追加数据管道）</p><h1 id="字节流做文件的复制"><a href="#字节流做文件的复制" class="headerlink" title="字节流做文件的复制"></a>字节流做文件的复制</h1><p>字节是计算机中文件存储的最基本单位，所以字节流适合做一切文件的复制。</p><p>复制是把源文件的全部字节一个不漏的全部转移到目标文件，只要保证前后的格式一样，绝对不会出现错误</p><h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><ol><li>创建一个字节输入流管道与源文件接通</li><li>创建一个字节输出流管道与目标文件接通</li><li>创建一个字节数组作为中间传递媒介</li><li>从字节输入流管道读取数据，写出到字节输出流管道即可</li><li>关闭打开的管道资源</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> FileInputStreamDemo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CopyDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//创建字节输入流管道与源文件接通</span></span><br><span class="line">        FileInputStream in = <span class="keyword">new</span> FileInputStream(<span class="string">&quot;src/FileInputStreamDemo/text.txt&quot;</span>);</span><br><span class="line">        <span class="comment">//创建字节输出流管道与目标文件连通</span></span><br><span class="line">        FileOutputStream out=<span class="keyword">new</span> FileOutputStream(<span class="string">&quot;src/FileInputStreamDemo/output.txt&quot;</span>);</span><br><span class="line">        <span class="comment">//创建字节数组用来作为中间传播媒介，并从字节输入流中读取数据</span></span><br><span class="line">        <span class="keyword">byte</span>[] medium=in.readAllBytes();</span><br><span class="line">        <span class="comment">//向字节输出流中写入数据</span></span><br><span class="line">        out.write(medium);</span><br><span class="line">        <span class="comment">//关闭所有管道资源</span></span><br><span class="line">        in.close();</span><br><span class="line">        out.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="FileReader-字符输入流"><a href="#FileReader-字符输入流" class="headerlink" title="FileReader-字符输入流"></a>FileReader-字符输入流</h1><p><strong>以内存为基准，把磁盘文件的数据以字符的形式读入到内存</strong></p><h2 id="构造器-2"><a href="#构造器-2" class="headerlink" title="构造器"></a>构造器</h2><ul><li>public FileReader(File file):创建一个字符输入流与源文件对象接通</li><li>public FileReader(String filePath):创建一个字符输入流与源文件路径接通</li></ul><h2 id="方法-2"><a href="#方法-2" class="headerlink" title="方法"></a>方法</h2><ul><li>public int read():读取一个字符的编号并返回，读取完毕返回-1</li><li>public int read(char[] buffer):读取一个字符数组，读取多少个字符就返回对应整数</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> FileInputStreamDemo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"><span class="keyword">import</span> java.io.FileReader;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileReaderDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        FileReader fd = <span class="keyword">new</span> FileReader(<span class="string">&quot;src/FileInputStreamDemo/input.txt&quot;</span>);</span><br><span class="line">        <span class="comment">//按照字符逐个读取</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> c=fd.read();</span><br><span class="line">        <span class="keyword">while</span>(c!=-<span class="number">1</span>)&#123;</span><br><span class="line">            System.out.printf(<span class="string">&quot;%c&quot;</span>,(<span class="keyword">char</span>)c);</span><br><span class="line">            c=fd.read();</span><br><span class="line">        &#125;</span><br><span class="line">        FileReader fd2 = <span class="keyword">new</span> FileReader(<span class="string">&quot;src/FileInputStreamDemo/input.txt&quot;</span>);</span><br><span class="line">        <span class="comment">//读取字符数组</span></span><br><span class="line">        <span class="keyword">char</span>[] chars=<span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="keyword">int</span> len=fd2.read(chars);</span><br><span class="line">        System.out.printf(<span class="string">&quot;\n\n共读取%d个字符！\n\n&quot;</span>,len);</span><br><span class="line">        String str=<span class="keyword">new</span> String(chars);</span><br><span class="line">        System.out.println(str);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>可见字符流按照字符数组循环读取数组。可以解决中文读取乱码的问题，并且性能较好</strong></p><h1 id="FileWriter-文件字符输出流"><a href="#FileWriter-文件字符输出流" class="headerlink" title="FileWriter-文件字符输出流"></a>FileWriter-文件字符输出流</h1><h4 id="以内存为基准，把内存中的数据按照字符形式写出到磁盘文件中去，简单来说，就是把内存的数据以字符形式写出到文件中去"><a href="#以内存为基准，把内存中的数据按照字符形式写出到磁盘文件中去，简单来说，就是把内存的数据以字符形式写出到文件中去" class="headerlink" title="以内存为基准，把内存中的数据按照字符形式写出到磁盘文件中去，简单来说，就是把内存的数据以字符形式写出到文件中去"></a>以内存为基准，把内存中的数据按照字符形式写出到磁盘文件中去，简单来说，就是把内存的数据以字符形式写出到文件中去</h4><h2 id="构造器-3"><a href="#构造器-3" class="headerlink" title="构造器"></a>构造器</h2><ul><li>public FileWriter(File file):创建一个字符输出流管道通向目标文件对象</li><li>public FileWriter(String file):创建一个字符输出流管道通向目标文件路径</li><li>public FileWriter(File file,boolean append):创建一个追加数据的字符输出流管道通向目标文件对象</li><li>public FileWriter(String file,boolean append):创建一个追加数据的字符输出流管道通向目标文件路径</li></ul><h2 id="方法-3"><a href="#方法-3" class="headerlink" title="方法"></a>方法</h2><ul><li>public void write(int c):写1个字符出去</li><li>public void write(String c):写一个字符串出去</li><li>public void write(char[] buffer):写一个字符数组出去</li><li>public void write(String c,int pos,boolean append):写字符串的一部分出去</li></ul><h4 id="用法基本与文件字节输出流一致"><a href="#用法基本与文件字节输出流一致" class="headerlink" title="用法基本与文件字节输出流一致"></a>用法基本与文件字节输出流一致</h4><hr><h1 id="缓冲流"><a href="#缓冲流" class="headerlink" title="缓冲流"></a>缓冲流</h1><p><strong>缓冲流可以提高字节流和字符流的读写数据的性能</strong></p><h2 id="BufferedInputStream-字节缓冲输入流"><a href="#BufferedInputStream-字节缓冲输入流" class="headerlink" title="BufferedInputStream-字节缓冲输入流"></a>BufferedInputStream-字节缓冲输入流</h2><p>用于提高相对应的文件字节输入流读写数据的性能</p><p>可以把<strong>低级的字节输入流</strong>（FileInputStream）包装成一个<strong>高级的缓冲字节输入流</strong>(BufferedInputStream)管道，从而提高字节输入流读数据的性能</p><h3 id="构造器-4"><a href="#构造器-4" class="headerlink" title="构造器"></a>构造器</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">BufferedInputStream</span><span class="params">(InputStream in)</span></span>;</span><br></pre></td></tr></table></figure><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>缓冲字节输入流管道自带一个8KB的<strong>缓冲池</strong>，每次可以直接借用操作系统的功能最多提取8KB的数据到缓冲池中去，以后我们直接从缓冲池读取数据，所以性能较好</p><h2 id="BufferedOutputStream-缓冲字节输出流"><a href="#BufferedOutputStream-缓冲字节输出流" class="headerlink" title="BufferedOutputStream-缓冲字节输出流"></a>BufferedOutputStream-缓冲字节输出流</h2><p>用于提高相对应的文件字节输出流读写数据的性能</p><p>可以把<strong>低级的字节输出流</strong>（FileInputStream）包装成一个<strong>高级的缓冲字节输出流</strong>(BufferedInputStream)管道，从而提高字节输入流读数据的性能</p><h3 id="构造器-5"><a href="#构造器-5" class="headerlink" title="构造器"></a>构造器</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">BufferedOutputStream</span><span class="params">(OutputStream in)</span></span>;</span><br></pre></td></tr></table></figure><h2 id="BufferedReader-缓冲字符输入流"><a href="#BufferedReader-缓冲字符输入流" class="headerlink" title="BufferedReader-缓冲字符输入流"></a>BufferedReader-缓冲字符输入流</h2><p>与之同理</p><h2 id="BufferedWriter-缓冲字符输出流"><a href="#BufferedWriter-缓冲字符输出流" class="headerlink" title="BufferedWriter-缓冲字符输出流"></a>BufferedWriter-缓冲字符输出流</h2><p>与之同理</p><h1 id="对象的序列化与反序列化"><a href="#对象的序列化与反序列化" class="headerlink" title="对象的序列化与反序列化"></a>对象的序列化与反序列化</h1><p>我们在日常操作中经常需要把对象作为一种数据保存在文件中，典型的如涉及登录的cookies等。</p><p>这个过程中将对象作为数据保存到文件中的过程称为序列化，将文件中的数据重写读取出来并转换为对象的过程称为反序列化</p><p>序列化与反序列化使用到了相较于Reader，Writer更高级的对象输入输出流</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> FileInputStreamDemo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SerizalizeDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException </span>&#123;</span><br><span class="line">        <span class="comment">//对象序列化</span></span><br><span class="line">        <span class="comment">//创建准备序列化的对象</span></span><br><span class="line">        User user = <span class="keyword">new</span> User(<span class="string">&quot;Leslie&quot;</span>, <span class="number">18</span>, <span class="number">95</span>);</span><br><span class="line">        <span class="comment">//创建文件输出字节流，指向用于储存对象的文件</span></span><br><span class="line">        OutputStream out = <span class="keyword">new</span> FileOutputStream(<span class="string">&quot;src/FileInputStreamDemo/text.txt&quot;</span>);</span><br><span class="line">        <span class="comment">//将文件输出字节流包装成高级的对象字节输出流</span></span><br><span class="line">        ObjectOutputStream out_object=<span class="keyword">new</span> ObjectOutputStream(out);</span><br><span class="line">        <span class="comment">//将对象写入文件</span></span><br><span class="line">        out_object.writeObject(user);</span><br><span class="line">        <span class="comment">//关闭资源</span></span><br><span class="line">        out_object.close();</span><br><span class="line">        out.close();</span><br><span class="line">        System.out.println(<span class="string">&quot;对象序列化成功！&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//对象反序列化</span></span><br><span class="line">        <span class="comment">//创建空对象用于接收输入的对象</span></span><br><span class="line">        User user_new=<span class="keyword">new</span> User();</span><br><span class="line">        <span class="comment">//创建文件输入字节流指向要读取的文件</span></span><br><span class="line">        FileInputStream in=<span class="keyword">new</span> FileInputStream(<span class="string">&quot;src/FileInputStreamDemo/text.txt&quot;</span>);</span><br><span class="line">        <span class="comment">//将文件输入字节流包装成高级的能够用于对象反序列化的对象字节输入流</span></span><br><span class="line">        ObjectInputStream in_object=<span class="keyword">new</span> ObjectInputStream(in);</span><br><span class="line">        <span class="comment">//读入对象并强转为指定类型</span></span><br><span class="line">        user_new= (User) in_object.readObject();</span><br><span class="line">        System.out.println(<span class="string">&quot;反序列化成功！&quot;</span>);</span><br><span class="line">        System.out.printf(<span class="string">&quot;姓名：%s  年龄：%d  分数：%d\n&quot;</span>,user_new.getName(),user_new.getAge(),user_new.getScore());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在实际存储过程中还涉及到密码这种危险变量的存储问题，一般情况下，如果我们并不想将这种可能存在隐患的数据一并存储到文件中，我们可以在定义对象类时，在不想存储的成员变量前<strong>用transient变量修饰</strong>，由此修饰符修饰的变量，在对象被存储进文件中时，不会一并被存储（不参与序列化）</p><h3 id="加入版本序列号"><a href="#加入版本序列号" class="headerlink" title="加入版本序列号"></a>加入版本序列号</h3><p>加入一个对象数据可能经过多次迭代更新，这时我们就可以在定义时为这个类添加版本序列号</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID=<span class="number">1L</span>;</span><br></pre></td></tr></table></figure><p>版本序列号用长整型定义，结尾的L可加可省略，在定义了版本序列号后，序列化与反序列化要求前后的序列号必须一致，即版本1定义的变量存储在文件中，只能用版本同样为1的变量来接收，如果前后的版本号不一致，在反序列化时就会报错</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Exception in thread <span class="string">&quot;main&quot;</span> java.io.InvalidClassException: FileInputStreamDemo.User; local <span class="class"><span class="keyword">class</span> <span class="title">incompatible</span>: <span class="title">stream</span> <span class="title">classdesc</span> <span class="title">serialVersionUID</span> </span>= <span class="number">1</span>, local <span class="class"><span class="keyword">class</span> <span class="title">serialVersionUID</span> </span>= <span class="number">2</span></span><br></pre></td></tr></table></figure><h1 id="打印流"><a href="#打印流" class="headerlink" title="打印流"></a>打印流</h1><h2 id="用途"><a href="#用途" class="headerlink" title="用途"></a>用途</h2><ol><li>方便，快速的将数据写出</li><li>可以保证打印内容前后一致（打印的是什么，结果就是什么）</li></ol><h2 id="构造器-6"><a href="#构造器-6" class="headerlink" title="构造器"></a>构造器</h2><ul><li>public PrintStream(OutpputStream os);</li><li>public PrintStream(String filePath);</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PrintStreamDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> FileNotFoundException </span>&#123;</span><br><span class="line">        <span class="comment">//打印流可以接低级流管道，或者直接接文件路径等等</span></span><br><span class="line">        PrintStream ps=<span class="keyword">new</span> PrintStream(<span class="string">&quot;src/FileInputStreamDemo/input.txt&quot;</span>);</span><br><span class="line">        ps.println(<span class="number">955</span>);  <span class="comment">//注意这里写入的就是数字97，不是字符集的编码，因为打印流写什么就打印什么</span></span><br><span class="line">        ps.println(<span class="string">&quot;Leslie&quot;</span>);  <span class="comment">//这里直接打印字符串</span></span><br><span class="line">        ps.println(<span class="number">99.90</span>);  <span class="comment">//打印浮点数</span></span><br><span class="line">        ps.println(<span class="keyword">false</span>);  <span class="comment">//打印布尔值</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//写字节出去</span></span><br><span class="line">        ps.write(<span class="number">97</span>);  <span class="comment">//这里的97表示字符集的编码，也就是a</span></span><br><span class="line">        ps.write(<span class="number">100</span>);</span><br><span class="line">        </span><br><span class="line">        ps.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意，在向缓冲流中传入低级流时不能传入打印流，因为打印流本身功能相较于缓冲流更强大，打印流本身以及包含了缓冲流的内容，是比缓冲流更高级的流</p><h2 id="改变输出流向-重定向"><a href="#改变输出流向-重定向" class="headerlink" title="改变输出流向-重定向"></a>改变输出流向-重定向</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PrintStreamDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> FileNotFoundException </span>&#123;</span><br><span class="line">        PrintStream ps=<span class="keyword">new</span> PrintStream(<span class="string">&quot;src/FileInputStreamDemo/input.txt&quot;</span>);</span><br><span class="line">        System.setOut(ps);  <span class="comment">//重定向功能，让系统的输出流流向打印流，所以以下输出均不会在控制台显示</span></span><br><span class="line">        System.out.println(<span class="string">&quot;Leslie&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;John&quot;</span>);</span><br><span class="line">        ps.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Properties-属性集文件"><a href="#Properties-属性集文件" class="headerlink" title="Properties-属性集文件"></a>Properties-属性集文件</h1><p>本质是一个Map集合，即键值对集合。核心用途在于当作属性文件（后缀是.properties结尾的文件，里面的内容都说是键值对，在大型框架中十分常见）。<strong>可以把键值对的数据存入到一个属性文件中去</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PropertiesDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//将数据写入属性集文件</span></span><br><span class="line">        <span class="comment">//创建属性集对象</span></span><br><span class="line">        Properties p=<span class="keyword">new</span> Properties();</span><br><span class="line">        <span class="comment">//存入键值对数据</span></span><br><span class="line">        p.setProperty(<span class="string">&quot;admin&quot;</span>,<span class="string">&quot;123456&quot;</span>);</span><br><span class="line">        p.setProperty(<span class="string">&quot;root&quot;</span>,<span class="string">&quot;123456&quot;</span>);</span><br><span class="line">        <span class="comment">//将数据存入属性文件中</span></span><br><span class="line">        OutputStream os=<span class="keyword">new</span> FileOutputStream(<span class="string">&quot;src/FileInputStreamDemo/new.properties&quot;</span>);</span><br><span class="line">        p.store(os,<span class="string">&quot;&quot;</span>);  <span class="comment">//参数二表示--保存心得，对保存数据进行解释说明</span></span><br><span class="line">        os.close();</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        <span class="comment">//从属性集文件中读出属性集对象</span></span><br><span class="line">        <span class="comment">//利用字节输入流加载属性文件中的数据到属性集对象p1中去</span></span><br><span class="line">        Properties p1=<span class="keyword">new</span> Properties();</span><br><span class="line">        InputStream is=<span class="keyword">new</span> FileInputStream(<span class="string">&quot;src/FileInputStreamDemo/new.properties&quot;</span>);</span><br><span class="line">        p1.load(is);</span><br><span class="line">        System.out.println(p1);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>13-递归</title>
      <link href="/2021/03/03/13-%E9%80%92%E5%BD%92/"/>
      <url>/2021/03/03/13-%E9%80%92%E5%BD%92/</url>
      
        <content type="html"><![CDATA[<h1 id="递归概念"><a href="#递归概念" class="headerlink" title="递归概念"></a>递归概念</h1><h4 id="递归指方法在方法中又调用自己"><a href="#递归指方法在方法中又调用自己" class="headerlink" title="递归指方法在方法中又调用自己"></a>递归指方法在方法中又调用自己</h4><h2 id="递归形式"><a href="#递归形式" class="headerlink" title="递归形式"></a>递归形式</h2><h3 id="直接递归"><a href="#直接递归" class="headerlink" title="直接递归"></a>直接递归</h3><p>自己的放大中调用自己</p><h3 id="间接递归"><a href="#间接递归" class="headerlink" title="间接递归"></a>间接递归</h3><p>A方法调用B方法，B方法又调用A方法</p><h1 id="递归三要素"><a href="#递归三要素" class="headerlink" title="递归三要素"></a>递归三要素</h1><h3 id="1-一定有终止条件"><a href="#1-一定有终止条件" class="headerlink" title="1. 一定有终止条件"></a>1. 一定有终止条件</h3><h3 id="2-递归的规则-公式"><a href="#2-递归的规则-公式" class="headerlink" title="2. 递归的规则/公式"></a>2. 递归的规则/公式</h3><h3 id="3-递归的方向：必然走向终止条件"><a href="#3-递归的方向：必然走向终止条件" class="headerlink" title="3. 递归的方向：必然走向终止条件"></a>3. 递归的方向：必然走向终止条件</h3><h1 id="递归搜索文件"><a href="#递归搜索文件" class="headerlink" title="递归搜索文件"></a>递归搜索文件</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> FileDemo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileDemo1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">findFile</span><span class="params">(File f)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(f.isFile())&#123;</span><br><span class="line">            System.out.println(f.getName());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;文件夹----------------------&quot;</span>+f.getName()+<span class="string">&quot;----------------------文件夹&quot;</span>);</span><br><span class="line">            <span class="keyword">for</span>(File f1:f.listFiles())&#123;</span><br><span class="line">                findFile(f1);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        File f1=<span class="keyword">new</span> File(<span class="string">&quot;C:\\Users\\renboyu010214\\Desktop\\Python&quot;</span>);</span><br><span class="line">        FileDemo1 fd=<span class="keyword">new</span> FileDemo1();</span><br><span class="line">        fd.findFile(f1);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>12-File类</title>
      <link href="/2021/03/03/12-File%E7%B1%BB/"/>
      <url>/2021/03/03/12-File%E7%B1%BB/</url>
      
        <content type="html"><![CDATA[<h1 id="File类概述"><a href="#File类概述" class="headerlink" title="File类概述"></a>File类概述</h1><p><strong>File类代表操作系统的文件对象</strong>，是用来操作操作系统中的文件对象的，例如：删除文件，获取文件信息，创建文件/文件夹。广义来说，操作系统认为文件已经包含了文件和文件夹的概念</p><h2 id="构造器"><a href="#构造器" class="headerlink" title="构造器"></a>构造器</h2><ul><li>public File(String pathname):根据路径获取文件对象</li><li>public File(String parent,String child):根据父路径和文件名称获取文件对象</li><li>public File(File parent,String child):根据父类文件对象和子类文件名称获取子类文件对象</li></ul><p>这里的路径也是分为<strong>绝对路径和相对路径</strong>，Java默认的相对路径是<strong>相对工程目录下的文件路径</strong>。二者比较而言，绝对路径一旦脱离具体依赖的环境，代码就极可能出错。相对路径在脱离所处的环境后一般还是可以正常执行，但相对路径只能用于寻找该工程下的文件，有一定的局限性。<strong>一般为了跨平台操作，主要采用相对路径</strong></p><h3 id="文件路径分隔符"><a href="#文件路径分隔符" class="headerlink" title="文件路径分隔符"></a>文件路径分隔符</h3><ol><li>可以使用正斜杠“/”</li><li>使用反斜杠（需要转义）“\\”</li><li>使用分隔符API：File.separator</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//方式1：使用正斜杠</span></span><br><span class="line">File f1=<span class="keyword">new</span> File(<span class="string">&quot;D:/photo/未压缩图片&quot;</span>);</span><br><span class="line"><span class="comment">//方式2：使用反斜杠并转义</span></span><br><span class="line">File f2=<span class="keyword">new</span> File(<span class="string">&quot;D:\\photo\\未压缩图片&quot;</span>);</span><br><span class="line"><span class="comment">//方式3：使用File的分隔符API</span></span><br><span class="line">File f3=<span class="keyword">new</span> File(<span class="string">&quot;D:&quot;</span>+File.separator+<span class="string">&quot;photo&quot;</span>+File.separator+<span class="string">&quot;未压缩图片&quot;</span>);</span><br></pre></td></tr></table></figure><p>三种写法含义一样，第三种方法直接采用系统分隔符替换该处内容，目的是防止某些系统采取的分隔符不是斜杠进而导致路径报错</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> FileDemo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileDemo1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        File f1 = <span class="keyword">new</span> File(<span class="string">&quot;D:/photo/未压缩图片/theme.jpg&quot;</span>);</span><br><span class="line">        <span class="comment">//直接获取文件大小（字节数大小）</span></span><br><span class="line">        System.out.println(f1.length()+<span class="string">&quot; byte&quot;</span>);</span><br><span class="line">        <span class="comment">//使用相对路径定位工程中文件</span></span><br><span class="line">        File f2=<span class="keyword">new</span> File(<span class="string">&quot;src/FileDemo/text.txt&quot;</span>);</span><br><span class="line">        System.out.println(f2.length()+<span class="string">&quot; byte&quot;</span>);</span><br><span class="line">        <span class="comment">//创建文件对象，代表文件夹</span></span><br><span class="line">        File f3=<span class="keyword">new</span> File(<span class="string">&quot;src/FileDemo&quot;</span>);</span><br><span class="line">        <span class="comment">//不能直接获取文件夹的大小，最后返回的结果不是文件夹内文件大小，而是文件夹本身的大小或0</span></span><br><span class="line">        System.out.println(f3.length()+<span class="string">&quot; byte&quot;</span>);</span><br><span class="line">        <span class="comment">//判断文件是否存在</span></span><br><span class="line">        System.out.println(f3.exists());</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">897788</span> <span class="keyword">byte</span></span><br><span class="line"><span class="number">6</span> <span class="keyword">byte</span></span><br><span class="line"><span class="number">0</span> <span class="keyword">byte</span></span><br><span class="line"><span class="keyword">true</span></span><br></pre></td></tr></table></figure><h1 id="File类的获取功能"><a href="#File类的获取功能" class="headerlink" title="File类的获取功能"></a>File类的获取功能</h1><ul><li>public String getAbsolutePath() : 返回此文件的绝对路径字符串</li><li>public String getPath() : 获取创建文件对象的时候用的路径</li><li>public String getName() : 返回由此File表示的文件或目录名称</li><li>public long length : 返回由此File表示的文件长度</li></ul><h1 id="File类的判断功能"><a href="#File类的判断功能" class="headerlink" title="File类的判断功能"></a>File类的判断功能</h1><ul><li>public boolean exists() : 此File表示的文件或目录是否实际存在</li><li>public boolean isDirectory() : 此File表示的是否为目录</li><li>public boolean isFile() : 此File表示的是否为文件</li></ul><h1 id="File类的创建和删除方法"><a href="#File类的创建和删除方法" class="headerlink" title="File类的创建和删除方法"></a>File类的创建和删除方法</h1><ul><li>public boolean createNewFile() : 当且仅当具有该名称的文件尚不存在时，创建一个新文件（几乎不用）</li><li>public boolean delete() : 删除由此File表示的文件或目录（目录只能删除空目录）</li><li>public boolean mkdir() : 创建由此File表示的目录（只能创建一级目录）</li><li>public boolean mkdirs() : 可以创建多级目录（常用）</li></ul><h1 id="目录遍历"><a href="#目录遍历" class="headerlink" title="目录遍历"></a>目录遍历</h1><ul><li>public String[] list() : 获取当前目录下所有“一级文件名称”到一个字符串数组中返回</li><li>public File[] listFiles() : 获取当前目录下所有“一级文件对象”到一个对象数组中返回，<strong>直接返回对象</strong>这种方式更常见，并且更具可操作性，一般都采用这种遍历方式</li></ul>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>11-Stream流</title>
      <link href="/2021/03/03/11-Stream%E6%B5%81/"/>
      <url>/2021/03/03/11-Stream%E6%B5%81/</url>
      
        <content type="html"><![CDATA[<h1 id="Stream流的概述"><a href="#Stream流的概述" class="headerlink" title="Stream流的概述"></a>Stream流的概述</h1><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>得益于Lambda所带来的函数式编程，用于解决已有集合/数组类库有的弊端</p><h3 id="用途"><a href="#用途" class="headerlink" title="用途"></a>用途</h3><p>解决已有集合类库或者数组API的弊端</p><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> StreamDemo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StreamDemo1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        List&lt;String&gt; lists = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        lists.add(<span class="string">&quot;Leslie&quot;</span>); lists.add(<span class="string">&quot;Lily&quot;</span>); lists.add(<span class="string">&quot;Leon&quot;</span>);</span><br><span class="line">        lists.add(<span class="string">&quot;John&quot;</span>); lists.add(<span class="string">&quot;Li&quot;</span>); lists.add(<span class="string">&quot;Herge&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//不借助Stream流的情况下筛选出数组中首字母为L，长度大于3的名字</span></span><br><span class="line">        List&lt;String&gt; lists_search=<span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (String s:lists)&#123;</span><br><span class="line">            <span class="keyword">if</span>(s.startsWith(<span class="string">&quot;L&quot;</span>) &amp; s.length()&gt;<span class="number">3</span>)&#123;</span><br><span class="line">                lists_search.add(s);</span><br><span class="line">                System.out.println(s);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;-----------------&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//使用Stream流筛选,整个代码被简化</span></span><br><span class="line">        lists.stream().filter(s-&gt;s.startsWith(<span class="string">&quot;L&quot;</span>)).filter(s-&gt;s.length()&gt;<span class="number">3</span>)</span><br><span class="line">                .forEach(System.out::println);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Stream流类似一根传送带，集合中的元素在上面可以被操作</p><h2 id="Stream流运作思想"><a href="#Stream流运作思想" class="headerlink" title="Stream流运作思想"></a>Stream流运作思想</h2><ol><li>首先得到集合或者数组的Stream流(得到一根传送带)</li><li>然后用这个Stream流操作集合或者数组的元素</li><li>然后用Stream流简化替代集合操作的API</li></ol><h1 id="Stream流的获取"><a href="#Stream流的获取" class="headerlink" title="Stream流的获取"></a>Stream流的获取</h1><h3 id="集合获取Stream流的API"><a href="#集合获取Stream流的API" class="headerlink" title="集合获取Stream流的API"></a>集合获取Stream流的API</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">default</span> Stream&lt;E&gt; <span class="title">stream</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure><h2 id="获取方式"><a href="#获取方式" class="headerlink" title="获取方式"></a>获取方式</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> StreamDemo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Array;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.Stream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StreamDemo2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//Collection集合获取Stream流</span></span><br><span class="line">        Collection&lt;String&gt; c = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        Stream&lt;String&gt; s1 = c.stream();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//Map集合获取Stream流</span></span><br><span class="line">        Map&lt;String, Integer&gt; m = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="comment">//获取Map集合的键的Stream流</span></span><br><span class="line">        Stream&lt;String&gt; s2 = m.keySet().stream();</span><br><span class="line">        <span class="comment">//获取Map集合的值的Stream流</span></span><br><span class="line">        Stream&lt;Integer&gt; s3 = m.values().stream();</span><br><span class="line">        <span class="comment">//将键和值转换为set有序对类型，从而看作一个整体，获取键值对的Stream流</span></span><br><span class="line">        Stream&lt;Map.Entry&lt;String, Integer&gt;&gt; s4 = m.entrySet().stream();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//数组获取Stream流,两种获取方式</span></span><br><span class="line">        String[] arrs=<span class="keyword">new</span> String[]&#123;<span class="string">&quot;Leslie&quot;</span>,<span class="string">&quot;Lily&quot;</span>&#125;;</span><br><span class="line">        Stream&lt;String&gt; s5= Arrays.stream(arrs);</span><br><span class="line">        Stream&lt;String&gt; s6=Stream.of(arrs);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到集合获取Stream流，普遍采用stream()方法，数组获取Stream流有两种方式Arrays.stream(数组)/Stream.of(数组)</p><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> StreamDemo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.function.Predicate;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StreamDemo3</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        List&lt;String&gt; lists = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        lists.add(<span class="string">&quot;Leslie&quot;</span>); lists.add(<span class="string">&quot;Lily&quot;</span>); lists.add(<span class="string">&quot;Leon&quot;</span>);</span><br><span class="line">        lists.add(<span class="string">&quot;John&quot;</span>); lists.add(<span class="string">&quot;Li&quot;</span>); lists.add(<span class="string">&quot;Herge&quot;</span>);</span><br><span class="line"></span><br><span class="line">        List&lt;String&gt; lists_search=<span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        <span class="comment">/* </span></span><br><span class="line"><span class="comment">         * 通过filter的匿名内部类写法可以看出，filter是通过</span></span><br><span class="line"><span class="comment">         * 新建一个Predicate来指定条件，筛选数组/集合中的元素</span></span><br><span class="line"><span class="comment">         * 而这个筛选规则就是Predicate类中的test方法</span></span><br><span class="line"><span class="comment">         * 它会通过返回布尔值决定该元素是否删除</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        lists.stream().filter(<span class="keyword">new</span> Predicate&lt;String&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">test</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> s.length()&gt;<span class="number">3</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).filter(<span class="keyword">new</span> Predicate&lt;String&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">test</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> s.startsWith(<span class="string">&quot;L&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).forEach(s -&gt; System.out.println(s));</span><br><span class="line"></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//是因为Predicate是一个函数式接口，所以才可以利用Lambda表达式简化</span></span><br><span class="line">        lists.stream().filter(s-&gt;s.startsWith(<span class="string">&quot;L&quot;</span>)).filter(s-&gt;s.length()&gt;<span class="number">3</span>)</span><br><span class="line">                .forEach(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Stream流常用API"><a href="#Stream流常用API" class="headerlink" title="Stream流常用API"></a>Stream流常用API</h1><h4 id="forEach"><a href="#forEach" class="headerlink" title="forEach"></a>forEach</h4><p>遍历集合元素</p><h4 id="count"><a href="#count" class="headerlink" title="count"></a>count</h4><p>统计个数(返回值类型为long)</p><h4 id="filter"><a href="#filter" class="headerlink" title="filter"></a>filter</h4><p>过滤元素</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Stream&lt;T&gt; <span class="title">filter</span><span class="params">(Predicate&lt;? <span class="keyword">super</span> T&gt; predicate)</span></span>;</span><br></pre></td></tr></table></figure><h4 id="limit"><a href="#limit" class="headerlink" title="limit"></a>limit</h4><p>取符合条件的前几个元素</p><h4 id="skip"><a href="#skip" class="headerlink" title="skip"></a>skip</h4><p>跳出符合条件的前几个元素</p><h2 id="Stream流的加工方法map"><a href="#Stream流的加工方法map" class="headerlink" title="Stream流的加工方法map"></a>Stream流的加工方法map</h2><p>map (映射)，指把原来的元素经过加工之后，重新放回去</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> StreamDemo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.atomic.AtomicInteger;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StreamDemo4</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        List&lt;String&gt; lists = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        lists.add(<span class="string">&quot;Leslie&quot;</span>); lists.add(<span class="string">&quot;Lily&quot;</span>); lists.add(<span class="string">&quot;Leon&quot;</span>);</span><br><span class="line">        lists.add(<span class="string">&quot;John&quot;</span>); lists.add(<span class="string">&quot;Li&quot;</span>); lists.add(<span class="string">&quot;Herge&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//给所有名字后面都加上序号</span></span><br><span class="line">        AtomicInteger i= <span class="keyword">new</span> AtomicInteger(<span class="number">1</span>);</span><br><span class="line">        lists.stream().map(s -&gt; s+(i.getAndIncrement())).forEach(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Leslie1</span><br><span class="line">Lily2</span><br><span class="line">Leon3</span><br><span class="line">John4</span><br><span class="line">Li5</span><br><span class="line">Herge6</span><br></pre></td></tr></table></figure><h4 id="还可以将其转换为对象再放回其中"><a href="#还可以将其转换为对象再放回其中" class="headerlink" title="还可以将其转换为对象再放回其中"></a>还可以将其转换为对象再放回其中</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> StreamDemo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.atomic.AtomicInteger;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StreamDemo4</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        List&lt;String&gt; lists = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        lists.add(<span class="string">&quot;Leslie&quot;</span>); lists.add(<span class="string">&quot;Lily&quot;</span>); lists.add(<span class="string">&quot;Leon&quot;</span>);</span><br><span class="line">        lists.add(<span class="string">&quot;John&quot;</span>); lists.add(<span class="string">&quot;Li&quot;</span>); lists.add(<span class="string">&quot;Herge&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//给所有名字后面都加上序号</span></span><br><span class="line">        <span class="comment">//AtomicInteger i= new AtomicInteger(1);</span></span><br><span class="line">        <span class="comment">//lists.stream().map(s -&gt; s+(i.getAndIncrement())).forEach(System.out::println);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//将所有名字转换为学生对象再放回去</span></span><br><span class="line">        lists.stream().map(Student::<span class="keyword">new</span>).forEach(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> score;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Stream流的合并方法concat"><a href="#Stream流的合并方法concat" class="headerlink" title="Stream流的合并方法concat"></a>Stream流的合并方法concat</h2><p><strong>注意concat方法只能同时合并两个流</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> StreamDemo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.atomic.AtomicInteger;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.Stream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StreamDemo5</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        List&lt;String&gt; lists = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        lists.add(<span class="string">&quot;Leslie&quot;</span>); lists.add(<span class="string">&quot;Lily&quot;</span>); lists.add(<span class="string">&quot;Leon&quot;</span>);</span><br><span class="line">        lists.add(<span class="string">&quot;John&quot;</span>); lists.add(<span class="string">&quot;Li&quot;</span>); lists.add(<span class="string">&quot;Herge&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//合并相同的Stream流</span></span><br><span class="line">        Stream&lt;String&gt; s1=lists.stream();</span><br><span class="line">        Stream&lt;String&gt; s2=Stream.of(<span class="string">&quot;Happy&quot;</span>,<span class="string">&quot;Sad&quot;</span>,<span class="string">&quot;Shy&quot;</span>);</span><br><span class="line">        <span class="comment">//直接调用concat并按照类型创建新的Stream流即可</span></span><br><span class="line">        Stream&lt;String&gt; s3=Stream.concat(s1,s2);</span><br><span class="line">        <span class="comment">//合并不同类型的s1,s4两条Stream流</span></span><br><span class="line">        Stream&lt;String&gt; s4=lists.stream();</span><br><span class="line">        Stream&lt;Integer&gt; s5=Stream.of(<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>,<span class="number">40</span>);</span><br><span class="line">        <span class="comment">//可行方法之一，就是直接定义对象类型的Stream流</span></span><br><span class="line">        Stream&lt;Object&gt; s6=Stream.concat(s4,s5);</span><br><span class="line"></span><br><span class="line">        s3.forEach(System.out::println);</span><br><span class="line">        System.out.println(<span class="string">&quot;------------&quot;</span>);</span><br><span class="line">        s6.forEach(System.out::println);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="运行结果-1"><a href="#运行结果-1" class="headerlink" title="运行结果"></a>运行结果</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">Leslie</span><br><span class="line">Lily</span><br><span class="line">Leon</span><br><span class="line">John</span><br><span class="line">Li</span><br><span class="line">Herge</span><br><span class="line">Happy</span><br><span class="line">Sad</span><br><span class="line">Shy</span><br><span class="line">------------</span><br><span class="line">Leslie</span><br><span class="line">Lily</span><br><span class="line">Leon</span><br><span class="line">John</span><br><span class="line">Li</span><br><span class="line">Herge</span><br><span class="line"><span class="number">10</span></span><br><span class="line"><span class="number">20</span></span><br><span class="line"><span class="number">30</span></span><br><span class="line"><span class="number">40</span></span><br></pre></td></tr></table></figure><h2 id="Stream终结与非终结方法"><a href="#Stream终结与非终结方法" class="headerlink" title="Stream终结与非终结方法"></a>Stream终结与非终结方法</h2><h3 id="终结方法"><a href="#终结方法" class="headerlink" title="终结方法"></a>终结方法</h3><p>一旦Stream流调用终结方法，流的操作就全部终结了，<strong>不能继续使用，只能创建新的Stream操作</strong>，其原因一般是没有返回值，或返回值不是Stream流对象</p><h4 id="终结方法包括forEach-count等等"><a href="#终结方法包括forEach-count等等" class="headerlink" title="终结方法包括forEach(),count等等"></a>终结方法包括forEach(),count等等</h4><h3 id="非终结方法"><a href="#非终结方法" class="headerlink" title="非终结方法"></a>非终结方法</h3><p>每次调用完成以后都会<strong>返回一个新的流对象</strong>，可以继续使用，支持链式编程</p><h4 id="非终结方法包括filter-skip-limit-map-concat等等"><a href="#非终结方法包括filter-skip-limit-map-concat等等" class="headerlink" title="非终结方法包括filter,skip,limit,map,concat等等"></a>非终结方法包括filter,skip,limit,map,concat等等</h4><h2 id="收集Stream流"><a href="#收集Stream流" class="headerlink" title="收集Stream流"></a>收集Stream流</h2><p>将Stream流的数据转回成集合</p><p>Stream流的作用在于将集合转换为一根高效的传送带，再利用Stream流的强大功能对Stream流进行操作。但是实际开发中最终数据的形式应该仍然是集合，所以这就涉及到Stream流的收集</p><p>换言之，Stream流只是一种手段，是我们操作数据的一种方式，集合才是我们需要始终用来保存，传输数据的数据结构，也就是目的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> StreamDemo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.Collectors;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.Stream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StreamDemo5</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        List&lt;String&gt; lists = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        lists.add(<span class="string">&quot;Leslie&quot;</span>); lists.add(<span class="string">&quot;Lily&quot;</span>); lists.add(<span class="string">&quot;Leon&quot;</span>);</span><br><span class="line">        lists.add(<span class="string">&quot;John&quot;</span>); lists.add(<span class="string">&quot;Li&quot;</span>); lists.add(<span class="string">&quot;Herge&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//先转换成Stream流并进行筛选</span></span><br><span class="line">        Stream&lt;String&gt; s1=lists.stream().filter(s -&gt; s.length()&gt;=<span class="number">3</span>);</span><br><span class="line">        <span class="comment">//然后进行Stream流的收集，将它们转换为可以用来保存，传输的数据结构</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//转换到set集合</span></span><br><span class="line">        Set&lt;String&gt; set1=s1.collect(Collectors.toSet());</span><br><span class="line">        System.out.println(set1);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//转换到list集合</span></span><br><span class="line">        Stream&lt;String&gt; s2=lists.stream().filter(s -&gt; s.length()&gt;=<span class="number">3</span>);</span><br><span class="line">        List&lt;String&gt; list1=s2.collect(Collectors.toList());</span><br><span class="line">        System.out.println(list1);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//转换到数组</span></span><br><span class="line">        Stream&lt;String&gt; s3=lists.stream().filter(s -&gt; s.length()&gt;=<span class="number">3</span>);</span><br><span class="line">        Stream&lt;String&gt; s4=lists.stream().filter(s -&gt; s.length()&gt;=<span class="number">3</span>);</span><br><span class="line">        <span class="comment">//两种转换方式，（还可以强转）</span></span><br><span class="line">        Object[] arrs1=s3.toArray();</span><br><span class="line">        <span class="comment">//接用构造器引用申明转换成的数组类型</span></span><br><span class="line">        String[] arrs2=s4.toArray(String[]::<span class="keyword">new</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>10-方法引用</title>
      <link href="/2021/03/03/10-%E6%96%B9%E6%B3%95%E5%BC%95%E7%94%A8/"/>
      <url>/2021/03/03/10-%E6%96%B9%E6%B3%95%E5%BC%95%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="方法引用概述"><a href="#方法引用概述" class="headerlink" title="方法引用概述"></a>方法引用概述</h1><h3 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h3><p>方法引用是为了进一步简化Lambda表达式的写法</p><h3 id="格式"><a href="#格式" class="headerlink" title="格式"></a>格式</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">类型或对象::引用的方法  <span class="comment">//关键语法  “::”</span></span><br></pre></td></tr></table></figure><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> ComparatorDemo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MethodDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        List&lt;String&gt; lists=<span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        lists.add(<span class="string">&quot;first&quot;</span>);</span><br><span class="line">        lists.add(<span class="string">&quot;second&quot;</span>);</span><br><span class="line">        lists.add(<span class="string">&quot;third&quot;</span>);</span><br><span class="line">        <span class="comment">//遍历列表，通过Lambda表达式的方法</span></span><br><span class="line">        lists.forEach(s -&gt; System.out.println(s));</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//方法引用(前提：必须形如上式前后的参数一致)</span></span><br><span class="line">        lists.forEach(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="静态方法的引用"><a href="#静态方法的引用" class="headerlink" title="静态方法的引用"></a>静态方法的引用</h2><h3 id="格式-1"><a href="#格式-1" class="headerlink" title="格式"></a>格式</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">类名::静态方法</span><br></pre></td></tr></table></figure><h3 id="简化步骤"><a href="#简化步骤" class="headerlink" title="简化步骤"></a>简化步骤</h3><p>定义一个静态方法，将需要简化的代码放到一个静态方法中去</p><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><ul><li><strong>被引用的方法的参数列表和函数式接口中的抽象方法的参数列表必须完全一致</strong></li><li>如果函数式接口中的抽象方法有返回值，则被应用的方法也必须有相同返回值</li><li>如果函数式接口中的抽象方法没有返回值，则被应用的方法也可以有返回值，也可以没有</li></ul><h4 id="实例-1"><a href="#实例-1" class="headerlink" title="实例"></a>实例</h4><p>首先在Student类中重写一个静态方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//首先定义静态方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">compareByAge</span><span class="params">(Student s1,Student s2)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> s1.getAge()-s2.getAge();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后利用静态方法的引用简化代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> ComparatorDemo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Collections;</span><br><span class="line"><span class="keyword">import</span> java.util.Comparator;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ComparatorDemo1</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        List&lt;Student&gt; lists=<span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        Student s1=<span class="keyword">new</span> Student(<span class="string">&quot;Leslie&quot;</span>,<span class="number">18</span>,<span class="string">&quot;Man&quot;</span>);</span><br><span class="line">        Student s2=<span class="keyword">new</span> Student(<span class="string">&quot;John&quot;</span>,<span class="number">14</span>,<span class="string">&quot;Man&quot;</span>);</span><br><span class="line">        Student s3=<span class="keyword">new</span> Student(<span class="string">&quot;Gym&quot;</span>,<span class="number">20</span>,<span class="string">&quot;Woman&quot;</span>);</span><br><span class="line">        <span class="comment">//批量向数组插入数据</span></span><br><span class="line">        Collections.addAll(lists,s1,s2,s3);</span><br><span class="line">        <span class="comment">//按照年龄进行排序(匿名内部类做法)</span></span><br><span class="line">        Collections.sort(lists, (t1,t2)-&gt;Student.compareByAge(t1,t2));</span><br><span class="line">        <span class="comment">//使用静态方法进行简化,前后参数必须相同</span></span><br><span class="line">        Collections.sort(lists,Student::compareByAge);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(Student stu:lists) &#123;</span><br><span class="line">            System.out.printf(<span class="string">&quot;name=%s age=%d sex=%s\n&quot;</span>,stu.getName(),stu.getAge(),stu.getSex());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="实例方法引用"><a href="#实例方法引用" class="headerlink" title="实例方法引用"></a>实例方法引用</h2><h3 id="格式-2"><a href="#格式-2" class="headerlink" title="格式"></a>格式</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">对象::实例方法</span><br></pre></td></tr></table></figure><h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><p>定义一个实力方法，把需要的代码放到实例中去</p><h3 id="注意事项-1"><a href="#注意事项-1" class="headerlink" title="注意事项"></a>注意事项</h3><p>被引用方法的参数列表和函数式接口的抽象方法的参数列表必须完全一致</p><h3 id="实例-2"><a href="#实例-2" class="headerlink" title="实例"></a>实例</h3><p>实例就是本节开头所引的System.out.println的简化写法</p><p>println本身是实例方法，out是输出流对象，并且前后参数完全一致，所以可以用方法引用简化</p><h2 id="构造器引用"><a href="#构造器引用" class="headerlink" title="构造器引用"></a>构造器引用</h2><h3 id="格式-3"><a href="#格式-3" class="headerlink" title="格式"></a>格式</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">类名::<span class="keyword">new</span> </span><br></pre></td></tr></table></figure><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><p>前后两个参数一致并且在创建对象的情况下就可以使用构造器引用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//前后参数一致，并在创建对象</span></span><br><span class="line">s -&gt; <span class="keyword">new</span> Student(s);</span><br><span class="line"><span class="comment">//改写成引用</span></span><br><span class="line">Student::<span class="keyword">new</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>9-Lambda表达式</title>
      <link href="/2021/03/03/9-Lambda%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
      <url>/2021/03/03/9-Lambda%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="匿名内部类"><a href="#匿名内部类" class="headerlink" title="匿名内部类"></a>匿名内部类</h1><p>没有名字的局部内部类，匿名内部类的目的是为了简化代码。</p><h2 id="格式"><a href="#格式" class="headerlink" title="格式"></a>格式</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> 类名|抽象类|接口(形参)&#123;</span><br><span class="line">    方法重写......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Anonymity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Task</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">func</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;这是父类的func方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//定义抽象方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">func2</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo1</span> </span>&#123;</span><br><span class="line">    <span class="comment">//匿名内部类</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Task t=<span class="keyword">new</span> Task() &#123;</span><br><span class="line">        <span class="comment">//重写抽象方法</span></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">func2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;这是匿名内部类重写的抽象方法func2&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        t.func();  <span class="comment">//调用父类的方法</span></span><br><span class="line">        t.func2();  <span class="comment">//调用子类重写的方法</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><ul><li>匿名内部类是一个没有名字的类</li><li>匿名内部类一旦写出来，就会立即创建一个匿名内部类对象返回（用父类接收）</li><li>匿名内部类的对象的类型相当于是当前new的那个类（父类）的子类类型</li></ul><h1 id="Lambda表达式"><a href="#Lambda表达式" class="headerlink" title="Lambda表达式"></a>Lambda表达式</h1><p> Lambda表达式是JDK1.8开始之后的新技术，是一种代码的新语法，是一种特殊写法</p><h2 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h2><p>核心目的是为了简化匿名内部类的代码写法</p><h2 id="格式-1"><a href="#格式-1" class="headerlink" title="格式"></a>格式</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(匿名内部类被重写方法的形参列表)-&gt;&#123;</span><br><span class="line">    被重写方法的方法体代码......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="使用前提"><a href="#使用前提" class="headerlink" title="使用前提"></a>使用前提</h2><ol><li>Lambda表达式并不能简化所有匿名内部类的写法</li><li>Lambda表达式只能简化函数式接口的匿名内部类写法</li></ol><h3 id="函数式接口的匿名内部类"><a href="#函数式接口的匿名内部类" class="headerlink" title="函数式接口的匿名内部类"></a>函数式接口的匿名内部类</h3><ul><li>首先必须是接口</li><li>接口中只能有一个抽象方法</li><li>Java源码中类名前有@FunctionalInterface标记的都是函数式接口，其他符合上述两条规则的也属于函数式接口</li></ul><h2 id="实例1：简化Runnable接口的匿名内部类写法"><a href="#实例1：简化Runnable接口的匿名内部类写法" class="headerlink" title="实例1：简化Runnable接口的匿名内部类写法"></a>实例1：简化Runnable接口的匿名内部类写法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> LambdaDemo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LambdaDemo1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//利用匿名内部类重写Runnable中的抽象方法并执行该线程任务对象</span></span><br><span class="line">        Runnable target =<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName()+<span class="string">&quot;通过匿名内部类重写&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        Thread t=<span class="keyword">new</span> Thread(target);</span><br><span class="line">        t.start();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//使用Lambda表达式重写抽象方法</span></span><br><span class="line">        Runnable target2 =() -&gt;&#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName()+<span class="string">&quot;通过Lambda表达式重写&quot;</span>);</span><br><span class="line">            &#125;;</span><br><span class="line">        Thread t2=<span class="keyword">new</span> Thread(target2);</span><br><span class="line">        t2.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="上述代码还可以继续简化，省略单独创建对象的过程"><a href="#上述代码还可以继续简化，省略单独创建对象的过程" class="headerlink" title="上述代码还可以继续简化，省略单独创建对象的过程"></a>上述代码还可以继续简化，省略单独创建对象的过程</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> LambdaDemo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LambdaDemo1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//利用匿名内部类重写Runnable中的抽象方法并执行该线程任务对象</span></span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName()+<span class="string">&quot;通过匿名内部类重写&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line">        <span class="comment">//使用Lambda表达式重写抽象方法</span></span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt;&#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName()+<span class="string">&quot;通过Lambda表达式重写&quot;</span>);</span><br><span class="line">        &#125;).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="实例2：简化Comparator接口的匿名内部类"><a href="#实例2：简化Comparator接口的匿名内部类" class="headerlink" title="实例2：简化Comparator接口的匿名内部类"></a>实例2：简化Comparator接口的匿名内部类</h2><h4 id="以下为匿名内部类的写法"><a href="#以下为匿名内部类的写法" class="headerlink" title="以下为匿名内部类的写法"></a>以下为匿名内部类的写法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> ComparatorDemo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Collections;</span><br><span class="line"><span class="keyword">import</span> java.util.Comparator;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ComparatorDemo1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        List&lt;Student&gt; lists=<span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        Student s1=<span class="keyword">new</span> Student(<span class="string">&quot;Leslie&quot;</span>,<span class="number">18</span>,<span class="string">&quot;Man&quot;</span>);</span><br><span class="line">        Student s2=<span class="keyword">new</span> Student(<span class="string">&quot;John&quot;</span>,<span class="number">14</span>,<span class="string">&quot;Man&quot;</span>);</span><br><span class="line">        Student s3=<span class="keyword">new</span> Student(<span class="string">&quot;Gym&quot;</span>,<span class="number">20</span>,<span class="string">&quot;Woman&quot;</span>);</span><br><span class="line">        <span class="comment">//批量向数组插入数据</span></span><br><span class="line">        Collections.addAll(lists,s1,s2,s3);</span><br><span class="line">        <span class="comment">//按照年龄进行排序(匿名内部类做法)</span></span><br><span class="line">        Collections.sort(lists, <span class="keyword">new</span> Comparator&lt;Student&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Student s1, Student s2)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">if</span>(s1.getAge()&lt;s2.getAge()) <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(s1.getAge()&gt;s2.getAge()) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">                <span class="comment">//或者上述可以简化携程return s1.getAge()-s2.getAge();</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">for</span>(Student stu:lists) &#123;</span><br><span class="line">            System.out.printf(<span class="string">&quot;name=%s age=%d sex=%s\n&quot;</span>,stu.getName(),stu.getAge(),stu.getSex());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="利用Lambda表达式简化"><a href="#利用Lambda表达式简化" class="headerlink" title="利用Lambda表达式简化"></a>利用Lambda表达式简化</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> ComparatorDemo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Collections;</span><br><span class="line"><span class="keyword">import</span> java.util.Comparator;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ComparatorDemo1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        List&lt;Student&gt; lists=<span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        Student s1=<span class="keyword">new</span> Student(<span class="string">&quot;Leslie&quot;</span>,<span class="number">18</span>,<span class="string">&quot;Man&quot;</span>);</span><br><span class="line">        Student s2=<span class="keyword">new</span> Student(<span class="string">&quot;John&quot;</span>,<span class="number">14</span>,<span class="string">&quot;Man&quot;</span>);</span><br><span class="line">        Student s3=<span class="keyword">new</span> Student(<span class="string">&quot;Gym&quot;</span>,<span class="number">20</span>,<span class="string">&quot;Woman&quot;</span>);</span><br><span class="line">        <span class="comment">//批量向数组插入数据</span></span><br><span class="line">        Collections.addAll(lists,s1,s2,s3);</span><br><span class="line">        <span class="comment">//按照年龄进行排序(匿名内部类做法)</span></span><br><span class="line">        Collections.sort(lists, (Student t1, Student t2)-&gt; &#123;</span><br><span class="line">                <span class="keyword">if</span>(t1.getAge()&lt;t2.getAge()) <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(t1.getAge()&gt;t2.getAge()) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">                <span class="comment">//或者上述可以简化写成return s1.getAge()-s2.getAge();</span></span><br><span class="line">            &#125;);</span><br><span class="line">        <span class="keyword">for</span>(Student stu:lists) &#123;</span><br><span class="line">            System.out.printf(<span class="string">&quot;name=%s age=%d sex=%s\n&quot;</span>,stu.getName(),stu.getAge(),stu.getSex());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Lambda表达式省略写法"><a href="#Lambda表达式省略写法" class="headerlink" title="Lambda表达式省略写法"></a>Lambda表达式省略写法</h2><ul><li>如果Lambda表达式的方法体代码只有一行，可以省略<strong>大括号</strong>，（如果这行代码是return语句，则<strong>return必须省略不写</strong>）同时要省略<strong>分号</strong></li><li><strong>参数类型</strong>可以省略不写</li><li>如果只有一个参数，除了参数类型，<strong>括号</strong>()也可以省略</li></ul><h4 id="前文代码经过省略后"><a href="#前文代码经过省略后" class="headerlink" title="前文代码经过省略后"></a>前文代码经过省略后</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> ComparatorDemo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Collections;</span><br><span class="line"><span class="keyword">import</span> java.util.Comparator;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ComparatorDemo1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        List&lt;Student&gt; lists=<span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        Student s1=<span class="keyword">new</span> Student(<span class="string">&quot;Leslie&quot;</span>,<span class="number">18</span>,<span class="string">&quot;Man&quot;</span>);</span><br><span class="line">        Student s2=<span class="keyword">new</span> Student(<span class="string">&quot;John&quot;</span>,<span class="number">14</span>,<span class="string">&quot;Man&quot;</span>);</span><br><span class="line">        Student s3=<span class="keyword">new</span> Student(<span class="string">&quot;Gym&quot;</span>,<span class="number">20</span>,<span class="string">&quot;Woman&quot;</span>);</span><br><span class="line">        <span class="comment">//批量向数组插入数据</span></span><br><span class="line">        Collections.addAll(lists,s1,s2,s3);</span><br><span class="line">        <span class="comment">//按照年龄进行排序(匿名内部类做法)</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        省略了大括号和最后的分号</span></span><br><span class="line"><span class="comment">        并且由于唯一的一行代码是return语句，所以省略return</span></span><br><span class="line"><span class="comment">        最后将参数类型也省略</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        Collections.sort(lists, (t1,  t2)-&gt; t1.getAge()-t2.getAge());</span><br><span class="line">        <span class="keyword">for</span>(Student stu:lists) &#123;</span><br><span class="line">            System.out.printf(<span class="string">&quot;name=%s age=%d sex=%s\n&quot;</span>,stu.getName(),stu.getAge(),stu.getSex());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>8-并发包</title>
      <link href="/2021/03/03/8-%E5%B9%B6%E5%8F%91%E5%8C%85/"/>
      <url>/2021/03/03/8-%E5%B9%B6%E5%8F%91%E5%8C%85/</url>
      
        <content type="html"><![CDATA[<h1 id="并发包"><a href="#并发包" class="headerlink" title="并发包"></a>并发包</h1><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>在实际开发中不考虑线程安全的情况下，一般不需要做线程安全处理，防止过多的处理导致性能变差</p><p>但是开发中有很多业务需要考虑线程安全的相关问题，此时就必须考虑线程安全的处理</p><p>Java为很多业务场景提供了性能优异，且线程安全的并发包</p><h2 id="ConcurrentHashMap"><a href="#ConcurrentHashMap" class="headerlink" title="ConcurrentHashMap"></a>ConcurrentHashMap</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> ConcurrentHashMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Hashtable;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ConcurrentHashMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CHMDemo1</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//public static Map&lt;String,String&gt; maps=new HashMap&lt;&gt;();</span></span><br><span class="line">    <span class="comment">//public static Map&lt;String,String&gt; maps=new Hashtable&lt;&gt;();</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Map&lt;String,String&gt; maps=<span class="keyword">new</span> ConcurrentHashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Runnable target = <span class="keyword">new</span> CHMRunnable();</span><br><span class="line">        Thread t1 = <span class="keyword">new</span> Thread(target);</span><br><span class="line">        Thread t2 = <span class="keyword">new</span> Thread(target);</span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        * 注意：首先这里不可以直接简化用new Thread(target).start();开启线程</span></span><br><span class="line"><span class="comment">        * 两个线程必须实例化对象，这是由于后续要用到join()方法</span></span><br><span class="line"><span class="comment">        * join方法的作用在于避免主线程和t1,t2两个线程争抢CPU</span></span><br><span class="line"><span class="comment">        * 使用join方法后，在t1,t2执行完之前，后续主线程都不会执行</span></span><br><span class="line"><span class="comment">        * 这就避免了提前打出maps长度导致结果并不是最终运行的结果</span></span><br><span class="line"><span class="comment">        * 同时t1,t2都用到了join方法，所以二者之间仍然是并发执行</span></span><br><span class="line"><span class="comment">        * */</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            t1.join();</span><br><span class="line">            t2.join();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;maps长度=&quot;</span>+maps.size());</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        * 可以看到，当使用hashmap类型时，最终的执行结果并不是1000000</span></span><br><span class="line"><span class="comment">        * 这是由于单纯通过hashmap算法可能出现两个线程同时插入到同一线程的情况</span></span><br><span class="line"><span class="comment">        * HashMap时线程不安全的，性能好</span></span><br><span class="line"><span class="comment">        *</span></span><br><span class="line"><span class="comment">        * 可以看到，当使用hashtable类型时，最终执行结果始终都是1000000</span></span><br><span class="line"><span class="comment">        * 可见hashtable保证了线程的安全性，但是这种方式效率极低，在项目中基本被舍弃</span></span><br><span class="line"><span class="comment">        * 因为它的实现方式在每个方法中都加上了锁</span></span><br><span class="line"><span class="comment">        * HashTable时线程安全的，性能较差</span></span><br><span class="line"><span class="comment">        *</span></span><br><span class="line"><span class="comment">        * ConcurrentHashMap的实现与hashtable不同，它只锁住对应变量的桶（分段式锁）</span></span><br><span class="line"><span class="comment">        * 所以其他变量的增删改不会相互影响，效率得到了极大的保证</span></span><br><span class="line"><span class="comment">        * 保证了线程安全，综合性能较好</span></span><br><span class="line"><span class="comment">        * */</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CHMRunnable</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">500000</span>;i++)&#123;</span><br><span class="line">            CHMDemo1.maps.put(Thread.currentThread().getName()+i,Thread.currentThread().getName()+i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="CountDownLatch"><a href="#CountDownLatch" class="headerlink" title="CountDownLatch"></a>CountDownLatch</h2><p>CountDownLatch允许一个或多个线程等待其他线程完成操作，再执行自己</p><p>e.g. 线程1执行A任务和C任务，线程2执行B任务，且根据规定必须按照A，B，C的顺序执行任务：</p><p>所以就可以利用CountDownLatch保证在线程1执行完任务A后等待线程2执行完毕再执行剩余任务</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> ConcurrentHashMap;</span><br><span class="line"></span><br><span class="line"><span class="comment">//CountDownLatch</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.CountDownLatch;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CDLDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建CountDownLatch对象，用于监督1，2线程的执行情况</span></span><br><span class="line">        <span class="comment">//这里传入的参数是步数，表示唤醒线程需要的步数，部署为0时，等待的线程开始执行</span></span><br><span class="line">        <span class="comment">//这种方法比线程通信更加灵活</span></span><br><span class="line">        CountDownLatch c=<span class="keyword">new</span> CountDownLatch(<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">new</span> Thread_first(c).start();</span><br><span class="line">        <span class="keyword">new</span> Thread_second(c).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Thread_first</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> CountDownLatch c;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Thread_first</span><span class="params">(CountDownLatch c)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.c=c;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;A&quot;</span>);</span><br><span class="line">        <span class="comment">//等待状态,让当前线程让出CPU等待</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            c.await();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;C&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Thread_second</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> CountDownLatch c;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Thread_second</span><span class="params">(CountDownLatch c)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.c=c;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;B&quot;</span>);</span><br><span class="line">        c.countDown();  <span class="comment">//让计数器减一,当计数器为0时唤醒等待的线程</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到，在使用countdownlatch之前，最终结果是ACB，使用countdownlatch之后，最终结果是ABC</p><h2 id="CyclicBarrier"><a href="#CyclicBarrier" class="headerlink" title="CyclicBarrier"></a>CyclicBarrier</h2><p>某个线程任务必须等待其他线程执行完毕以后才能最终触发自己执行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> ConcurrentHashMap;</span><br><span class="line"></span><br><span class="line"><span class="comment">//CyclicBarrier</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.BrokenBarrierException;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.CyclicBarrier;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CBDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建任务循环屏障对象,等到5个线程全部执行完毕之后触发一次任务</span></span><br><span class="line">        <span class="comment">// 第一个参数表示等待线程执行的个数，第二个参数表示执行的任务</span></span><br><span class="line">        CyclicBarrier c=<span class="keyword">new</span> CyclicBarrier(<span class="number">5</span>,<span class="keyword">new</span> CBRunnable());</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> CBThread(<span class="string">&quot;用户&quot;</span>+i,c).start();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CBRunnable</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;五个任务全部执行完毕，&quot;</span>+Thread.currentThread().getName()+<span class="string">&quot;开始执行！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CBThread</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> CyclicBarrier c;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CBThread</span><span class="params">(String s,CyclicBarrier c)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(s);</span><br><span class="line">        <span class="keyword">this</span>.c=c;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            System.out.println(Thread.currentThread().getName()+<span class="string">&quot;正在执行！&quot;</span>);</span><br><span class="line">            c.await();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">用户<span class="number">3</span>正在执行！</span><br><span class="line">用户<span class="number">1</span>正在执行！</span><br><span class="line">用户<span class="number">2</span>正在执行！</span><br><span class="line">用户<span class="number">0</span>正在执行！</span><br><span class="line">用户<span class="number">4</span>正在执行！</span><br><span class="line">五个任务全部执行完毕，用户<span class="number">3</span>开始执行！</span><br></pre></td></tr></table></figure><p>当修改代码中的for循环为10次时，可以看到最终运行结果为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">用户<span class="number">4</span>正在执行！</span><br><span class="line">用户<span class="number">6</span>正在执行！</span><br><span class="line">用户<span class="number">1</span>正在执行！</span><br><span class="line">用户<span class="number">5</span>正在执行！</span><br><span class="line">用户<span class="number">3</span>正在执行！</span><br><span class="line">用户<span class="number">2</span>正在执行！</span><br><span class="line">用户<span class="number">8</span>正在执行！</span><br><span class="line">用户<span class="number">7</span>正在执行！</span><br><span class="line">用户<span class="number">0</span>正在执行！</span><br><span class="line">用户<span class="number">9</span>正在执行！</span><br><span class="line">五个任务全部执行完毕，用户<span class="number">7</span>开始执行！</span><br><span class="line">五个任务全部执行完毕，用户<span class="number">9</span>开始执行！</span><br></pre></td></tr></table></figure><p>可以看到每个线程调用await()方法告诉c自己已经运行完成，然后当前线程被回收（注意，不是被销毁，如果是销毁则后续c执行传入的任务时获取当前线程得到的必然不是这些已经完成命名的线程），并且循环屏障是达到一组屏障就触发一次任务的执行，而不一定只执行一次</p><h2 id="Semaphore"><a href="#Semaphore" class="headerlink" title="Semaphore"></a>Semaphore</h2><p>主要作用是控制线程的并发数量，synchronized可以起到“锁”的作用，保证在某个时间段内，只允许一个线程访问，而Seamaphore则可以设置同时允许几个线程进行。</p><p>Semaphore字面意思是信号量的意思，作用就是控制某段时间内访问特定资源的线程数目</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> ConcurrentHashMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Semaphore;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SemaphoreDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SemaTask task=<span class="keyword">new</span> SemaTask();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> SemaThread(task).start();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//任务代码</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SemaTask</span></span>&#123;</span><br><span class="line">    <span class="comment">//创建Semaphore对象，第一个参数表示允许执行acquire和release之间内容的线程数量</span></span><br><span class="line">    <span class="keyword">private</span> Semaphore sema=<span class="keyword">new</span> Semaphore(<span class="number">2</span>);</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">task</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            sema.acquire();</span><br><span class="line">            System.out.println(Thread.currentThread().getName()+<span class="string">&quot;进入时间：&quot;</span>+System.currentTimeMillis());</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(Thread.currentThread().getName()+<span class="string">&quot;离开时间：&quot;</span>+System.currentTimeMillis());</span><br><span class="line">            sema.release();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SemaThread</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> SemaTask task;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SemaThread</span><span class="params">(SemaTask task)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.task=task;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        task.task();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Exchanger"><a href="#Exchanger" class="headerlink" title="Exchanger"></a>Exchanger</h2><p>一个用于线程间协作的工具类，Exchanger用于线程间的数据交换。</p><p>两个线程通过exchanger方法交换数据，如果第一个线程先执行exchanger方法，它会一直等待第二个线程也执行exchanger方法，当两个线程都达到同步点时（程序执行完毕），这两个线程就可以进行数据交换，将本线程生产出来的数据传递给对方</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> ConcurrentHashMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Exchanger;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExchangerDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建Exchanger交换数据</span></span><br><span class="line">        Exchanger&lt;String&gt; exch=<span class="keyword">new</span> Exchanger&lt;String&gt;();</span><br><span class="line">        Thread t1=<span class="keyword">new</span> task(<span class="string">&quot;task1&quot;</span>,exch,<span class="string">&quot;你好，我是task1&quot;</span>);</span><br><span class="line">        Thread t2=<span class="keyword">new</span> task(<span class="string">&quot;task2&quot;</span>,exch,<span class="string">&quot;你好，我是task2&quot;</span>);</span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">task</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Exchanger&lt;String&gt; exch;</span><br><span class="line">    <span class="keyword">private</span> String result;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">task</span><span class="params">(String name,Exchanger exch,String result)</span></span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(name);</span><br><span class="line">        <span class="keyword">this</span>.exch=exch;</span><br><span class="line">        <span class="keyword">this</span>.result=result;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(Thread.currentThread().getName()+<span class="string">&quot;正在执行工作流程&quot;</span>);</span><br><span class="line">        <span class="comment">//交换结果</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            String s=exch.exchange(result);</span><br><span class="line">            System.out.println(Thread.currentThread().getName()+<span class="string">&quot;收到交换信息“&quot;</span>+s+<span class="string">&quot;”&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="运行结果-1"><a href="#运行结果-1" class="headerlink" title="运行结果"></a>运行结果</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">task2正在执行工作流程</span><br><span class="line">task1正在执行工作流程</span><br><span class="line">task2收到交换信息“你好，我是task1”</span><br><span class="line">task1收到交换信息“你好，我是task2”</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>7-volatile关键字</title>
      <link href="/2021/03/03/7-volatile%E5%85%B3%E9%94%AE%E5%AD%97/"/>
      <url>/2021/03/03/7-volatile%E5%85%B3%E9%94%AE%E5%AD%97/</url>
      
        <content type="html"><![CDATA[<h3 id="并发编程下，多线程访问变量的不可见性问题"><a href="#并发编程下，多线程访问变量的不可见性问题" class="headerlink" title="并发编程下，多线程访问变量的不可见性问题"></a>并发编程下，多线程访问变量的不可见性问题</h3><p>指多个线程访问共享变量，会出现一个线程修改变量的值后，其他线程看不到最新值的情况</p><h4 id="代码示例："><a href="#代码示例：" class="headerlink" title="代码示例："></a>代码示例：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> VolatileTest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">VolatileDemo</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> flag=<span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        flag=<span class="keyword">true</span>;</span><br><span class="line">        System.out.println(<span class="string">&quot;flag修改成功！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isFlag</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> flag;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setFlag</span><span class="params">(<span class="keyword">boolean</span> flag)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.flag = flag;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">test</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        VolatileDemo t=<span class="keyword">new</span> VolatileDemo();</span><br><span class="line">        t.start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(t.isFlag())&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;判断条件成立，程序正常执行！&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="运行结果："><a href="#运行结果：" class="headerlink" title="运行结果："></a>运行结果：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">flag修改成功！</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>可以看到程序始终没有成功输出主线程中的判断条件内的内容，说明主线程存储的flag变量的值仍然始终是false,但是子线程中已经成功修改了flag的值为false，这就是并发编程下多线程访问变量的不可见性问题。</p><h1 id="变量不可见性的内存语义"><a href="#变量不可见性的内存语义" class="headerlink" title="变量不可见性的内存语义"></a>变量不可见性的内存语义</h1><h2 id="JMM概述"><a href="#JMM概述" class="headerlink" title="JMM概述"></a>JMM概述</h2><p>JMM（Java Memory Model）是Java的一种内存模型，与<strong>Java并发编程有关</strong>的一种模型。</p><p>JMM是Java虚拟机规范中所定义的一种内存模型，JMM是<strong>标准化的</strong>，屏蔽掉了底层不同计算机的区别</p><p>JMM描述了Java程序中各种变量（<strong>线程共享变量</strong>）的<strong>访问规则</strong>，以及在JVM中将<strong>变量存储</strong>到内存中和从内存中<strong>读取变量</strong>这样的底层细节</p><h3 id="JMM规定："><a href="#JMM规定：" class="headerlink" title="JMM规定："></a>JMM规定：</h3><ul><li>所有的共享变量都存储于主内存中。（这里所说的变量指的是实例变量和类变量，不包含局部变量，因为局部变量是线程私有的，因此不存在竞争问题）</li><li>每一个线程还存在自己的工作内存，线程的工作内存，保留了被线程使用的变量的工作副本</li><li>线程对变量的所有的操作（读，取）都必须在工作内存中完成，而不能直接读写主内存中的变量</li><li>不同线程之间也不能直接访问对方的工作内存中的变量，线程间变量的值的传递需要通过主内存中转来完成</li></ul><p><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/%E4%B8%BB%E5%86%85%E5%AD%98%E4%B8%8E%E5%B7%A5%E4%BD%9C%E5%86%85%E5%AD%98.jpg" alt="主内存与工作内存"></p><p>上边的例子中，最后循环没有正常执行的原因也就可以解释了，子线程和主线程最开始时都直接从主内存中读取了flag的值并放入工作内存中，此时两个工作内存中的flag值都是false，随后子线程修改了工作内存中的flag的值，并将结果返回到主内存中，即修改了主内存的flag值，但主线程并没有重新读取主内存，也就导致了主线程中的工作内存中flag的值始终为false无法正常进行循环</p><h4 id="以上这些也就解释了前面所说的不可见性产生的原因："><a href="#以上这些也就解释了前面所说的不可见性产生的原因：" class="headerlink" title="以上这些也就解释了前面所说的不可见性产生的原因："></a>以上这些也就解释了前面所说的不可见性产生的原因：</h4><p>每个线程都有自己的工作内存，线程都是从主内存拷贝共享变量的副本值，每个线程都是在工作内存中操作共享变量的</p><h1 id="变量不可见性的解决"><a href="#变量不可见性的解决" class="headerlink" title="变量不可见性的解决"></a>变量不可见性的解决</h1><h2 id="解决方案一：加锁"><a href="#解决方案一：加锁" class="headerlink" title="解决方案一：加锁"></a>解决方案一：加锁</h2><p>在要使用共享变量前，先将代码上锁（synchronized），就可以解决变量不可见性，要了解这种方式解决问题的原理，就要理解某一个线程在进入synchronized代码块前后，会执行哪些操作。</p><p><strong>当某一个线程进入synchronized代码块时，会执行如下操作：</strong></p><ol><li>线程获得锁</li><li><strong>清空工作空间</strong></li><li>从主内存拷贝共享变量<strong>最新的值</strong>到工作内存为副本</li><li>执行代码</li><li>将修改后的副本的值<strong>刷新</strong>回主内存中</li><li>线程释放锁</li></ol><p>了解了上述执行流程就不难发现，只要在使用了共享变量的代码前加锁，就可以在执行当前语句前获取主内存中最新的共享变量的值，自然也就解决了变量不可见性的问题。并且，由于我们只是出于更新变量值的目的加锁，所以上锁的对象是什么就无关紧要了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> VolatileTest;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//解决并发编程下变量不可见性的方案</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 方法一：加锁</span></span><br><span class="line"><span class="comment">* 在访问共享变量的过程中对它上锁（上锁的对象是任意的）</span></span><br><span class="line"><span class="comment">* 方法二：对共享的变量进行volatile关键字修饰</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">VolatileDemo2</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> flag=<span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        flag=<span class="keyword">true</span>;</span><br><span class="line">        System.out.println(<span class="string">&quot;flag修改成功！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isFlag</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> flag;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setFlag</span><span class="params">(<span class="keyword">boolean</span> flag)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.flag = flag;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">test2</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        VolatileDemo2 t=<span class="keyword">new</span> VolatileDemo2();</span><br><span class="line">        t.start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="comment">//在访问共享变量前，先对其加锁</span></span><br><span class="line">            <span class="keyword">synchronized</span> (test2.class) &#123;</span><br><span class="line">                <span class="keyword">if</span> (t.isFlag()) &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;判断条件成立，程序正常执行！&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="解决方案二：volatile关键字修饰"><a href="#解决方案二：volatile关键字修饰" class="headerlink" title="解决方案二：volatile关键字修饰"></a>解决方案二：volatile关键字修饰</h2><p>直接在共享变量前加volatile关键字修饰</p><h3 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h3><ol><li>所有线程从主内存读取到数据放入其对应的工作内存中</li><li>某个线程操作有volatile修饰的变量并更改了它的值</li><li>当该线程返回这个变量的新值给主内存后，所有其他线程原先的此变量副本失效</li><li>当某个线程需要再次操作该变量时，需要从新从主内存中读取最新的变量的值，放入到工作内存中</li></ol><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p><strong>volatile保证不同线程对共享变量操作的可见性</strong>，也就是说一个线程修改了volatile修饰的变量，当修改写回主内存时，另外一个线程立即看到最新的值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> VolatileTest;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//解决并发编程下变量不可见性的方案</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 方法一：加锁</span></span><br><span class="line"><span class="comment">* 在访问共享变量的过程中对它上锁（上锁的对象是任意的）</span></span><br><span class="line"><span class="comment">* 方法二：对共享的变量进行volatile关键字修饰</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">VolatileDemo2</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">boolean</span> flag=<span class="keyword">false</span>;  <span class="comment">//直接对共享的变量进行volatile关键字修饰</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        flag=<span class="keyword">true</span>;</span><br><span class="line">        System.out.println(<span class="string">&quot;flag修改成功！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isFlag</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> flag;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setFlag</span><span class="params">(<span class="keyword">boolean</span> flag)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.flag = flag;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">test2</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        VolatileDemo2 t=<span class="keyword">new</span> VolatileDemo2();</span><br><span class="line">        t.start();</span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (t.isFlag()) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;判断条件成立，程序正常执行！&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="volatile与synchronized比较"><a href="#volatile与synchronized比较" class="headerlink" title="volatile与synchronized比较"></a>volatile与synchronized比较</h2><ul><li>volatile只能修饰实例变量或类变量，而synchronized可以修饰方法，或者代码块</li><li>volatile保证数据的可见性，但是不保证原子性（多线程进行写操作，不保证线程安全），而synchronized是一种排他（互斥）的机制</li></ul><h1 id="原子性"><a href="#原子性" class="headerlink" title="原子性"></a>原子性</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>原子性指的是在一次操作或者多次操作中，要么所有的操作全部得到了执行并且不会受到任何因素的干扰而中断，要么所有的操作都不执行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> VolatileAtomic;</span><br><span class="line"></span><br><span class="line"><span class="comment">//探究volatile的原子性</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AtomicDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Runnable run=<span class="keyword">new</span> MyRunnable();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">100</span>;i++)&#123;</span><br><span class="line">            <span class="comment">//启动100条线程</span></span><br><span class="line">            <span class="keyword">new</span> Thread(run).start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyRunnable</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">int</span> count=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//一次任务是一个整体，会进行100次的自增和输出操作</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">100</span>;i++)&#123;</span><br><span class="line">            count++;</span><br><span class="line">            System.out.println(<span class="string">&quot;count====&gt;&quot;</span>+count);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到，上述程序执行过程中，最后变量的值在有volatile修饰的情况下和没有volatile修饰的情况下，最终结果都不一定是10000，发生这种情况的原因在于可能同时有多个线程（并行）对变量进行赋值操作，由于volatile的限制它们同时获取到的变量值是一样的，它们最终会返回相同的值回主内存中，这样本来多次的赋值操作就变成了一次，总的赋值操作少了，最终结果自然也无法达到10000，究其根本，<strong>就是volatile并不具备原子性造成的，它只能解决线程的可见性问题</strong></p><h2 id="保证原子性的方案"><a href="#保证原子性的方案" class="headerlink" title="保证原子性的方案"></a>保证原子性的方案</h2><h3 id="加锁"><a href="#加锁" class="headerlink" title="加锁"></a>加锁</h3><p>最简单的保证原子性的方案就是对需要同时执行（保证原子性）的代码进行加锁，加锁后这段代码同时只能由持有锁的唯一线程执行，并且加锁的同时也就保证了变量的可见性，不需要再利用volatile修饰变量了</p><h3 id="原子类"><a href="#原子类" class="headerlink" title="原子类"></a>原子类</h3><p>Java从JDK1.5开始提供Atomic包，这个包定义了一种<strong>原子操作类</strong>，原子操作类提供了一种简单高效，线程安全的更新一个变量的方式（<strong>因为加锁这种机制的性能比较差</strong>）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">AtomicInteger</span><span class="params">()</span></span>;  <span class="comment">//初始化一个默认值为0的原子型Integer</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">AtomicInteger</span><span class="params">(<span class="keyword">int</span> initialValue)</span></span>;   <span class="comment">//初始化一个指定值的原子型Integer</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get</span><span class="params">()</span></span>;   <span class="comment">//获取值</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getAndIncrement</span><span class="params">()</span></span>;  <span class="comment">//以原子方式将当前值加1，注意：这里返回的是自增前的值</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">incrementAndGet</span><span class="params">()</span></span>;  <span class="comment">//以原子方式将当前值加1，注意：这里返回的是自增后的值</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">addAndGet</span><span class="params">(<span class="keyword">int</span> data)</span></span>;  <span class="comment">//以原子方式将输入的数值与实例中的值（AtomicInteger中的value）相加，并返回结果</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getAndSet</span><span class="params">(<span class="keyword">int</span> value)</span></span>;  <span class="comment">//以原子方式设置为newValue的值，并返回旧值</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> VolatileAtomic;</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用原子类保证原子性</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.atomic.AtomicInteger;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AtomicDemo2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Runnable run=<span class="keyword">new</span> My_Runnable();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">100</span>;i++)&#123;</span><br><span class="line">            <span class="comment">//启动100条线程</span></span><br><span class="line">            <span class="keyword">new</span> Thread(run).start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">My_Runnable</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    <span class="comment">//创建一个Integer更新的原子类,初始值为0</span></span><br><span class="line">    <span class="keyword">private</span> AtomicInteger count=<span class="keyword">new</span> AtomicInteger();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//一次任务是一个整体，会进行100次的自增和输出操作</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">100</span>;i++)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;count====&gt;&quot;</span>+count.incrementAndGet());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>可以看到，上述程序通过原子类保证了原子性，保证了程序正常执行</strong></p><h2 id="原子类CAS机制"><a href="#原子类CAS机制" class="headerlink" title="原子类CAS机制"></a>原子类CAS机制</h2><h3 id="CAS机制"><a href="#CAS机制" class="headerlink" title="CAS机制"></a>CAS机制</h3><h4 id="（Compare-And-Swap）"><a href="#（Compare-And-Swap）" class="headerlink" title="（Compare And Swap）"></a>（Compare And Swap）</h4><p>比较再交换机制，是现代CPU广泛支持的一种对内存中的共享数据进行操作的一种特殊指令。</p><p>CAS可以将read-modify-check-write转换为原子操作，这个原子操作直接由处理器保证。</p><p>CAS机制当中使用了3个基本操作数：内存地址V，旧的预期值A，要修改的新值B</p><p>CAS机制的核心就是比较再交换，它的实现流程是在一个进程中，同时有多个线程获取到同一个共享变量的值，此时由于没有锁的限制它们各自开始对变量进行操作，当某个线程结束对变量的操作并把新值返回到主内存中去之前，它会先行比较此时主内存中共享变量的值和自己刚开始获取到的变量值是否相同，假设相同，就将新值赋给主内存中的共享变量，加入不同，就将当前变量值作废，重新获取最新的变量值并重新开始操作</p><h2 id="个人理解：为什么单纯依靠volatile关键字无法解决原子性的问题"><a href="#个人理解：为什么单纯依靠volatile关键字无法解决原子性的问题" class="headerlink" title="个人理解：为什么单纯依靠volatile关键字无法解决原子性的问题"></a>个人理解：为什么单纯依靠volatile关键字无法解决原子性的问题</h2><p>volatile关键字执行的操作是在某个线程将该变量的刷新值返回到主内存后，处理使得其他所有该变量的副本值失效，也就是再次操作这个值必须重新去主内存中获取最新结果。但这样其实并不能彻底实现原子性，会出现一种情况，例如线程A，B获取到相同的共享变量x的值。随后A，B分别对变量x进行操作（虽然不是同时，但他们可以先后操作，此时二者都没有将更新过的变量值返回主内存），随后A线程首先将更新的x值返回主内存，此举使得所有获得x值的线程手中原来的值失效，当然也包括B，但这对B并没有实际影响，B已经完成了对变量x的操作，只剩将变量返回主内存中的过程，所以B线程本质上不会收到影响，而是执行最后一步，将刷新的值返回主内存。这就导致原本应当A，B两个线程对变量进行两次操作，最后实际上只有后刷新的B线程对变量做出了改变。最终导致了原子性的问题产生</p><p>但是CAS机制就最终解决了这个问题，它保证了B线程在尝试刷新主内存的值之前会先进行检验，假如主内存中的变量值已经改变，则B线程之前的操作失效，需要重新进行。</p><h2 id="CAS与Synchronized：乐观锁，悲观锁"><a href="#CAS与Synchronized：乐观锁，悲观锁" class="headerlink" title="CAS与Synchronized：乐观锁，悲观锁"></a>CAS与Synchronized：乐观锁，悲观锁</h2><h3 id="Synchronized总是从悲观的角度出发，被称为悲观锁。"><a href="#Synchronized总是从悲观的角度出发，被称为悲观锁。" class="headerlink" title="Synchronized总是从悲观的角度出发，被称为悲观锁。"></a>Synchronized总是从悲观的角度出发，被称为悲观锁。</h3><p>总是假设最坏的情况，每次去拿数据的时候都认为别人会修改，所以每次在拿数据的时候都会上锁，防止别人在他使用期间拿到锁（共享资源每次只给一个线程使用，其他线程阻塞，用完后子再把资源转让给其他线程）JDK中的ReentrantLock也是一种悲观锁，整体来说这种方式性能较差</p><h3 id="CAS总是从乐观角度出发，被称为乐观锁"><a href="#CAS总是从乐观角度出发，被称为乐观锁" class="headerlink" title="CAS总是从乐观角度出发，被称为乐观锁"></a>CAS总是从乐观角度出发，被称为乐观锁</h3><p>总是假设最好的情况，每次去拿数据的时候都认为别人不会修改，所以不上锁，但是在更新的时候会判断在使用期间别人有没有更新这个数据，综合性能较好</p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>6-死锁</title>
      <link href="/2021/03/03/6-%E6%AD%BB%E9%94%81/"/>
      <url>/2021/03/03/6-%E6%AD%BB%E9%94%81/</url>
      
        <content type="html"><![CDATA[<h1 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁</h1><p><strong>死锁代表的是一种情形：多个线程同时被阻塞，它们中的一个或者全部都在等待某个资源被释放。由于线程被无限期阻塞，因此程序不可能正常终止</strong>（例如：客户一方占用资金等待货物资源，经销商一方占用货物资源等待资金，双方都占用一种资源，并且都在等待一种资源，这就导致交易流程无法正常进行，也就形成了所谓的“死锁”）</p><h3 id="死锁产生的四个必要条件："><a href="#死锁产生的四个必要条件：" class="headerlink" title="死锁产生的四个必要条件："></a>死锁产生的四个必要条件：</h3><ol><li><strong>互斥使用</strong>：即当一个资源被一个一个线程使用（占有）时，别的线程不能使用</li><li><strong>不可抢占</strong>：资源请求者不能强制从资源占有者手中夺取资源，资源只能由资源占有者主动释放</li><li><strong>请求和保持</strong>：即当资源请求者在请求其他的资源的同时保持对原有资源的占有</li><li><strong>循环等待</strong>：即存在一个等待循环队列，P1要P2的资源，P2要P1的资源，这样就形成了一个等待循环</li></ol><p>当上述的四个条件<strong>都满足</strong>时，便形成死锁，当然，死锁的情况下如果打破上述任何一个条件，便可以让死锁消失。开发中应该尽量避免死锁</p><p>死锁在代码形式上通常需要锁的嵌套，也就是在锁的内部还有锁</p><h3 id="代码实现：必然死锁的案例"><a href="#代码实现：必然死锁的案例" class="headerlink" title="代码实现：必然死锁的案例"></a>代码实现：必然死锁的案例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> ThreadPool;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//必然死锁案例</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadDead</span>  </span>&#123;</span><br><span class="line">    <span class="comment">// 定义两个资源对象</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object resource1=<span class="keyword">new</span> Object();</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object resource2=<span class="keyword">new</span> Object();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//定义两个线程</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//线程1</span></span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="comment">//上锁，第一次线程1锁住资源1</span></span><br><span class="line">                <span class="keyword">synchronized</span> (resource1)&#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;线程1占用资源1，请求资源2&quot;</span>);</span><br><span class="line">                    <span class="comment">/*</span></span><br><span class="line"><span class="comment">                    休眠1s，这是为了保证死锁必然发生</span></span><br><span class="line"><span class="comment">                    以计算机的运行速度，保证了休眠1s的情况下，必然会执行线程2</span></span><br><span class="line"><span class="comment">                    此时资源1已经被上锁，待线程2开始运行，第一步就会讲资源2上锁</span></span><br><span class="line"><span class="comment">                    此时两个资源已经都被上锁</span></span><br><span class="line"><span class="comment">                    待两个线程休眠结束，开始运行</span></span><br><span class="line"><span class="comment">                    线程1进入锁阻塞状态，因为资源2已经被锁</span></span><br><span class="line"><span class="comment">                    线程2也进入锁阻塞状态，因为资源1已经被锁</span></span><br><span class="line"><span class="comment">                    两个线程都进入锁阻塞状态，无法正常结束，形成死锁</span></span><br><span class="line"><span class="comment">                     */</span></span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">//上锁，第二次线程1锁住资源2</span></span><br><span class="line">                    <span class="keyword">synchronized</span> (resource2)&#123;</span><br><span class="line">                        System.out.println(<span class="string">&quot;线程1成功占用资源2&quot;</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//线程2</span></span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="comment">//上锁</span></span><br><span class="line">                <span class="keyword">synchronized</span> (resource2)&#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;线程2占用资源2，请求资源1&quot;</span>);</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">//上锁</span></span><br><span class="line">                    <span class="keyword">synchronized</span> (resource1)&#123;</span><br><span class="line">                        System.out.println(<span class="string">&quot;线程2成功占用资源1&quot;</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">线程<span class="number">1</span>占用资源<span class="number">1</span>，请求资源<span class="number">2</span></span><br><span class="line">线程<span class="number">2</span>占用资源<span class="number">2</span>，请求资源<span class="number">1</span></span><br></pre></td></tr></table></figure><p>程序仍在运行，且永远不会自行停止，这就形成了死锁</p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>5-线程池</title>
      <link href="/2021/03/03/5-%E7%BA%BF%E7%A8%8B%E6%B1%A0/"/>
      <url>/2021/03/03/5-%E7%BA%BF%E7%A8%8B%E6%B1%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="线程池的概念"><a href="#线程池的概念" class="headerlink" title="线程池的概念"></a>线程池的概念</h1><p>本质就是一个能够容纳多个线程的容器，其中的线程可以反复利用，省去了频繁创建线程对象的操作，无需因为反复创建线程对象而消耗过多资源</p><p><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/%E7%BA%BF%E7%A8%8B%E6%B1%A0.jpg" alt="线程池"></p><h3 id="工作线程（PoolWorker）"><a href="#工作线程（PoolWorker）" class="headerlink" title="工作线程（PoolWorker）"></a>工作线程（PoolWorker）</h3><p>表示线程池中的线程，在没有任务时处于等待状态，可以循环的执行任务</p><h3 id="任务队列（TaskQueue）"><a href="#任务队列（TaskQueue）" class="headerlink" title="任务队列（TaskQueue）"></a>任务队列（TaskQueue）</h3><p>用于存放没有处理的任务，提供一种缓冲机制</p><h3 id="任务接口（Task）"><a href="#任务接口（Task）" class="headerlink" title="任务接口（Task）"></a>任务接口（Task）</h3><p>每个任务必须实现的接口，一共工作线程调度任务的执行，它主要规定了任务的入口，任务执行完后的收尾工作，任务的执行状态等等</p><h3 id="线程池管理器（ThreadPool）"><a href="#线程池管理器（ThreadPool）" class="headerlink" title="线程池管理器（ThreadPool）"></a>线程池管理器（ThreadPool）</h3><p>用于创建并管理线程。包括：创建线程池，销毁线程池，添加线程或任务等等</p><p>线程池创建线程来执行，而Worker执行完之后，就去队列中取未分配的task，调用task的run方法。通俗的讲就是任务来后就分配一个线程使用，线程处于占用状态，如果任务执行完毕，线程归还于线程池，并且暂处于空闲状态</p><h2 id="合理利用线程池的好处"><a href="#合理利用线程池的好处" class="headerlink" title="合理利用线程池的好处"></a>合理利用线程池的好处</h2><h3 id="降低资源消耗"><a href="#降低资源消耗" class="headerlink" title="降低资源消耗"></a>降低资源消耗</h3><p>减少了创建和销毁线程的次数，每个工作线程都可以被重复利用，可以执行多个任务</p><h3 id="提高响应速度"><a href="#提高响应速度" class="headerlink" title="提高响应速度"></a>提高响应速度</h3><p>不需要频繁的创建线程，如果有线程可以直接用，不会出现系统僵死</p><h3 id="提高线程的可管理性"><a href="#提高线程的可管理性" class="headerlink" title="提高线程的可管理性"></a>提高线程的可管理性</h3><p>线程池可以约束系统最多只能由多少个线程，不会因为线程过多而死机</p><h2 id="线程池的核心思想"><a href="#线程池的核心思想" class="headerlink" title="线程池的核心思想"></a>线程池的核心思想</h2><p>线程复用，同一个线程可以重复多次被使用，来处理多个任务</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> ThreadPool;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 创建线程池</span></span><br><span class="line"><span class="comment">* 线程池在Java中的代表类：ExcutorService(接口)</span></span><br><span class="line"><span class="comment">* Java在Executors类下提供一个静态方法得到一个线程池的对象</span></span><br><span class="line"><span class="comment">* public static ExecutorService newFixedThreadPool(int nThreads);</span></span><br><span class="line"><span class="comment">* （创建一个可重用固定线程数的线程池并返回，以共享的无界队列方式来运行这些线程）</span></span><br><span class="line"><span class="comment">* */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Executor;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ExecutorService;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Executors;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadPoolDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建一个线程池，指定线程的固定数量是3</span></span><br><span class="line">        ExecutorService pool= Executors.newFixedThreadPool(<span class="number">3</span>);</span><br><span class="line">        <span class="comment">//添加线程任务给线程池处理</span></span><br><span class="line">        Runnable task=<span class="keyword">new</span> MyRunnable();</span><br><span class="line">        <span class="comment">//可以向线程池提交Runnable接口或Callable接口 ，Callable做线程池的任务可以得到线程执行的结果（返回值类型Future&lt;?&gt;）</span></span><br><span class="line">        pool.submit(task);  <span class="comment">//第一次向线程池提交任务，此时线程池创建新线程，自动触发执行，不需要再start()</span></span><br><span class="line">        pool.submit(task);  <span class="comment">//第二次向线程池提交任务，此时线程池创建新线程</span></span><br><span class="line">        pool.submit(task);  <span class="comment">//第三次向线程池提交任务，此时线程池创建新线程</span></span><br><span class="line">        pool.submit(task);  <span class="comment">//第四次向线程池提交任务，超出线程池固定数量，此时线程池复用之前的线程</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// pool.shutdown();  在等待任务执行完毕之后关闭线程池</span></span><br><span class="line">        <span class="comment">// pool.shutdownNow();  立即关闭线程池代码，无论任务是否执行完毕</span></span><br><span class="line">        <span class="comment">// 线程池开发中一般情况下不关闭</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyRunnable</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">5</span>;i++)&#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName()+<span class="string">&quot;==&gt;&quot;</span>+i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>4-线程通信，线程状态</title>
      <link href="/2021/03/03/4-%E7%BA%BF%E7%A8%8B%E9%80%9A%E4%BF%A1%EF%BC%8C%E7%BA%BF%E7%A8%8B%E7%8A%B6%E6%80%81/"/>
      <url>/2021/03/03/4-%E7%BA%BF%E7%A8%8B%E9%80%9A%E4%BF%A1%EF%BC%8C%E7%BA%BF%E7%A8%8B%E7%8A%B6%E6%80%81/</url>
      
        <content type="html"><![CDATA[<h1 id="线程通信"><a href="#线程通信" class="headerlink" title="线程通信"></a>线程通信</h1><p>多个线程因为在同一个进程中，所以互相通信比较容易</p><h3 id="线程通信的经典模型：生产者与消费者问题"><a href="#线程通信的经典模型：生产者与消费者问题" class="headerlink" title="线程通信的经典模型：生产者与消费者问题"></a>线程通信的经典模型：生产者与消费者问题</h3><p>生产者负责生成商品，消费者负责消费商品，生产不能过剩（仍有数据未被消费时不能生产），消费不能没有（不能消费还没有生产的数据）</p><h4 id="模拟案例："><a href="#模拟案例：" class="headerlink" title="模拟案例："></a>模拟案例：</h4><p>两名消费者拥有一个共享账户，共享资源，三名生产者负责生产资源。</p><p>两名消费者去获取资源，资源存在就取出，不存在就等待，唤醒生产者继续生产资源。</p><p>生产者生产资源时，发现仍然存在资源就不继续生产，如果没有资源就生产，然后等待，唤醒消费者来消费</p><h3 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h3><ul><li>线程通信一定是多个线程操作同一个资源才需要进行通信</li><li>线程通信必须先保证线程安全，否则毫无意义，代码也会报错</li></ul><h3 id="线程通信的Object提供三种核心方法"><a href="#线程通信的Object提供三种核心方法" class="headerlink" title="线程通信的Object提供三种核心方法"></a>线程通信的Object提供三种核心方法</h3><ul><li>wait()方法：让当前线程进入等待状态，此方法必须由锁对象调用</li><li>notify()方法：唤醒当前锁对象上等待状态的某个线程，此方法必须由锁对象调用</li><li>notifyAll()方法：唤醒当前锁对象上等待状态的全部线程，此方法必须由锁对象调用</li></ul><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><h4 id="账户类，定义了存钱和取钱的操作"><a href="#账户类，定义了存钱和取钱的操作" class="headerlink" title="账户类，定义了存钱和取钱的操作"></a>账户类，定义了存钱和取钱的操作</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> ThreadSafety;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.Lock;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.ReentrantLock;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义账户类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Account</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> cardID;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> Money;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">DrawMoney</span><span class="params">(<span class="keyword">int</span> m)</span></span>&#123;</span><br><span class="line">        String name =Thread.currentThread().getName();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//判断余额是否足够</span></span><br><span class="line">            <span class="keyword">if</span> (Money &gt;= m) &#123;</span><br><span class="line">                <span class="comment">//开始支付</span></span><br><span class="line">                System.out.println(name + <span class="string">&quot;用户执行取钱操作，余额充足，支付&quot;</span> + m + <span class="string">&quot;元成功！&quot;</span>);</span><br><span class="line">                Money -= m;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">//余额不足</span></span><br><span class="line">                System.out.println(name + <span class="string">&quot;用户执行取钱操作，余额不足，支付失败！&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(name + <span class="string">&quot;用户结束操作，余额&quot;</span> + Money + <span class="string">&quot;元&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">//取完钱后，唤醒别人，等待自己</span></span><br><span class="line">            <span class="keyword">this</span>.notifyAll();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">this</span>.wait();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//新定义的存钱类</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">SaveMoney</span><span class="params">(<span class="keyword">int</span> m)</span></span>&#123;</span><br><span class="line">        String name =Thread.currentThread().getName();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//账户没钱的情况下才执行存钱操作</span></span><br><span class="line">            <span class="keyword">if</span> (Money == <span class="number">0</span>) &#123;</span><br><span class="line">                System.out.println(name + <span class="string">&quot;用户执行存钱操作，充入&quot;</span> + m + <span class="string">&quot;元成功！&quot;</span>);</span><br><span class="line">                Money += m;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.println(name + <span class="string">&quot;用户执行存钱操作，余额充足，充值失败！&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(name + <span class="string">&quot;用户结束操作，余额&quot;</span> + Money + <span class="string">&quot;元&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">//取完钱后，唤醒别人，等待自己</span></span><br><span class="line">            <span class="keyword">this</span>.notifyAll();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">this</span>.wait();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Account</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Account</span><span class="params">(<span class="keyword">int</span> cardID, <span class="keyword">double</span> money)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.cardID = cardID;</span><br><span class="line">        Money = money;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getCardID</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> cardID;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCardID</span><span class="params">(<span class="keyword">int</span> cardID)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.cardID = cardID;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getMoney</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Money;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMoney</span><span class="params">(<span class="keyword">double</span> money)</span> </span>&#123;</span><br><span class="line">        Money = money;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="线程类：分别规定了存钱线程和取钱线程"><a href="#线程类：分别规定了存钱线程和取钱线程" class="headerlink" title="线程类：分别规定了存钱线程和取钱线程"></a>线程类：分别规定了存钱线程和取钱线程</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> ThreadSafety;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//线程类：将存钱行为看作是一条单独的线程创建</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SaveThread</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义一个成员变量，接收账户对象</span></span><br><span class="line">    <span class="keyword">private</span> Account acc;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SaveThread</span><span class="params">(Account acc,String name)</span></span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(name);</span><br><span class="line">        <span class="keyword">this</span>.acc=acc;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//执行存钱操作，每个用户不断尝试存1000元</span></span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">3000</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            acc.SaveMoney(<span class="number">1000</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> ThreadSafety;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//线程类：将取钱行为看作是一条单独的线程创建</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DrawThread</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义一个成员变量，接收账户对象</span></span><br><span class="line">    <span class="keyword">private</span> Account acc;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DrawThread</span><span class="params">(Account acc,String name)</span></span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(name);</span><br><span class="line">        <span class="keyword">this</span>.acc=acc;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//执行取钱操作，每个用户不断尝试取1000元</span></span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">3000</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            acc.DrawMoney(<span class="number">1000</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="主线程"><a href="#主线程" class="headerlink" title="主线程"></a>主线程</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> ThreadSafety;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//模拟经典案例：生产者与消费者模型</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建共享账户</span></span><br><span class="line">        Account acc=<span class="keyword">new</span> Account(<span class="number">111</span>,<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建两个消费者对象</span></span><br><span class="line">        Thread consumer1=<span class="keyword">new</span> DrawThread(acc,<span class="string">&quot;consumer1&quot;</span>);</span><br><span class="line">        consumer1.start();</span><br><span class="line">        Thread consumer2=<span class="keyword">new</span> DrawThread(acc,<span class="string">&quot;consumer2&quot;</span>);</span><br><span class="line">        consumer2.start();</span><br><span class="line">        <span class="comment">//创建三个生产者</span></span><br><span class="line">        Thread producer1=<span class="keyword">new</span> SaveThread(acc,<span class="string">&quot;producer1&quot;</span>);</span><br><span class="line">        producer1.start();</span><br><span class="line">        Thread producer2=<span class="keyword">new</span> SaveThread(acc,<span class="string">&quot;producer2&quot;</span>);</span><br><span class="line">        producer2.start();</span><br><span class="line">        Thread producer3=<span class="keyword">new</span> SaveThread(acc,<span class="string">&quot;producer3&quot;</span>);</span><br><span class="line">        producer3.start();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">producer2用户执行存钱操作，充入<span class="number">1000</span>元成功！</span><br><span class="line">producer2用户结束操作，余额<span class="number">1000.0</span>元</span><br><span class="line">consumer2用户执行取钱操作，余额充足，支付<span class="number">1000</span>元成功！</span><br><span class="line">consumer2用户结束操作，余额<span class="number">0.0</span>元</span><br><span class="line">consumer1用户执行取钱操作，余额不足，支付失败！</span><br><span class="line">consumer1用户结束操作，余额<span class="number">0.0</span>元</span><br><span class="line">producer3用户执行存钱操作，充入<span class="number">1000</span>元成功！</span><br><span class="line">producer3用户结束操作，余额<span class="number">1000.0</span>元</span><br><span class="line">producer1用户执行存钱操作，余额充足，充值失败！</span><br><span class="line">producer1用户结束操作，余额<span class="number">1000.0</span>元</span><br><span class="line">consumer2用户执行取钱操作，余额充足，支付<span class="number">1000</span>元成功！</span><br><span class="line">consumer2用户结束操作，余额<span class="number">0.0</span>元</span><br><span class="line">producer2用户执行存钱操作，充入<span class="number">1000</span>元成功！</span><br><span class="line">producer2用户结束操作，余额<span class="number">1000.0</span>元</span><br><span class="line">producer3用户执行存钱操作，余额充足，充值失败！</span><br><span class="line">producer3用户结束操作，余额<span class="number">1000.0</span>元</span><br><span class="line">consumer1用户执行取钱操作，余额充足，支付<span class="number">1000</span>元成功！</span><br><span class="line">consumer1用户结束操作，余额<span class="number">0.0</span>元</span><br><span class="line"></span><br><span class="line">······</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h1 id="线程状态"><a href="#线程状态" class="headerlink" title="线程状态"></a>线程状态</h1><table><thead><tr><th>线程状态</th><th>导致状态发生条件</th></tr></thead><tbody><tr><td>NEW(新建)</td><td>线程刚刚被创建，但是尚未启动（没有调用start()方法）。只有线程对象，没有线程特征</td></tr><tr><td>Runnable(可运行的)</td><td>线程可以在Java虚拟机中运行的状态，可能正在运行自己的代码，也可能没有，取决于操作系统处理器。调用了start()方法。</td></tr><tr><td>Blocked(锁阻塞)</td><td>当一个线程试图获取一个对象锁，而该对象锁被其他的线程锁持有，则该线程进入Blocked状态，当该线程持有锁时，状态将改变为Runnable</td></tr><tr><td>Waiting(无限等待)</td><td>一个线程在等待另一个线程执行一个(唤醒)动作时，该线程进入Waiting状态，进入这个状态后是不能自动唤醒的，必须等待另一个线程调用notify()方法或notifyAll()方法才能将线程唤醒</td></tr><tr><td>Timed Waiting(计时等待)</td><td>同Waiting()状态，有几个方法有超时参数，调用他们将进入Timed Waiting状态，这一状态将一致保持到超时期满或者接收到唤醒通知，带有超时参数的常用方法有：Thread.sleep,Object.wait</td></tr><tr><td>Terminated(被终止)</td><td>因为run()方法正常退出而死亡，或者因为没有捕获的异常终止了run()方法而死亡</td></tr></tbody></table><p><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/%E7%BA%BF%E7%A8%8B%E7%8A%B6%E6%80%81.jpg" alt="线程状态"></p><h2 id="注意：-1"><a href="#注意：-1" class="headerlink" title="注意："></a>注意：</h2><p>可运行状态还可以被细分为两个状态：就绪状态和运行状态，就绪状态只是成功开启线程还没有真正运行，运行状态表示开始正常执行</p><p>sleep()和wait()区别在于sleep()休眠后不释放当前锁对象，所以在当前线程苏醒后可以直接继续当前锁对象内容，但是wait()表示释放当前锁对象，所以即便在苏醒后，也需要与其他线程争抢当前锁对象，成功抢到则可以执行，否则又变为锁阻塞状态</p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>3-多线程安全问题，线程同步</title>
      <link href="/2021/03/03/3-%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8%E9%97%AE%E9%A2%98%EF%BC%8C%E7%BA%BF%E7%A8%8B%E5%90%8C%E6%AD%A5/"/>
      <url>/2021/03/03/3-%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8%E9%97%AE%E9%A2%98%EF%BC%8C%E7%BA%BF%E7%A8%8B%E5%90%8C%E6%AD%A5/</url>
      
        <content type="html"><![CDATA[<h1 id="线程安全问题"><a href="#线程安全问题" class="headerlink" title="线程安全问题"></a>线程安全问题</h1><p>指的是多个线程操作同一个共享资源的时候可能会出现的线程安全问题</p><h2 id="银行取钱问题"><a href="#银行取钱问题" class="headerlink" title="银行取钱问题"></a>银行取钱问题</h2><p>多个用户同时操作一个银行账户进行取钱操作，账户内余额为1000元，每个账户同时取出1000元，由于线程执行的随机性就会导致线程安全问题的产生</p><h3 id="银行账户类"><a href="#银行账户类" class="headerlink" title="银行账户类"></a>银行账户类</h3><h4 id="定义账户内容，定义取钱方法"><a href="#定义账户内容，定义取钱方法" class="headerlink" title="定义账户内容，定义取钱方法"></a>定义账户内容，定义取钱方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> ThreadSafety;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//定义账户类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Account</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> cardID;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> Money;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义取钱过程，所有操作这个账户的人都会取走账户中的m元钱</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">DrawMoney</span><span class="params">(<span class="keyword">int</span> m)</span></span>&#123;</span><br><span class="line">        <span class="comment">//判断取钱的用户</span></span><br><span class="line">        String name =Thread.currentThread().getName();</span><br><span class="line">        <span class="comment">//判断余额是否充足</span></span><br><span class="line">        <span class="keyword">if</span>(Money&gt;=m)&#123;</span><br><span class="line">            <span class="comment">//输出取钱结果</span></span><br><span class="line">            System.out.println(name+<span class="string">&quot;用户执行取钱操作，余额充足，支付&quot;</span>+m+<span class="string">&quot;元成功！&quot;</span>);</span><br><span class="line">            <span class="comment">//更新账户余额</span></span><br><span class="line">            Money-=m;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">//余额不足，取钱失败</span></span><br><span class="line">            System.out.println(name+<span class="string">&quot;用户执行取钱操作，余额不足，支付失败！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(name+<span class="string">&quot;用户结束操作，余额&quot;</span>+Money+<span class="string">&quot;元&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Account</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Account</span><span class="params">(<span class="keyword">int</span> cardID, <span class="keyword">double</span> money)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.cardID = cardID;</span><br><span class="line">        Money = money;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getCardID</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> cardID;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCardID</span><span class="params">(<span class="keyword">int</span> cardID)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.cardID = cardID;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getMoney</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Money;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMoney</span><span class="params">(<span class="keyword">double</span> money)</span> </span>&#123;</span><br><span class="line">        Money = money;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="线程类"><a href="#线程类" class="headerlink" title="线程类"></a>线程类</h3><h4 id="（执行取钱操作）"><a href="#（执行取钱操作）" class="headerlink" title="（执行取钱操作）"></a>（执行取钱操作）</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> ThreadSafety;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//线程类：将取钱行为看作是一条单独的线程创建</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DrawThread</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义一个成员变量，接收账户对象</span></span><br><span class="line">    <span class="keyword">private</span> Account acc;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DrawThread</span><span class="params">(Account acc,String name)</span></span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(name);</span><br><span class="line">        <span class="keyword">this</span>.acc=acc;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//执行取钱操作，每个用户取1000元</span></span><br><span class="line">        acc.DrawMoney(<span class="number">1000</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="开始执行"><a href="#开始执行" class="headerlink" title="开始执行"></a>开始执行</h3><h4 id="多用户共同取钱"><a href="#多用户共同取钱" class="headerlink" title="多用户共同取钱"></a>多用户共同取钱</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> ThreadSafety;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo1</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建一个允许共享的银行账户（可能会有多人同时使用）</span></span><br><span class="line">        Account acc = <span class="keyword">new</span> Account(<span class="number">111</span>, <span class="number">1000</span>);</span><br><span class="line">        <span class="comment">//创建多个线程去银行账户中取钱（多个线程操作一个资源）</span></span><br><span class="line">        Thread user1 = <span class="keyword">new</span> DrawThread(acc,<span class="string">&quot;user1&quot;</span>);</span><br><span class="line">        user1.start();</span><br><span class="line">        Thread user2 = <span class="keyword">new</span> DrawThread(acc,<span class="string">&quot;user2&quot;</span>);</span><br><span class="line">        user2.start();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h3><h4 id="违反了正常取钱过程，存在严重安全问题"><a href="#违反了正常取钱过程，存在严重安全问题" class="headerlink" title="违反了正常取钱过程，存在严重安全问题"></a>违反了正常取钱过程，存在严重安全问题</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">user1用户执行取钱操作，余额充足，支付<span class="number">1000</span>元成功！</span><br><span class="line">user2用户执行取钱操作，余额充足，支付<span class="number">1000</span>元成功！</span><br><span class="line">user1用户结束操作，余额<span class="number">0.0</span>元</span><br><span class="line">user2用户结束操作，余额-<span class="number">1000.0</span>元</span><br></pre></td></tr></table></figure><h1 id="线程同步"><a href="#线程同步" class="headerlink" title="线程同步"></a>线程同步</h1><h3 id="也称同步代码块"><a href="#也称同步代码块" class="headerlink" title="也称同步代码块"></a>也称同步代码块</h3><h2 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h2><p>为了更好的解决线程安全问题的方案</p><h2 id="线程同步解决线程安全问题的核心思想"><a href="#线程同步解决线程安全问题的核心思想" class="headerlink" title="线程同步解决线程安全问题的核心思想"></a>线程同步解决线程安全问题的核心思想</h2><p>让多个线程实现先后依次访问共享资源，这样就解决了安全问题</p><h2 id="做法"><a href="#做法" class="headerlink" title="做法"></a>做法</h2><p>将共享资源上锁，每次只能一个线程进入访问完毕之后，其他线程才能进来</p><h2 id="三种同步（上锁）方式"><a href="#三种同步（上锁）方式" class="headerlink" title="三种同步（上锁）方式"></a>三种同步（上锁）方式</h2><ol><li>同步代码块</li><li>同步方法</li><li>Lock显式锁</li></ol><h2 id="同步代码块"><a href="#同步代码块" class="headerlink" title="同步代码块"></a>同步代码块</h2><h3 id="作用-1"><a href="#作用-1" class="headerlink" title="作用"></a>作用</h3><p>将出现线程安全问题的核心代码上锁，每次只允许一个线程进入，执行完毕之后自动解锁，其他线程才能进来执行</p><h3 id="格式"><a href="#格式" class="headerlink" title="格式"></a>格式</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">synchronized</span>(锁对象)&#123;</span><br><span class="line">    <span class="comment">// 访问共享资源的核心代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="锁对象"><a href="#锁对象" class="headerlink" title="锁对象"></a>锁对象</h4><p>理论上可以是任意的“唯一”对象即可</p><h4 id="原则上"><a href="#原则上" class="headerlink" title="原则上"></a>原则上</h4><p>锁对象建议使用共享资源  </p><pre><code>- 在实例方法中建议使用this作为锁对象，此时this正好是共享资源（使用前提代码必须高度面向对象）- 在静态方法中建议使用**类名.class**字节码作为锁对象</code></pre><h4 id="将上文中的取款行为进行上锁操作"><a href="#将上文中的取款行为进行上锁操作" class="headerlink" title="将上文中的取款行为进行上锁操作"></a>将上文中的取款行为进行上锁操作</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">DrawMoney</span><span class="params">(<span class="keyword">int</span> m)</span></span>&#123;</span><br><span class="line">    <span class="comment">//判断取钱的用户</span></span><br><span class="line">    String name =Thread.currentThread().getName();</span><br><span class="line">    <span class="comment">//判断余额是否充足</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//将取款行为上锁(使用this表示锁住的对象是当前账户)</span></span><br><span class="line">    <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (Money &gt;= m) &#123;</span><br><span class="line">            <span class="comment">//输出取钱结果</span></span><br><span class="line">            System.out.println(name + <span class="string">&quot;用户执行取钱操作，余额充足，支付&quot;</span> + m + <span class="string">&quot;元成功！&quot;</span>);</span><br><span class="line">            <span class="comment">//更新账户余额</span></span><br><span class="line">            Money -= m;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//余额不足，取钱失败</span></span><br><span class="line">            System.out.println(name + <span class="string">&quot;用户执行取钱操作，余额不足，支付失败！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(name + <span class="string">&quot;用户结束操作，余额&quot;</span> + Money + <span class="string">&quot;元&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="上锁后的运行结果"><a href="#上锁后的运行结果" class="headerlink" title="上锁后的运行结果"></a>上锁后的运行结果</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">user1用户执行取钱操作，余额充足，支付<span class="number">1000</span>元成功！</span><br><span class="line">user1用户结束操作，余额<span class="number">0.0</span>元</span><br><span class="line">user2用户执行取钱操作，余额不足，支付失败！</span><br><span class="line">user2用户结束操作，余额<span class="number">0.0</span>元</span><br></pre></td></tr></table></figure><h2 id="同步方法"><a href="#同步方法" class="headerlink" title="同步方法"></a>同步方法</h2><h3 id="作用-2"><a href="#作用-2" class="headerlink" title="作用"></a>作用</h3><p>把出现线程安全问题的和新方法锁起来，每次只允许一个线程进入访问，其他线程必须在方法外面等待</p><h3 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h3><p>直接给方法加上修饰符synchronized</p><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>同步方法的原理和同步代码块的底层原理其实是完全一样的，只是同步方法是把整个方法的代码都锁起来的。</p><p>同步方法的底层也是有锁对象的：</p><ul><li>在实例方法中默认使用this作为锁对象</li><li>在静态方法中默认使用<strong>类名.class</strong>字节码作为锁对象</li></ul><h2 id="Lock显式锁"><a href="#Lock显式锁" class="headerlink" title="Lock显式锁"></a>Lock显式锁</h2><p>java.util.current.locks.lock机制提供了比synchronized代码块和synchronized同步方法更广泛的锁定操作</p><p>二者具有的功能Lock都有，除此之外功能更加强大</p><h3 id="Lock锁也称同步锁"><a href="#Lock锁也称同步锁" class="headerlink" title="Lock锁也称同步锁"></a>Lock锁也称同步锁</h3><p>其将加锁与释放锁的过程方法化了，如下：</p><ul><li>加锁：public void lock()</li><li>释放锁：public void unlock()</li></ul><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> ThreadSafety;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.Lock;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.ReentrantLock;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义账户类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Account</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> cardID;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> Money;</span><br><span class="line">    <span class="comment">//在账户中创建锁对象</span></span><br><span class="line">    <span class="comment">//由于账户对象对于某个调用者是唯一的，所以锁对象对于某个调用者也是唯一的</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Lock lock=<span class="keyword">new</span> ReentrantLock();  <span class="comment">//加上final关键字是防止锁的唯一性被破坏，不加一般也可以正常运行</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">DrawMoney</span><span class="params">(<span class="keyword">int</span> m)</span></span>&#123;</span><br><span class="line">        String name =Thread.currentThread().getName();</span><br><span class="line"></span><br><span class="line">        lock.lock();  <span class="comment">//上锁</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (Money &gt;= m) &#123;</span><br><span class="line">                System.out.println(name + <span class="string">&quot;用户执行取钱操作，余额充足，支付&quot;</span> + m + <span class="string">&quot;元成功！&quot;</span>);</span><br><span class="line">                Money -= m;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.println(name + <span class="string">&quot;用户执行取钱操作，余额不足，支付失败！&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(name + <span class="string">&quot;用户结束操作，余额&quot;</span> + Money + <span class="string">&quot;元&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();   <span class="comment">//解锁    </span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        * 在这里将整个执行代码放到try...catch结构里的原因是避免锁死的现象产生</span></span><br><span class="line"><span class="comment">        * 如果不用try...catch直接将解锁放到顺序执行的代码中，一旦代码报错程序中止运行</span></span><br><span class="line"><span class="comment">        * 就会导致解锁代码无法执行，对象被锁死</span></span><br><span class="line"><span class="comment">        * 所以采用try...catch并将解锁代码放到一定执行的finally中就可以避免这种情况</span></span><br><span class="line"><span class="comment">        * 即使报错，解锁行为也会正常运行</span></span><br><span class="line"><span class="comment">        * */</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Account</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Account</span><span class="params">(<span class="keyword">int</span> cardID, <span class="keyword">double</span> money)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.cardID = cardID;</span><br><span class="line">        Money = money;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getCardID</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> cardID;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCardID</span><span class="params">(<span class="keyword">int</span> cardID)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.cardID = cardID;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getMoney</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Money;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMoney</span><span class="params">(<span class="keyword">double</span> money)</span> </span>&#123;</span><br><span class="line">        Money = money;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h2><ul><li>线程安全的程序，性能差</li><li>线程不安全的程序，性能较好。在开发中假如并不会存在多线程安全问题，一般采用线程不安全的设计</li></ul>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2-多线程</title>
      <link href="/2021/03/03/2-%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
      <url>/2021/03/03/2-%E5%A4%9A%E7%BA%BF%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="多线程概述（并发编程）"><a href="#多线程概述（并发编程）" class="headerlink" title="多线程概述（并发编程）"></a>多线程概述（并发编程）</h1><h2 id="进程"><a href="#进程" class="headerlink" title="进程"></a>进程</h2><p>程序是静止的，而运行中的程序就是进程</p><h3 id="特征"><a href="#特征" class="headerlink" title="特征"></a>特征</h3><ul><li>动态性：进程是运行中的程序，要动态的占用内存，CPU和网络等资源</li><li>独立性：进程和进程之间是相互独立的，彼此有自己独立内存区域</li><li>并发性：假如CPU是单核，同一时刻内存中只有一个进程在被执行，CPU会依时为每个进程服务，由于切换速度非常快，给我们的感觉就是这些进程在同时执行，这就是并发性</li></ul><h4 id="并行："><a href="#并行：" class="headerlink" title="并行："></a>并行：</h4><p>同一时刻同时有多个进程在执行（多核CPU）</p><h2 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h2><p>线程属于进程，一个进程可以包含多个线程，这就是多线程。（线程是进程中的一个独立执行单元）线程的创建开销相对于进程来说比较小，线程也支持并发性</p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><ul><li>提高程序效率，线程支持并发性，可以有更多机会得到CPU</li><li>多线程可以解决很多业务模型</li><li>大型高并发技术的核心技术</li></ul><h2 id="线程创建方式一：继承Thread类"><a href="#线程创建方式一：继承Thread类" class="headerlink" title="线程创建方式一：继承Thread类"></a>线程创建方式一：继承Thread类</h2><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> ThreadTest;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 创建线程的方法一：</span></span><br><span class="line"><span class="comment">* 1. 直接定义类继承Thread</span></span><br><span class="line"><span class="comment">* 2. 重写run()方法</span></span><br><span class="line"><span class="comment">* 3. 创建线程对象</span></span><br><span class="line"><span class="comment">* 4. 调用线程对象的start()方法启动线程</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义一个线程类继承Thread类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">    <span class="comment">//重写run()方法</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 线程的执行方法</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">5</span>;i++)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;子线程输出：&quot;</span>+i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadDemo</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 这里可以把启动后的ThreadDemo当成一个进程</span></span><br><span class="line">    <span class="comment">// main方法是由主线程执行的，理解成main方法就是一个主线程</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建线程对象</span></span><br><span class="line">        Thread t=<span class="keyword">new</span> MyThread();  <span class="comment">//多态</span></span><br><span class="line">        <span class="comment">//调用start()方法启动线程</span></span><br><span class="line">        t.start();  <span class="comment">//此时一共存在两个线程，一个是main函数表示的主线程，另一个就是t表示的子线程</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">5</span>;i++)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;主线程输出：&quot;</span>+i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">主线程输出：<span class="number">0</span></span><br><span class="line">主线程输出：<span class="number">1</span></span><br><span class="line">子线程输出：<span class="number">0</span></span><br><span class="line">主线程输出：<span class="number">2</span></span><br><span class="line">子线程输出：<span class="number">1</span></span><br><span class="line">主线程输出：<span class="number">3</span></span><br><span class="line">子线程输出：<span class="number">2</span></span><br><span class="line">主线程输出：<span class="number">4</span></span><br><span class="line">子线程输出：<span class="number">3</span></span><br><span class="line">子线程输出：<span class="number">4</span></span><br></pre></td></tr></table></figure><p>可以看到多线程是并发的，两个线程之间的执行顺序是完全随机的，双方都不断争抢CPU执行，并且执行过程始终向前推进</p><h3 id="继承Thread类的优点"><a href="#继承Thread类的优点" class="headerlink" title="继承Thread类的优点"></a>继承Thread类的优点</h3><ul><li>编码相对简单</li></ul><h3 id="继承Thread类的缺点"><a href="#继承Thread类的缺点" class="headerlink" title="继承Thread类的缺点"></a>继承Thread类的缺点</h3><ul><li>自定义线程类继承了Thread类，导致无法再继承其他类，功能单一，不能继续拓展（单继承的局限性）</li></ul><h3 id="线程的注意事项"><a href="#线程的注意事项" class="headerlink" title="线程的注意事项"></a>线程的注意事项</h3><h4 id="线程的启动必须调用start-方法"><a href="#线程的启动必须调用start-方法" class="headerlink" title="线程的启动必须调用start()方法"></a>线程的启动必须调用start()方法</h4><p>否则操作就会被当作普通类处理，按照代码顺序正常执行。<br>也就是说，如果直接调用自定义线程类的run方法，实际上就变成了普通类执行，此时只有一个主线程在运行</p><p>start()方法底层其实是给CPU注册当前线程，并且触发run()方法的执行</p><p>一般建议进程中先创建子线程，主线程的任务放在之后（否则程序按顺序执行，先接触到主线程内容，并没有发现后续的子线程启动，导致主线程必然先进行完，整个流程实际上仍然是顺序执行）</p><h2 id="线程创建方式二：实现Runnable接口"><a href="#线程创建方式二：实现Runnable接口" class="headerlink" title="线程创建方式二：实现Runnable接口"></a>线程创建方式二：实现Runnable接口</h2><ol><li>创建一个线程任务类实现Runnable接口</li><li>重写run()方法</li><li>创建一个<strong>线程任务</strong>对象</li><li>将<strong>线程任务</strong>对象包装成<strong>线程</strong>对象</li><li>调用线程对象的start()方法启动线程</li></ol><h3 id="代码实现-1"><a href="#代码实现-1" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> ThreadTest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadDemo4</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//3. 创建&quot;线程任务&quot;对象(不是线程对象，只是执行线程任务的)</span></span><br><span class="line">        Runnable target=<span class="keyword">new</span> MyRunnable();</span><br><span class="line">        <span class="comment">//4. 把线程任务对象包装成线程对象</span></span><br><span class="line">        <span class="comment">//Thread t=new Thread(target);   单纯创建线程对象</span></span><br><span class="line">        Thread t=<span class="keyword">new</span> Thread(target,<span class="string">&quot;TheFirstThread&quot;</span>);  <span class="comment">//利用线程任务创建线程对象的同时为线程命名</span></span><br><span class="line">        <span class="comment">//启动线程</span></span><br><span class="line">        t.start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">5</span>;i++)&#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName()+<span class="string">&quot;==&gt;&quot;</span>+i);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//1. 首先，创建线程任务类实现Runnable接口</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyRunnable</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2. 重写run()方法</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">5</span>;i++)&#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName()+<span class="string">&quot;==&gt;&quot;</span>+i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="方式二的匿名内部类写法（简化写法）"><a href="#方式二的匿名内部类写法（简化写法）" class="headerlink" title="方式二的匿名内部类写法（简化写法）"></a>方式二的匿名内部类写法（简化写法）</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> ThreadTest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadDemo4</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Runnable target=<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">5</span>;i++)&#123;</span><br><span class="line">                    System.out.println(Thread.currentThread().getName()+<span class="string">&quot;==&gt;&quot;</span>+i);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        Thread t=<span class="keyword">new</span> Thread(target,<span class="string">&quot;TheFirstThread&quot;</span>);  </span><br><span class="line">        t.start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">5</span>;i++)&#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName()+<span class="string">&quot;==&gt;&quot;</span>+i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="方式二实现Runnable接口创建的优点"><a href="#方式二实现Runnable接口创建的优点" class="headerlink" title="方式二实现Runnable接口创建的优点"></a>方式二实现Runnable接口创建的优点</h3><ul><li>线程任务类只是实现了Runnable接口，所以可以继续继承其他类，而且可以继续实现其他接口，避免了单继承的局限性 </li><li>同一个线程任务对象可以被包装成多个线程对象</li><li>适合多个相同的程序代码的线程去共享同一个资源</li><li>实现解耦操作，线程任务代码可以被多个线程共享，线程任务代码和线程独立</li><li>线程池可以放入实现Runnable或Callable线程任务对象</li></ul><h3 id="方式二实现Runnable接口创建的缺点"><a href="#方式二实现Runnable接口创建的缺点" class="headerlink" title="方式二实现Runnable接口创建的缺点"></a>方式二实现Runnable接口创建的缺点</h3><ul><li>代码较为复杂</li><li>继承的Runnable接口的run()方法没有返回值，不能直接得到线程执行的结果</li></ul><h4 id="注意：Thread类本身也实现了Runnable接口"><a href="#注意：Thread类本身也实现了Runnable接口" class="headerlink" title="注意：Thread类本身也实现了Runnable接口"></a>注意：Thread类本身也实现了Runnable接口</h4><h2 id="线程创建方式三：实现Callable接口"><a href="#线程创建方式三：实现Callable接口" class="headerlink" title="线程创建方式三：实现Callable接口"></a>线程创建方式三：实现Callable接口</h2><ol><li>定义一个线程任务类实现Callable接口，申明线程执行的结果类型</li><li>重写线程任务类的call方法，这个方法可以直接返回执行结果（解决了Runnable接口的缺点）</li><li>创建一个Callable的线程任务对象</li><li>把Callable的线程任务对象包装成一个未来任务对象</li><li>把未来任务对象包装成线程对象</li><li>调用现成的start()方法启动线程</li></ol><h3 id="代码实现："><a href="#代码实现：" class="headerlink" title="代码实现："></a>代码实现：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> ThreadTest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Callable;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ExecutionException;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.FutureTask;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadDemo5</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//3. 创建Callable线程任务对象</span></span><br><span class="line">        Callable&lt;String&gt; call=<span class="keyword">new</span> MyCallable();</span><br><span class="line">        <span class="comment">//4. 把Callable任务对象包装成未来任务对象</span></span><br><span class="line">        <span class="comment">//未来任务对象：本质就是一个Runnaable对象（FutureTask继承自Runnable）</span></span><br><span class="line">        <span class="comment">//未来任务对象可以在线程执行完后得到线程执行结果</span></span><br><span class="line">        FutureTask&lt;String&gt; task=<span class="keyword">new</span> FutureTask&lt;String&gt;(call);</span><br><span class="line">        <span class="comment">//5. 把未来任务对象包装成线程对象</span></span><br><span class="line">        Thread t=<span class="keyword">new</span> Thread(task,<span class="string">&quot;TheFirstThread&quot;</span>);</span><br><span class="line">        t.start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">20</span>;i++)&#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName()+<span class="string">&quot;==&gt;&quot;</span>+i);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//6. 最后获取线程执行结果,如果线程没有结果，会让出CPU等待线程执行完毕再来取值</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            String rs=task.get();  <span class="comment">//获取call方法返回的结果（正常/异常）</span></span><br><span class="line">            System.out.println(rs);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//1. 创建一个线程任务类实现Callable接口，申明线程返回的结果类型</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyCallable</span> <span class="keyword">implements</span> <span class="title">Callable</span>&lt;<span class="title">String</span>&gt;</span>&#123;</span><br><span class="line">    <span class="comment">//2. 重写线程任务类的call方法</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 计算1~20的和</span></span><br><span class="line">        <span class="keyword">int</span> sum=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">20</span>;i++)&#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName()+<span class="string">&quot;==&gt;&quot;</span>+i);</span><br><span class="line">            sum+=i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> Thread.currentThread().getName()+<span class="string">&quot;执行的结果是：&quot;</span>+sum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="运行结果-1"><a href="#运行结果-1" class="headerlink" title="运行结果"></a>运行结果</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">TheFirstThread==&gt;<span class="number">0</span></span><br><span class="line">main==&gt;<span class="number">0</span></span><br><span class="line">TheFirstThread==&gt;<span class="number">1</span></span><br><span class="line">main==&gt;<span class="number">1</span></span><br><span class="line">TheFirstThread==&gt;<span class="number">2</span></span><br><span class="line">main==&gt;<span class="number">2</span></span><br><span class="line">TheFirstThread==&gt;<span class="number">3</span></span><br><span class="line">main==&gt;<span class="number">3</span></span><br><span class="line">TheFirstThread==&gt;<span class="number">4</span></span><br><span class="line">main==&gt;<span class="number">4</span></span><br><span class="line">TheFirstThread==&gt;<span class="number">5</span></span><br><span class="line">main==&gt;<span class="number">5</span></span><br><span class="line">TheFirstThread==&gt;<span class="number">6</span></span><br><span class="line">main==&gt;<span class="number">6</span></span><br><span class="line">TheFirstThread==&gt;<span class="number">7</span></span><br><span class="line">main==&gt;<span class="number">7</span></span><br><span class="line">TheFirstThread==&gt;<span class="number">8</span></span><br><span class="line">main==&gt;<span class="number">8</span></span><br><span class="line">TheFirstThread==&gt;<span class="number">9</span></span><br><span class="line">main==&gt;<span class="number">9</span></span><br><span class="line">TheFirstThread==&gt;<span class="number">10</span></span><br><span class="line">main==&gt;<span class="number">10</span></span><br><span class="line">TheFirstThread==&gt;<span class="number">11</span></span><br><span class="line">main==&gt;<span class="number">11</span></span><br><span class="line">TheFirstThread==&gt;<span class="number">12</span></span><br><span class="line">main==&gt;<span class="number">12</span></span><br><span class="line">TheFirstThread==&gt;<span class="number">13</span></span><br><span class="line">main==&gt;<span class="number">13</span></span><br><span class="line">TheFirstThread==&gt;<span class="number">14</span></span><br><span class="line">main==&gt;<span class="number">14</span></span><br><span class="line">TheFirstThread==&gt;<span class="number">15</span></span><br><span class="line">main==&gt;<span class="number">15</span></span><br><span class="line">TheFirstThread==&gt;<span class="number">16</span></span><br><span class="line">main==&gt;<span class="number">16</span></span><br><span class="line">TheFirstThread==&gt;<span class="number">17</span></span><br><span class="line">main==&gt;<span class="number">17</span></span><br><span class="line">TheFirstThread==&gt;<span class="number">18</span></span><br><span class="line">main==&gt;<span class="number">18</span></span><br><span class="line">TheFirstThread==&gt;<span class="number">19</span></span><br><span class="line">main==&gt;<span class="number">19</span></span><br><span class="line">TheFirstThread执行的结果是：<span class="number">190</span></span><br></pre></td></tr></table></figure><h3 id="方法三，继承Callable接口优点"><a href="#方法三，继承Callable接口优点" class="headerlink" title="方法三，继承Callable接口优点"></a>方法三，继承Callable接口优点</h3><p>拥有方法二的全部优点，并且能够通过返回值了解线程是否正常运行，得到线程执行的结果</p><h3 id="方法三，继承Callable接口缺点"><a href="#方法三，继承Callable接口缺点" class="headerlink" title="方法三，继承Callable接口缺点"></a>方法三，继承Callable接口缺点</h3><p>编码复杂</p><h2 id="线程常用API"><a href="#线程常用API" class="headerlink" title="线程常用API"></a>线程常用API</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> ThreadTest;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义一个线程类继承Thread类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThread2</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">    <span class="comment">//重写run()方法</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 线程的执行方法</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">5</span>;i++)&#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName()+<span class="string">&quot; : 子线程输出 ：&quot;</span>+i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadDemo2</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 进程中一共包括两个子线程t1,t2与一个主线程</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建线程对象</span></span><br><span class="line">        Thread t1=<span class="keyword">new</span> MyThread2();</span><br><span class="line"></span><br><span class="line">        t1.setName(<span class="string">&quot;TheFirstThread&quot;</span>);   <span class="comment">//为线程命名</span></span><br><span class="line"></span><br><span class="line">        t1.start();</span><br><span class="line"></span><br><span class="line">        System.out.println(t1.getName());  <span class="comment">//获取子线程的名字</span></span><br><span class="line"></span><br><span class="line">        Thread t2=<span class="keyword">new</span> MyThread2();</span><br><span class="line"></span><br><span class="line">        t2.setName(<span class="string">&quot;TheSecondThread&quot;</span>);   <span class="comment">//为线程命名</span></span><br><span class="line"></span><br><span class="line">        t2.start();</span><br><span class="line"></span><br><span class="line">        System.out.println(t2.getName());  <span class="comment">//获取子线程的名字</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取主线程名称的方法</span></span><br><span class="line">        <span class="comment">//利用currentThread()方法，可以获取当前所在的线程的对象</span></span><br><span class="line">        <span class="comment">//（注意，这里说的是在哪个线程内部，而不是正在执行哪个线程，三个线程随机执行，但此时都在主线程内）</span></span><br><span class="line">        Thread m =Thread.currentThread();</span><br><span class="line">        m.setName(<span class="string">&quot;MainThread&quot;</span>);</span><br><span class="line">        System.out.println(m.getName());  <span class="comment">//从而就可获取到主线程名称</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">5</span>;i++)&#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName()+<span class="string">&quot; ：&quot;</span>+i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="运行结果-2"><a href="#运行结果-2" class="headerlink" title="运行结果"></a>运行结果</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">TheFirstThread</span><br><span class="line">TheSecondThread</span><br><span class="line">MainThread</span><br><span class="line">MainThread ：<span class="number">0</span></span><br><span class="line">TheSecondThread : 子线程输出 ：<span class="number">0</span></span><br><span class="line">TheFirstThread : 子线程输出 ：<span class="number">0</span></span><br><span class="line">TheSecondThread : 子线程输出 ：<span class="number">1</span></span><br><span class="line">MainThread ：<span class="number">1</span></span><br><span class="line">TheSecondThread : 子线程输出 ：<span class="number">2</span></span><br><span class="line">TheFirstThread : 子线程输出 ：<span class="number">1</span></span><br><span class="line">TheSecondThread : 子线程输出 ：<span class="number">3</span></span><br><span class="line">MainThread ：<span class="number">2</span></span><br><span class="line">TheSecondThread : 子线程输出 ：<span class="number">4</span></span><br><span class="line">TheFirstThread : 子线程输出 ：<span class="number">2</span></span><br><span class="line">TheFirstThread : 子线程输出 ：<span class="number">3</span></span><br><span class="line">TheFirstThread : 子线程输出 ：<span class="number">4</span></span><br><span class="line">MainThread ：<span class="number">3</span></span><br><span class="line">MainThread ：<span class="number">4</span></span><br></pre></td></tr></table></figure><h3 id="线程休眠方法：sleep"><a href="#线程休眠方法：sleep" class="headerlink" title="线程休眠方法：sleep()"></a>线程休眠方法：sleep()</h3><p>让当前线程休眠指定时间（毫秒）后继续执行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> ThreadTest;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义一个线程类继承Thread类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThread3</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">    <span class="comment">//重写run()方法</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 线程的执行方法</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">5</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">1000</span>);  <span class="comment">//使子进程休眠1000ms再运行</span></span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(Thread.currentThread().getName()+<span class="string">&quot; : 子线程输出 ：&quot;</span>+i);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadDemo3</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建线程对象</span></span><br><span class="line">        Thread t1=<span class="keyword">new</span> MyThread3();</span><br><span class="line">        t1.start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">5</span>;i++)&#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName()+<span class="string">&quot; ：&quot;</span>+i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="通过Thread类的含参构造器为线程命名"><a href="#通过Thread类的含参构造器为线程命名" class="headerlink" title="通过Thread类的含参构造器为线程命名"></a>通过Thread类的含参构造器为线程命名</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Thread t1=<span class="keyword">new</span> MyThread(<span class="string">&quot;TheFirstThread&quot;</span>);</span><br><span class="line"><span class="comment">// 需要重写自定义线程的方法（直接调用父类有参构造器即可）</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">MyThread</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">    <span class="keyword">super</span>(name); <span class="comment">//调用父类有参构造器并初始化线程对象的名称</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1-异常</title>
      <link href="/2021/03/03/1-%E5%BC%82%E5%B8%B8/"/>
      <url>/2021/03/03/1-%E5%BC%82%E5%B8%B8/</url>
      
        <content type="html"><![CDATA[<h1 id="异常的概念"><a href="#异常的概念" class="headerlink" title="异常的概念"></a>异常的概念</h1><p><strong>异常是程序在“编译”或者“执行”的过程中可能出现的问题</strong></p><p>异常应该尽量提前避免，但是无法做到绝对避免，异常的可能情况太多，开发中只能提前干预。</p><p>异常一旦出现，如果没有提前避免，程序就会退出JVM虚拟机而终止，开发中异常是需要提前处理的。研究异常，并且避免异常，然后提前处理异常，体现的是程序的安全性，健壮性</p><h3 id="Java会为常见的代码异常都设计一个类来代表"><a href="#Java会为常见的代码异常都设计一个类来代表" class="headerlink" title="Java会为常见的代码异常都设计一个类来代表"></a>Java会为常见的代码异常都设计一个类来代表</h3><p><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/%E6%97%A0%E6%A0%87%E9%A2%98%E8%84%91%E5%9B%BE.mindmap.jpg" alt="无标题脑图.mindmap"></p><h4 id="Error"><a href="#Error" class="headerlink" title="Error"></a>Error</h4><p>错误的意思，严重错误Error，无法通过处理的错误，一旦出现，程序员难以进行修改，一般只能重启系统，优化项目。例如：内存崩溃，JVM本身崩溃</p><h4 id="Exception"><a href="#Exception" class="headerlink" title="Exception"></a>Exception</h4><p>异常类，是开发中代码在编译或者执行过程中可能出现的错误，它是需要提前处理的，以便程序更加健壮</p><ol><li>编译时异常：继承自Exception的异常或者其子类，编译阶段就会报错，必须程序员进行处理，否则代码编译无法通过</li><li>运行时异常，继承自RuntimeException的异常或其子类，编译阶段不报错，运行阶段出现，运行时异常可处理也可不处理</li></ol><h2 id="运行时异常"><a href="#运行时异常" class="headerlink" title="运行时异常"></a>运行时异常</h2><h3 id="常见的运行时异常"><a href="#常见的运行时异常" class="headerlink" title="常见的运行时异常"></a>常见的运行时异常</h3><ul><li>数组索引越界异常：ArrayIndexOutOfBoundsException</li><li>空指针异常：NullPointerException（直接输出没有问题，但是调用空指针变量的功能就会报错）</li><li>类型转换异常：ClassCastException</li><li>迭代器遍历没有此元素异常：NoSuchElementException</li><li>数学操作异常：ArithmeticException</li><li>数字转换异常：NumberFormatException</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test1</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//数组索引越界异常：ArrayIndexOutOfBoundsException</span></span><br><span class="line">        <span class="keyword">int</span>[] array=&#123;<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>&#125;;</span><br><span class="line">        System.out.println(array[<span class="number">3</span>]);</span><br><span class="line">        <span class="comment">//空指针异常：NullPointerException</span></span><br><span class="line">        String str1=<span class="keyword">null</span>;</span><br><span class="line">        System.out.println(str1); <span class="comment">//直接输出没有问题</span></span><br><span class="line">        System.out.println(str1.length());  <span class="comment">//但是调用空指针变量的功能就会报错</span></span><br><span class="line">        <span class="comment">//类型转换异常：ClassCastException</span></span><br><span class="line">        Object name=<span class="string">&quot;Leslie&quot;</span>;</span><br><span class="line">        Integer s=(Integer) name;</span><br><span class="line">        <span class="comment">//迭代器遍历没有此元素异常：NoSuchElementException</span></span><br><span class="line">        <span class="comment">//数学操作异常：ArithmeticException</span></span><br><span class="line">        <span class="keyword">int</span> c=<span class="number">10</span>/<span class="number">0</span>;</span><br><span class="line">        <span class="comment">//数字转换异常：NumberFormatException</span></span><br><span class="line">        String num=<span class="string">&quot;23a&quot;</span>;</span><br><span class="line">        Integer n=Integer.valueOf(num);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="编译时异常"><a href="#编译时异常" class="headerlink" title="编译时异常"></a>编译时异常</h2><h4 id="代码编译阶段就会报错"><a href="#代码编译阶段就会报错" class="headerlink" title="代码编译阶段就会报错"></a>代码编译阶段就会报错</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> ExceptionTest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.text.ParseException;</span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExceptionDemo</span> </span>&#123;</span><br><span class="line">    <span class="comment">//这里如果不设置throws ParseException，就会抛出编译异常</span></span><br><span class="line">    <span class="comment">//原因就在于parse操作很容易不规范</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ParseException </span>&#123;</span><br><span class="line">        String date=<span class="string">&quot;2015-01-12 10:23:21&quot;</span>;</span><br><span class="line">        SimpleDateFormat sdf =<span class="keyword">new</span> SimpleDateFormat(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);</span><br><span class="line">        Date d =sdf.parse(date);</span><br><span class="line">        System.out.println(d);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="异常的默认处理机制"><a href="#异常的默认处理机制" class="headerlink" title="异常的默认处理机制"></a>异常的默认处理机制</h2><h3 id="异常产生后的默认处理过程是自动处理过程"><a href="#异常产生后的默认处理过程是自动处理过程" class="headerlink" title="异常产生后的默认处理过程是自动处理过程"></a>异常产生后的默认处理过程是自动处理过程</h3><ol><li>默认会在出现异常的代码处自动创建一个异常对象：ArithmeticException等</li><li>异常会从方法中出现的点这里先抛出给调用者，各层调用者不断抛出最终抛出给JVM虚拟机</li><li>虚拟机接收到异常对象后，现在控制台输出/打印异常栈信息数据</li><li>直接从当前执行的异常点终止当前程序</li></ol><h4 id="这种默认异常处理机制并不好（对于项目开发），一旦出现真的异常，会立即导致程序的死亡"><a href="#这种默认异常处理机制并不好（对于项目开发），一旦出现真的异常，会立即导致程序的死亡" class="headerlink" title="这种默认异常处理机制并不好（对于项目开发），一旦出现真的异常，会立即导致程序的死亡"></a>这种默认异常处理机制并不好（对于项目开发），一旦出现真的异常，会立即导致程序的死亡</h4><h2 id="编译时异常处理方式"><a href="#编译时异常处理方式" class="headerlink" title="编译时异常处理方式"></a>编译时异常处理方式</h2><h3 id="方式一：直接抛出错误"><a href="#方式一：直接抛出错误" class="headerlink" title="方式一：直接抛出错误"></a>方式一：直接抛出错误</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">方法 <span class="keyword">throws</span> 异常<span class="number">1</span>,异常<span class="number">2</span>,...&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//上述方式，需要对异常逐个抛出，当异常很多时并不方便</span></span><br><span class="line"><span class="comment">//一般建议采用throws Exception这种方式，直接抛出根类异常</span></span><br><span class="line"></span><br><span class="line">方法 <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> ExceptionTest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.text.ParseException;</span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExceptionDemo1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ParseException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;----程序开始----&quot;</span>);</span><br><span class="line">        parseDate(<span class="string">&quot;2020-05-15 08:54:05&quot;</span>);  <span class="comment">//如果程序正确可以输出结果</span></span><br><span class="line">        parseDate(<span class="string">&quot;2020/05/15/08/54/05&quot;</span>);  <span class="comment">//如果程序错误依旧会报错并直接终止程序</span></span><br><span class="line">        System.out.println(<span class="string">&quot;----程序结束----&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">parseDate</span><span class="params">(String time)</span> <span class="keyword">throws</span> ParseException </span>&#123;</span><br><span class="line">        SimpleDateFormat sdf =<span class="keyword">new</span> SimpleDateFormat(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);</span><br><span class="line">        Date d=sdf.parse(time);</span><br><span class="line">        System.out.println(d);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这种异常处理方式并不好，整个过程中只是逐层把异常向上层抛出，本质与默认处理方式相同，只是避免了编译阶段的报错，让程序能够正常编译。但一旦出现错误，仍然会导致JVM虚拟机终止程序。这种方法适用于程序较小，报错原因较易排查的项目</p><h3 id="方式二：在出现异常的地方自己处理，谁出现谁处理"><a href="#方式二：在出现异常的地方自己处理，谁出现谁处理" class="headerlink" title="方式二：在出现异常的地方自己处理，谁出现谁处理"></a>方式二：在出现异常的地方自己处理，谁出现谁处理</h3><h4 id="采用监视捕获异常的方式，即try-catch"><a href="#采用监视捕获异常的方式，即try-catch" class="headerlink" title="采用监视捕获异常的方式，即try catch"></a>采用监视捕获异常的方式，即try catch</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> ExceptionTest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.text.ParseException;</span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExceptionDemo1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span>  </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;----程序开始----&quot;</span>);</span><br><span class="line">        parseDate(<span class="string">&quot;2020-05-15 08:54:05&quot;</span>);  <span class="comment">//程序正确</span></span><br><span class="line">        parseDate(<span class="string">&quot;2020/05/15/08/54/05&quot;</span>);  <span class="comment">//程序错误</span></span><br><span class="line">        System.out.println(<span class="string">&quot;----程序结束----&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">parseDate</span><span class="params">(String time)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            SimpleDateFormat sdf =<span class="keyword">new</span> SimpleDateFormat(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);</span><br><span class="line">            Date d=sdf.parse(time);</span><br><span class="line">            System.out.println(d);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (ParseException e)&#123;  <span class="comment">//可以并列多个异常，或是直接用Exception监视所有可能异常</span></span><br><span class="line">            e.printStackTrace();  <span class="comment">//打印异常栈信息，不会引起程序死亡</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>（在企业开发中，一般直接采用监视Exception根类的方式，这样可以监视并打印所有可能的异常）</p><p>第二种处理异常的方式可以处理异常，并且出现异常后代码也不会死亡而是正常执行，但这种方式也存在不足之处，在没有返回值的情况下，下层独自监视处理异常，导致上层不了解下层的处理结果而是盲目的运行程序</p><h3 id="方式三：在出现异常的地方把异常逐层抛出给最外层调用者，最外层调用者几种捕获处理（规范做法）"><a href="#方式三：在出现异常的地方把异常逐层抛出给最外层调用者，最外层调用者几种捕获处理（规范做法）" class="headerlink" title="方式三：在出现异常的地方把异常逐层抛出给最外层调用者，最外层调用者几种捕获处理（规范做法）"></a>方式三：在出现异常的地方把异常逐层抛出给最外层调用者，最外层调用者几种捕获处理（规范做法）</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> ExceptionTest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.text.ParseException;</span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExceptionDemo1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span>  </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;----程序开始----&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            parseDate(<span class="string">&quot;2020-05-15 08:54:05&quot;</span>);  <span class="comment">//程序正确</span></span><br><span class="line">            parseDate(<span class="string">&quot;2020/05/15/08/54/05&quot;</span>);  <span class="comment">//程序错误</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (ParseException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;----程序结束----&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">parseDate</span><span class="params">(String time)</span> <span class="keyword">throws</span> ParseException </span>&#123;</span><br><span class="line">        SimpleDateFormat sdf =<span class="keyword">new</span> SimpleDateFormat(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);</span><br><span class="line">        Date d=sdf.parse(time);</span><br><span class="line">        System.out.println(d);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>这种方案最外层调用者可以知道底层执行的情况，同时程序在出现异常后也不会立即死亡，这是理论上最好的方案</strong></p><h2 id="运行时异常的处理机制"><a href="#运行时异常的处理机制" class="headerlink" title="运行时异常的处理机制"></a>运行时异常的处理机制</h2><p>运行时异常的处理规范：直接在最外层捕获处理即可，底层会自动抛出</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> ExceptionTest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExceptionDemo2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">MyDivision</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line">        System.out.println(a/b);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;----程序开始----&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            MyDivision(<span class="number">10</span>,<span class="number">0</span>);</span><br><span class="line">            System.err.println(<span class="string">&quot;运行成功！&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            System.err.println(<span class="string">&quot;运行失败！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>异常捕获的本质就是直接将上层传输的异常捕获，然后输出它的异常栈信息，避免异常传输到JVM虚拟机，终止程序。从而保证了程序能够顺利执行完毕</p><hr><h2 id="finally关键字"><a href="#finally关键字" class="headerlink" title="finally关键字"></a>finally关键字</h2><h4 id="用在捕获处理的异常格式中的，放在捕获异常的最后面"><a href="#用在捕获处理的异常格式中的，放在捕获异常的最后面" class="headerlink" title="用在捕获处理的异常格式中的，放在捕获异常的最后面"></a>用在捕获处理的异常格式中的，放在捕获异常的最后面</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">    <span class="comment">//可能出现异常的代码</span></span><br><span class="line">&#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">    <span class="comment">//无论代码是否出现异常还是正常执行</span></span><br><span class="line">    <span class="comment">//最终一定要执行这里的代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在捕获异常中，try固定出现一次，catch出现0~N次（当存在finally时，可以省略catch，其他情况下不可以），finally可以出现至多一次</p><h3 id="finally作用"><a href="#finally作用" class="headerlink" title="finally作用"></a>finally作用</h3><p><strong>可以在代码执行完毕之后进行资源（资源都实现了Close able接口，自带close()方法）的释放操作</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> ExceptionTest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExceptionDemo2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">double</span> <span class="title">MyDivision</span><span class="params">(<span class="keyword">double</span> a,<span class="keyword">double</span> b)</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> a/b;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0.0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">finally</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;====finally被执行====&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(MyDivision(<span class="number">10</span>,<span class="number">2</span>));</span><br><span class="line">        <span class="comment">/* 这里就可以看出finally的强制执行效果</span></span><br><span class="line"><span class="comment">           程序正常执行，原本应该进入try,在try中会执行return语句</span></span><br><span class="line"><span class="comment">           return语句理应终止程序运行，但程序还是被强制执行了finally中的内容</span></span><br><span class="line"><span class="comment">           也就是在这里实际执行流程是在执行到return语句后被强制跳转到finally语句，先执行其中内容</span></span><br><span class="line"><span class="comment">           </span></span><br><span class="line"><span class="comment">           因此，在finally语句中加入return语句是十分危险的</span></span><br><span class="line"><span class="comment">           因为无论任何情况，只要finally中包含return语句，最后都只会执行finally中的return语句</span></span><br><span class="line"><span class="comment">           </span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">         </span><br><span class="line">         </span><br><span class="line">        <span class="comment">//return 233; </span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="自定义异常"><a href="#自定义异常" class="headerlink" title="自定义异常"></a>自定义异常</h2><h3 id="自定义编译时异常"><a href="#自定义编译时异常" class="headerlink" title="自定义编译时异常"></a>自定义编译时异常</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> ExceptionTest;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 自定义编译时异常：</span></span><br><span class="line"><span class="comment">* 1. 继承Exception</span></span><br><span class="line"><span class="comment">* 2. 重写构造器</span></span><br><span class="line"><span class="comment">* */</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyException</span> <span class="keyword">extends</span> <span class="title">Exception</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyException</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyException</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(message);  <span class="comment">//调用父类构造器</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyException</span><span class="params">(String message, Throwable cause)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(message, cause);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyException</span><span class="params">(Throwable cause)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(cause);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyException</span><span class="params">(String message, Throwable cause, <span class="keyword">boolean</span> enableSuppression, <span class="keyword">boolean</span> writableStackTrace)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(message, cause, enableSuppression, writableStackTrace);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="调用自定义异常"><a href="#调用自定义异常" class="headerlink" title="调用自定义异常"></a>调用自定义异常</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> ExceptionTest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExceptionDemo3</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ageControl(<span class="number">12</span>);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">ageControl</span><span class="params">(<span class="keyword">int</span> age)</span> <span class="keyword">throws</span> MyException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(age&gt;<span class="number">60</span> || age&lt;<span class="number">18</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> MyException(<span class="string">&quot;/ age is illegal&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;age is &quot;</span>+age);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>自定义的编译时异常，在调用时会直接报错，所以直接用throws抛出给上层即可</p><h4 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h4><p><strong>throws用在方法上，用于抛出方法中的异常给调用方</strong></p><p><strong>throw用在出现异常的地方，用于创建异常对象且立即从此处抛出</strong></p><p>自定义运行时异常的方式跟自定义编译时异常基本一致，只是运行时异常需要继承的是RuntimeException，并且在编译阶段并不会报错</p><hr>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>9-Spring集成web环境</title>
      <link href="/2021/03/03/9-Spring%E9%9B%86%E6%88%90web%E7%8E%AF%E5%A2%83/"/>
      <url>/2021/03/03/9-Spring%E9%9B%86%E6%88%90web%E7%8E%AF%E5%A2%83/</url>
      
        <content type="html"><![CDATA[<h2 id="ApplicationContext应用上下问的获取方式"><a href="#ApplicationContext应用上下问的获取方式" class="headerlink" title="ApplicationContext应用上下问的获取方式"></a>ApplicationContext应用上下问的获取方式</h2><p>下面是之前一直采用的应用上下问的获取方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        ApplicationContext context=<span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line">        UserService service= (UserService) context.getBean(<span class="string">&quot;userService&quot;</span>);</span><br><span class="line">        service.save();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过new ClassPathXmlApplicationContext(“applicationContext.xml”)来获取应用上下文，不过这种方式获取的弊端就是所有web层的服务使用前都需要利用new ClassPathXmlApplicationContext(“applicationContext.xml”);加载配置文件，导致配置文件需要重复被加载多次，应用上下文的对象也需要创建多次</p><p>在Web项目中，要解决这个问题，可以利用ServletContextListener监听web应用的启动，一旦web应用启动，就加载Spring配置文件，并创建ApplicationContext应用上下文对象，然后将其存储入最大的域servletContext中，其他web层方法就可以在需要时直接从域中获取应用上下文对象</p><h4 id="配置文件web-xml-配置监听器和Servlet"><a href="#配置文件web-xml-配置监听器和Servlet" class="headerlink" title="配置文件web.xml 配置监听器和Servlet"></a>配置文件web.xml 配置监听器和Servlet</h4><p>这里将Spring配置文件的文件名作为全局参数进行配置，避免了文件名加载配置文件导致的耦合</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">&quot;4.0&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--全局初始化参数 将Spring配置文件作为参数存储以解耦合--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>applicationContext<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>applicationContext.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--配置监听器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>cn.ywrby.listener.ContextLoaderListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--配置Servlet--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>UserServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>cn.ywrby.web.UserServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>UserServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/userServlet<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="创建监听器"><a href="#创建监听器" class="headerlink" title="创建监听器"></a>创建监听器</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 创建监听器，监听服务器启动</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ContextLoaderListener</span> <span class="keyword">implements</span> <span class="title">ServletContextListener</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 在服务器启动时加载配置文件创建应用上下文对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextInitialized</span><span class="params">(ServletContextEvent sce)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//获取ServletContext域</span></span><br><span class="line">        ServletContext servletContext=sce.getServletContext();</span><br><span class="line">        <span class="comment">//从ServletContext域中获取全局初始化参数(获得Spring配置文件名)</span></span><br><span class="line">        String context_name=servletContext.getInitParameter(<span class="string">&quot;applicationContext&quot;</span>);</span><br><span class="line">        <span class="comment">//加载Spring配置文件并创建Spring应用上下文</span></span><br><span class="line">        ApplicationContext context=<span class="keyword">new</span> ClassPathXmlApplicationContext(context_name);</span><br><span class="line">        <span class="comment">//将Spring应用上下文存储到最大的域servletContext中</span></span><br><span class="line">        servletContext.setAttribute(<span class="string">&quot;app&quot;</span>,context);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="修改Servlet，从ServletContext域中获取Spring应用上下文"><a href="#修改Servlet，从ServletContext域中获取Spring应用上下文" class="headerlink" title="修改Servlet，从ServletContext域中获取Spring应用上下文"></a>修改Servlet，从ServletContext域中获取Spring应用上下文</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">//利用req从ServletContext域中获取存储的应用上下文对象</span></span><br><span class="line">        ApplicationContext context= (ApplicationContext) req.getServletContext().getAttribute(<span class="string">&quot;app&quot;</span>);</span><br><span class="line">        <span class="comment">//利用应用上下文获取Spring容器中的service层对象</span></span><br><span class="line">        UserService service= (UserService) context.getBean(<span class="string">&quot;userService&quot;</span>);</span><br><span class="line">        service.save();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Spring提供的获取应用上下文的工具"><a href="#Spring提供的获取应用上下文的工具" class="headerlink" title="Spring提供的获取应用上下文的工具"></a>Spring提供的获取应用上下文的工具</h2><p>上文提到的获取应用上下文的方式较为繁琐，并且每个web项目几乎都需要进行配置上下文的获取，所以Spring已经对应用上下文的获取进行了封装，我们只需要使用其提供的工具即可</p><p>Spring提供了一个监听器ContextLoaderListener就是对上述监听器的封装，该监听器实现了内部加载配置文件，创建应用上下文对象，并将对象存储在ServletContext域中，，同时提供了一个工具类WebApplicationContextUtils用来进行应用上下文的获取</p><h3 id="使用步骤"><a href="#使用步骤" class="headerlink" title="使用步骤"></a>使用步骤</h3><h4 id="0-在pom-xml中导入spring-web坐标"><a href="#0-在pom-xml中导入spring-web坐标" class="headerlink" title="0. 在pom.xml中导入spring-web坐标"></a>0. 在pom.xml中导入spring-web坐标</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="1-在web-xml中配置ContextLoaderListener监听器"><a href="#1-在web-xml中配置ContextLoaderListener监听器" class="headerlink" title="1. 在web.xml中配置ContextLoaderListener监听器"></a>1. 在web.xml中配置ContextLoaderListener监听器</h4><p>注意，这里的初始化参数名称必须是contextConfigLocation不能进行修改</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--全局初始化参数 将Spring配置文件作为参数存储以解耦合--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:applicationContext.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--配置监听器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2-使用WebApplicationContextUtils获取应用上下文对象ApplicationContext"><a href="#2-使用WebApplicationContextUtils获取应用上下文对象ApplicationContext" class="headerlink" title="2. 使用WebApplicationContextUtils获取应用上下文对象ApplicationContext"></a>2. 使用WebApplicationContextUtils获取应用上下文对象ApplicationContext</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">//（利用req获取ServletContext域）</span></span><br><span class="line">        ServletContext servletContext=req.getServletContext();</span><br><span class="line">        <span class="comment">//利用WebApplicationContextUtils获取应用上下文</span></span><br><span class="line">        WebApplicationContext context=WebApplicationContextUtils.getWebApplicationContext(servletContext);</span><br><span class="line">        <span class="comment">//利用应用上下文获取Spring容器中的service层对象</span></span><br><span class="line">        UserService service= (UserService) context.getBean(<span class="string">&quot;userService&quot;</span>);</span><br><span class="line">        service.save();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
          <category> 后端框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>8-Spring事务控制</title>
      <link href="/2021/03/03/8-Spring%E4%BA%8B%E5%8A%A1%E6%8E%A7%E5%88%B6/"/>
      <url>/2021/03/03/8-Spring%E4%BA%8B%E5%8A%A1%E6%8E%A7%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<h1 id="Spring事务控制"><a href="#Spring事务控制" class="headerlink" title="Spring事务控制"></a>Spring事务控制</h1><h2 id="事务概念"><a href="#事务概念" class="headerlink" title="事务概念"></a>事务概念</h2><blockquote><p>概括来讲，事务是一个由有限操作集合组成的逻辑单元。事务操作包含两个目的，数据一致以及操作隔离。数据一致是指事务提交时保证事务内的所有操作都成功完成，并且更改永久生效；事务回滚时，保证能够恢复到事务执行之前的状态。操作隔离则是指多个同时执行的事务之间应该相互独立，互不影响。</p></blockquote><p>事务是一个比较广泛的概念，事务管理资源除了我们熟知的数据库外，还可以包含消息队列、文件系统等。当然，一般来说，我们说的事务单指“数据库事务”。</p><h3 id="事务的ACID属性"><a href="#事务的ACID属性" class="headerlink" title="事务的ACID属性"></a>事务的ACID属性</h3><ul><li>原子性（Atomicity）：事务作为一个整体被执行，包含在其中的对数据库的操作要么全部被执行，要么都不执行。</li><li>一致性（Consistency）：事务应确保数据库的状态从一个一致状态转变为另一个一致状态。一致状态的含义是数据库中的数据应满足完整性约束。</li><li>隔离性（Isolation）：多个事务并发执行时，一个事务的执行不应影响其他事务的执行。</li><li>持久性（Durability）：已被提交的事务对数据库的修改应该永久保存在数据库中。</li></ul><h2 id="编程式事务控制"><a href="#编程式事务控制" class="headerlink" title="编程式事务控制"></a>编程式事务控制</h2><p>Spring编程式事务控制就是指利用Spring提供的API进行事务控制，通过编写Java代码的方式完成，这种事务控制方法相对较灵活，但不便于管理，即耦合度较高</p><h3 id="PlatformTransactionManager-平台事务管理器"><a href="#PlatformTransactionManager-平台事务管理器" class="headerlink" title="PlatformTransactionManager 平台事务管理器"></a>PlatformTransactionManager 平台事务管理器</h3><p>PlatformTransactionManager接口是Spring的事务管理器类，内部提供了我们常用的操作事务的方法</p><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>TransactionStatus getTransaction(TransactionDefination defination)</td><td>获取事务状态信息</td></tr><tr><td>void commit(TransactionStatus status)</td><td>获取事务状态信息</td></tr><tr><td>void rollback(TransactionStatus status)</td><td>回滚事务</td></tr></tbody></table><p>根据dao层的不同技术实现（例如JDBC或mybatis…），PlatformTransactionManager接口实现了不同的实现类</p><h3 id="TransactionDefination"><a href="#TransactionDefination" class="headerlink" title="TransactionDefination"></a>TransactionDefination</h3><p>TransactionDefination是事务的定义信息对象，实现了如下方法</p><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>int getIsolationLevel()</td><td>获得事务的隔离级别</td></tr><tr><td>int getPropogationBehavior()</td><td>获得事务的传播行为</td></tr><tr><td>int getTimeout()</td><td>获得超时时间</td></tr><tr><td>boolean isReadyOnly()</td><td>是否只读</td></tr></tbody></table><h4 id="事务的隔离级别"><a href="#事务的隔离级别" class="headerlink" title="事务的隔离级别"></a>事务的隔离级别</h4><p>设置事务级别，用于解决事务并发产生的问题。如脏读，不可重复度，虚读…</p><ul><li>ISOLATION_DEFAULT：默认隔离级别</li><li>ISOLATION_READ_UNCOMMITTED：读未提交</li><li>ISOLATION_READ_COMMITTED：读已提交（可以解决脏读）</li><li>ISOLATION_REPEATABLE_READ：可重复读（可以解决不可重复读问题）</li><li>ISOLATION_SERIALIZABLE：串行化（都可以解决 但效率低下）</li></ul><h4 id="事务的传播行为"><a href="#事务的传播行为" class="headerlink" title="事务的传播行为"></a>事务的传播行为</h4><p>事务传播行为用于描述当<strong>一个事务传播行为的修饰方法</strong>被<strong>其他方法</strong>调用时，事务是如何传播的</p><p>Spring中提供了其中事务传播的行为</p><table><thead><tr><th>事务传播行为</th><th>说明</th></tr></thead><tbody><tr><td>REQUIRED</td><td>如果当前没有事务，就新建一个事务，如果已经存在一个事务中，加入到这个事务中。一般的选择（默认值）</td></tr><tr><td>SUPPORTS</td><td>支持当前事务，如果当前没有事务，就以非事务方式执行（没有事务）</td></tr><tr><td>MANDATORY</td><td>使用当前的事务，如果当前没有事务，就抛出异常</td></tr><tr><td>REQUERS_NEW</td><td>新建事务，如果当前在事务中，把当前事务挂起。</td></tr><tr><td>NOT_SUPPORTED</td><td>以非事务方式执行操作，如果当前存在事务，就把当前事务挂起</td></tr><tr><td>NEVER</td><td>以非事务方式运行，如果当前存在事务，抛出异常</td></tr><tr><td>NESTED</td><td>如果当前存在事务，则在嵌套事务内执行。如果当前没有事务，则执行 REQUIRED 类似的操作</td></tr><tr><td></td><td></td></tr></tbody></table><ul><li>超时时间：默认值是-1，没有超时限制。如果有，以秒为单位进行设置</li><li>是否只读：建议查询时设置为只读</li></ul><h3 id="TransactionStatus"><a href="#TransactionStatus" class="headerlink" title="TransactionStatus"></a>TransactionStatus</h3><p>TransactionStatus接口提供了事务具体的运行状态</p><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>boolean hasSavepoint()</td><td>是否存储回滚点</td></tr><tr><td>boolean isCompleted()</td><td>事务是否完成</td></tr><tr><td>boolean isNewTransaction()</td><td>是否是新事务</td></tr><tr><td>boolean isRollBackOnly()</td><td>事务是否回滚</td></tr></tbody></table><h2 id="Spring声明式事务控制"><a href="#Spring声明式事务控制" class="headerlink" title="Spring声明式事务控制"></a>Spring声明式事务控制</h2><p>Spring的声明式事务控制就是指利用声明的方式进行事务控制，这里所指的声明就是利用Spring配置文件或注解的方式进行配置</p><h3 id="声明式事务控制的作用"><a href="#声明式事务控制的作用" class="headerlink" title="声明式事务控制的作用"></a>声明式事务控制的作用</h3><p>事务管理是属于系统层面的服务，而我们所编写的业务逻辑对象是属于业务逻辑层面的，如果使用编程式事务控制，就需要将事务管理和业务逻辑对象一起进行编写，二者将被耦合死。二通过声明式事务控制，则可以通过配置的方式，在配置文件中编写如何利用业务逻辑对象进行事务管理，此时业务逻辑对象并不会意识到自己正在执行相关事务，即实现了解耦合（业务逻辑与事务管理之间）</p><p>这个过程实际上还是遵循了Spring中的AOP，整个过程是为了实现对方法的增强，而增强的方式就是通过使用事务，即业务逻辑对象是切点，事务是通知（增强）</p><p>Spring声明式事务控制的底层就是AOP</p><h3 id="基于XML方式的声明式事务控制"><a href="#基于XML方式的声明式事务控制" class="headerlink" title="基于XML方式的声明式事务控制"></a>基于XML方式的声明式事务控制</h3><p>以银行转账事务为例进行基于XML方式的声明式事务控制</p><h4 id="dao层：定义数据库操作方法"><a href="#dao层：定义数据库操作方法" class="headerlink" title="dao层：定义数据库操作方法"></a>dao层：定义数据库操作方法</h4><p>in方法为修改入帐方的余额</p><p>out方法为修改出账方发余额</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AccountDao</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">in</span><span class="params">(String inMan,<span class="keyword">double</span> money)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">out</span><span class="params">(String outMan,<span class="keyword">double</span> money)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component(&quot;accountDao&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountDaoImpl</span> <span class="keyword">implements</span> <span class="title">AccountDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JdbcTemplate jdbcTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setJdbcTemplate</span><span class="params">(JdbcTemplate jdbcTemplate)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.jdbcTemplate = jdbcTemplate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">in</span><span class="params">(String inMan, <span class="keyword">double</span> money)</span> </span>&#123;</span><br><span class="line">        jdbcTemplate.update(<span class="string">&quot;update account set money=money+? where name =?&quot;</span>,money,inMan);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">out</span><span class="params">(String outMan, <span class="keyword">double</span> money)</span> </span>&#123;</span><br><span class="line">        jdbcTemplate.update(<span class="string">&quot;update account set money=money-? where name =?&quot;</span>,money,outMan);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Service层"><a href="#Service层" class="headerlink" title="Service层"></a>Service层</h3><p>transfer方法就是转账方法，接收出账方，入帐方和金额三个参数</p><p>transfer方法调用了in方法和out方法，这两个方法各自为一个事务，此时如果不进行事务控制，可以看到由于二者之间故意设置的除数错误，会导致入账事务执行并完成，但出账事务未进行。</p><p>因此必须通过事务控制增强这个方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AccountService</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">transfer</span><span class="params">(String outMan,String inMan,<span class="keyword">double</span> money)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component(&quot;accountService&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountServiceImpl</span> <span class="keyword">implements</span> <span class="title">AccountService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AccountDaoImpl accountDao;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAccountDao</span><span class="params">(AccountDaoImpl accountDao)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.accountDao = accountDao;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">transfer</span><span class="params">(String outMan, String inMan, <span class="keyword">double</span> money)</span> </span>&#123;</span><br><span class="line">        accountDao.in(inMan,money);</span><br><span class="line">        <span class="keyword">int</span> i=<span class="number">1</span>/<span class="number">0</span>;</span><br><span class="line">        accountDao.out(outMan,money);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><p>首先要引入AOP命名空间用于进行事务的织入，其次还需要引入tx命名空间进行事务通知的定义</p><p>然后就是需要配置平台事务管理器并为其配置数据源以进行事务管理，并且要定义通知（在tx命名空间中）</p><p>最后进行织入，将通知织入指定方法</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="comment">&lt;!--引入tx命名空间，用于进行事务的管理--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:tx</span>=<span class="string">&quot;http://www.springframework.org/schema/tx&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">&quot;http://www.springframework.org/schema/aop&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">                           http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">                           http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">                           http://www.springframework.org/schema/aop https://www.springframework.org/schema/aop/spring-aop.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--配置注解扫描--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;cn.ywrby&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--加载properties配置文件(classpath表示的就是资源目录resources下)--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;classpath:jdbc.properties&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--配置数据源--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.mchange.v2.c3p0.ComboPooledDataSource&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClass&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;driver&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;jdbcUrl&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;url&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;user&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;user&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;password&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--配置JdbcTemplate--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;jdbcTemplate&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.core.JdbcTemplate&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--配置平台事务管理器TransactionManager--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;transactionManager&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--通知 用于进行事务的增强--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tx:advice</span> <span class="attr">id</span>=<span class="string">&quot;txAdvice&quot;</span> <span class="attr">transaction-manager</span>=<span class="string">&quot;transactionManager&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--设置事务的属性信息--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--name设置增强的方法 *表示所有方法均进行增强--&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--isolation表示隔离级别--&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--propagation表示事务的传播行为--&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--timeout表示超过时间--&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--read-only表示是否只读--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;*&quot;</span> <span class="attr">isolation</span>=<span class="string">&quot;DEFAULT&quot;</span> <span class="attr">propagation</span>=<span class="string">&quot;REQUIRED&quot;</span> <span class="attr">timeout</span>=<span class="string">&quot;-1&quot;</span> <span class="attr">read-only</span>=<span class="string">&quot;false&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tx:advice</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--配置AOP事务的织入：将事务织入到业务逻辑对象的方法中--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">&quot;txAdvice&quot;</span> <span class="attr">pointcut</span>=<span class="string">&quot;execution(* cn.ywrby.service.impl.*.*(..))&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:advisor</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="基于注解的Spring事务控制"><a href="#基于注解的Spring事务控制" class="headerlink" title="基于注解的Spring事务控制"></a>基于注解的Spring事务控制</h3><p>基于注解的Spring事务控制需要修改两处，首先在需要进行事务控制的方法或类上利用@Transactional注解表示对该方法进行事务控制，（其内可以传入参数进行属性的配置）</p><p>可以看到，类上和方法上都可以使用该注解，当在类上使用该注解时表示该类内所有方法均按此配置进行事务控制，同时若方法上另有配置，则遵循方法上的配置（就近原则）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component(&quot;accountService&quot;)</span></span><br><span class="line"><span class="meta">@Transactional(isolation = Isolation.READ_COMMITTED,propagation = Propagation.MANDATORY,readOnly = false,timeout = -1)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountServiceImpl</span> <span class="keyword">implements</span> <span class="title">AccountService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AccountDaoImpl accountDao;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAccountDao</span><span class="params">(AccountDaoImpl accountDao)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.accountDao = accountDao;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Transactional(isolation = Isolation.DEFAULT,propagation = Propagation.REQUIRED)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">transfer</span><span class="params">(String outMan, String inMan, <span class="keyword">double</span> money)</span> </span>&#123;</span><br><span class="line">        accountDao.in(inMan,money);</span><br><span class="line">        <span class="keyword">int</span> i=<span class="number">1</span>/<span class="number">0</span>;</span><br><span class="line">        accountDao.out(outMan,money);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其次还需要修改配置文件，以进行事务的注解驱动声明</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="comment">&lt;!--引入tx命名空间，用于进行事务的管理--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:tx</span>=<span class="string">&quot;http://www.springframework.org/schema/tx&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">&quot;http://www.springframework.org/schema/aop&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">                           http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">                           http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">                           http://www.springframework.org/schema/aop https://www.springframework.org/schema/aop/spring-aop.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--配置注解扫描--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;cn.ywrby&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--加载properties配置文件(classpath表示的就是资源目录resources下)--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;classpath:jdbc.properties&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--配置数据源--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.mchange.v2.c3p0.ComboPooledDataSource&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClass&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;driver&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;jdbcUrl&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;url&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;user&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;user&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;password&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--配置JdbcTemplate--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;jdbcTemplate&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.core.JdbcTemplate&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--配置平台事务管理器TransactionManager--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;transactionManager&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--声明事务的注解驱动--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tx:annotation-driven</span> <span class="attr">transaction-manager</span>=<span class="string">&quot;transactionManager&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
          <category> 后端框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>7-JDBCTemplate</title>
      <link href="/2021/03/03/7-JDBCTemplate/"/>
      <url>/2021/03/03/7-JDBCTemplate/</url>
      
        <content type="html"><![CDATA[<h1 id="JDBCTemplate"><a href="#JDBCTemplate" class="headerlink" title="JDBCTemplate"></a>JDBCTemplate</h1><p>是Spring框架中的一个对象，是对原始繁琐JDBC API的封装</p><h2 id="使用步骤"><a href="#使用步骤" class="headerlink" title="使用步骤"></a>使用步骤</h2><ol><li>导入spring-jdbc和spring-tx坐标</li><li>创建数据库表和实体</li><li>创建JDBCTemplate对象</li><li>执行数据库操作</li></ol><h3 id="数据库表和实体对象"><a href="#数据库表和实体对象" class="headerlink" title="数据库表和实体对象"></a>数据库表和实体对象</h3><p><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/databasesheet.jpg" alt="databasesheet"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPassword</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPassword</span><span class="params">(String password)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.password = password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;User&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, password=&#x27;&quot;</span> + password + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="comment">&lt;!--引入context命名空间，用于读取properties配置文件--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">                           http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--配置注解扫描--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;cn.ywrby&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--加载properties配置文件(classpath表示的就是资源目录resources下)--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;classpath:jdbc.properties&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--配置文件已经成功加载，可以利用配置文件注入--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.mchange.v2.c3p0.ComboPooledDataSource&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClass&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;driver&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;jdbcUrl&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;url&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;user&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;user&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;password&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="创建JDBCTemplate对象并执行数据库操作"><a href="#创建JDBCTemplate对象并执行数据库操作" class="headerlink" title="创建JDBCTemplate对象并执行数据库操作"></a>创建JDBCTemplate对象并执行数据库操作</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith(SpringJUnit4ClassRunner.class)</span></span><br><span class="line"><span class="meta">@ContextConfiguration(&quot;classpath:applicationContext.xml&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JdbcTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建数据源并注入</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> DataSource dataSource;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">jdbcTemplateTest</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        <span class="comment">//创建JdbcTemplate对象</span></span><br><span class="line">        JdbcTemplate jdbcTemplate=<span class="keyword">new</span> JdbcTemplate();</span><br><span class="line">        <span class="comment">//传入数据源对象</span></span><br><span class="line">        jdbcTemplate.setDataSource(dataSource);</span><br><span class="line">        <span class="comment">//执行数据库操作</span></span><br><span class="line">        <span class="keyword">int</span> row=jdbcTemplate.update(<span class="string">&quot;insert into user values(?,?)&quot;</span>,<span class="string">&quot;Leslie&quot;</span>,<span class="string">&quot;123456&quot;</span>);</span><br><span class="line">        System.out.println(row);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>还可以直接将JdbcTemplate放入Spring容器中，再将数据源注入以简化代码</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置数据源--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.mchange.v2.c3p0.ComboPooledDataSource&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClass&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;driver&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;jdbcUrl&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;url&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;user&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;user&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;password&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--配置JdbcTemplate--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;jdbcTemplate&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.core.JdbcTemplate&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>测试用例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith(SpringJUnit4ClassRunner.class)</span></span><br><span class="line"><span class="meta">@ContextConfiguration(&quot;classpath:applicationContext.xml&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JdbcTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JdbcTemplate jdbcTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">jdbcTemplateTest2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//执行数据库操作</span></span><br><span class="line">        <span class="keyword">int</span> row=jdbcTemplate.update(<span class="string">&quot;insert into user values(?,?)&quot;</span>,<span class="string">&quot;Jessice&quot;</span>,<span class="string">&quot;654321&quot;</span>);</span><br><span class="line">        System.out.println(row);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
          <category> 后端框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>6-基于XML与注解的AOP开发</title>
      <link href="/2021/03/03/6-%E5%9F%BA%E4%BA%8EXML%E4%B8%8E%E6%B3%A8%E8%A7%A3%E7%9A%84AOP%E5%BC%80%E5%8F%91/"/>
      <url>/2021/03/03/6-%E5%9F%BA%E4%BA%8EXML%E4%B8%8E%E6%B3%A8%E8%A7%A3%E7%9A%84AOP%E5%BC%80%E5%8F%91/</url>
      
        <content type="html"><![CDATA[<h1 id="XML方式实现AOP"><a href="#XML方式实现AOP" class="headerlink" title="XML方式实现AOP"></a>XML方式实现AOP</h1><h3 id="实现步骤"><a href="#实现步骤" class="headerlink" title="实现步骤"></a>实现步骤</h3><ol><li>导入AOP相关坐标（Spring中AOP主要通过aspectj实现，所以要导入aspectjweaver）</li><li>创建目标接口和目标类（内部有切点）</li><li>创建切面类（内部实现增强方法）</li><li>将目标类和切面类的创建权交给Spring（将目标类和切面类放入Spring容器中）</li><li>在applicationContext配置文件中配置织入关系</li><li>测试代码</li></ol><h4 id="目标类与目标接口"><a href="#目标类与目标接口" class="headerlink" title="目标类与目标接口"></a>目标类与目标接口</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 目标对象接口</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">TargetObject</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">save</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 目标对象</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TargetObjectImpl</span> <span class="keyword">implements</span> <span class="title">TargetObject</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">save</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;save running...&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;return value...&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="创建切面类，实现增强方法"><a href="#创建切面类，实现增强方法" class="headerlink" title="创建切面类，实现增强方法"></a>创建切面类，实现增强方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 切面类：负责实现增前方法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyAspect</span> </span>&#123;</span><br><span class="line">    <span class="comment">//前置增强方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">preEnhence</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;前置增强方法...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//后置增强方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postEnhence</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;后置增强方法...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="将目标类与切面类控制权交给Spring-织入关系"><a href="#将目标类与切面类控制权交给Spring-织入关系" class="headerlink" title="将目标类与切面类控制权交给Spring,织入关系"></a>将目标类与切面类控制权交给Spring,织入关系</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="comment">&lt;!--引入AOP命名空间--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">&quot;http://www.springframework.org/schema/aop&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">                           http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--配置目标对象--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;targetObject&quot;</span> <span class="attr">class</span>=<span class="string">&quot;cn.ywrby.aop.TargetObjectImpl&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置切面类--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;myAspect&quot;</span> <span class="attr">class</span>=<span class="string">&quot;cn.ywrby.aop.MyAspect&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置织入--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--声明切面：表明myAspect是一个切面--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">ref</span>=<span class="string">&quot;myAspect&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--before表示前置增强，after表示后置增强......--&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--配置通知和切入点：method为通知（增强方法），pointcut为切入点,通过切点表达式进行配置--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">aop:before</span> <span class="attr">method</span>=<span class="string">&quot;preEnhence&quot;</span> <span class="attr">pointcut</span>=<span class="string">&quot;execution(public String cn.ywrby.aop.TargetObjectImpl.save())&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:before</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">aop:after</span> <span class="attr">method</span>=<span class="string">&quot;postEnhence&quot;</span> <span class="attr">pointcut</span>=<span class="string">&quot;execution(public String cn.ywrby.aop.TargetObjectImpl.save())&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:after</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="测试用例"><a href="#测试用例" class="headerlink" title="测试用例"></a>测试用例</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith(SpringJUnit4ClassRunner.class)</span></span><br><span class="line"><span class="meta">@ContextConfiguration(&quot;classpath:applicationContext.xml&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AOPTest</span> </span>&#123;</span><br><span class="line">    <span class="comment">//注入对象</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> TargetObject object;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试利用XML实现AOP</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">proxyTest</span><span class="params">()</span></span>&#123;</span><br><span class="line">        String val=object.save();</span><br><span class="line">        System.out.println(val);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="切点表达式的写法"><a href="#切点表达式的写法" class="headerlink" title="切点表达式的写法"></a>切点表达式的写法</h3><h4 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">execution([修饰符] 返回值类型 包名.类名.方法名(参数列表))</span><br></pre></td></tr></table></figure><h4 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h4><ul><li>修饰符可以省略</li><li>返回值类型，包名，类名，方法名都可以使用*表示任意</li><li>包名与类名之间有一个点.表示当前包下的类，两个点..表示当前包及其所有子包下的类</li><li>参数列表可以使用两个点..表示任意数量，任意类型的参数列表</li></ul><p><strong>示例</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">execution(public String cn.ywrby.aop.TargetObjectImpl.save())</span><br><span class="line">execution(String cn.ywrby.aop.TargetObjectImpl.save())</span><br><span class="line">execution(* cn.ywrby.aop.TargetObjectImpl.save())</span><br><span class="line">execution(* cn.ywrby.aop.*.*(..))</span><br><span class="line">execution(* cn.ywrby.aop..TargetObjectImpl.*(..))</span><br></pre></td></tr></table></figure><h4 id="切点表达式的抽取"><a href="#切点表达式的抽取" class="headerlink" title="切点表达式的抽取"></a>切点表达式的抽取</h4><p>一般情况下，对于前置后置等等增强方法，其使用的切点表达式很可能相同，此时，就可以利用抽取切点表达式的方法，简化代码</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置织入--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--声明切面：表明myAspect是一个切面--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">ref</span>=<span class="string">&quot;myAspect&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--抽取切点表达式--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">&quot;maPointcut&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;execution(public * cn.ywrby.*.*.save(..))&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--直接使用抽取的切点表达式ID即可--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:before</span> <span class="attr">method</span>=<span class="string">&quot;preEnhence&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;maPointcut&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:before</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:after</span> <span class="attr">method</span>=<span class="string">&quot;postEnhence&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;maPointcut&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:after</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="通知的类型"><a href="#通知的类型" class="headerlink" title="通知的类型"></a>通知的类型</h3><table><thead><tr><th>名称</th><th>标签</th><th>说明</th></tr></thead><tbody><tr><td>前置通知</td><td><a href="aop:before">aop:before</a></td><td>用于配置前置通知。指定增强的方法在切入点方法之前执行</td></tr><tr><td>后置通知</td><td><a href="aop:after-returning">aop:after-returning</a></td><td>用于配置后置通知。指定增强的方法在切入点方法之后执行</td></tr><tr><td>环绕通知</td><td><a href="aop:around">aop:around</a></td><td>用于配置环绕通知。指定增强的方法在切入点方法之前和之后都执行</td></tr><tr><td>异常抛出通知</td><td><a href="aop:throwing">aop:throwing</a></td><td>用于配置异常抛出通知。指定增强的方法在出现异常时执行</td></tr><tr><td>最终通知</td><td><a href="aop:after">aop:after</a></td><td>用于配置最终通知。无论增强方式执行是否有异常都会执行</td></tr></tbody></table><h1 id="注解实现AOP"><a href="#注解实现AOP" class="headerlink" title="注解实现AOP"></a>注解实现AOP</h1><h3 id="实现步骤-1"><a href="#实现步骤-1" class="headerlink" title="实现步骤"></a>实现步骤</h3><ol><li>创建目标接口与目标类（内部有切点）</li><li>创建切面类，内部实现增强方法</li><li>将目标类和切面类的创建权交给Spring，利用注解将目标类和切面类放入Spring容器中</li><li>在切面类中配置织入关系</li><li>在applicationContext配置文件中开启组件扫描和AOP自动代理</li><li>测试代码</li></ol><h4 id="目标类-目标接口与切面类"><a href="#目标类-目标接口与切面类" class="headerlink" title="目标类,目标接口与切面类"></a>目标类,目标接口与切面类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 目标对象接口</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">TargetObject</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">save</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 目标对象</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component(&quot;targetObject&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TargetObjectImpl</span> <span class="keyword">implements</span> <span class="title">TargetObject</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">save</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;save running...&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;return value...&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 切面类：负责实现增前方法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component(&quot;myAspect&quot;)</span></span><br><span class="line"><span class="comment">//声明切面类</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyAspect</span> </span>&#123;</span><br><span class="line">    <span class="comment">//前置增强方法</span></span><br><span class="line">    <span class="comment">//配置前置增强</span></span><br><span class="line">    <span class="meta">@Before(&quot;execution(* cn.ywrby.aop.*.*(..))&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">preEnhence</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;前置增强方法...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//后置增强方法</span></span><br><span class="line">    <span class="comment">//配置后置增强</span></span><br><span class="line">    <span class="meta">@After(&quot;execution(* cn.ywrby.aop.*.*(..))&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postEnhence</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;后置增强方法...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="配置文件中开启自动扫描和AOP自动代理"><a href="#配置文件中开启自动扫描和AOP自动代理" class="headerlink" title="配置文件中开启自动扫描和AOP自动代理"></a>配置文件中开启自动扫描和AOP自动代理</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--引入AOP命名空间和Context命名空间--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">&quot;http://www.springframework.org/schema/aop&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">                           http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">                           http://www.springframework.org/schema/context  http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--开启组件扫描--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;cn.ywrby&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--开启AOP自动代理--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:aspectj-autoproxy</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="注解中抽取切点表达式"><a href="#注解中抽取切点表达式" class="headerlink" title="注解中抽取切点表达式"></a>注解中抽取切点表达式</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 切面类：负责实现增前方法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component(&quot;myAspect&quot;)</span></span><br><span class="line"><span class="comment">//声明切面类</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyAspect</span> </span>&#123;</span><br><span class="line">    <span class="comment">//利用一个空方法进行切点表达式的抽取</span></span><br><span class="line">    <span class="meta">@Pointcut(&quot;execution(* cn.ywrby.aop.*.*(..))&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pointcut</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">    <span class="comment">//使用抽取的切点表达式</span></span><br><span class="line">    <span class="meta">@Before(&quot;MyAspect.pointcut()&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">preEnhence</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;前置增强方法...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//第二种使用方法</span></span><br><span class="line">    <span class="meta">@After(&quot;pointcut()&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postEnhence</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;后置增强方法...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
          <category> 后端框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>5-AOP基础</title>
      <link href="/2021/03/03/5-AOP%E5%9F%BA%E7%A1%80/"/>
      <url>/2021/03/03/5-AOP%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h1 id="AOP-面向切面编程"><a href="#AOP-面向切面编程" class="headerlink" title="AOP-面向切面编程"></a>AOP-面向切面编程</h1><p>AOP是Aspect Oriented Programing(面向切面编程)的缩写，是通过预编译方式和运行期动态代理实现程序功能的统一维护的一种技术。</p><p>AOP 是 OOP 的延续，是软件开发中的一个热点，也是Spring框架中的一个重要内容，是函数式编程的一种衍生范型。</p><p>利用AOP可以对业务逻辑的各个部分进行隔离，从而使得业务逻辑各部分之间的<strong>耦合度降低</strong>，提高程序的<strong>可重用性</strong>，同时提高了<strong>开发的效率</strong>。</p><p>简言之，在OOP（面向对象编程）中，最大的特点就是继承，多态与封装，而在封装过程中我们需要把功能不同的方法封装到不同对象中，这就导致了我们在使用这些对象时重复度很高，例如有多个方法都需要在执行前调用日志控制方法，我们当前的解决办法只有在每个类中重写日志控制方法或者将日志控制方法写入新的控制类，在需要的类中调用该方法</p><p>第一种方法不仅耦合度高，而且不便于重写或修改，代码重复度也很高，第二种方法，虽然解决了代码重写修改的问题，但日志控制方法会与所有调用它的类耦合死，我们调用某一方法时必然会调用与之耦合的日志控制类</p><p>基于以上问题，便形成了与之对应的解决方案：面向切面编程AOP，一般来讲，我们把重复度极高，被抽取出来的类或代码片段叫做切面，而被切入的类或方法就叫做切入点，通过AOP我们可以将这些重复度高的代码片段抽取到一个切片中，等到需要使用时，再将其切入到指定的切入点中，从而改变其原有的行为</p><p><strong>这种在运行时，动态地将代码切入到类的指定方法、指定位置上的编程思想就是面向切面的编程</strong></p><h4 id="AOP的作用与优势"><a href="#AOP的作用与优势" class="headerlink" title="AOP的作用与优势"></a>AOP的作用与优势</h4><ul><li>作用：在程序运行期间，不改变源码的情况下，对方法进行功能增强</li><li>优势：减少重复代码，提高开发效率，便于后期维护</li></ul><h2 id="底层实现"><a href="#底层实现" class="headerlink" title="底层实现"></a>底层实现</h2><p>AOP底层的实现，是依赖于Spring提供的动态代理技术，Spring通过动态代理技术动态的生成代理对象，代理对象在执行方法时会进行功能增强的介入，再去调用目标对象的方法，从而实现功能的增强</p><h3 id="AOP中利用的动态代理技术"><a href="#AOP中利用的动态代理技术" class="headerlink" title="AOP中利用的动态代理技术"></a>AOP中利用的动态代理技术</h3><ul><li>JDK代理：基于接口的动态代理技术</li><li>cglib代理：基于父类的动态代理技术</li></ul><p><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/spring_aop.jpg" alt="spring_aop"></p><h4 id="JDK代理实现增强的基本实现"><a href="#JDK代理实现增强的基本实现" class="headerlink" title="JDK代理实现增强的基本实现"></a>JDK代理实现增强的基本实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProxyTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建真实对象（目标对象）</span></span><br><span class="line">        TargetObjectImpl object=<span class="keyword">new</span> TargetObjectImpl();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建增强对象（负责执行增强方法）</span></span><br><span class="line">        Advice advice=<span class="keyword">new</span> Advice();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//通过Proxy.newProxyInstance创建动态代理增强对象</span></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 传入的三个参数分别是</span></span><br><span class="line"><span class="comment">         * 目标对象类加载器：目标对象.getClass().getClassLoader()</span></span><br><span class="line"><span class="comment">         * 接口数组：目标对象.getClass().getInterfaces()  保证了代理对象和目标对象方法一致，接口一致</span></span><br><span class="line"><span class="comment">         * 处理器：new InvocationHandler() 负责核心业务逻辑的处理（进行增强）</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        TargetObject proxy_object= (TargetObject) Proxy.newProxyInstance(object.getClass().getClassLoader(), object.getClass().getInterfaces(), <span class="keyword">new</span> InvocationHandler() &#123;</span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * 负责代理逻辑的编写，代理对象调用的所有方法都会触发invoke方法执行</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@param</span> proxy 代理对象</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@param</span> method 方法对象，触发invoke执行的方法</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@param</span> args 参数对象，触发invoke执行的方法中的参数</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">                <span class="comment">//前置增强方法</span></span><br><span class="line">                advice.preFunc();</span><br><span class="line">                <span class="comment">//使用真实的目标对象调用该方法（这里的两个invoke方法并不相同，下面的invoke方法是反射中用来执行方法的函数）</span></span><br><span class="line">                Object val=method.invoke(object,args);</span><br><span class="line">                <span class="comment">//后置增强方法</span></span><br><span class="line">                advice.postFunc();</span><br><span class="line">                <span class="comment">//返回值</span></span><br><span class="line">                <span class="keyword">return</span> val;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        String str=proxy_object.targetFunction();</span><br><span class="line">        System.out.println(str);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="cglib代理实现增强的基本实现"><a href="#cglib代理实现增强的基本实现" class="headerlink" title="cglib代理实现增强的基本实现"></a>cglib代理实现增强的基本实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProxyTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建真实对象（目标对象）</span></span><br><span class="line">        TargetObject object=<span class="keyword">new</span> TargetObject();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建增强对象（负责执行增强方法）</span></span><br><span class="line">        Advice advice=<span class="keyword">new</span> Advice();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//基于cglib生成动态代理增强对象</span></span><br><span class="line">        <span class="comment">//1. 创建增强器</span></span><br><span class="line">        Enhancer enhancer=<span class="keyword">new</span> Enhancer();</span><br><span class="line">        <span class="comment">//2. 设置父类（将目标对象设置为其父类，以实现相关方法）</span></span><br><span class="line">        enhancer.setSuperclass(TargetObject.class);</span><br><span class="line">        <span class="comment">//3. 设置回调函数</span></span><br><span class="line">        enhancer.setCallback(<span class="keyword">new</span> MethodInterceptor() &#123;</span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * intercept作用和invoke方法相同，都是负责核心业务逻辑的处理（进行增强）</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@param</span> o 目标对象</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@param</span> method 触发intercept执行的方法对象</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@param</span> objects 触发intercept执行的方法中所有真实参数</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@param</span> methodProxy 方法代理</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> Object <span class="title">intercept</span><span class="params">(Object o, Method method, Object[] objects, MethodProxy methodProxy)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">                <span class="comment">//执行前置方法</span></span><br><span class="line">                advice.preFunc();</span><br><span class="line">                <span class="comment">//执行目标方法</span></span><br><span class="line">                Object val=method.invoke(object,objects);</span><br><span class="line">                <span class="comment">//执行后置方法</span></span><br><span class="line">                advice.postFunc();</span><br><span class="line">                <span class="keyword">return</span> val;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建代理对象</span></span><br><span class="line">        TargetObject proxy_object= (TargetObject) enhancer.create();</span><br><span class="line">        <span class="comment">//利用代理对象执行方法</span></span><br><span class="line">        String val=proxy_object.targetFunction();</span><br><span class="line">        System.out.println(val);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="AOP中的基本概念"><a href="#AOP中的基本概念" class="headerlink" title="AOP中的基本概念"></a>AOP中的基本概念</h2><ul><li>Target（目标对象）：代理的目标对象</li><li>Proxy （代理）：一个类被 AOP 织入增强后，就产生一个结果代理类</li><li>Joinpoint（连接点）：所谓连接点是指那些被拦截到的点。在spring中,这些点指的是方法，因为spring只支持方法类型的连接点（可以简单理解为可以被增强的方法）</li><li>Pointcut（切入点）：所谓切入点是指我们要对哪些 Joinpoint 进行拦截的定义（可以简单理解为实际增强的方法）</li><li>Advice（通知/ 增强）：所谓通知是指拦截到 Joinpoint 之后所要做的事情就是通知（实现增强的方法）</li><li>Aspect（切面）：是切入点和通知（引介）的结合</li><li>Weaving（织入）：是指把增强应用到目标对象来创建新的代理对象的过程。spring采用动态代理织入，而AspectJ采用编译期织入和类装载期织入</li></ul><h2 id="AOP开发明确事项"><a href="#AOP开发明确事项" class="headerlink" title="AOP开发明确事项"></a>AOP开发明确事项</h2><h4 id="需要编写的内容"><a href="#需要编写的内容" class="headerlink" title="需要编写的内容"></a>需要编写的内容</h4><ul><li>核心业务代码（目标类与目标方法）</li><li>编写切面类，切面类中包含通知的实现（实现功能增强的方法）</li><li>在配置文件中，配置织入关系，即将哪些通知与哪些连接点相结合</li></ul><h4 id="Spring中AOP技术实现的内容"><a href="#Spring中AOP技术实现的内容" class="headerlink" title="Spring中AOP技术实现的内容"></a>Spring中AOP技术实现的内容</h4><p>Spring 框架监控切入点方法的执行。一旦监控到切入点方法被运行，使用代理机制，动态创建目标对象的代理对象，根据通知类别，在代理对象的对应位置，将通知对应的功能织入，完成完整的代码逻辑运行。</p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
          <category> 后端框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>4-注解开发与Junit集成</title>
      <link href="/2021/03/03/4-%E6%B3%A8%E8%A7%A3%E5%BC%80%E5%8F%91%E4%B8%8EJunit%E9%9B%86%E6%88%90/"/>
      <url>/2021/03/03/4-%E6%B3%A8%E8%A7%A3%E5%BC%80%E5%8F%91%E4%B8%8EJunit%E9%9B%86%E6%88%90/</url>
      
        <content type="html"><![CDATA[<h1 id="Spring注解开发"><a href="#Spring注解开发" class="headerlink" title="Spring注解开发"></a>Spring注解开发</h1><p>Spring是轻代码而重配置的框架，一般情况下，配置比较繁重，影响开发效率，所以注解开发是一种必然趋势，注解代替XML配置文件可以简化配置，提高开发效率</p><h2 id="Spring原始注解"><a href="#Spring原始注解" class="headerlink" title="Spring原始注解"></a>Spring原始注解</h2><p>Spring的原始注解主要用于代替XML配置中的<Bean>标签</p><table><thead><tr><th>注解</th><th>说明</th></tr></thead><tbody><tr><td>@Component</td><td>使用在类上用于实例化Bean</td></tr><tr><td>@Controller</td><td>使用在web层类上用于实例化Bean</td></tr><tr><td>@Service</td><td>使用在service层类上用于实例化Bean</td></tr><tr><td>@Repository</td><td>使用在dao层类上用于实例化Bean</td></tr><tr><td>@Autowired</td><td>使用在字段上用于根据类型进行依赖注入</td></tr><tr><td>@Qualifier</td><td>结合@Autowired一起使用用于根据名称进行依赖注入</td></tr><tr><td>@Resource</td><td>相当于@Autowired+@Qualifier，按照名称进行注入</td></tr><tr><td>@Value</td><td>注入普通属性</td></tr><tr><td>@Scope</td><td>标注Bean的作用范围</td></tr><tr><td>@PostConstruct</td><td>使用在方法上标注该方法是Bean的初始化方法</td></tr><tr><td>@PreDestory</td><td>使用在方法上标注该方法时Bean的销毁方法</td></tr></tbody></table><h4 id="未使用注解的情况下"><a href="#未使用注解的情况下" class="headerlink" title="未使用注解的情况下"></a>未使用注解的情况下</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;save runnning...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> UserDao dao;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDao</span><span class="params">(UserDao dao)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.dao = dao;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        dao.save();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;cn.ywrby.dao.impl.UserDaoImpl&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;cn.ywrby.service.impl.UserServiceImpl&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dao&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;userDao&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="使用注解简化后"><a href="#使用注解简化后" class="headerlink" title="使用注解简化后"></a>使用注解简化后</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//@Component作用是实例化Bean，作用和&lt;Bean&gt;标签相同，传入的参数就是当前对象的ID</span></span><br><span class="line"><span class="meta">@Component(&quot;userDao&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;save runnning...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//@Component作用是实例化Bean，作用和&lt;Bean&gt;标签相同，传入的参数就是当前对象的ID</span></span><br><span class="line"><span class="meta">@Component(&quot;userService&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//@Qualifier结合@Autowired一起使用用于根据名称进行依赖注入</span></span><br><span class="line">    <span class="comment">//@Qualifier后边传入的参数则是要注入的对象的ID</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="meta">@Qualifier(&quot;userDao&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> UserDao dao;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDao</span><span class="params">(UserDao dao)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.dao = dao;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        dao.save();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>利用注解后还需要在配置文件中利用context命名空间进行注解扫描，利用注解扫描，Spring才能识别对应文件夹下所有的注解</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="comment">&lt;!--引入context命名空间，用于读取properties配置文件--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">                           http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--配置注解扫描--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;cn.ywrby&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>上面的@Component注解方式可以完整代替之前完全通过XML配置的方式，但是所有的<Bean>标签配置都通过@Component注解容易造成混淆，导致我们并不清楚该对象属于哪一层，这时我们就可以用@Controller，@Service，@Repository这种注解替换原先的@Component注解，它们在作用上是完全一致的，但后三种明显更好区别</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//@Repository作用是实例化Bean，作用和&lt;Bean&gt;标签相同，传入的参数就是当前对象的ID</span></span><br><span class="line"><span class="meta">@Repository(&quot;userDao&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;save runnning...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//@Service作用是实例化Bean，作用和&lt;Bean&gt;标签相同，传入的参数就是当前对象的ID</span></span><br><span class="line"><span class="meta">@Service(&quot;userService&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//@Qualifier结合@Autowired一起使用用于根据名称进行依赖注入</span></span><br><span class="line">    <span class="comment">//@Qualifier后边传入的参数则是要注入的对象的ID</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="meta">@Qualifier(&quot;userDao&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> UserDao dao;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDao</span><span class="params">(UserDao dao)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.dao = dao;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        dao.save();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>另外在上面的UserServiceImpl类中，采用了注解注入的方式将Spring容器中的UserDao对象注入到类中，此时我们可以省略掉类中的set方法，不用像XML配置过程中必须有专门的setDao方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//@Service作用是实例化Bean，作用和&lt;Bean&gt;标签相同，传入的参数就是当前对象的ID</span></span><br><span class="line"><span class="meta">@Service(&quot;userService&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//@Qualifier结合@Autowired一起使用用于根据名称进行依赖注入</span></span><br><span class="line">    <span class="comment">//@Qualifier后边传入的参数则是要注入的对象的ID</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="meta">@Qualifier(&quot;userDao&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> UserDao dao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        dao.save();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>@Autowired注解是按照类型自动注入，例如上面代码中，如果省略@Qualifier，UserDao同样能成功注入，但如果容器中同时有多个UserDao对象则会出现错误。@Qulifier是按照ID注入，它不能单独使用，必须搭配@Autowired注解一起使用</p><p>@Resource注解可以简化以上两个标签，它的作用就相当于@Autowired和@Qulifier同时使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service(&quot;userService&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource(name=&quot;userDao&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> UserDao dao;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDao</span><span class="params">(UserDao dao)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.dao = dao;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        dao.save();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="其他普通注解的使用"><a href="#其他普通注解的使用" class="headerlink" title="其他普通注解的使用"></a>其他普通注解的使用</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//@Service作用是实例化Bean，作用和&lt;Bean&gt;标签相同，传入的参数就是当前对象的ID</span></span><br><span class="line"><span class="meta">@Service(&quot;userService&quot;)</span></span><br><span class="line"><span class="comment">//@Scope是用来标明单例或多例</span></span><br><span class="line"><span class="meta">@Scope(&quot;singleton&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource(name=&quot;userDao&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> UserDao dao;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//@Value用于进行普通值的注入</span></span><br><span class="line">    <span class="comment">//同时@Value也支持EL表达式，同样可以读取context命名空间中的值</span></span><br><span class="line">    <span class="meta">@Value(&quot;Leslie&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;driver&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String driver;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        dao.save();</span><br><span class="line">        System.out.println(name);</span><br><span class="line">        System.out.println(driver);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//@PostConstruct用来标记初始化方法</span></span><br><span class="line">    <span class="meta">@PostConstruct</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;init running...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">////@PreDestroy用来标记销毁方法</span></span><br><span class="line">    <span class="meta">@PreDestroy</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;destroy running...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Spring新注解"><a href="#Spring新注解" class="headerlink" title="Spring新注解"></a>Spring新注解</h2><p>使用Spring原始注解还不能代替XML配置中的全部内容，许多配置还不能被替代</p><ul><li>非自定义的Bean的配置<Bean></li><li>加载properties文件的配置<a href="context:property-placeholder">context:property-placeholder</a></li><li>组件扫描的配置<a href="context:component-scan">context:component-scan</a></li><li>引入其他文件<import></li></ul><h3 id="Spring中的新注解"><a href="#Spring中的新注解" class="headerlink" title="Spring中的新注解"></a>Spring中的新注解</h3><table><thead><tr><th>注解</th><th>说明</th></tr></thead><tbody><tr><td>@Configuration</td><td>用于指定当前类是一个Spring的配置类，当创建容器时会从该类上加载注解</td></tr><tr><td>@ComponentScan</td><td>用于指定Spring在初始化容器时要扫描的包，作用与XML配置文件中的&lt;context:component-scan base-package=”cn.ywrby”/&gt;一样</td></tr><tr><td>@Bean</td><td>使用在方法上，标注将该方法返回值存储到Spring容器中</td></tr><tr><td>@PropertySource</td><td>用于加载.properties文件中的配置</td></tr><tr><td>@Import</td><td>用于导入其他配置类</td></tr></tbody></table><h3 id="使用新注解替代XML配置中的全部内容"><a href="#使用新注解替代XML配置中的全部内容" class="headerlink" title="使用新注解替代XML配置中的全部内容"></a>使用新注解替代XML配置中的全部内容</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//@Configuration注解表示该类是Spring的核心配置类</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="comment">//配置注解扫描</span></span><br><span class="line"><span class="comment">//&lt;context:component-scan base-package=&quot;cn.ywrby&quot;/&gt;</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;cn.ywrby&quot;)</span></span><br><span class="line"><span class="comment">//加载properties配置文件(classpath表示的就是资源目录resources下)</span></span><br><span class="line"><span class="comment">//&lt;context:property-placeholder location=&quot;classpath:jdbc.properties&quot;/&gt;</span></span><br><span class="line"><span class="meta">@PropertySource(&quot;classpath:jdbc.properties&quot;)</span></span><br><span class="line"><span class="comment">//引入其他配置类</span></span><br><span class="line"><span class="meta">@Import(SpringConfiguration_data.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//&lt;!--配置文件已经成功加载，可以利用配置文件注入--&gt;</span></span><br><span class="line">    <span class="comment">//    &lt;bean id=&quot;dataSource&quot; class=&quot;com.mchange.v2.c3p0.ComboPooledDataSource&quot;&gt;</span></span><br><span class="line">    <span class="comment">//        &lt;property name=&quot;driverClass&quot; value=&quot;$&#123;driver&#125;&quot;&gt;&lt;/property&gt;</span></span><br><span class="line">    <span class="comment">//        &lt;property name=&quot;jdbcUrl&quot; value=&quot;$&#123;url&#125;&quot;&gt;&lt;/property&gt;</span></span><br><span class="line">    <span class="comment">//        &lt;property name=&quot;user&quot; value=&quot;$&#123;user&#125;&quot;&gt;&lt;/property&gt;</span></span><br><span class="line">    <span class="comment">//        &lt;property name=&quot;password&quot; value=&quot;$&#123;password&#125;&quot;&gt;&lt;/property&gt;</span></span><br><span class="line">    <span class="comment">//    &lt;/bean&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//首先利用普通值注入获得数据源所需的参数</span></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;driver&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String driver;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;url&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String url;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;user&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String user;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;password&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="comment">//将通过注入获得的值传入数据源中并返回，@Bean注解可以将返回值加入到Spring容器中</span></span><br><span class="line">    <span class="comment">//这样就解决了非自定义的Bean的配置</span></span><br><span class="line">    <span class="meta">@Bean(&quot;dataSource&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataSource <span class="title">getDataSource</span><span class="params">()</span> <span class="keyword">throws</span> PropertyVetoException </span>&#123;</span><br><span class="line">        ComboPooledDataSource dataSource=<span class="keyword">new</span> ComboPooledDataSource();</span><br><span class="line">        dataSource.setDriverClass(driver);</span><br><span class="line">        dataSource.setJdbcUrl(url);</span><br><span class="line">        dataSource.setUser(user);</span><br><span class="line">        dataSource.setPassword(password);</span><br><span class="line">        <span class="keyword">return</span> dataSource;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="测试用例"><a href="#测试用例" class="headerlink" title="测试用例"></a>测试用例</h4><p>注意这里在创建Spring容器时需要用AnnotationConfigApplicationContext方法读取配置类，与以前读取配置文件时不同</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 利用Spring创建C3P0数据源（配置类）</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">c3p0SpringTest2</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">    <span class="comment">//创建Spring容器(这里需要使用专门读取配置类的方法AnnotationConfigApplicationContext)</span></span><br><span class="line">    ApplicationContext context=<span class="keyword">new</span> AnnotationConfigApplicationContext(SpringConfiguration.class);</span><br><span class="line">    <span class="comment">//利用Spring容器获取数据源</span></span><br><span class="line">    ComboPooledDataSource dataSource= (ComboPooledDataSource) context.getBean(<span class="string">&quot;dataSource&quot;</span>);</span><br><span class="line">    <span class="comment">//从数据源获取连接资源</span></span><br><span class="line">    Connection connection=dataSource.getConnection();</span><br><span class="line">    System.out.println(connection);</span><br><span class="line">    <span class="comment">//释放连接资源</span></span><br><span class="line">    connection.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Spring整合Junit"><a href="#Spring整合Junit" class="headerlink" title="Spring整合Junit"></a>Spring整合Junit</h1><h3 id="原始Junit测试Spring时的问题"><a href="#原始Junit测试Spring时的问题" class="headerlink" title="原始Junit测试Spring时的问题"></a>原始Junit测试Spring时的问题</h3><p>在测试Spring过程中Spring容器的创建和Bean的获取每次都需要写，重复性极高</p><h3 id="解决思路"><a href="#解决思路" class="headerlink" title="解决思路"></a>解决思路</h3><ul><li>让SpringJunit负责创建容器，每次只需要传入配置文件即可</li><li>将需要测试的Bean直接在测试类中注入</li></ul><h2 id="Spring集成Junit步骤"><a href="#Spring集成Junit步骤" class="headerlink" title="Spring集成Junit步骤"></a>Spring集成Junit步骤</h2><ol><li>导入Spring集成Junit的坐标和Junit坐标</li><li>使用@Runwith替换原来的运行期</li><li>使用@ContextConfiguration指定配置文件或配置类</li><li>使用@Autowired注入需要测试的对象</li><li>创建测试方法进行测试</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith(SpringJUnit4ClassRunner.class)</span></span><br><span class="line"><span class="meta">@ContextConfiguration(&quot;classpath:applicationContext.xml&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringJunitTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource(name = &quot;userService&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line">    <span class="meta">@Resource(name = &quot;userDao&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">userServiceTest</span><span class="params">()</span></span>&#123;</span><br><span class="line">        userService.save();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">userDaoTest</span><span class="params">()</span></span>&#123;</span><br><span class="line">        userDao.save();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
          <category> 后端框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>3-相应API与配置数据源</title>
      <link href="/2021/03/03/3-%E7%9B%B8%E5%BA%94API%E4%B8%8E%E9%85%8D%E7%BD%AE%E6%95%B0%E6%8D%AE%E6%BA%90/"/>
      <url>/2021/03/03/3-%E7%9B%B8%E5%BA%94API%E4%B8%8E%E9%85%8D%E7%BD%AE%E6%95%B0%E6%8D%AE%E6%BA%90/</url>
      
        <content type="html"><![CDATA[<h1 id="Spring相应API"><a href="#Spring相应API" class="headerlink" title="Spring相应API"></a>Spring相应API</h1><h3 id="ApplicationContext的实现类"><a href="#ApplicationContext的实现类" class="headerlink" title="ApplicationContext的实现类"></a>ApplicationContext的实现类</h3><ul><li>ClassPathXmlApplicationContext:从类的根路径下加载配置文件（即resources文件夹中）一般情况下都使用这种</li><li>FileSystemXmlApplicationContext:从磁盘路径下加载配置文件，配置文件可以在磁盘任意位置</li><li>AnnotationConfigApplicationContext:当使用注解来配置容器对象时，需要使用这种方式来创建Spring容器，它用来读取注解</li></ul><h3 id="getBean-方法"><a href="#getBean-方法" class="headerlink" title="getBean()方法"></a>getBean()方法</h3><p>getBean方法可以接收两种参数，可以分别传入容器中的ID，或者是对象的类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">context.getBean(<span class="string">&quot;userService&quot;</span>);</span><br><span class="line">context.getBean(UserService.class);</span><br></pre></td></tr></table></figure><p>第一种方式的好处在于指向性更强，因为ID只允许出现一次，所以可以通过定义不同的ID指向相同的类，从而创建多个相同的类对象。但第二种方式如果Spring容器中有相同类对象就不能够正常识别要创建哪个对象</p><h1 id="Spring配置数据源"><a href="#Spring配置数据源" class="headerlink" title="Spring配置数据源"></a>Spring配置数据源</h1><h3 id="数据源（连接池）的作用"><a href="#数据源（连接池）的作用" class="headerlink" title="数据源（连接池）的作用"></a>数据源（连接池）的作用</h3><ul><li>数据源（连接池）是为提高程序性能而出现的</li><li>事先实例化数据源，初始化部分连接资源</li><li>使用连接资源时从数据源中获取</li><li>使用后将连接资源归还数据源</li></ul><p>常见数据源（连接池）：DBCP,C3P0,BoneCP,Druid等等</p><h4 id="在没有利用Spring时正常流程获取数据源"><a href="#在没有利用Spring时正常流程获取数据源" class="headerlink" title="在没有利用Spring时正常流程获取数据源"></a>在没有利用Spring时正常流程获取数据源</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DataSourceTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试手动创建C3P0数据源</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">c3p0Test</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        ComboPooledDataSource dataSource=<span class="keyword">new</span> ComboPooledDataSource();</span><br><span class="line">        <span class="comment">//dataSource.setDriverClass(&quot;com.mysql.jdbc.driver&quot;);</span></span><br><span class="line">        dataSource.setJdbcUrl(<span class="string">&quot;jdbc:mysql://cdb-cd3ybvc6.cd.tencentcdb.com:78/LereBookMarket&quot;</span>);</span><br><span class="line">        dataSource.setUser(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">        dataSource.setPassword(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">        Connection connection=dataSource.getConnection();</span><br><span class="line">        System.out.println(connection);</span><br><span class="line">        connection.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试手动创建Druid数据源</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">druidTest</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        DruidDataSource dataSource=<span class="keyword">new</span> DruidDataSource();</span><br><span class="line">        <span class="comment">//dataSource.setDriverClassName(&quot;com.mysql.jdbc.driver&quot;);</span></span><br><span class="line">        dataSource.setUrl(<span class="string">&quot;jdbc:mysql://cdb-cd3ybvc6.cd.tencentcdb.com:78/LereBookMarket&quot;</span>);</span><br><span class="line">        dataSource.setUsername(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">        dataSource.setPassword(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">        DruidPooledConnection connection=dataSource.getConnection();</span><br><span class="line">        System.out.println(connection);</span><br><span class="line">        connection.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试手动创建C3P0数据源(加载配置文件)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">c3p0Test2</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//加载配置文件(这里getBundle方法会从资源目录resources下搜索所有properties文件</span></span><br><span class="line">        <span class="comment">// 所以只需要输入基类名称，例如abc.properties只需要输入abc)</span></span><br><span class="line">        ResourceBundle rb=ResourceBundle.getBundle(<span class="string">&quot;jdbc&quot;</span>);</span><br><span class="line">        <span class="comment">//获取数据源</span></span><br><span class="line">        ComboPooledDataSource dataSource=<span class="keyword">new</span> ComboPooledDataSource();</span><br><span class="line">        <span class="comment">//加载数据</span></span><br><span class="line">        dataSource.setDriverClass(rb.getString(<span class="string">&quot;driver&quot;</span>));</span><br><span class="line">        dataSource.setJdbcUrl(rb.getString(<span class="string">&quot;url&quot;</span>));</span><br><span class="line">        dataSource.setUser(rb.getString(<span class="string">&quot;user&quot;</span>));</span><br><span class="line">        dataSource.setPassword(rb.getString(<span class="string">&quot;password&quot;</span>));</span><br><span class="line">        <span class="comment">//获取连接资源</span></span><br><span class="line">        Connection connection=dataSource.getConnection();</span><br><span class="line">        System.out.println(connection);</span><br><span class="line">        <span class="comment">//关闭连接资源</span></span><br><span class="line">        connection.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="利用Spring配置数据源"><a href="#利用Spring配置数据源" class="headerlink" title="利用Spring配置数据源"></a>利用Spring配置数据源</h2><p>利用Spring配置数据源主要有如下几步</p><ul><li>在Spring核心配置文件中引入context命名空间：context命名空间的作用是为了读取properties类型的配置文件，jdbc.properties内存放了创建数据源所需要的参数，利用配置文件来读取参数的主要目的还是保证代码的可读性，各部分功能明确</li><li>加载properties配置文件</li><li>利用Spring向数据源注入参数</li><li>创建数据源对象（此时创建的数据源对象就不需要额外传入参数，参数在创建时就通过Spring注入了）</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--引入context命名空间，用于读取properties配置文件--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">                           http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--加载properties配置文件(classpath表示的就是资源目录resources下)--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;classpath:jdbc.properties&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--配置文件已经成功加载，可以利用配置文件注入--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.mchange.v2.c3p0.ComboPooledDataSource&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClass&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;driver&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;jdbcUrl&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;url&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;user&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;user&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;password&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="用于存放配置参数的jdbc-properties配置文件"><a href="#用于存放配置参数的jdbc-properties配置文件" class="headerlink" title="用于存放配置参数的jdbc.properties配置文件"></a>用于存放配置参数的jdbc.properties配置文件</h4><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">url</span>=<span class="string">jdbc:mysql://cdb-cd3ybvc6.cd.tencentcdb.com:78/LereBookMarket</span></span><br><span class="line"><span class="attr">user</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">password</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">driver</span>=<span class="string">com.mysql.cj.jdbc.Driver</span></span><br></pre></td></tr></table></figure><h4 id="测试用例"><a href="#测试用例" class="headerlink" title="测试用例"></a>测试用例</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 利用Spring创建C3P0数据源</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">c3p0SpringTest</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">    <span class="comment">//创建Spring容器</span></span><br><span class="line">    ApplicationContext context=<span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line">    <span class="comment">//利用Spring容器获取数据源</span></span><br><span class="line">    ComboPooledDataSource dataSource= (ComboPooledDataSource) context.getBean(<span class="string">&quot;dataSource&quot;</span>);</span><br><span class="line">    <span class="comment">//从数据源获取连接资源</span></span><br><span class="line">    Connection connection=dataSource.getConnection();</span><br><span class="line">    System.out.println(connection);</span><br><span class="line">    <span class="comment">//释放连接资源</span></span><br><span class="line">    connection.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
          <category> 后端框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2-Spring配置文件与依赖注入</title>
      <link href="/2021/03/03/2-Spring%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E4%B8%8E%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5/"/>
      <url>/2021/03/03/2-Spring%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E4%B8%8E%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5/</url>
      
        <content type="html"><![CDATA[<h1 id="Spring配置文件"><a href="#Spring配置文件" class="headerlink" title="Spring配置文件"></a>Spring配置文件</h1><h2 id="Bean标签基本配置"><a href="#Bean标签基本配置" class="headerlink" title="Bean标签基本配置"></a>Bean标签基本配置</h2><p>用于配置对象交由Spring来创建，默认情况下调用的是类中的无参构造函数，没有无参构造的情况下不能创建成功</p><h4 id="基本属性"><a href="#基本属性" class="headerlink" title="基本属性"></a>基本属性</h4><ul><li>id：Bean实例在Spring中的唯一标识</li><li>class：Bean的全限定名称</li></ul><h3 id="Bean标签范围配置"><a href="#Bean标签范围配置" class="headerlink" title="Bean标签范围配置"></a>Bean标签范围配置</h3><h4 id="scope属性"><a href="#scope属性" class="headerlink" title="scope属性"></a>scope属性</h4><table><thead><tr><th>取值范围</th><th>说明</th></tr></thead><tbody><tr><td>singleton</td><td>默认值，单例的</td></tr><tr><td>prototype</td><td>多例的</td></tr><tr><td>request</td><td>web项目中，Spring创建一个对象并将对象存入request域内</td></tr><tr><td>session</td><td>web项目中，Spring创建一个对象并将对象存入session域内</td></tr><tr><td>global session</td><td>web项目中，应用在Portlet环境，如果没有Portlet环境，global session相当于session</td></tr></tbody></table><p>这里单例是指每次创建出的Bean对象都是同一个对象，而多例则表示每次创建的都是全新的不同的Bean对象</p><p><strong>示例</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--单例的--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;cn.ywrby.dao.impl.UserDaoImpl&quot;</span> <span class="attr">scope</span>=<span class="string">&quot;singleton&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--多例的--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;cn.ywrby.dao.impl.UserDaoImpl&quot;</span> <span class="attr">scope</span>=<span class="string">&quot;prototype&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>测试</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 测试scope属性</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">userDaoTest</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//指定配置文件</span></span><br><span class="line">    ApplicationContext context=<span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line">    <span class="comment">//通关配置文件与ID获取实例</span></span><br><span class="line">    UserDao dao1= (UserDao) context.getBean(<span class="string">&quot;userDao&quot;</span>);</span><br><span class="line">    UserDao dao2= (UserDao) context.getBean(<span class="string">&quot;userDao&quot;</span>);</span><br><span class="line">    <span class="comment">//输出两个对象的地址即可判断是否两次创建为同一对象</span></span><br><span class="line">    System.out.println(dao1);</span><br><span class="line">    System.out.println(dao2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="singleton与prototype的区别"><a href="#singleton与prototype的区别" class="headerlink" title="singleton与prototype的区别"></a>singleton与prototype的区别</h4><p>当scope取值为singleton时，Bean实例化的个数始终是一个，并且实例化的时机是在<strong>Spring核心文件（配置文件）被加载时</strong></p><p>当scope取值为prototype时，Bean实例化的个数是多个，此时实例化的时机不是核心文件加载，而是在<strong>每次调用getBean方法时创建</strong></p><h3 id="Bean声明周期的配置"><a href="#Bean声明周期的配置" class="headerlink" title="Bean声明周期的配置"></a>Bean声明周期的配置</h3><ul><li>init-method:指定初始化方法，在对象创建时被调用</li><li>destroy-method:指定销毁方法，在对象被销毁时调用</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;cn.ywrby.dao.impl.UserDaoImpl&quot;</span> <span class="attr">init-method</span>=<span class="string">&quot;init&quot;</span> <span class="attr">destroy-method</span>=<span class="string">&quot;destroy&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;执行初始化...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;执行销毁...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Save Running...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Spring依赖注入"><a href="#Spring依赖注入" class="headerlink" title="Spring依赖注入"></a>Spring依赖注入</h1><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>依赖注入（Dependency Injection）是Spring框架核心IOC的具体实现</p><h3 id="Bean对象的注入（引用数据类型的注入）"><a href="#Bean对象的注入（引用数据类型的注入）" class="headerlink" title="Bean对象的注入（引用数据类型的注入）"></a>Bean对象的注入（引用数据类型的注入）</h3><p>依赖注入的主要目的还是解耦，主要利用的原理就是控制反转，即将构造对象这个【控制】交给了第三方Spring来进行操作</p><p>我们在实际的项目开发中，必然涉及到对多个对象的构造与控制，而我们许多的对象已经预定义在Spring容器中（那些已经在配置文件中定义的对象）。</p><p>此时假如我们需要在某个Spring容器中已有的对象A内调用另一个同样已经在Spring容器中定义的对象B，一般情况我们会直接在对象A中加载配置文件，利用Spring获取对象B，然后再操作获取到的对象</p><p>这种情况下假如我们需要修改代码，就需要到所有操作配置文件获取对象B的方法内进行修改，直接导致了代码耦合度变高</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//UserService与UserDao都是定义在Spring容器中的对象</span></span><br><span class="line">        <span class="comment">//这里在UserService的save方法中利用配置文件获取了UserDao对象</span></span><br><span class="line">        <span class="comment">//这也就导致了代码耦合度很高，不便于复用和修改</span></span><br><span class="line">        ApplicationContext context=<span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line">        UserDao dao= (UserDao) context.getBean(<span class="string">&quot;userDao&quot;</span>);</span><br><span class="line">        dao.save();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>要解决这种问题就可以利用依赖注入,第一种方式是set方法注入，第二种是构造函数注入</p><h4 id="set方法注入"><a href="#set方法注入" class="headerlink" title="set方法注入"></a>set方法注入</h4><p>即通过在配置文件中提前配置，使得在创建对象A时调用指定的set方法将对象B直接传入对象A内部，这样的注入方式保证了对象B没有在对象A的方法中进行实例化，而是作为参数直接传入A内部，需要使用对象B时直接使用传入的对象即可。需要修改代码时只需要对配置文件进行修改即可</p><p>首先在被传入的Bean中定义传入参数的set方法，并且定义成员变量用于接收传入的参数，修改调用对象B的函数，直接利用成员变量进行操作即可</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> UserDao dao;  <span class="comment">//定义成员变量</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义set方法，用于其他对象的传入</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDao</span><span class="params">(UserDao dao)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.dao = dao;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//修改成员方法，可以直接利用成员变量进行操作</span></span><br><span class="line">        <span class="comment">//省去了对配置文件的使用，降低了代码耦合度</span></span><br><span class="line">        dao.save();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后修改配置文件，指定在创建UserService时调用指定的set方法注入相关参数(利用property标签进行指定 其中name是set方法后面的后缀并首字母小写，例如setDao方法，这里就传入dao，setUserService方法就传入userService ，ref是要传入的Spring容器中对象的ID)</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;cn.ywrby.dao.impl.UserDaoImpl&quot;</span> &gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;cn.ywrby.service.impl.UserServiceImpl&quot;</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dao&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;userDao&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>测试用例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 测试依赖注入</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">userServiceTest</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//指定配置文件</span></span><br><span class="line">    ClassPathXmlApplicationContext context=<span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line">    <span class="comment">//通关配置文件与ID获取实例</span></span><br><span class="line">    UserService service= (UserService) context.getBean(<span class="string">&quot;userService&quot;</span>);</span><br><span class="line">    <span class="comment">//执行方法</span></span><br><span class="line">    service.save();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>P命名空间注入</strong></p><p>这种注入方式本质还是set方法注入，只是通过利用P命名空间，简化了配置方法</p><p>在配置时首先需要定义P命名空间(第三行即定义P命名空间)</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:p</span>=<span class="string">&quot;http://www.springframework.org/schema/p&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>利用P命名空间的属性直接定义注入方法</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;cn.ywrby.service.impl.UserServiceImpl&quot;</span> <span class="attr">p:dao-ref</span>=<span class="string">&quot;userDao&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="构造函数注入"><a href="#构造函数注入" class="headerlink" title="构造函数注入"></a>构造函数注入</h4><p>构造函数注入就是在创建对象A时调用对象A的有参构造函数，将指定的对象B作为参数注入对象A中</p><p>首先需要在被注入的对象中创建有参构造</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> UserDao dao;  <span class="comment">//定义成员变量</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义有参构造</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UserServiceImpl</span><span class="params">(UserDao dao)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.dao = dao;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UserServiceImpl</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//修改成员方法，可以直接利用成员变量进行操作</span></span><br><span class="line">        <span class="comment">//省去了对配置文件的使用，降低了代码耦合度</span></span><br><span class="line">        dao.save();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后在配置文件中声明要调用有参构造，并指定传入的对象在Spring容器中的ID(利用constructor-arg标签指定要传入的参数，name属性表示的是传入的对象命名，ref属性是传入参数在Spring容器中的ID)</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;cn.ywrby.dao.impl.UserDaoImpl&quot;</span> &gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;cn.ywrby.service.impl.UserServiceImpl&quot;</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;dao&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;userDao&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="普通数据类型的注入"><a href="#普通数据类型的注入" class="headerlink" title="普通数据类型的注入"></a>普通数据类型的注入</h3><p>在使用中，我们除了可能注入Spring中已经定义的引用数据类型，也有可能需要注入普通类型数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义普通数据类型的成员变量</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> num;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义set方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setNum</span><span class="params">(<span class="keyword">int</span> num)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.num = num;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(name+<span class="string">&quot; : &quot;</span>+num);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改配置文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;cn.ywrby.dao.impl.UserDaoImpl&quot;</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Leslie&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;num&quot;</span> <span class="attr">value</span>=<span class="string">&quot;18&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>因为此时注入的是普通数据类型，所以不需要通过ref属性指定ID，此时直接通过value属性将要注入的值传入</p><h3 id="集合数据类型的注入"><a href="#集合数据类型的注入" class="headerlink" title="集合数据类型的注入"></a>集合数据类型的注入</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义集合数据类型</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; nameList;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, User&gt; userMap;</span><br><span class="line">    <span class="keyword">private</span> Properties properties;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义set方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setNameList</span><span class="params">(List&lt;String&gt; nameList)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.nameList = nameList;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUserMap</span><span class="params">(Map&lt;String, User&gt; userMap)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.userMap = userMap;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setProperties</span><span class="params">(Properties properties)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.properties = properties;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(nameList);</span><br><span class="line">        System.out.println(userMap);</span><br><span class="line">        System.out.println(properties);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以下是集合数据类型注入时配置文件的配置方式</p><p>可以看到List类型注入时只需要定义value标签即可，标签体内传注入的值</p><p>Map类型在注入时需要利用entry标签传入键和值，键和值都可以使用引用类型或普通类型，引用类型只需要在后面加“-ref”即可</p><p>properties类型注入时和Map类似，也需要传入键和值，但是键是通过key属性传入的，值是直接写在标签体中的</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;cn.ywrby.dao.impl.UserDaoImpl&quot;</span> &gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;nameList&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>Leslie<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>Ywrby<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;userMap&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">map</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;1&quot;</span> <span class="attr">value-ref</span>=<span class="string">&quot;user1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;2&quot;</span> <span class="attr">value-ref</span>=<span class="string">&quot;user2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;properties&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">props</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;p1&quot;</span>&gt;</span>value1<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;p2&quot;</span>&gt;</span>value2<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">props</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user1&quot;</span> <span class="attr">class</span>=<span class="string">&quot;cn.ywrby.domain.User&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Jessica&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;addr&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Peking&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user2&quot;</span> <span class="attr">class</span>=<span class="string">&quot;cn.ywrby.domain.User&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Lere&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;addr&quot;</span> <span class="attr">value</span>=<span class="string">&quot;SJZ&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;cn.ywrby.service.impl.UserServiceImpl&quot;</span> &gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;dao&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;userDao&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>测试用例：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">userDaoTest3</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//指定配置文件</span></span><br><span class="line">    ApplicationContext context=<span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line">    <span class="comment">//通关配置文件与ID获取实例</span></span><br><span class="line">    UserDao dao= (UserDao) context.getBean(<span class="string">&quot;userDao&quot;</span>);</span><br><span class="line">    <span class="comment">//执行方法</span></span><br><span class="line">    dao.save();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">运行结果：</span></span><br><span class="line"><span class="comment">[Leslie, Ywrby]</span></span><br><span class="line"><span class="comment">&#123;1=User&#123;name=&#x27;Jessica&#x27;, addr=&#x27;Peking&#x27;&#125;, 2=User&#123;name=&#x27;Lere&#x27;, addr=&#x27;SJZ&#x27;&#125;&#125;</span></span><br><span class="line"><span class="comment">&#123;p1=value1, p2=value2&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><h1 id="其他配置文件的引入"><a href="#其他配置文件的引入" class="headerlink" title="其他配置文件的引入"></a>其他配置文件的引入</h1><p>实际开发过程中我们所需要的配置文件可能是十分巨大的，内容十分杂乱，如果都定义在一个配置文件中，可读性和复写性都大打折扣</p><p>这种情况下我们可以将配置文件进行按模块拆分，或其他方式进行拆分，只需要最后在主配置文件中利用import标签进行引入即可</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">&quot;applicationContext-user.xml&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">&quot;applicationContext-userDao.xml&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">&quot;applicationContext-userService.xml&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
          <category> 后端框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1-Spring基础</title>
      <link href="/2021/03/02/1-Spring%E5%9F%BA%E7%A1%80/"/>
      <url>/2021/03/02/1-Spring%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><p>Spring是分层的Java SE/EE应用全栈(full-stack)轻量级开发框架，以IoC(Inverse of Control:反转控制)和AOP(Aspect Oriented Programing:面向切面编程)为内核</p><p>提供了展现层（Spring MVC）和持久层Spring JDBCTemplate以及业务层事务管理等众多企业级应用技术，还能整合开源世界众多著名的第三方框架和类库，逐渐成为使用最多的Java EE企业应用开发框架</p><h3 id="Spring优势"><a href="#Spring优势" class="headerlink" title="Spring优势"></a>Spring优势</h3><ol><li>方便解耦，简化开发：通过Spring提供的IoC容器，可以将对象间的依赖关系交由Spring进行控制，避免硬编码所造成的过度耦合。用户也不必再为单例模式类、属性文件解析等这些很底层的需求编写代码，可以更专注于上层的应用。</li><li>支持AOP编程：通过Spring的AOP功能，方便进行面向切面编程，许多不容易用传统OOP实现的功能可以通过AOP轻松实现。</li><li>声明式事务的支持：可以将我们从单调烦闷的事务管理代码中解脱出来，通过声明式方式灵活的进行事务管理，提高开发效率和质量。</li><li>方便程序测试</li><li>方便集成各种优秀框架</li><li>降低了Java EE API的使用难度</li><li>是Java源码的学习典范</li></ol><h3 id="Spring体系结构"><a href="#Spring体系结构" class="headerlink" title="Spring体系结构"></a>Spring体系结构</h3><p><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/spring%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84.jpg"></p><h3 id="Spring程序开发步骤"><a href="#Spring程序开发步骤" class="headerlink" title="Spring程序开发步骤"></a>Spring程序开发步骤</h3><p><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/Spring%E5%BC%80%E5%8F%91%E6%AD%A5%E9%AA%A4.jpg"></p><p>在我们之前的开发步骤中，Dao层的对象需要我们自行创建，这就导致程序耦合较高，通关Spring我们可以将Dao层路径定义在XML配置文件中，再利用Spring通关反射创建该对象，以实现程序的解耦</p><ol><li>导入Spring开发的基本包坐标</li><li>编写Dao接口和实现类</li><li>创建Spring核心配置文件</li><li>在Spring配置文件中配置Dao层的路径</li><li>使用Spring的API获取Bean实例</li></ol><h4 id="1-利用Maven导入Spring开发的基本包坐标"><a href="#1-利用Maven导入Spring开发的基本包坐标" class="headerlink" title="1. 利用Maven导入Spring开发的基本包坐标"></a>1. 利用Maven导入Spring开发的基本包坐标</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2-编写Dao接口和实现类"><a href="#2-编写Dao接口和实现类" class="headerlink" title="2. 编写Dao接口和实现类"></a>2. 编写Dao接口和实现类</h4><p>Dao接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.ywrby.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实现类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.ywrby.dao.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.ywrby.dao.UserDao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Save Running...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-创建Spring核心配置文件"><a href="#3-创建Spring核心配置文件" class="headerlink" title="3. 创建Spring核心配置文件"></a>3. 创建Spring核心配置文件</h4><p>一般命名为applicationContext.xml，保存在resources文件夹内（创建时直接利用Spring Config模板创建即可）</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="4-在Spring配置文件中配置Dao层的路径"><a href="#4-在Spring配置文件中配置Dao层的路径" class="headerlink" title="4. 在Spring配置文件中配置Dao层的路径"></a>4. 在Spring配置文件中配置Dao层的路径</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;cn.ywrby.dao.impl.UserDaoImpl&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="5-使用Spring的API获取Bean实例"><a href="#5-使用Spring的API获取Bean实例" class="headerlink" title="5. 使用Spring的API获取Bean实例"></a>5. 使用Spring的API获取Bean实例</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDaoDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ApplicationContext context=<span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line">        UserDao dao= (UserDao) context.getBean(<span class="string">&quot;userDao&quot;</span>);</span><br><span class="line">        dao.save();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
          <category> 后端框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
